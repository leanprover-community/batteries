{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.bitvec_to_nat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bitvec_to_nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.bitvec_to_nat","kind":"opaque","line":708,"name":"Lean.Elab.Tactic.Omega.bitvec_to_nat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L708-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.evalOmega\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">evalOmega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.evalOmega","kind":"def","line":699,"name":"Lean.Elab.Tactic.Omega.evalOmega","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L699-L706"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaDefault</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"The `omega` tactic, for resolving integer and natural linear arithmetic problems. This\n`TacticM Unit` frontend with default configuration can be used as an Aesop rule, for example via\nthe tactic call `aesop (add 50% tactic Lean.Elab.Tactic.Omega.omegaDefault)`. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaDefault","kind":"def","line":694,"name":"Lean.Elab.Tactic.Omega.omegaDefault","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L694-L697"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"The `omega` tactic, for resolving integer and natural linear arithmetic problems. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaTactic","kind":"def","line":675,"name":"Lean.Elab.Tactic.Omega.omegaTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L675-L692"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omega\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omega</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a> := <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.mk\">{</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given a collection of facts, try prove `False` using the omega algorithm,\nand close the goal using that.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omega","kind":"def","line":664,"name":"Lean.Elab.Tactic.Omega.omega","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L664-L671"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">omegaImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Implementation of the `omega` algorithm, and handling disjunctions. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.omegaImpl","kind":"opaque","line":645,"name":"Lean.Elab.Tactic.Omega.omegaImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L645-L660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.splitDisjunction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">splitDisjunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Split a disjunction in a `MetaProblem`, and if we find a new usable fact\ncall `omegaImpl` in both branches.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.splitDisjunction","kind":"opaque","line":613,"name":"Lean.Elab.Tactic.Omega.splitDisjunction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L613-L643"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">formatErrorMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Helpful error message when omega cannot find a solution\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.formatErrorMessage","kind":"def","line":527,"name":"Lean.Elab.Tactic.Omega.formatErrorMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L527-L609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">processFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"Process all the facts in a `MetaProblem`, returning the new problem, and the number of new facts.\n\nThis is partial because new facts may be generated along the way.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processFacts","kind":"opaque","line":507,"name":"Lean.Elab.Tactic.Omega.MetaProblem.processFacts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L507-L523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addFact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"Parse an `Expr` and extract facts, also returning the number of new facts found.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addFact","kind":"opaque","line":419,"name":"Lean.Elab.Tactic.Omega.MetaProblem.addFact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L419-L505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.pushNot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">pushNot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h </span><span class=\"fn\">P</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Given a fact `h` with type `¬ P`, return a more useful fact obtained by pushing the negation. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.pushNot","kind":"def","line":368,"name":"Lean.Elab.Tactic.Omega.MetaProblem.pushNot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L368-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addIntInequality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h </span><span class=\"fn\">y</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></span></div></div>","info":{"doc":"Add an integer inequality to the `Problem`.\n\nWe solve equalities as they are discovered, as this often results in an earlier contradiction.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality","kind":"def","line":353,"name":"Lean.Elab.Tactic.Omega.MetaProblem.addIntInequality","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L353-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">addIntEquality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h </span><span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></span></div></div>","info":{"doc":"Add an integer equality to the `Problem`.\n\nWe solve equalities as they are discovered, as this often results in an earlier contradiction.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality","kind":"def","line":338,"name":"Lean.Elab.Tactic.Omega.MetaProblem.addIntEquality","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L338-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.instInhabited","kind":"instance","line":336,"name":"Lean.Elab.Tactic.Omega.MetaProblem.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L336-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.trivial\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">trivial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></div></div>","info":{"doc":"The trivial `MetaProblem`, with no facts to process and a trivial `Problem`. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.trivial","kind":"def","line":332,"name":"Lean.Elab.Tactic.Omega.MetaProblem.trivial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L332-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearComboImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"Translates an expression into a `LinearCombo`.\nAlso returns:\n* a proof that this linear combo evaluated at the atoms is equal to the original expression\n* a list of new facts which should be recorded:\n  * for each new atom `a` of the form `((x : Nat) : Int)`, the fact that `0 ≤ a`\n  * for each new atom `a` of the form `x / k`, for `k` a positive numeral, the facts that\n    `k * a ≤ x < (k + 1) * a`\n  * for each new atom of the form `((a - b : Nat) : Int)`, the fact:\n    `b ≤ a ∧ ((a - b : Nat) : Int) = a - b ∨ a < b ∧ ((a - b : Nat) : Int) = 0`\n\nWe also transform the expression as we descend into it:\n* pushing coercions: `↑(x + y)`, `↑(x * y)`, `↑(x / k)`, `↑(x % k)`, `↑k`\n* unfolding `emod`: `x % k` → `x - x / k`\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearComboImpl","kind":"opaque","line":113,"name":"Lean.Elab.Tactic.Omega.asLinearComboImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L113-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">asLinearCombo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"Wrapper for `asLinearComboImpl`,\nusing a cache for previously visited expressions.\n\nGives a small (10%) speedup in testing.\nI tried using a pointer based cache,\nbut there was never enough subexpression sharing to make it effective.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.asLinearCombo","kind":"opaque","line":94,"name":"Lean.Elab.Tactic.Omega.asLinearCombo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L94-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkAtomLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkAtomLinearCombo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> (<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"Construct the linear combination (and its associated proof and new facts) for an atom. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkAtomLinearCombo","kind":"def","line":87,"name":"Lean.Elab.Tactic.Omega.mkAtomLinearCombo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L87-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkCoordinateEvalAtomsEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"If `e : Expr` is the `n`-th atom, construct the proof that\n`e = (coordinate n).eval atoms`. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq","kind":"def","line":72,"name":"Lean.Elab.Tactic.Omega.mkCoordinateEvalAtomsEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L72-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkEvalRflProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">mkEvalRflProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Construct the `rfl` proof that `lc.eval atoms = e`. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.mkEvalRflProof","kind":"def","line":68,"name":"Lean.Elab.Tactic.Omega.mkEvalRflProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L68-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processedFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">processedFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Facts which have already been processed; we keep these to avoid duplicates. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.processedFacts","kind":"def","line":66,"name":"Lean.Elab.Tactic.Omega.MetaProblem.processedFacts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.disjunctions\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">disjunctions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Pending disjunctions, which we will case split one at a time if we can't get a contradiction.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.disjunctions","kind":"def","line":64,"name":"Lean.Elab.Tactic.Omega.MetaProblem.disjunctions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.facts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">facts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Pending facts which have not been processed yet. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.facts","kind":"def","line":60,"name":"Lean.Elab.Tactic.Omega.MetaProblem.facts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.problem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">problem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></div></div>","info":{"doc":"An integer linear arithmetic problem. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.problem","kind":"def","line":58,"name":"Lean.Elab.Tactic.Omega.MetaProblem.problem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">problem</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts </span><span class=\"fn\">disjunctions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">processedFacts</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\">MetaProblem</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem.mk","kind":"ctor","line":56,"name":"Lean.Elab.Tactic.Omega.MetaProblem.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">MetaProblem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A partially processed `omega` context.\n\nWe have:\n* a `Problem` representing the integer linear constraints extracted so far, and their proofs\n* the unprocessed `facts : List Expr` taken from the local context,\n* the unprocessed `disjunctions : List Expr`,\n  which will only be split one at a time if we can't otherwise find a contradiction.\n\nWe begin with `facts := ← getLocalHyps` and `problem := .trivial`,\nand progressively process the facts.\n\nAs we process the facts, we may generate additional facts\n(e.g. about coercions and integer divisions).\nTo avoid duplicates, we maintain a `HashSet` of previously processed facts.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.MetaProblem","kind":"structure","line":40,"name":"Lean.Elab.Tactic.Omega.MetaProblem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L40-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.succ?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">succ?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Match on the two defeq expressions for successor: `n+1`, `n.succ`. ","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.succ?","kind":"def","line":32,"name":"Lean.Elab.Tactic.Omega.succ?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L32-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.elabOmegaConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">elabOmegaConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">Meta.Omega.OmegaConfig</a></span></span></div></div>","info":{"doc":"Allow elaboration of `OmegaConfig` arguments to tactics.\n","docLink":"./Lean/Elab/Tactic/Omega/Frontend.html#Lean.Elab.Tactic.Omega.elabOmegaConfig","kind":"def","line":27,"name":"Lean.Elab.Tactic.Omega.elabOmegaConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Omega/Frontend.lean#L27-L30"}}],"imports":["Lean.Elab.Tactic.Omega.Core","Lean.Elab.Tactic.FalseOrByContra","Lean.Elab.Tactic.Config","Lean.Meta.Tactic.Simp.Attr","Lean.Elab.Tactic.BuiltinTactic"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Tactic.Omega.MetaProblem.instInhabited","typeNames":["Lean.Elab.Tactic.Omega.MetaProblem"]}],"name":"Lean.Elab.Tactic.Omega.Frontend"}