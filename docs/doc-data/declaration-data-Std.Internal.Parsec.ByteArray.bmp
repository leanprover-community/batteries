{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipUntilUpTo\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">skipUntilUpTo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">limit</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skips until a predicate is satisfied, up to a given limit.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipUntilUpTo","kind":"def","line":290,"name":"Std.Internal.Parsec.ByteArray.skipUntilUpTo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L290-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipWhileUpTo\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">skipWhileUpTo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">limit</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skips while a predicate is satisfied, up to a given limit.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipWhileUpTo","kind":"def","line":276,"name":"Std.Internal.Parsec.ByteArray.skipWhileUpTo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L276-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeUntilUpTo\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">takeUntilUpTo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">limit</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></span></div></div>","info":{"doc":"Parses until a predicate is satisfied (exclusive), up to a given limit.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeUntilUpTo","kind":"def","line":269,"name":"Std.Internal.Parsec.ByteArray.takeUntilUpTo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L269-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeWhileUpTo1\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">takeWhileUpTo1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">limit</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></span></div></div>","info":{"doc":"Parses while a predicate is satisfied, up to a given limit, requiring at least one byte.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeWhileUpTo1","kind":"def","line":251,"name":"Std.Internal.Parsec.ByteArray.takeWhileUpTo1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L251-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeWhileUpTo\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">takeWhileUpTo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">limit</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></span></div></div>","info":{"doc":"Parses while a predicate is satisfied, up to a given limit.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeWhileUpTo","kind":"def","line":236,"name":"Std.Internal.Parsec.ByteArray.takeWhileUpTo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L236-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipUntil\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">skipUntil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skips until a predicate is satisfied.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipUntil","kind":"def","line":229,"name":"Std.Internal.Parsec.ByteArray.skipUntil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L229-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipWhile\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">skipWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skips while a predicate is satisfied.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipWhile","kind":"def","line":216,"name":"Std.Internal.Parsec.ByteArray.skipWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L216-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeUntil\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">takeUntil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></span></div></div>","info":{"doc":"Parses until a predicate is satisfied (exclusive).\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeUntil","kind":"def","line":209,"name":"Std.Internal.Parsec.ByteArray.takeUntil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L209-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeWhile\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></span></div></div>","info":{"doc":"Parses while a predicate is satisfied.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.takeWhile","kind":"def","line":195,"name":"Std.Internal.Parsec.ByteArray.takeWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L195-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.take\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></span></div></div>","info":{"doc":"Parse `n` bytes from the input into a `ByteSlice`, errors if not enough bytes.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.take","kind":"def","line":186,"name":"Std.Internal.Parsec.ByteArray.take","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L186-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.ws\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">ws</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skip whitespace: tabs, newlines, carriage returns, and spaces.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.ws","kind":"def","line":179,"name":"Std.Internal.Parsec.ByteArray.ws","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L179-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.asciiLetter\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">asciiLetter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Parse an ASCII letter `a-z` or `A-Z` as a `Char`.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.asciiLetter","kind":"def","line":158,"name":"Std.Internal.Parsec.ByteArray.asciiLetter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L158-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.octDigit\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">octDigit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Parse an octal digit `0-7` as a `Char`.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.octDigit","kind":"def","line":147,"name":"Std.Internal.Parsec.ByteArray.octDigit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L147-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.hexDigit\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">hexDigit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Parse a hex digit `0-9`, `a-f`, or `A-F` as a `Char`.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.hexDigit","kind":"def","line":137,"name":"Std.Internal.Parsec.ByteArray.hexDigit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L137-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.digits\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">digits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Parse one or more ASCII digits into a `Nat`.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.digits","kind":"def","line":129,"name":"Std.Internal.Parsec.ByteArray.digits","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L129-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.digit\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">digit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Parse an ASCII digit `0-9` as a `Char`.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.digit","kind":"def","line":90,"name":"Std.Internal.Parsec.ByteArray.digit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L90-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipByteChar\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">skipByteChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skip a `Char` that can be represented in 1 byte. If `c` uses more than 1 byte it is truncated.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipByteChar","kind":"def","line":84,"name":"Std.Internal.Parsec.ByteArray.skipByteChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L84-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.pByteChar\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">pByteChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Parse a `Char` that can be represented in 1 byte. If `c` uses more than 1 byte it is truncated.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.pByteChar","kind":"def","line":77,"name":"Std.Internal.Parsec.ByteArray.pByteChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L77-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipString\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">skipString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skip a string by matching its UTF-8 bytes.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipString","kind":"def","line":71,"name":"Std.Internal.Parsec.ByteArray.skipString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L71-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.pstring\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">pstring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Parse a string by matching its UTF-8 bytes, returns the string on success.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.pstring","kind":"def","line":63,"name":"Std.Internal.Parsec.ByteArray.pstring","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L63-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipBytes\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">skipBytes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skip a sequence of bytes equal to the given `ByteArray`.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipBytes","kind":"def","line":56,"name":"Std.Internal.Parsec.ByteArray.skipBytes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L56-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipByte\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">skipByte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Skip a single byte equal to `b`, fails if different.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.skipByte","kind":"def","line":49,"name":"Std.Internal.Parsec.ByteArray.skipByte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L49-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.pbyte\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">pbyte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"Parse a single byte equal to `b`, fails if different.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.pbyte","kind":"def","line":42,"name":"Std.Internal.Parsec.ByteArray.pbyte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L42-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser.run\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">Parser</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\">Parser</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run a `Parser` on a `ByteArray`, returns either the result or an error string with offset.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser.run","kind":"def","line":34,"name":"Std.Internal.Parsec.ByteArray.Parser.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L34-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">Parser</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Parser α` is a parser that consumes a `ByteArray` input using a `ByteArray.Iterator` and returns a result of type `α`.\n","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.Parser","kind":"def","line":29,"name":"Std.Internal.Parsec.ByteArray.Parser","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L29-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.instInputIteratorUInt8Nat\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Parsec</span>.<span class=\"name\">ByteArray</span>.<span class=\"name\">instInputIteratorUInt8Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/Basic.html#Std.Internal.Parsec.Input\">Input</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">ByteArray.Iterator</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Parsec/ByteArray.html#Std.Internal.Parsec.ByteArray.instInputIteratorUInt8Nat","kind":"instance","line":20,"name":"Std.Internal.Parsec.ByteArray.instInputIteratorUInt8Nat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Parsec/ByteArray.lean#L20-L26"}}],"imports":["Std.Internal.Parsec.Basic","Init.Data.String.Extra","Std.Data.ByteSlice"],"instances":[{"className":"Std.Internal.Parsec.Input","name":"Std.Internal.Parsec.ByteArray.instInputIteratorUInt8Nat","typeNames":["ByteArray.Iterator","UInt8","Nat"]}],"name":"Std.Internal.Parsec.ByteArray"}