{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.loop_skipIfNA\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">loop_skipIfNA</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.loop\">loop</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.skipIfNA\">skipIfNA</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.loop\">loop</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.loop_skipIfNA","kind":"theorem","line":342,"name":"Lean.Meta.Grind.Action.loop_skipIfNA","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L342-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.checkTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">checkTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"Helper action that checks whether the resulting tactic script produced by its continuation\ncan close the original goal.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.checkTactic","kind":"def","line":290,"name":"Lean.Meta.Grind.Action.checkTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L290-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.checkSeqAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">checkSeqAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind\">TGrind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if the tactic sequence `seq` closes `goal` starting at saved state `s?`.\nIf `s?` is `none` just returns `true`.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.checkSeqAt","kind":"def","line":273,"name":"Lean.Meta.Grind.Action.checkSeqAt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L273-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.saveStateIfTracing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">saveStateIfTracing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.saveStateIfTracing","kind":"def","line":268,"name":"Lean.Meta.Grind.Action.saveStateIfTracing","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L268-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.solverAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">solverAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">check</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/CheckResult.html#Lean.Meta.Grind.CheckResult\">CheckResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkTac</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`grind</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"Helper action for satellite solvers that use `CheckResult`.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.solverAction","kind":"def","line":252,"name":"Lean.Meta.Grind.Action.solverAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L252-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.terminalAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">terminalAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">check</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkTac</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`grind</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"A terminal action which closes the goal or not.\nThis kind of action may make progress, but we only include `mkTac` into the resulting tactic sequence\nif it closed the goal.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.terminalAction","kind":"def","line":237,"name":"Lean.Meta.Grind.Action.terminalAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L237-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.closeWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">closeWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`grind</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\">ActionResult</a></span></div></div>","info":{"doc":"Returns `.closed [‚Üê mk]` if tracing is enabled, and `.closed []` otherwise. ","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.closeWith","kind":"def","line":230,"name":"Lean.Meta.Grind.Action.closeWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L230-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.concatTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">concatTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\">ActionResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`grind</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\">ActionResult</a></span></div></div>","info":{"doc":"Appends a new tactic syntax to a successful result.\nUsed by leaf actions to record the tactic that produced progress.\nIf `(‚Üê getConfig).trace` is `false`, it just returns `r`.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.concatTactic","kind":"def","line":215,"name":"Lean.Meta.Grind.Action.concatTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L215-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.ungroup\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">ungroup</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"If tracing is enabled and continuation produced `.closed [(next => t‚ÇÅ; ...; t‚Çô)]`,\nreturns `.close [t‚ÇÅ, ... t‚Çô]`\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.ungroup","kind":"def","line":199,"name":"Lean.Meta.Grind.Action.ungroup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L199-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.group\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"If tracing is enabled and continuation produced `.closed [t‚ÇÅ, ..., t‚Çô]`,\nreturns the singleton sequence `[t]` where `t` is\n```\nnext =>\n  t‚ÇÅ\n  ...\n  t‚Çô\n```\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.group","kind":"def","line":180,"name":"Lean.Meta.Grind.Action.group","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L180-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.mkGrindNext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">mkGrindNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind\">TGrind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind\">TGrind</a></span></div></div>","info":{"doc":"Given `[t‚ÇÅ, ..., t‚Çô]`, returns\n```\nnext =>\n  t‚ÇÅ\n  ...\n  t‚Çô\n```\nIf the list is empty, it returns `next => done`.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.mkGrindNext","kind":"def","line":151,"name":"Lean.Meta.Grind.Action.mkGrindNext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L151-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.mkGrindSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">mkGrindSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind\">TGrind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.Grind.grindSeq</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.mkGrindSeq","kind":"def","line":143,"name":"Lean.Meta.Grind.Action.mkGrindSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L143-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.TGrindStep.getTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">TGrindStep</span>.<span class=\"name\">getTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.TGrindStep\">TGrindStep</a> ‚Üí <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind\">TGrind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.TGrindStep.getTactic","kind":"def","line":139,"name":"Lean.Meta.Grind.Action.TGrindStep.getTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L139-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.mkGrindStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">mkGrindStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind\">TGrind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.TGrindStep\">TGrindStep</a></div></div>","info":{"doc":"``TSyntax `grind`` => ``TSyntax `Lean.Parser.Tactic.Grind.grindStep`` ","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.mkGrindStep","kind":"def","line":135,"name":"Lean.Meta.Grind.Action.mkGrindStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L135-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.skipIfNA\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">skipIfNA</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"Executes `x`, but behaves like a `skip` if it is not applicable.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.skipIfNA","kind":"def","line":129,"name":"Lean.Meta.Grind.Action.skipIfNA","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L129-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\">ActionResult</a></span></div></div>","info":{"doc":"Runs action `a` on the given `goal`.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.run","kind":"def","line":122,"name":"Lean.Meta.Grind.Action.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L122-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"Repeats `x` up to `n` times while it remains applicable.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.loop","kind":"def","line":114,"name":"Lean.Meta.Grind.Action.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L114-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.instOrElse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">instOrElse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse\">OrElse</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.instOrElse","kind":"instance","line":111,"name":"Lean.Meta.Grind.Action.instOrElse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L111-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.orElse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">orElse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"Choice: tries `x`, if not applicable, tries `y`.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.orElse","kind":"def","line":105,"name":"Lean.Meta.Grind.Action.orElse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L105-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.instAndThen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">instAndThen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndThen\">AndThen</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.instAndThen","kind":"instance","line":103,"name":"Lean.Meta.Grind.Action.instAndThen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.andThen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">andThen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"`x >> y`, executes `x` and then `y`\n- If `x` is not applicable, then `x >> y` is not applicable.\n- If `y` is not applicable, it behaves like a skip.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.andThen","kind":"def","line":95,"name":"Lean.Meta.Grind.Action.andThen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L95-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.done\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">done</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"If the `goal` is already inconsistent, returns `.closed []`. Otherwise, executes\nthen not applicable continuation.\n","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.done","kind":"def","line":85,"name":"Lean.Meta.Grind.Action.done","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L85-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.skip\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">skip</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.Action.skip","kind":"def","line":82,"name":"Lean.Meta.Grind.Action.skip","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.instToMessageDataActionResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instToMessageDataActionResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\">ActionResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.instToMessageDataActionResult","kind":"instance","line":77,"name":"Lean.Meta.Grind.instToMessageDataActionResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.ActionResult.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ActionResult</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\">ActionResult</a> ‚Üí <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.ActionResult.toMessageData","kind":"def","line":73,"name":"Lean.Meta.Grind.ActionResult.toMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L73-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.TGrindStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">TGrindStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Action.html#Lean.Meta.Grind.TGrindStep","kind":"def","line":71,"name":"Lean.Meta.Grind.TGrindStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Action.lean#L71-L71"}}],"imports":["Lean.Meta.Tactic.Grind.Types"],"instances":[{"className":"Lean.ToMessageData","name":"Lean.Meta.Grind.instToMessageDataActionResult","typeNames":["Lean.Meta.Grind.ActionResult"]},{"className":"AndThen","name":"Lean.Meta.Grind.Action.instAndThen","typeNames":["Lean.Meta.Grind.Action"]},{"className":"OrElse","name":"Lean.Meta.Grind.Action.instOrElse","typeNames":["Lean.Meta.Grind.Action"]}],"name":"Lean.Meta.Tactic.Grind.Action"}