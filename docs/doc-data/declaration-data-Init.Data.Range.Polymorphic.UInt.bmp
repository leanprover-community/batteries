{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulHasSize_2\"><span class=\"name\">USize</span>.<span class=\"name\">instLawfulHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.LawfulHasSize\">Std.Rxi.LawfulHasSize</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulHasSize_2","kind":"instance","line":484,"name":"USize.instLawfulHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L484-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.rxiHasSize_eq_toBitVec\"><span class=\"name\">USize</span>.<span class=\"name\">rxiHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <span class=\"fn\">lo</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.rxiHasSize_eq_toBitVec","kind":"theorem","line":480,"name":"USize.rxiHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L480-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instHasSize_2\"><span class=\"name\">USize</span>.<span class=\"name\">instHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize\">Std.Rxi.HasSize</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instHasSize_2","kind":"instance","line":477,"name":"USize.instHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L477-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instIsAlwaysFinite_1\"><span class=\"name\">USize</span>.<span class=\"name\">instIsAlwaysFinite_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxo.IsAlwaysFinite\">Std.Rxo.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instIsAlwaysFinite_1","kind":"instance","line":475,"name":"USize.instIsAlwaysFinite_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L475-L475"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulHasSize_1\"><span class=\"name\">USize</span>.<span class=\"name\">instLawfulHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.LawfulHasSize\">Std.Rxo.LawfulHasSize</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulHasSize_1","kind":"instance","line":474,"name":"USize.instLawfulHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L474-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instHasSize_1\"><span class=\"name\">USize</span>.<span class=\"name\">instHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.HasSize\">Std.Rxo.HasSize</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instHasSize_1","kind":"instance","line":473,"name":"USize.instHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L473-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instIsAlwaysFinite\"><span class=\"name\">USize</span>.<span class=\"name\">instIsAlwaysFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxc.IsAlwaysFinite\">Std.Rxc.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instIsAlwaysFinite","kind":"instance","line":471,"name":"USize.instIsAlwaysFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L471-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulHasSize\"><span class=\"name\">USize</span>.<span class=\"name\">instLawfulHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.LawfulHasSize\">Std.Rxc.LawfulHasSize</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulHasSize","kind":"instance","line":457,"name":"USize.instLawfulHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L457-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.rxcHasSize_eq_toBitVec\"><span class=\"name\">USize</span>.<span class=\"name\">rxcHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <span class=\"fn\">lo</span> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.rxcHasSize_eq_toBitVec","kind":"theorem","line":453,"name":"USize.rxcHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L453-L455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instHasSize\"><span class=\"name\">USize</span>.<span class=\"name\">instHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize\">Std.Rxc.HasSize</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instHasSize","kind":"instance","line":450,"name":"USize.instHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L450-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerableLT_1\"><span class=\"name\">USize</span>.<span class=\"name\">instLawfulUpwardEnumerableLT_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerableLT_1","kind":"instance","line":448,"name":"USize.instLawfulUpwardEnumerableLT_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L448-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerableLT\"><span class=\"name\">USize</span>.<span class=\"name\">instLawfulUpwardEnumerableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerableLT","kind":"instance","line":447,"name":"USize.instLawfulUpwardEnumerableLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L447-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerableLE\"><span class=\"name\">USize</span>.<span class=\"name\">instLawfulUpwardEnumerableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">Std.PRange.LawfulUpwardEnumerableLE</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerableLE","kind":"instance","line":441,"name":"USize.instLawfulUpwardEnumerableLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L441-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerable\"><span class=\"name\">USize</span>.<span class=\"name\">instLawfulUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">Std.PRange.LawfulUpwardEnumerable</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerable","kind":"instance","line":429,"name":"USize.instLawfulUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L429-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.upwardEnumerableLT_ofBitVec\"><span class=\"name\">USize</span>.<span class=\"name\">upwardEnumerableLT_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.upwardEnumerableLT_ofBitVec","kind":"theorem","line":425,"name":"USize.upwardEnumerableLT_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L425-L427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.upwardEnumerableLE_ofBitVec\"><span class=\"name\">USize</span>.<span class=\"name\">upwardEnumerableLE_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.upwardEnumerableLE_ofBitVec","kind":"theorem","line":421,"name":"USize.upwardEnumerableLE_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L421-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.succMany?_ofBitVec\"><span class=\"name\">USize</span>.<span class=\"name\">succMany?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.succMany?_ofBitVec","kind":"theorem","line":417,"name":"USize.succMany?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L417-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.succ?_ofBitVec\"><span class=\"name\">USize</span>.<span class=\"name\">succ?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.succ?_ofBitVec","kind":"theorem","line":412,"name":"USize.succ?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L412-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerableLeast?\"><span class=\"name\">USize</span>.<span class=\"name\">instLawfulUpwardEnumerableLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLeast?\">Std.PRange.LawfulUpwardEnumerableLeast?</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLawfulUpwardEnumerableLeast?","kind":"instance","line":409,"name":"USize.instLawfulUpwardEnumerableLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L409-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instLeast?\"><span class=\"name\">USize</span>.<span class=\"name\">instLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.Least?\">Std.PRange.Least?</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instLeast?","kind":"instance","line":406,"name":"USize.instLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L406-L407"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#USize.instUpwardEnumerable\"><span class=\"name\">USize</span>.<span class=\"name\">instUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">Std.PRange.UpwardEnumerable</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#USize.instUpwardEnumerable","kind":"instance","line":402,"name":"USize.instUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L402-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulHasSize_2\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLawfulHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.LawfulHasSize\">Std.Rxi.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulHasSize_2","kind":"instance","line":388,"name":"UInt64.instLawfulHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L388-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.rxiHasSize_eq_toBitVec\"><span class=\"name\">UInt64</span>.<span class=\"name\">rxiHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <span class=\"fn\">lo</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.rxiHasSize_eq_toBitVec","kind":"theorem","line":384,"name":"UInt64.rxiHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L384-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instHasSize_2\"><span class=\"name\">UInt64</span>.<span class=\"name\">instHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize\">Std.Rxi.HasSize</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instHasSize_2","kind":"instance","line":381,"name":"UInt64.instHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L381-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instIsAlwaysFinite_1\"><span class=\"name\">UInt64</span>.<span class=\"name\">instIsAlwaysFinite_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxo.IsAlwaysFinite\">Std.Rxo.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instIsAlwaysFinite_1","kind":"instance","line":379,"name":"UInt64.instIsAlwaysFinite_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L379-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulHasSize_1\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLawfulHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.LawfulHasSize\">Std.Rxo.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulHasSize_1","kind":"instance","line":378,"name":"UInt64.instLawfulHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L378-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instHasSize_1\"><span class=\"name\">UInt64</span>.<span class=\"name\">instHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.HasSize\">Std.Rxo.HasSize</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instHasSize_1","kind":"instance","line":377,"name":"UInt64.instHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L377-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instIsAlwaysFinite\"><span class=\"name\">UInt64</span>.<span class=\"name\">instIsAlwaysFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxc.IsAlwaysFinite\">Std.Rxc.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instIsAlwaysFinite","kind":"instance","line":375,"name":"UInt64.instIsAlwaysFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L375-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulHasSize\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLawfulHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.LawfulHasSize\">Std.Rxc.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulHasSize","kind":"instance","line":361,"name":"UInt64.instLawfulHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L361-L373"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.rxcHasSize_eq_toBitVec\"><span class=\"name\">UInt64</span>.<span class=\"name\">rxcHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <span class=\"fn\">lo</span> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.rxcHasSize_eq_toBitVec","kind":"theorem","line":357,"name":"UInt64.rxcHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L357-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instHasSize\"><span class=\"name\">UInt64</span>.<span class=\"name\">instHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize\">Std.Rxc.HasSize</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instHasSize","kind":"instance","line":354,"name":"UInt64.instHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L354-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerableLT_1\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLawfulUpwardEnumerableLT_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerableLT_1","kind":"instance","line":352,"name":"UInt64.instLawfulUpwardEnumerableLT_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L352-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerableLT\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLawfulUpwardEnumerableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerableLT","kind":"instance","line":351,"name":"UInt64.instLawfulUpwardEnumerableLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L351-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerableLE\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLawfulUpwardEnumerableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">Std.PRange.LawfulUpwardEnumerableLE</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerableLE","kind":"instance","line":345,"name":"UInt64.instLawfulUpwardEnumerableLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L345-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerable\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLawfulUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">Std.PRange.LawfulUpwardEnumerable</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerable","kind":"instance","line":333,"name":"UInt64.instLawfulUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L333-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.upwardEnumerableLT_ofBitVec\"><span class=\"name\">UInt64</span>.<span class=\"name\">upwardEnumerableLT_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.upwardEnumerableLT_ofBitVec","kind":"theorem","line":329,"name":"UInt64.upwardEnumerableLT_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L329-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.upwardEnumerableLE_ofBitVec\"><span class=\"name\">UInt64</span>.<span class=\"name\">upwardEnumerableLE_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.upwardEnumerableLE_ofBitVec","kind":"theorem","line":325,"name":"UInt64.upwardEnumerableLE_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L325-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.succMany?_ofBitVec\"><span class=\"name\">UInt64</span>.<span class=\"name\">succMany?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.succMany?_ofBitVec","kind":"theorem","line":321,"name":"UInt64.succMany?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L321-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.succ?_ofBitVec\"><span class=\"name\">UInt64</span>.<span class=\"name\">succ?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.succ?_ofBitVec","kind":"theorem","line":316,"name":"UInt64.succ?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L316-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerableLeast?\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLawfulUpwardEnumerableLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLeast?\">Std.PRange.LawfulUpwardEnumerableLeast?</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLawfulUpwardEnumerableLeast?","kind":"instance","line":313,"name":"UInt64.instLawfulUpwardEnumerableLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L313-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLeast?\"><span class=\"name\">UInt64</span>.<span class=\"name\">instLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.Least?\">Std.PRange.Least?</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instLeast?","kind":"instance","line":310,"name":"UInt64.instLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L310-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instUpwardEnumerable\"><span class=\"name\">UInt64</span>.<span class=\"name\">instUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">Std.PRange.UpwardEnumerable</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt64.instUpwardEnumerable","kind":"instance","line":306,"name":"UInt64.instUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L306-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulHasSize_2\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLawfulHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.LawfulHasSize\">Std.Rxi.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulHasSize_2","kind":"instance","line":292,"name":"UInt32.instLawfulHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L292-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.rxiHasSize_eq_toBitVec\"><span class=\"name\">UInt32</span>.<span class=\"name\">rxiHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <span class=\"fn\">lo</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.rxiHasSize_eq_toBitVec","kind":"theorem","line":288,"name":"UInt32.rxiHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L288-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instHasSize_2\"><span class=\"name\">UInt32</span>.<span class=\"name\">instHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize\">Std.Rxi.HasSize</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instHasSize_2","kind":"instance","line":285,"name":"UInt32.instHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L285-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instIsAlwaysFinite_1\"><span class=\"name\">UInt32</span>.<span class=\"name\">instIsAlwaysFinite_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxo.IsAlwaysFinite\">Std.Rxo.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instIsAlwaysFinite_1","kind":"instance","line":283,"name":"UInt32.instIsAlwaysFinite_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulHasSize_1\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLawfulHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.LawfulHasSize\">Std.Rxo.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulHasSize_1","kind":"instance","line":282,"name":"UInt32.instLawfulHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instHasSize_1\"><span class=\"name\">UInt32</span>.<span class=\"name\">instHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.HasSize\">Std.Rxo.HasSize</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instHasSize_1","kind":"instance","line":281,"name":"UInt32.instHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L281-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instIsAlwaysFinite\"><span class=\"name\">UInt32</span>.<span class=\"name\">instIsAlwaysFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxc.IsAlwaysFinite\">Std.Rxc.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instIsAlwaysFinite","kind":"instance","line":279,"name":"UInt32.instIsAlwaysFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L279-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulHasSize\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLawfulHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.LawfulHasSize\">Std.Rxc.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulHasSize","kind":"instance","line":265,"name":"UInt32.instLawfulHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L265-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.rxcHasSize_eq_toBitVec\"><span class=\"name\">UInt32</span>.<span class=\"name\">rxcHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <span class=\"fn\">lo</span> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.rxcHasSize_eq_toBitVec","kind":"theorem","line":261,"name":"UInt32.rxcHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L261-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instHasSize\"><span class=\"name\">UInt32</span>.<span class=\"name\">instHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize\">Std.Rxc.HasSize</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instHasSize","kind":"instance","line":258,"name":"UInt32.instHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L258-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerableLT_1\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLawfulUpwardEnumerableLT_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerableLT_1","kind":"instance","line":256,"name":"UInt32.instLawfulUpwardEnumerableLT_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L256-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerableLT\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLawfulUpwardEnumerableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerableLT","kind":"instance","line":255,"name":"UInt32.instLawfulUpwardEnumerableLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L255-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerableLE\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLawfulUpwardEnumerableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">Std.PRange.LawfulUpwardEnumerableLE</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerableLE","kind":"instance","line":249,"name":"UInt32.instLawfulUpwardEnumerableLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L249-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerable\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLawfulUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">Std.PRange.LawfulUpwardEnumerable</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerable","kind":"instance","line":237,"name":"UInt32.instLawfulUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L237-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.upwardEnumerableLT_ofBitVec\"><span class=\"name\">UInt32</span>.<span class=\"name\">upwardEnumerableLT_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.upwardEnumerableLT_ofBitVec","kind":"theorem","line":233,"name":"UInt32.upwardEnumerableLT_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L233-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.upwardEnumerableLE_ofBitVec\"><span class=\"name\">UInt32</span>.<span class=\"name\">upwardEnumerableLE_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.upwardEnumerableLE_ofBitVec","kind":"theorem","line":229,"name":"UInt32.upwardEnumerableLE_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L229-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.succMany?_ofBitVec\"><span class=\"name\">UInt32</span>.<span class=\"name\">succMany?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.succMany?_ofBitVec","kind":"theorem","line":225,"name":"UInt32.succMany?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L225-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.succ?_ofBitVec\"><span class=\"name\">UInt32</span>.<span class=\"name\">succ?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.succ?_ofBitVec","kind":"theorem","line":220,"name":"UInt32.succ?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L220-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerableLeast?\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLawfulUpwardEnumerableLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLeast?\">Std.PRange.LawfulUpwardEnumerableLeast?</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLawfulUpwardEnumerableLeast?","kind":"instance","line":217,"name":"UInt32.instLawfulUpwardEnumerableLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L217-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLeast?\"><span class=\"name\">UInt32</span>.<span class=\"name\">instLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.Least?\">Std.PRange.Least?</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instLeast?","kind":"instance","line":214,"name":"UInt32.instLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L214-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instUpwardEnumerable\"><span class=\"name\">UInt32</span>.<span class=\"name\">instUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">Std.PRange.UpwardEnumerable</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt32.instUpwardEnumerable","kind":"instance","line":210,"name":"UInt32.instUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L210-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulHasSize_2\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLawfulHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.LawfulHasSize\">Std.Rxi.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulHasSize_2","kind":"instance","line":196,"name":"UInt16.instLawfulHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L196-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.rxiHasSize_eq_toBitVec\"><span class=\"name\">UInt16</span>.<span class=\"name\">rxiHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <span class=\"fn\">lo</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.rxiHasSize_eq_toBitVec","kind":"theorem","line":192,"name":"UInt16.rxiHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L192-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instHasSize_2\"><span class=\"name\">UInt16</span>.<span class=\"name\">instHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize\">Std.Rxi.HasSize</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instHasSize_2","kind":"instance","line":189,"name":"UInt16.instHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L189-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instIsAlwaysFinite_1\"><span class=\"name\">UInt16</span>.<span class=\"name\">instIsAlwaysFinite_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxo.IsAlwaysFinite\">Std.Rxo.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instIsAlwaysFinite_1","kind":"instance","line":187,"name":"UInt16.instIsAlwaysFinite_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L187-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulHasSize_1\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLawfulHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.LawfulHasSize\">Std.Rxo.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulHasSize_1","kind":"instance","line":186,"name":"UInt16.instLawfulHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instHasSize_1\"><span class=\"name\">UInt16</span>.<span class=\"name\">instHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.HasSize\">Std.Rxo.HasSize</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instHasSize_1","kind":"instance","line":185,"name":"UInt16.instHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L185-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instIsAlwaysFinite\"><span class=\"name\">UInt16</span>.<span class=\"name\">instIsAlwaysFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxc.IsAlwaysFinite\">Std.Rxc.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instIsAlwaysFinite","kind":"instance","line":183,"name":"UInt16.instIsAlwaysFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L183-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulHasSize\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLawfulHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.LawfulHasSize\">Std.Rxc.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulHasSize","kind":"instance","line":169,"name":"UInt16.instLawfulHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L169-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.rxcHasSize_eq_toBitVec\"><span class=\"name\">UInt16</span>.<span class=\"name\">rxcHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <span class=\"fn\">lo</span> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.rxcHasSize_eq_toBitVec","kind":"theorem","line":165,"name":"UInt16.rxcHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L165-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instHasSize\"><span class=\"name\">UInt16</span>.<span class=\"name\">instHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize\">Std.Rxc.HasSize</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instHasSize","kind":"instance","line":162,"name":"UInt16.instHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L162-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerableLT_1\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLawfulUpwardEnumerableLT_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerableLT_1","kind":"instance","line":160,"name":"UInt16.instLawfulUpwardEnumerableLT_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L160-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerableLT\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLawfulUpwardEnumerableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerableLT","kind":"instance","line":159,"name":"UInt16.instLawfulUpwardEnumerableLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerableLE\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLawfulUpwardEnumerableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">Std.PRange.LawfulUpwardEnumerableLE</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerableLE","kind":"instance","line":153,"name":"UInt16.instLawfulUpwardEnumerableLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L153-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerable\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLawfulUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">Std.PRange.LawfulUpwardEnumerable</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerable","kind":"instance","line":141,"name":"UInt16.instLawfulUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L141-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.upwardEnumerableLT_ofBitVec\"><span class=\"name\">UInt16</span>.<span class=\"name\">upwardEnumerableLT_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.upwardEnumerableLT_ofBitVec","kind":"theorem","line":137,"name":"UInt16.upwardEnumerableLT_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L137-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.upwardEnumerableLE_ofBitVec\"><span class=\"name\">UInt16</span>.<span class=\"name\">upwardEnumerableLE_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.upwardEnumerableLE_ofBitVec","kind":"theorem","line":133,"name":"UInt16.upwardEnumerableLE_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L133-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.succMany?_ofBitVec\"><span class=\"name\">UInt16</span>.<span class=\"name\">succMany?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.succMany?_ofBitVec","kind":"theorem","line":129,"name":"UInt16.succMany?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L129-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.succ?_ofBitVec\"><span class=\"name\">UInt16</span>.<span class=\"name\">succ?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.succ?_ofBitVec","kind":"theorem","line":124,"name":"UInt16.succ?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L124-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerableLeast?\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLawfulUpwardEnumerableLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLeast?\">Std.PRange.LawfulUpwardEnumerableLeast?</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLawfulUpwardEnumerableLeast?","kind":"instance","line":121,"name":"UInt16.instLawfulUpwardEnumerableLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L121-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLeast?\"><span class=\"name\">UInt16</span>.<span class=\"name\">instLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.Least?\">Std.PRange.Least?</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instLeast?","kind":"instance","line":118,"name":"UInt16.instLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L118-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instUpwardEnumerable\"><span class=\"name\">UInt16</span>.<span class=\"name\">instUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">Std.PRange.UpwardEnumerable</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt16.instUpwardEnumerable","kind":"instance","line":114,"name":"UInt16.instUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L114-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulHasSize_2\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLawfulHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.LawfulHasSize\">Std.Rxi.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulHasSize_2","kind":"instance","line":100,"name":"UInt8.instLawfulHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L100-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.rxiHasSize_eq_toBitVec\"><span class=\"name\">UInt8</span>.<span class=\"name\">rxiHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize.size\">Std.Rxi.HasSize.size</a> <span class=\"fn\">lo</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.rxiHasSize_eq_toBitVec","kind":"theorem","line":96,"name":"UInt8.rxiHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L96-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instHasSize_2\"><span class=\"name\">UInt8</span>.<span class=\"name\">instHasSize_2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize\">Std.Rxi.HasSize</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instHasSize_2","kind":"instance","line":93,"name":"UInt8.instHasSize_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L93-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instIsAlwaysFinite_1\"><span class=\"name\">UInt8</span>.<span class=\"name\">instIsAlwaysFinite_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxo.IsAlwaysFinite\">Std.Rxo.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instIsAlwaysFinite_1","kind":"instance","line":91,"name":"UInt8.instIsAlwaysFinite_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulHasSize_1\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLawfulHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.LawfulHasSize\">Std.Rxo.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulHasSize_1","kind":"instance","line":90,"name":"UInt8.instLawfulHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instHasSize_1\"><span class=\"name\">UInt8</span>.<span class=\"name\">instHasSize_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.HasSize\">Std.Rxo.HasSize</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instHasSize_1","kind":"instance","line":89,"name":"UInt8.instHasSize_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instIsAlwaysFinite\"><span class=\"name\">UInt8</span>.<span class=\"name\">instIsAlwaysFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxc.IsAlwaysFinite\">Std.Rxc.IsAlwaysFinite</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instIsAlwaysFinite","kind":"instance","line":87,"name":"UInt8.instIsAlwaysFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulHasSize\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLawfulHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.LawfulHasSize\">Std.Rxc.LawfulHasSize</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulHasSize","kind":"instance","line":73,"name":"UInt8.instLawfulHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L73-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.rxcHasSize_eq_toBitVec\"><span class=\"name\">UInt8</span>.<span class=\"name\">rxcHasSize_eq_toBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize.size\">Std.Rxc.HasSize.size</a> <span class=\"fn\">lo</span> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.rxcHasSize_eq_toBitVec","kind":"theorem","line":69,"name":"UInt8.rxcHasSize_eq_toBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L69-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instHasSize\"><span class=\"name\">UInt8</span>.<span class=\"name\">instHasSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize\">Std.Rxc.HasSize</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instHasSize","kind":"instance","line":66,"name":"UInt8.instHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L66-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerableLT_1\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLawfulUpwardEnumerableLT_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerableLT_1","kind":"instance","line":64,"name":"UInt8.instLawfulUpwardEnumerableLT_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerableLT\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLawfulUpwardEnumerableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">Std.PRange.LawfulUpwardEnumerableLT</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerableLT","kind":"instance","line":63,"name":"UInt8.instLawfulUpwardEnumerableLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerableLE\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLawfulUpwardEnumerableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">Std.PRange.LawfulUpwardEnumerableLE</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerableLE","kind":"instance","line":57,"name":"UInt8.instLawfulUpwardEnumerableLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L57-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerable\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLawfulUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">Std.PRange.LawfulUpwardEnumerable</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerable","kind":"instance","line":45,"name":"UInt8.instLawfulUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L45-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.upwardEnumerableLT_ofBitVec\"><span class=\"name\">UInt8</span>.<span class=\"name\">upwardEnumerableLT_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">Std.PRange.UpwardEnumerable.LT</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.upwardEnumerableLT_ofBitVec","kind":"theorem","line":41,"name":"UInt8.upwardEnumerableLT_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L41-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.upwardEnumerableLE_ofBitVec\"><span class=\"name\">UInt8</span>.<span class=\"name\">upwardEnumerableLE_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">Std.PRange.UpwardEnumerable.LE</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.upwardEnumerableLE_ofBitVec","kind":"theorem","line":37,"name":"UInt8.upwardEnumerableLE_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L37-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.succMany?_ofBitVec\"><span class=\"name\">UInt8</span>.<span class=\"name\">succMany?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">Std.PRange.succMany?</a> <span class=\"fn\">k</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.succMany?_ofBitVec","kind":"theorem","line":33,"name":"UInt8.succMany?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L33-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.succ?_ofBitVec\"><span class=\"name\">UInt8</span>.<span class=\"name\">succ?_ofBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">ofBitVec</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">Std.PRange.succ?</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.succ?_ofBitVec","kind":"theorem","line":28,"name":"UInt8.succ?_ofBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L28-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerableLeast?\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLawfulUpwardEnumerableLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLeast?\">Std.PRange.LawfulUpwardEnumerableLeast?</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLawfulUpwardEnumerableLeast?","kind":"instance","line":25,"name":"UInt8.instLawfulUpwardEnumerableLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L25-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLeast?\"><span class=\"name\">UInt8</span>.<span class=\"name\">instLeast?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.Least?\">Std.PRange.Least?</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instLeast?","kind":"instance","line":22,"name":"UInt8.instLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L22-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instUpwardEnumerable\"><span class=\"name\">UInt8</span>.<span class=\"name\">instUpwardEnumerable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">Std.PRange.UpwardEnumerable</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/UInt.html#UInt8.instUpwardEnumerable","kind":"instance","line":18,"name":"UInt8.instUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/UInt.lean#L18-L20"}}],"imports":["Init.Omega","Init.Data.Range.Polymorphic.BitVec"],"instances":[{"className":"Std.PRange.UpwardEnumerable","name":"UInt8.instUpwardEnumerable","typeNames":["UInt8"]},{"className":"Std.PRange.Least?","name":"UInt8.instLeast?","typeNames":["UInt8"]},{"className":"Std.PRange.LawfulUpwardEnumerableLeast?","name":"UInt8.instLawfulUpwardEnumerableLeast?","typeNames":["UInt8"]},{"className":"Std.PRange.LawfulUpwardEnumerable","name":"UInt8.instLawfulUpwardEnumerable","typeNames":["UInt8"]},{"className":"Std.PRange.LawfulUpwardEnumerableLE","name":"UInt8.instLawfulUpwardEnumerableLE","typeNames":["UInt8"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"UInt8.instLawfulUpwardEnumerableLT","typeNames":["UInt8"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"UInt8.instLawfulUpwardEnumerableLT_1","typeNames":["UInt8"]},{"className":"Std.Rxc.HasSize","name":"UInt8.instHasSize","typeNames":["UInt8"]},{"className":"Std.Rxc.LawfulHasSize","name":"UInt8.instLawfulHasSize","typeNames":["UInt8"]},{"className":"Std.Rxc.IsAlwaysFinite","name":"UInt8.instIsAlwaysFinite","typeNames":["UInt8"]},{"className":"Std.Rxo.HasSize","name":"UInt8.instHasSize_1","typeNames":["UInt8"]},{"className":"Std.Rxo.LawfulHasSize","name":"UInt8.instLawfulHasSize_1","typeNames":["UInt8"]},{"className":"Std.Rxo.IsAlwaysFinite","name":"UInt8.instIsAlwaysFinite_1","typeNames":["UInt8"]},{"className":"Std.Rxi.HasSize","name":"UInt8.instHasSize_2","typeNames":["UInt8"]},{"className":"Std.Rxi.LawfulHasSize","name":"UInt8.instLawfulHasSize_2","typeNames":["UInt8"]},{"className":"Std.PRange.UpwardEnumerable","name":"UInt16.instUpwardEnumerable","typeNames":["UInt16"]},{"className":"Std.PRange.Least?","name":"UInt16.instLeast?","typeNames":["UInt16"]},{"className":"Std.PRange.LawfulUpwardEnumerableLeast?","name":"UInt16.instLawfulUpwardEnumerableLeast?","typeNames":["UInt16"]},{"className":"Std.PRange.LawfulUpwardEnumerable","name":"UInt16.instLawfulUpwardEnumerable","typeNames":["UInt16"]},{"className":"Std.PRange.LawfulUpwardEnumerableLE","name":"UInt16.instLawfulUpwardEnumerableLE","typeNames":["UInt16"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"UInt16.instLawfulUpwardEnumerableLT","typeNames":["UInt16"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"UInt16.instLawfulUpwardEnumerableLT_1","typeNames":["UInt16"]},{"className":"Std.Rxc.HasSize","name":"UInt16.instHasSize","typeNames":["UInt16"]},{"className":"Std.Rxc.LawfulHasSize","name":"UInt16.instLawfulHasSize","typeNames":["UInt16"]},{"className":"Std.Rxc.IsAlwaysFinite","name":"UInt16.instIsAlwaysFinite","typeNames":["UInt16"]},{"className":"Std.Rxo.HasSize","name":"UInt16.instHasSize_1","typeNames":["UInt16"]},{"className":"Std.Rxo.LawfulHasSize","name":"UInt16.instLawfulHasSize_1","typeNames":["UInt16"]},{"className":"Std.Rxo.IsAlwaysFinite","name":"UInt16.instIsAlwaysFinite_1","typeNames":["UInt16"]},{"className":"Std.Rxi.HasSize","name":"UInt16.instHasSize_2","typeNames":["UInt16"]},{"className":"Std.Rxi.LawfulHasSize","name":"UInt16.instLawfulHasSize_2","typeNames":["UInt16"]},{"className":"Std.PRange.UpwardEnumerable","name":"UInt32.instUpwardEnumerable","typeNames":["UInt32"]},{"className":"Std.PRange.Least?","name":"UInt32.instLeast?","typeNames":["UInt32"]},{"className":"Std.PRange.LawfulUpwardEnumerableLeast?","name":"UInt32.instLawfulUpwardEnumerableLeast?","typeNames":["UInt32"]},{"className":"Std.PRange.LawfulUpwardEnumerable","name":"UInt32.instLawfulUpwardEnumerable","typeNames":["UInt32"]},{"className":"Std.PRange.LawfulUpwardEnumerableLE","name":"UInt32.instLawfulUpwardEnumerableLE","typeNames":["UInt32"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"UInt32.instLawfulUpwardEnumerableLT","typeNames":["UInt32"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"UInt32.instLawfulUpwardEnumerableLT_1","typeNames":["UInt32"]},{"className":"Std.Rxc.HasSize","name":"UInt32.instHasSize","typeNames":["UInt32"]},{"className":"Std.Rxc.LawfulHasSize","name":"UInt32.instLawfulHasSize","typeNames":["UInt32"]},{"className":"Std.Rxc.IsAlwaysFinite","name":"UInt32.instIsAlwaysFinite","typeNames":["UInt32"]},{"className":"Std.Rxo.HasSize","name":"UInt32.instHasSize_1","typeNames":["UInt32"]},{"className":"Std.Rxo.LawfulHasSize","name":"UInt32.instLawfulHasSize_1","typeNames":["UInt32"]},{"className":"Std.Rxo.IsAlwaysFinite","name":"UInt32.instIsAlwaysFinite_1","typeNames":["UInt32"]},{"className":"Std.Rxi.HasSize","name":"UInt32.instHasSize_2","typeNames":["UInt32"]},{"className":"Std.Rxi.LawfulHasSize","name":"UInt32.instLawfulHasSize_2","typeNames":["UInt32"]},{"className":"Std.PRange.UpwardEnumerable","name":"UInt64.instUpwardEnumerable","typeNames":["UInt64"]},{"className":"Std.PRange.Least?","name":"UInt64.instLeast?","typeNames":["UInt64"]},{"className":"Std.PRange.LawfulUpwardEnumerableLeast?","name":"UInt64.instLawfulUpwardEnumerableLeast?","typeNames":["UInt64"]},{"className":"Std.PRange.LawfulUpwardEnumerable","name":"UInt64.instLawfulUpwardEnumerable","typeNames":["UInt64"]},{"className":"Std.PRange.LawfulUpwardEnumerableLE","name":"UInt64.instLawfulUpwardEnumerableLE","typeNames":["UInt64"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"UInt64.instLawfulUpwardEnumerableLT","typeNames":["UInt64"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"UInt64.instLawfulUpwardEnumerableLT_1","typeNames":["UInt64"]},{"className":"Std.Rxc.HasSize","name":"UInt64.instHasSize","typeNames":["UInt64"]},{"className":"Std.Rxc.LawfulHasSize","name":"UInt64.instLawfulHasSize","typeNames":["UInt64"]},{"className":"Std.Rxc.IsAlwaysFinite","name":"UInt64.instIsAlwaysFinite","typeNames":["UInt64"]},{"className":"Std.Rxo.HasSize","name":"UInt64.instHasSize_1","typeNames":["UInt64"]},{"className":"Std.Rxo.LawfulHasSize","name":"UInt64.instLawfulHasSize_1","typeNames":["UInt64"]},{"className":"Std.Rxo.IsAlwaysFinite","name":"UInt64.instIsAlwaysFinite_1","typeNames":["UInt64"]},{"className":"Std.Rxi.HasSize","name":"UInt64.instHasSize_2","typeNames":["UInt64"]},{"className":"Std.Rxi.LawfulHasSize","name":"UInt64.instLawfulHasSize_2","typeNames":["UInt64"]},{"className":"Std.PRange.UpwardEnumerable","name":"USize.instUpwardEnumerable","typeNames":["USize"]},{"className":"Std.PRange.Least?","name":"USize.instLeast?","typeNames":["USize"]},{"className":"Std.PRange.LawfulUpwardEnumerableLeast?","name":"USize.instLawfulUpwardEnumerableLeast?","typeNames":["USize"]},{"className":"Std.PRange.LawfulUpwardEnumerable","name":"USize.instLawfulUpwardEnumerable","typeNames":["USize"]},{"className":"Std.PRange.LawfulUpwardEnumerableLE","name":"USize.instLawfulUpwardEnumerableLE","typeNames":["USize"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"USize.instLawfulUpwardEnumerableLT","typeNames":["USize"]},{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"USize.instLawfulUpwardEnumerableLT_1","typeNames":["USize"]},{"className":"Std.Rxc.HasSize","name":"USize.instHasSize","typeNames":["USize"]},{"className":"Std.Rxc.LawfulHasSize","name":"USize.instLawfulHasSize","typeNames":["USize"]},{"className":"Std.Rxc.IsAlwaysFinite","name":"USize.instIsAlwaysFinite","typeNames":["USize"]},{"className":"Std.Rxo.HasSize","name":"USize.instHasSize_1","typeNames":["USize"]},{"className":"Std.Rxo.LawfulHasSize","name":"USize.instLawfulHasSize_1","typeNames":["USize"]},{"className":"Std.Rxo.IsAlwaysFinite","name":"USize.instIsAlwaysFinite_1","typeNames":["USize"]},{"className":"Std.Rxi.HasSize","name":"USize.instHasSize_2","typeNames":["USize"]},{"className":"Std.Rxi.LawfulHasSize","name":"USize.instLawfulHasSize_2","typeNames":["USize"]}],"name":"Init.Data.Range.Polymorphic.UInt"}