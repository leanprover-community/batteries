{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Basic.html#Std.AtomicT\"><span class=\"name\">Std</span>.<span class=\"name\">AtomicT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`AtomicT α m` is the monad that can be atomically executed inside mutual exclusion primitives like\n`Mutex α` with outside monad `m`.\nThe action has access to the state `α` of the mutex (via `get` and `set`).\n","docLink":"./Std/Sync/Basic.html#Std.AtomicT","kind":"def","line":15,"name":"Std.AtomicT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Basic.lean#L15-L20"}}],"imports":["Init.System.IO"],"instances":[],"name":"Std.Sync.Basic"}