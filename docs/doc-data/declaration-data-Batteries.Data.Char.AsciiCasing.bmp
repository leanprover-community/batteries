{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.cmpCaseInsensitiveAsciiOnly\"><span class=\"name\">Char</span>.<span class=\"name\">cmpCaseInsensitiveAsciiOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"ASCII-case insensitive implementation comparison returning an `Ordering`. Useful for sorting.\n\n```\n#eval cmpCaseInsensitiveAsciiOnly 'a' 'A' -- eq\n#eval cmpCaseInsensitiveAsciiOnly 'a' 'a' -- eq\n#eval cmpCaseInsensitiveAsciiOnly '$' '$' -- eq\n#eval cmpCaseInsensitiveAsciiOnly 'a' 'b' -- lt\n#eval cmpCaseInsensitiveAsciiOnly 'γ' 'Γ' -- gt\n#eval cmpCaseInsensitiveAsciiOnly 'ä' 'Ä' -- gt\n```\n","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.cmpCaseInsensitiveAsciiOnly","kind":"def","line":189,"name":"Char.cmpCaseInsensitiveAsciiOnly","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L189-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.beqCaseInsensitiveAsciiOnly.isSetoid\"><span class=\"name\">Char</span>.<span class=\"name\">beqCaseInsensitiveAsciiOnly</span>.<span class=\"name\">isSetoid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Setoid structure on `Char` using `beqCaseInsensitiveAsciiOnly`\n","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.beqCaseInsensitiveAsciiOnly.isSetoid","kind":"def","line":183,"name":"Char.beqCaseInsensitiveAsciiOnly.isSetoid","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L183-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.beqCaseInsensitiveAsciiOnly.eqv\"><span class=\"name\">Char</span>.<span class=\"name\">beqCaseInsensitiveAsciiOnly</span>.<span class=\"name\">eqv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x1</span>.<a href=\"./Batteries/Data/Char/AsciiCasing.html#Char.beqCaseInsensitiveAsciiOnly\">beqCaseInsensitiveAsciiOnly</a></span> <span class=\"fn\">x2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.beqCaseInsensitiveAsciiOnly.eqv","kind":"theorem","line":178,"name":"Char.beqCaseInsensitiveAsciiOnly.eqv","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L178-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.beqCaseInsensitiveAsciiOnly\"><span class=\"name\">Char</span>.<span class=\"name\">beqCaseInsensitiveAsciiOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Bool-valued comparison of two `Char`s for *ASCII*-case insensitive equality.\n\n```\n#eval beqCaseInsensitiveAsciiOnly 'a' 'A' -- true\n#eval beqCaseInsensitiveAsciiOnly 'a' 'a' -- true\n#eval beqCaseInsensitiveAsciiOnly '$' '$' -- true\n#eval beqCaseInsensitiveAsciiOnly 'a' 'b' -- false\n#eval beqCaseInsensitiveAsciiOnly 'γ' 'Γ' -- false\n#eval beqCaseInsensitiveAsciiOnly 'ä' 'Ä' -- false\n```\n","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.beqCaseInsensitiveAsciiOnly","kind":"def","line":163,"name":"Char.beqCaseInsensitiveAsciiOnly","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L163-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.caseFoldAsciiOnly\"><span class=\"name\">Char</span>.<span class=\"name\">caseFoldAsciiOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Case folding for ASCII characters only.\n\nAlphabetic ASCII characters are mapped to their lowercase form, all other characters are left\nunchanged. This agrees with the Unicode case folding algorithm for ASCII characters.\n\n```\n#eval caseFoldAsciiOnly 'A' == 'a'\n#eval caseFoldAsciiOnly 'a' == 'a'\n#eval caseFoldAsciiOnly 'À' == 'À'\n#eval caseFoldAsciiOnly 'à' == 'à'\n#eval caseFoldAsciiOnly '$' == '$'\n```\n","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.caseFoldAsciiOnly","kind":"def","line":148,"name":"Char.caseFoldAsciiOnly","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L148-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.toUpper_toLower_eq_toUpper\"><span class=\"name\">Char</span>.<span class=\"name\">toUpper_toLower_eq_toUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.toUpper_toLower_eq_toUpper","kind":"theorem","line":136,"name":"Char.toUpper_toLower_eq_toUpper","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L136-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.toUpper_toUpper_eq_toUpper\"><span class=\"name\">Char</span>.<span class=\"name\">toUpper_toUpper_eq_toUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.toUpper_toUpper_eq_toUpper","kind":"theorem","line":133,"name":"Char.toUpper_toUpper_eq_toUpper","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.toLower_toUpper_eq_toLower\"><span class=\"name\">Char</span>.<span class=\"name\">toLower_toUpper_eq_toLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.toLower_toUpper_eq_toLower","kind":"theorem","line":117,"name":"Char.toLower_toUpper_eq_toLower","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L117-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.toLower_toLower_eq_toLower\"><span class=\"name\">Char</span>.<span class=\"name\">toLower_toLower_eq_toLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.toLower_toLower_eq_toLower","kind":"theorem","line":114,"name":"Char.toLower_toLower_eq_toLower","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L114-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.isAlpha_toUpper_eq_isAlpha\"><span class=\"name\">Char</span>.<span class=\"name\">isAlpha_toUpper_eq_isAlpha</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.isAlpha\">isAlpha</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isAlpha\">isAlpha</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.isAlpha_toUpper_eq_isAlpha","kind":"theorem","line":111,"name":"Char.isAlpha_toUpper_eq_isAlpha","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L111-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.isAlpha_toLower_eq_isAlpha\"><span class=\"name\">Char</span>.<span class=\"name\">isAlpha_toLower_eq_isAlpha</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.isAlpha\">isAlpha</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isAlpha\">isAlpha</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.isAlpha_toLower_eq_isAlpha","kind":"theorem","line":108,"name":"Char.isAlpha_toLower_eq_isAlpha","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L108-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.isUpper_toUpper_eq_isAlpha\"><span class=\"name\">Char</span>.<span class=\"name\">isUpper_toUpper_eq_isAlpha</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.isUpper\">isUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isAlpha\">isAlpha</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.isUpper_toUpper_eq_isAlpha","kind":"theorem","line":95,"name":"Char.isUpper_toUpper_eq_isAlpha","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L95-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.isLower_toLower_eq_isAlpha\"><span class=\"name\">Char</span>.<span class=\"name\">isLower_toLower_eq_isAlpha</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.isLower\">isLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isAlpha\">isAlpha</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.isLower_toLower_eq_isAlpha","kind":"theorem","line":83,"name":"Char.isLower_toLower_eq_isAlpha","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L83-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.isLower_toUpper_eq_false\"><span class=\"name\">Char</span>.<span class=\"name\">isLower_toUpper_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.isLower\">isLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.isLower_toUpper_eq_false","kind":"theorem","line":69,"name":"Char.isLower_toUpper_eq_false","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L69-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.isUpper_toLower_eq_false\"><span class=\"name\">Char</span>.<span class=\"name\">isUpper_toLower_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span>.<a href=\"./Init/Data/Char/Basic.html#Char.isUpper\">isUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.isUpper_toLower_eq_false","kind":"theorem","line":55,"name":"Char.isUpper_toLower_eq_false","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L55-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.toUpper_eq_of_isLower\"><span class=\"name\">Char</span>.<span class=\"name\">toUpper_eq_of_isLower</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isLower\">isLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Char.ofNat\">ofNat</a> (<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">32</span>)</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.toUpper_eq_of_isLower","kind":"theorem","line":50,"name":"Char.toUpper_eq_of_isLower","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L50-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.toUpper_eq_of_not_isLower\"><span class=\"name\">Char</span>.<span class=\"name\">toUpper_eq_of_not_isLower</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isLower\">isLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUpper\">toUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.toUpper_eq_of_not_isLower","kind":"theorem","line":43,"name":"Char.toUpper_eq_of_not_isLower","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L43-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.toLower_eq_of_isUpper\"><span class=\"name\">Char</span>.<span class=\"name\">toLower_eq_of_isUpper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isUpper\">isUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Char.ofNat\">ofNat</a> (<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">32</span>)</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.toLower_eq_of_isUpper","kind":"theorem","line":38,"name":"Char.toLower_eq_of_isUpper","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L38-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.toLower_eq_of_not_isUpper\"><span class=\"name\">Char</span>.<span class=\"name\">toLower_eq_of_not_isUpper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isUpper\">isUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toLower\">toLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.toLower_eq_of_not_isUpper","kind":"theorem","line":31,"name":"Char.toLower_eq_of_not_isUpper","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L31-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.not_isUpper_of_isLower\"><span class=\"name\">Char</span>.<span class=\"name\">not_isUpper_of_isLower</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isLower\">isLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isUpper\">isUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.not_isUpper_of_isLower","kind":"theorem","line":26,"name":"Char.not_isUpper_of_isLower","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L26-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Char/AsciiCasing.html#Char.not_isLower_of_isUpper\"><span class=\"name\">Char</span>.<span class=\"name\">not_isLower_of_isUpper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isUpper\">isUpper</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.isLower\">isLower</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/Char/AsciiCasing.html#Char.not_isLower_of_isUpper","kind":"theorem","line":21,"name":"Char.not_isLower_of_isUpper","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/Char/AsciiCasing.lean#L21-L24"}}],"imports":["Init","Batteries.Data.Char.Basic","Batteries.Tactic.Basic"],"instances":[],"name":"Batteries.Data.Char.AsciiCasing"}