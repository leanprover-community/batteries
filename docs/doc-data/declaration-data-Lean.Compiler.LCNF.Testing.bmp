{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertNoFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertNoFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertNoFun","kind":"def","line":248,"name":"Lean.Compiler.LCNF.Testing.assertNoFun","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L248-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertDoesNotContainConstAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Assert that the pass under test produces `Decl`s that do not contain\n`Expr.const constName` in their `Code.let` values anymore.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter","kind":"def","line":236,"name":"Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L236-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertReducesOrPreservesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Assert that the overall size of the `Decl`s in the compilation pipeline gets reduced or stays unchanged\nby `passUnderTestName`.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize","kind":"def","line":229,"name":"Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L229-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertReducesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Assert that the overall size of the `Decl`s in the compilation pipeline gets reduced by `passUnderTestName`.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesSize","kind":"def","line":223,"name":"Lean.Compiler.LCNF.Testing.assertReducesSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L223-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertPreservesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertPreservesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Assert that the overall size of the `Decl`s in the compilation pipeline does not change\nafter `passUnderTestName`.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertPreservesSize","kind":"def","line":216,"name":"Lean.Compiler.LCNF.Testing.assertPreservesSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L216-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assertion</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Compare the overall sizes of the input and output of `passUnderTest` with `assertion`.\nIf `assertion inputSize outputSize` is `false` throw an exception with `msg`.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertSize","kind":"def","line":207,"name":"Lean.Compiler.LCNF.Testing.assertSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L207-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertIsAtFixPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertIsAtFixPoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Insert a pass after `passUnderTestName`, that ensures, that if\n`passUnderTestName` is executed twice in a row, no change in the resulting\nexpression will occur, i.e. the pass is at a fix point.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertIsAtFixPoint","kind":"def","line":186,"name":"Lean.Compiler.LCNF.Testing.assertIsAtFixPoint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L186-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAroundEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\">InOutTest</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Replace all occurrences of a pass with a wrapper one that allows\nthe user to provide an assertion which takes into account both the\ndeclarations that were sent to and produced by the pass under test.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence","kind":"def","line":167,"name":"Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L167-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAround\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAround</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\">InOutTest</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurrence</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Replace a specific occurrence, default is first, of a pass with a wrapper one that allows\nthe user to provide an assertion which takes into account both the\ndeclarations that were sent to and produced by the pass under test.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAround","kind":"def","line":157,"name":"Lean.Compiler.LCNF.Testing.assertAround","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L157-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertForEachDeclAfterEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assertion</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Install an assertion pass right after the each occurrence of a pass. The\nassertion operates on a per declaration basis.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence","kind":"def","line":135,"name":"Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L135-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertForEachDeclAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assertion</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurrence</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Install an assertion pass right after a specific occurrence of a pass,\ndefault is first. The assertion operates on a per declaration basis.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfter","kind":"def","line":125,"name":"Lean.Compiler.LCNF.Testing.assertForEachDeclAfter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L125-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAfterEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\">SimpleTest</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Install an assertion pass right after each occurrence of a pass.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence","kind":"def","line":117,"name":"Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L117-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\">SimpleTest</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurrence</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>","info":{"doc":"Install an assertion pass right after a specific occurrence of a pass,\ndefault is first.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfter","kind":"def","line":108,"name":"Lean.Compiler.LCNF.Testing.assertAfter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L108-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assert\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">property</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">TestM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If `property` is `false` throw an exception with `msg`.\n","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assert","kind":"def","line":89,"name":"Lean.Compiler.LCNF.Testing.assert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L89-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getOutputDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getOutputDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">InOutAssertionM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getOutputDecls","kind":"def","line":86,"name":"Lean.Compiler.LCNF.Testing.getOutputDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L86-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getInputDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getInputDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">InOutAssertionM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getInputDecls","kind":"def","line":83,"name":"Lean.Compiler.LCNF.Testing.getInputDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L83-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\">SimpleAssertionM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getDecls","kind":"def","line":80,"name":"Lean.Compiler.LCNF.Testing.getDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L80-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getPassUnderTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getPassUnderTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">TestM</a> <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getPassUnderTest","kind":"def","line":77,"name":"Lean.Compiler.LCNF.Testing.getPassUnderTest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getTestName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getTestName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">TestM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getTestName","kind":"def","line":74,"name":"Lean.Compiler.LCNF.Testing.getTestName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L74-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">InOutAssertionM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input </span><span class=\"fn\">output</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTest</span> : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM.run","kind":"def","line":71,"name":"Lean.Compiler.LCNF.Testing.InOutAssertionM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\">SimpleAssertionM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTest</span> : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM.run","kind":"def","line":68,"name":"Lean.Compiler.LCNF.Testing.SimpleAssertionM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L68-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">TestM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTest</span> : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM.run","kind":"def","line":65,"name":"Lean.Compiler.LCNF.Testing.TestM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller.install\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstaller</span>.<span class=\"name\">install</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTestName </span><span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.PassInstaller\">PassInstaller</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller.install","kind":"def","line":62,"name":"Lean.Compiler.LCNF.Testing.TestInstaller.install","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L62-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest","kind":"def","line":60,"name":"Lean.Compiler.LCNF.Testing.InOutTest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest","kind":"def","line":59,"name":"Lean.Compiler.LCNF.Testing.SimpleTest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM","kind":"def","line":58,"name":"Lean.Compiler.LCNF.Testing.InOutAssertionM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM","kind":"def","line":57,"name":"Lean.Compiler.LCNF.Testing.SimpleAssertionM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM","kind":"def","line":56,"name":"Lean.Compiler.LCNF.Testing.TestM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstaller</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller","kind":"def","line":54,"name":"Lean.Compiler.LCNF.Testing.TestInstaller","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerM","kind":"def","line":53,"name":"Lean.Compiler.LCNF.Testing.TestInstallerM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.output\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">output</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">InOutAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.output","kind":"def","line":51,"name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.output","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.input\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">input</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">InOutAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.input","kind":"def","line":50,"name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.input","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input </span><span class=\"fn\">output</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">InOutAssertionContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk","kind":"ctor","line":49,"name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext","kind":"structure","line":49,"name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L49-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\">SimpleAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls","kind":"def","line":47,"name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\">SimpleAssertionContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk","kind":"ctor","line":46,"name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext","kind":"structure","line":46,"name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.testName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">testName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">TestContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.testName","kind":"def","line":44,"name":"Lean.Compiler.LCNF.Testing.TestContext.testName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.passUnderTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">passUnderTest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">TestContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.passUnderTest","kind":"def","line":43,"name":"Lean.Compiler.LCNF.Testing.TestContext.passUnderTest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTest</span> : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">TestContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.mk","kind":"ctor","line":42,"name":"Lean.Compiler.LCNF.Testing.TestContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext","kind":"structure","line":42,"name":"Lean.Compiler.LCNF.Testing.TestContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L42-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.testName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">testName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">TestInstallerContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.testName","kind":"def","line":40,"name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.testName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">passUnderTestName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">TestInstallerContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName","kind":"def","line":39,"name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTestName </span><span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">TestInstallerContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.mk","kind":"ctor","line":38,"name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext","kind":"structure","line":38,"name":"Lean.Compiler.LCNF.Testing.TestInstallerContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L38-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">containsConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst","kind":"opaque","line":15,"name":"Lean.Compiler.LCNF.Code.containsConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Testing.lean#L15-L34"}}],"imports":["Lean.Compiler.LCNF.PrettyPrinter"],"instances":[],"name":"Lean.Compiler.LCNF.Testing"}