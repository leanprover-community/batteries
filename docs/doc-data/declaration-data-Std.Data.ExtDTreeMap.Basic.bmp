{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instReprOfTransCmp\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instReprOfTransCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instReprOfTransCmp","kind":"instance","line":906,"name":"Std.ExtDTreeMap.instReprOfTransCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L906-L907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.insertManyIfNewUnit\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Inserts multiple elements into the tree map by iterating over the given collection and calling\n`insertIfNew`. If the same key appears multiple times, the first occurrence takes precedence.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.insertManyIfNewUnit","kind":"def","line":895,"name":"Std.ExtDTreeMap.Const.insertManyIfNewUnit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L895-L902"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Inserts multiple mappings into the tree map by iterating over the given collection and calling\n`insert`. If the same key appears multiple times, the last occurrence takes precedence.\n\nNote: this precedence behavior is true for `TreeMap`, `DTreeMap`, `TreeMap.Raw` and `DTreeMap.Raw`.\nThe `insertMany` function on `TreeSet` and `TreeSet.Raw` behaves differently: it will prefer the first\nappearance.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.insertMany","kind":"def","line":886,"name":"Std.ExtDTreeMap.Const.insertMany","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L886-L893"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.eraseMany\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">eraseMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Erases multiple mappings from the tree map by iterating over the given collection and calling\n`erase`.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.eraseMany","kind":"def","line":873,"name":"Std.ExtDTreeMap.eraseMany","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L873-L880"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Inserts multiple mappings into the tree map by iterating over the given collection and calling\n`insert`. If the same key appears multiple times, the last occurrence takes precedence.\n\nNote: this precedence behavior is true for `TreeMap`, `DTreeMap`, `TreeMap.Raw` and `DTreeMap.Raw`.\nThe `insertMany` function on `TreeSet` and `TreeSet.Raw` behaves differently: it will prefer the first\nappearance.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.insertMany","kind":"def","line":864,"name":"Std.ExtDTreeMap.insertMany","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L864-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.mergeWith\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">mergeWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mergeFn</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Returns a map that contains all mappings of `t₁` and `t₂`. In case that both maps contain the\nsame key `k` with respect to `cmp`, the provided function is used to determine the new value from\nthe respective values in `t₁` and `t₂`.\n\nThis function ensures that `t₁` is used linearly. It also uses the individual values in `t₁`\nlinearly if the merge function uses the second argument (i.e. the first of type `β a`) linearly.\nHence, as long as `t₁` is unshared, the performance characteristics follow the following imperative\ndescription: Iterate over all mappings in `t₂`, inserting them into `t₁` if `t₁` does not contain a\nconflicting mapping yet. If `t₁` does contain a conflicting mapping, use the given merge function to\nmerge the mapping in `t₂` into the mapping in `t₁`. Then return `t₁`.\n\nHence, the runtime of this method scales logarithmically in the size of `t₁` and linearly in the size of\n`t₂` as long as `t₁` is unshared.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.mergeWith","kind":"def","line":857,"name":"Std.ExtDTreeMap.Const.mergeWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L857-L860"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.alter\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Modifies in place the value associated with a given key,\nallowing creating new values and deleting values via an `Option` valued replacement function.\n\nThis function ensures that the value is used linearly.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.alter","kind":"def","line":852,"name":"Std.ExtDTreeMap.Const.alter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L852-L855"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.modify\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Modifies in place the value associated with a given key.\n\nThis function ensures that the value is used linearly.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.modify","kind":"def","line":847,"name":"Std.ExtDTreeMap.Const.modify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L847-L850"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.unitOfArray\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">unitOfArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span> := by exact compare)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Transforms an array of keys into a tree map. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.unitOfArray","kind":"def","line":843,"name":"Std.ExtDTreeMap.Const.unitOfArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L843-L845"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span> := by exact compare)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Transforms a list of keys into a tree map. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.unitOfList","kind":"def","line":839,"name":"Std.ExtDTreeMap.Const.unitOfList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L839-L841"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.ofArray\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span> := by exact compare)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Transforms a list of mappings into a tree map. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.ofArray","kind":"def","line":835,"name":"Std.ExtDTreeMap.Const.ofArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L835-L837"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Transforms the tree map into a list of mappings in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.toArray","kind":"def","line":830,"name":"Std.ExtDTreeMap.Const.toArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L830-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span> := by exact compare)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Transforms a list of mappings into a tree map. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.ofList","kind":"def","line":826,"name":"Std.ExtDTreeMap.Const.ofList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L826-L828"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.toList\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Transforms the tree map into a list of mappings in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.toList","kind":"def","line":821,"name":"Std.ExtDTreeMap.Const.toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L821-L824"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mergeWith\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">mergeWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mergeFn</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Returns a map that contains all mappings of `t₁` and `t₂`. In case that both maps contain the\nsame key `k` with respect to `cmp`, the provided function is used to determine the new value from\nthe respective values in `t₁` and `t₂`.\n\nThis function ensures that `t₁` is used linearly. It also uses the individual values in `t₁`\nlinearly if the merge function uses the second argument (i.e. the first of type `β a`) linearly.\nHence, as long as `t₁` is unshared, the performance characteristics follow the following imperative\ndescription: Iterate over all mappings in `t₂`, inserting them into `t₁` if `t₁` does not contain a\nconflicting mapping yet. If `t₁` does contain a conflicting mapping, use the given merge function to\nmerge the mapping in `t₂` into the mapping in `t₁`. Then return `t₁`.\n\nHence, the runtime of this method scales logarithmically in the size of `t₁` and linearly in the size of\n`t₂` as long as `t₁` is unshared.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mergeWith","kind":"def","line":811,"name":"Std.ExtDTreeMap.mergeWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L811-L815"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.alter\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Modifies in place the value associated with a given key,\nallowing creating new values and deleting values via an `Option` valued replacement function.\n\nThis function ensures that the value is used linearly.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.alter","kind":"def","line":805,"name":"Std.ExtDTreeMap.alter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L805-L809"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.modify\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Modifies in place the value associated with a given key.\n\nThis function ensures that the value is used linearly.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.modify","kind":"def","line":799,"name":"Std.ExtDTreeMap.modify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L799-L803"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.ofArray\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span> := by exact compare)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Transforms an array of mappings into a tree map. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.ofArray","kind":"def","line":794,"name":"Std.ExtDTreeMap.ofArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L794-L797"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Transforms the tree map into a list of mappings in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.toArray","kind":"def","line":790,"name":"Std.ExtDTreeMap.toArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L790-L792"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span> := by exact compare)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Transforms a list of mappings into a tree map. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.ofList","kind":"def","line":785,"name":"Std.ExtDTreeMap.ofList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L785-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.toList\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Transforms the tree map into a list of mappings in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.toList","kind":"def","line":781,"name":"Std.ExtDTreeMap.toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L781-L783"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.valuesArray\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">valuesArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Returns an array of all values present in the tree map in ascending  order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.valuesArray","kind":"def","line":777,"name":"Std.ExtDTreeMap.valuesArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L777-L779"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.values\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Returns a list of all values present in the tree map in ascending  order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.values","kind":"def","line":773,"name":"Std.ExtDTreeMap.values","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L773-L775"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keysArray\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">keysArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns an array of all keys present in the tree map in ascending  order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keysArray","kind":"def","line":769,"name":"Std.ExtDTreeMap.keysArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L769-L771"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keys\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns a list of all keys present in the tree map in ascending  order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keys","kind":"def","line":765,"name":"Std.ExtDTreeMap.keys","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L765-L767"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.all\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check if all elements satisfy the predicate, short-circuiting if a predicate fails. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.all","kind":"def","line":761,"name":"Std.ExtDTreeMap.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L761-L763"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.any\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check if any element satisfies the predicate, short-circuiting if a predicate fails. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.any","kind":"def","line":757,"name":"Std.ExtDTreeMap.any","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L757-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.forInUncurried\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">forInUncurried</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>","info":{"doc":"Support for the `for` loop construct in `do` blocks. Iteration happens in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.forInUncurried","kind":"def","line":751,"name":"Std.ExtDTreeMap.Const.forInUncurried","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L751-L753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.forMUncurried\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">forMUncurried</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Carries out a monadic action on each mapping in the tree map in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.forMUncurried","kind":"def","line":747,"name":"Std.ExtDTreeMap.Const.forMUncurried","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L747-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instForInSigmaOfTransCmpOfLawfulMonad\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instForInSigmaOfTransCmpOfLawfulMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instForInSigmaOfTransCmpOfLawfulMonad","kind":"instance","line":734,"name":"Std.ExtDTreeMap.instForInSigmaOfTransCmpOfLawfulMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L734-L735"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instForMSigmaOfTransCmpOfLawfulMonad\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instForMSigmaOfTransCmpOfLawfulMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM\">ForM</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instForMSigmaOfTransCmpOfLawfulMonad","kind":"instance","line":731,"name":"Std.ExtDTreeMap.instForMSigmaOfTransCmpOfLawfulMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L731-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.forIn\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>","info":{"doc":"Support for the `for` loop construct in `do` blocks. Iteration happens in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.forIn","kind":"def","line":722,"name":"Std.ExtDTreeMap.forIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L722-L724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.forM\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Carries out a monadic action on each mapping in the tree map in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.forM","kind":"def","line":718,"name":"Std.ExtDTreeMap.forM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L718-L720"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.partition\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">partition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Partitions a tree map into two tree maps based on a predicate. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.partition","kind":"def","line":709,"name":"Std.ExtDTreeMap.partition","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L709-L716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.foldr\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">δ</span></div></div>","info":{"doc":"Folds the given function over the mappings in the map in descending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.foldr","kind":"def","line":705,"name":"Std.ExtDTreeMap.foldr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L705-L707"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.foldrM\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">foldrM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>","info":{"doc":"Folds the given monadic function over the mappings in the map in descending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.foldrM","kind":"def","line":701,"name":"Std.ExtDTreeMap.foldrM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L701-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.foldl\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">δ</span></div></div>","info":{"doc":"Folds the given function over the mappings in the map in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.foldl","kind":"def","line":697,"name":"Std.ExtDTreeMap.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L697-L699"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.foldlM\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w₂</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>","info":{"doc":"Folds the given monadic function over the mappings in the map in ascending order. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.foldlM","kind":"def","line":693,"name":"Std.ExtDTreeMap.foldlM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L693-L695"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.map\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Updates the values of the map by applying the given function to all mappings. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.map","kind":"def","line":688,"name":"Std.ExtDTreeMap.map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L688-L691"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.filterMap\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">γ</span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Updates the values of the map by applying the given function to all mappings, keeping\nonly those mappings where the function returns `some` value.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.filterMap","kind":"def","line":683,"name":"Std.ExtDTreeMap.filterMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L683-L686"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.filter\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Removes all mappings of the map for which the given function returns `false`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.filter","kind":"def","line":678,"name":"Std.ExtDTreeMap.filter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L678-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLTD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryLTD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than the given key,\nreturning `fallback` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLTD","kind":"def","line":669,"name":"Std.ExtDTreeMap.Const.getEntryLTD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L669-L672"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLED\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryLED</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than or equal to the\ngiven key, returning `fallback` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLED","kind":"def","line":664,"name":"Std.ExtDTreeMap.Const.getEntryLED","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L664-L667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGTD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryGTD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than the given key,\nreturning `fallback` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGTD","kind":"def","line":659,"name":"Std.ExtDTreeMap.Const.getEntryGTD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L659-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGED\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryGED</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than or equal to the\ngiven key, returning `fallback` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGED","kind":"def","line":654,"name":"Std.ExtDTreeMap.Const.getEntryGED","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L654-L657"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLT!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryLT!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than the given key,\npanicking if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLT!","kind":"def","line":649,"name":"Std.ExtDTreeMap.Const.getEntryLT!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L649-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLE!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryLE!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than or equal to the\ngiven key, panicking if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLE!","kind":"def","line":644,"name":"Std.ExtDTreeMap.Const.getEntryLE!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L644-L647"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGT!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryGT!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than the given key,\npanicking if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGT!","kind":"def","line":639,"name":"Std.ExtDTreeMap.Const.getEntryGT!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L639-L642"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGE!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryGE!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than or equal to the\ngiven key, panicking if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGE!","kind":"def","line":634,"name":"Std.ExtDTreeMap.Const.getEntryGE!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L634-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLT\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the key-value pair with the largest key that is\nless than the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLT","kind":"def","line":628,"name":"Std.ExtDTreeMap.Const.getEntryLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L628-L632"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLE\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the key-value pair with the largest key that is\nless than or equal to the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLE","kind":"def","line":622,"name":"Std.ExtDTreeMap.Const.getEntryLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L622-L626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGT\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the key-value pair with the smallest key that is\ngreater than the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGT","kind":"def","line":616,"name":"Std.ExtDTreeMap.Const.getEntryGT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L616-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGE\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the key-value pair with the smallest key that is\ngreater than or equal to the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGE","kind":"def","line":610,"name":"Std.ExtDTreeMap.Const.getEntryGE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L610-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLT?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryLT?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than the given key,\nreturning `none` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLT?","kind":"def","line":605,"name":"Std.ExtDTreeMap.Const.getEntryLT?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L605-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLE?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryLE?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than or equal to the\ngiven key, returning `none` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryLE?","kind":"def","line":600,"name":"Std.ExtDTreeMap.Const.getEntryLE?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L600-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGT?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryGT?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than the given key,\nreturning `none` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGT?","kind":"def","line":595,"name":"Std.ExtDTreeMap.Const.getEntryGT?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L595-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGE?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getEntryGE?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than or equal to the\ngiven key, returning `none` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getEntryGE?","kind":"def","line":590,"name":"Std.ExtDTreeMap.Const.getEntryGE?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L590-L593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.entryAtIdxD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">entryAtIdxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Returns the key-value pair with the `n`-th smallest key, or `fallback` if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.entryAtIdxD","kind":"def","line":584,"name":"Std.ExtDTreeMap.Const.entryAtIdxD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L584-L588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.entryAtIdx!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">entryAtIdx!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Returns the key-value pair with the `n`-th smallest key, or panics if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.entryAtIdx!","kind":"def","line":579,"name":"Std.ExtDTreeMap.Const.entryAtIdx!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L579-L582"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.entryAtIdx\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">entryAtIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Returns the key-value pair with the `n`-th smallest key. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.entryAtIdx","kind":"def","line":574,"name":"Std.ExtDTreeMap.Const.entryAtIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L574-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.entryAtIdx?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">entryAtIdx?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Returns the key-value pair with the `n`-th smallest key, or `none` if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.entryAtIdx?","kind":"def","line":569,"name":"Std.ExtDTreeMap.Const.entryAtIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L569-L572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.maxEntryD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">maxEntryD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key in the tree map, returning `fallback` if\nthe tree map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.maxEntryD","kind":"def","line":564,"name":"Std.ExtDTreeMap.Const.maxEntryD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L564-L567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.maxEntry!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">maxEntry!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key in the tree map, panicking if the map is\nempty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.maxEntry!","kind":"def","line":559,"name":"Std.ExtDTreeMap.Const.maxEntry!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L559-L562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.maxEntry\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">maxEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Given a proof that the tree map is not empty, retrieves the key-value pair with the largest key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.maxEntry","kind":"def","line":554,"name":"Std.ExtDTreeMap.Const.maxEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L554-L557"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.maxEntry?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">maxEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key in the tree map, returning `none` if the\nmap is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.maxEntry?","kind":"def","line":549,"name":"Std.ExtDTreeMap.Const.maxEntry?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L549-L552"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.minEntryD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">minEntryD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key in the tree map, returning `fallback` if\nthe tree map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.minEntryD","kind":"def","line":544,"name":"Std.ExtDTreeMap.Const.minEntryD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L544-L547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.minEntry!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">minEntry!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key in the tree map, panicking if the map is\nempty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.minEntry!","kind":"def","line":539,"name":"Std.ExtDTreeMap.Const.minEntry!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L539-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.minEntry\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">minEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"Given a proof that the tree map is not empty, retrieves the key-value pair with the smallest key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.minEntry","kind":"def","line":534,"name":"Std.ExtDTreeMap.Const.minEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L534-L537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.minEntry?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">minEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key in the tree map, returning `none` if the\nmap is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.minEntry?","kind":"def","line":529,"name":"Std.ExtDTreeMap.Const.minEntry?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L529-L532"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the mapping for the given key, returning `fallback` if no such mapping is present.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getD","kind":"def","line":524,"name":"Std.ExtDTreeMap.Const.getD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L524-L527"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.get!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"Tries to retrieve the mapping for the given key, panicking if no such mapping is present.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.get!","kind":"def","line":519,"name":"Std.ExtDTreeMap.Const.get!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L519-L522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.get\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"Given a proof that a mapping for the given key is present, retrieves the mapping for the given key.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.get","kind":"def","line":514,"name":"Std.ExtDTreeMap.Const.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L514-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.get?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Tries to retrieve the mapping for the given key, returning `none` if no such mapping is present.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.get?","kind":"def","line":509,"name":"Std.ExtDTreeMap.Const.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L509-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getThenInsertIfNew?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">Const</span>.<span class=\"name\">getThenInsertIfNew?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span>)</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Checks whether a key is present in a map, returning the associated value, and inserts a value for\nthe key if it was not found.\n\nIf the returned value is `some v`, then the returned map is unaltered. If it is `none`, then the\nreturned map has a new value inserted.\n\nEquivalent to (but potentially faster than) calling `get?` followed by `insertIfNew`.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.Const.getThenInsertIfNew?","kind":"def","line":495,"name":"Std.ExtDTreeMap.Const.getThenInsertIfNew?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L495-L507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLTD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyLTD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the largest key that is less than the given key,\nreturning `fallback` if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLTD","kind":"def","line":487,"name":"Std.ExtDTreeMap.getKeyLTD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L487-L489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLED\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyLED</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the largest key that is less than or equal to the\ngiven key, returning `fallback` if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLED","kind":"def","line":483,"name":"Std.ExtDTreeMap.getKeyLED","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L483-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGTD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyGTD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the smallest key that is greater than the given key,\nreturning `fallback` if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGTD","kind":"def","line":479,"name":"Std.ExtDTreeMap.getKeyGTD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L479-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGED\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyGED</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the smallest key that is greater than or equal to the\ngiven key, returning `fallback` if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGED","kind":"def","line":475,"name":"Std.ExtDTreeMap.getKeyGED","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L475-L477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLT!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyLT!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the largest key that is less than the given key,\npanicking if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLT!","kind":"def","line":471,"name":"Std.ExtDTreeMap.getKeyLT!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L471-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLE!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyLE!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the largest key that is less than or equal to the\ngiven key, panicking if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLE!","kind":"def","line":467,"name":"Std.ExtDTreeMap.getKeyLE!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L467-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGT!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyGT!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the smallest key that is greater than the given key,\npanicking if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGT!","kind":"def","line":463,"name":"Std.ExtDTreeMap.getKeyGT!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L463-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGE!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyGE!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the smallest key that is greater than or equal to the\ngiven key, panicking if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGE!","kind":"def","line":459,"name":"Std.ExtDTreeMap.getKeyGE!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L459-L461"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLT\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the largest key that is\nless than the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLT","kind":"def","line":454,"name":"Std.ExtDTreeMap.getKeyLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L454-L457"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLE\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the largest key that is\nless than or equal to the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLE","kind":"def","line":449,"name":"Std.ExtDTreeMap.getKeyLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L449-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGT\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the smallest key that is\ngreater than the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGT","kind":"def","line":444,"name":"Std.ExtDTreeMap.getKeyGT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L444-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGE\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the smallest key that is\ngreater than or equal to the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGE","kind":"def","line":439,"name":"Std.ExtDTreeMap.getKeyGE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L439-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLT?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyLT?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Tries to retrieve the largest key that is less than the given key,\nreturning `none` if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLT?","kind":"def","line":435,"name":"Std.ExtDTreeMap.getKeyLT?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L435-L437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLE?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyLE?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Tries to retrieve the largest key that is less than or equal to the\ngiven key, returning `none` if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyLE?","kind":"def","line":431,"name":"Std.ExtDTreeMap.getKeyLE?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L431-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGT?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyGT?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Tries to retrieve the smallest key that is greater than the given key,\nreturning `none` if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGT?","kind":"def","line":427,"name":"Std.ExtDTreeMap.getKeyGT?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L427-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGE?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyGE?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Tries to retrieve the smallest key that is greater than or equal to the\ngiven key, returning `none` if no such key exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyGE?","kind":"def","line":423,"name":"Std.ExtDTreeMap.getKeyGE?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L423-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLTD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryLTD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than the given key,\nreturning `fallback` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLTD","kind":"def","line":419,"name":"Std.ExtDTreeMap.getEntryLTD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L419-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLED\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryLED</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than or equal to the\ngiven key, returning `fallback` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLED","kind":"def","line":415,"name":"Std.ExtDTreeMap.getEntryLED","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L415-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGTD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryGTD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than the given key,\nreturning `fallback` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGTD","kind":"def","line":411,"name":"Std.ExtDTreeMap.getEntryGTD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L411-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGED\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryGED</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than or equal to the\ngiven key, returning `fallback` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGED","kind":"def","line":407,"name":"Std.ExtDTreeMap.getEntryGED","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L407-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLT!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryLT!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than the given key,\npanicking if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLT!","kind":"def","line":403,"name":"Std.ExtDTreeMap.getEntryLT!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L403-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLE!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryLE!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than or equal to the\ngiven key, panicking if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLE!","kind":"def","line":399,"name":"Std.ExtDTreeMap.getEntryLE!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L399-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGT!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryGT!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than the given key,\npanicking if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGT!","kind":"def","line":395,"name":"Std.ExtDTreeMap.getEntryGT!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L395-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGE!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryGE!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sigma\">Sigma</a> <span class=\"fn\">β</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than or equal to the\ngiven key, panicking if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGE!","kind":"def","line":391,"name":"Std.ExtDTreeMap.getEntryGE!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L391-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLT\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the key-value pair with the largest key that is\nless than the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLT","kind":"def","line":385,"name":"Std.ExtDTreeMap.getEntryLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L385-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLE\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the key-value pair with the largest key that is\nless than or equal to the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLE","kind":"def","line":379,"name":"Std.ExtDTreeMap.getEntryLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L379-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGT\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the key-value pair with the smallest key that is\ngreater than the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGT","kind":"def","line":373,"name":"Std.ExtDTreeMap.getEntryGT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L373-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGE\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Given a proof that such a mapping exists, retrieves the key-value pair with the smallest key that is\ngreater than or equal to the given key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGE","kind":"def","line":367,"name":"Std.ExtDTreeMap.getEntryGE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L367-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLT?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryLT?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than the given key,\nreturning `none` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLT?","kind":"def","line":363,"name":"Std.ExtDTreeMap.getEntryLT?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L363-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLE?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryLE?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key that is less than or equal to the\ngiven key, returning `none` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryLE?","kind":"def","line":359,"name":"Std.ExtDTreeMap.getEntryLE?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L359-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGT?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryGT?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than the given key,\nreturning `none` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGT?","kind":"def","line":355,"name":"Std.ExtDTreeMap.getEntryGT?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L355-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGE?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getEntryGE?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key that is greater than or equal to the\ngiven key, returning `none` if no such pair exists.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getEntryGE?","kind":"def","line":351,"name":"Std.ExtDTreeMap.getEntryGE?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L351-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keyAtIdxD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">keyAtIdxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Returns the `n`-th smallest key, or `fallback` if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keyAtIdxD","kind":"def","line":347,"name":"Std.ExtDTreeMap.keyAtIdxD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L347-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keyAtIdx!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">keyAtIdx!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Returns the `n`-th smallest key, or panics if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keyAtIdx!","kind":"def","line":343,"name":"Std.ExtDTreeMap.keyAtIdx!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L343-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keyAtIdx\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">keyAtIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Returns the `n`-th smallest key. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keyAtIdx","kind":"def","line":338,"name":"Std.ExtDTreeMap.keyAtIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L338-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keyAtIdx?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">keyAtIdx?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns the `n`-th smallest key, or `none` if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.keyAtIdx?","kind":"def","line":334,"name":"Std.ExtDTreeMap.keyAtIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L334-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.entryAtIdxD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">entryAtIdxD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Returns the key-value pair with the `n`-th smallest key, or `fallback` if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.entryAtIdxD","kind":"def","line":329,"name":"Std.ExtDTreeMap.entryAtIdxD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L329-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.entryAtIdx!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">entryAtIdx!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Returns the key-value pair with the `n`-th smallest key, or panics if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.entryAtIdx!","kind":"def","line":325,"name":"Std.ExtDTreeMap.entryAtIdx!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L325-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.entryAtIdx\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">entryAtIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Returns the key-value pair with the `n`-th smallest key. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.entryAtIdx","kind":"def","line":320,"name":"Std.ExtDTreeMap.entryAtIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L320-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.entryAtIdx?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">entryAtIdx?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Returns the key-value pair with the `n`-th smallest key, or `none` if `n` is at least `t.size`. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.entryAtIdx?","kind":"def","line":316,"name":"Std.ExtDTreeMap.entryAtIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L316-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">maxKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the largest key in the tree map, returning `fallback` if the tree map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxKeyD","kind":"def","line":312,"name":"Std.ExtDTreeMap.maxKeyD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L312-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxKey!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">maxKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the largest key in the tree map, panicking if the map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxKey!","kind":"def","line":308,"name":"Std.ExtDTreeMap.maxKey!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L308-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxKey\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">maxKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Given a proof that the tree map is not empty, retrieves the largest key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxKey","kind":"def","line":303,"name":"Std.ExtDTreeMap.maxKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L303-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxKey?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">maxKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Tries to retrieve the largest key in the tree map, returning `none` if the map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxKey?","kind":"def","line":299,"name":"Std.ExtDTreeMap.maxKey?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L299-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">minKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the smallest key in the tree map, returning `fallback` if the tree map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minKeyD","kind":"def","line":295,"name":"Std.ExtDTreeMap.minKeyD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L295-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minKey!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">minKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Tries to retrieve the smallest key in the tree map, panicking if the map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minKey!","kind":"def","line":291,"name":"Std.ExtDTreeMap.minKey!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L291-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minKey\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">minKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Given a proof that the tree map is not empty, retrieves the smallest key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minKey","kind":"def","line":286,"name":"Std.ExtDTreeMap.minKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L286-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minKey?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">minKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Tries to retrieve the smallest key in the tree map, returning `none` if the map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minKey?","kind":"def","line":282,"name":"Std.ExtDTreeMap.minKey?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L282-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxEntryD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">maxEntryD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key in the tree map, returning `fallback` if\nthe tree map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxEntryD","kind":"def","line":278,"name":"Std.ExtDTreeMap.maxEntryD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L278-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxEntry!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">maxEntry!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key in the tree map, panicking if the map is\nempty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxEntry!","kind":"def","line":274,"name":"Std.ExtDTreeMap.maxEntry!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L274-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxEntry\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">maxEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Given a proof that the tree map is not empty, retrieves the key-value pair with the largest key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxEntry","kind":"def","line":269,"name":"Std.ExtDTreeMap.maxEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L269-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxEntry?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">maxEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the largest key in the tree map, returning `none` if the\nmap is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.maxEntry?","kind":"def","line":265,"name":"Std.ExtDTreeMap.maxEntry?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L265-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minEntryD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">minEntryD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key in the tree map, returning `fallback` if\nthe tree map is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minEntryD","kind":"def","line":261,"name":"Std.ExtDTreeMap.minEntryD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L261-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minEntry!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">minEntry!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key in the tree map, panicking if the map is\nempty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minEntry!","kind":"def","line":257,"name":"Std.ExtDTreeMap.minEntry!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L257-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minEntry\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">minEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></div></div>","info":{"doc":"Given a proof that the tree map is not empty, retrieves the key-value pair with the smallest key.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minEntry","kind":"def","line":252,"name":"Std.ExtDTreeMap.minEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L252-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minEntry?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">minEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>","info":{"doc":"Tries to retrieve the key-value pair with the smallest key in the tree map, returning `none` if the\nmap is empty.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.minEntry?","kind":"def","line":248,"name":"Std.ExtDTreeMap.minEntry?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L248-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Checks if a mapping for the given key exists and returns the key if it does, otherwise `fallback`.\nIf a mapping exists the result is guaranteed to be pointer equal to the key in the map.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKeyD","kind":"def","line":244,"name":"Std.ExtDTreeMap.getKeyD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L244-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKey!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Checks if a mapping for the given key exists and returns the key if it does, otherwise panics.\nIf no panic occurs the result is guaranteed to be pointer equal to the key in the map.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKey!","kind":"def","line":240,"name":"Std.ExtDTreeMap.getKey!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L240-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKey\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Retrieves the key from the mapping that matches `a`. Ensures that such a mapping exists by\nrequiring a proof of `a ∈ m`. The result is guaranteed to be pointer equal to the key in the map.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKey","kind":"def","line":235,"name":"Std.ExtDTreeMap.getKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L235-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKey?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Checks if a mapping for the given key exists and returns the key if it does, otherwise `none`.\nThe result in the `some` case is guaranteed to be pointer equal to the key in the map.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getKey?","kind":"def","line":231,"name":"Std.ExtDTreeMap.getKey?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L231-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getD\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"Tries to retrieve the mapping for the given key, returning `fallback` if no such mapping is present.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getD","kind":"def","line":227,"name":"Std.ExtDTreeMap.getD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L227-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.get!\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"Tries to retrieve the mapping for the given key, panicking if no such mapping is present.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.get!","kind":"def","line":223,"name":"Std.ExtDTreeMap.get!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L223-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.get\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"Given a proof that a mapping for the given key is present, retrieves the mapping for the given key.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.get","kind":"def","line":218,"name":"Std.ExtDTreeMap.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L218-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.get?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></div></div>","info":{"doc":"Tries to retrieve the mapping for the given key, returning `none` if no such mapping is present.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.get?","kind":"def","line":214,"name":"Std.ExtDTreeMap.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L214-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.erase\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Removes the mapping for the given key if it exists. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.erase","kind":"def","line":209,"name":"Std.ExtDTreeMap.erase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L209-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.isEmpty_eq_false_iff\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">isEmpty_eq_false_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.isEmpty_eq_false_iff","kind":"theorem","line":205,"name":"Std.ExtDTreeMap.isEmpty_eq_false_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L205-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.isEmpty_iff\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">isEmpty_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.isEmpty_iff","kind":"theorem","line":199,"name":"Std.ExtDTreeMap.isEmpty_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L199-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the tree map contains no mappings. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.isEmpty","kind":"def","line":195,"name":"Std.ExtDTreeMap.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L195-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.size\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Returns the number of mappings present in the map. ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.size","kind":"def","line":191,"name":"Std.ExtDTreeMap.size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L191-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instDecidableMem\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instDecidableMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instDecidableMem","kind":"instance","line":188,"name":"Std.ExtDTreeMap.instDecidableMem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L188-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instMembershipOfTransCmp\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instMembershipOfTransCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instMembershipOfTransCmp","kind":"instance","line":185,"name":"Std.ExtDTreeMap.instMembershipOfTransCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L185-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.contains\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if there is a mapping for the given key `a` or a key that is equal to `a` according\nto the comparator `cmp`. There is also a `Prop`-valued version\nof this: `a ∈ t` is equivalent to `t.contains a = true`.\n\nObserve that this is different behavior than for lists: for lists, `∈` uses `=` and `contains` uses\n`==` for equality checks, while for tree maps, both use the given comparator `cmp`.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.contains","kind":"def","line":181,"name":"Std.ExtDTreeMap.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L181-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getThenInsertIfNew?\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">getThenInsertIfNew?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">LawfulEqCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Checks whether a key is present in a map, returning the associated value, and inserts a value for\nthe key if it was not found.\n\nIf the returned value is `some v`, then the returned map is unaltered. If it is `none`, then the\nreturned map has a new value inserted.\n\nEquivalent to (but potentially faster than) calling `get?` followed by `insertIfNew`.\n\nUses the `LawfulEqCmp` instance to cast the retrieved value to the correct type.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.getThenInsertIfNew?","kind":"def","line":171,"name":"Std.ExtDTreeMap.getThenInsertIfNew?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L171-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.containsThenInsertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">containsThenInsertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Checks whether a key is present in a map and inserts a value for the key if it was not found.\nIf the returned `Bool` is `true`, then the returned map is unaltered. If the `Bool` is `false`,\nthen the returned map has a new value inserted.\n\nEquivalent to (but potentially faster than) calling `contains` followed by `insertIfNew`.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.containsThenInsertIfNew","kind":"def","line":161,"name":"Std.ExtDTreeMap.containsThenInsertIfNew","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L161-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.containsThenInsert\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">containsThenInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Checks whether a key is present in a map and unconditionally inserts a value for the key.\n\nEquivalent to (but potentially faster than) calling `contains` followed by `insert`.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.containsThenInsert","kind":"def","line":152,"name":"Std.ExtDTreeMap.containsThenInsert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L152-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"If there is no mapping for the given key, inserts the given mapping into the map. Otherwise,\nreturns the map unaltered.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.insertIfNew","kind":"def","line":148,"name":"Std.ExtDTreeMap.insertIfNew","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L148-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instLawfulSingletonSigma\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instLawfulSingletonSigma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulSingleton\">LawfulSingleton</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instLawfulSingletonSigma","kind":"instance","line":145,"name":"Std.ExtDTreeMap.instLawfulSingletonSigma","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L145-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instInsertSigmaOfTransCmp\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instInsertSigmaOfTransCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instInsertSigmaOfTransCmp","kind":"instance","line":142,"name":"Std.ExtDTreeMap.instInsertSigmaOfTransCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L142-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instSingletonSigmaOfTransCmp\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instSingletonSigmaOfTransCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton\">Singleton</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instSingletonSigmaOfTransCmp","kind":"instance","line":139,"name":"Std.ExtDTreeMap.instSingletonSigmaOfTransCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L139-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.insert\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransCmp\">TransCmp</a> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Inserts the given mapping into the map. If there is already a mapping for the given key, then both\nkey and value will be replaced.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.insert","kind":"def","line":135,"name":"Std.ExtDTreeMap.insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L135-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.empty_eq_emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">empty_eq_emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.empty\">empty</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.empty_eq_emptyc","kind":"theorem","line":131,"name":"Std.ExtDTreeMap.empty_eq_emptyc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L131-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instInhabited","kind":"instance","line":128,"name":"Std.ExtDTreeMap.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instEmptyCollection\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instEmptyCollection","kind":"instance","line":125,"name":"Std.ExtDTreeMap.instEmptyCollection","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L125-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.empty\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Creates a new empty tree map. It is also possible and recommended to\nuse the empty collection notations `∅` and `{}` to create an empty tree map. `simp` replaces\n`empty` with `∅`.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.empty","kind":"def","line":121,"name":"Std.ExtDTreeMap.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L121-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instCoeTypeForall\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">instCoeTypeForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./foundational_types.html\">(Type</a> v) <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.instCoeTypeForall","kind":"def","line":119,"name":"Std.ExtDTreeMap.instCoeTypeForall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L119-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.inductionOn₂\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">inductionOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>), <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">b</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.inductionOn₂","kind":"theorem","line":113,"name":"Std.ExtDTreeMap.inductionOn₂","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L113-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.inductionOn\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">inductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>), <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.inductionOn","kind":"theorem","line":108,"name":"Std.ExtDTreeMap.inductionOn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L108-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.exact\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.exact","kind":"theorem","line":105,"name":"Std.ExtDTreeMap.exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L105-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.sound\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">sound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap.Equiv\">Equiv</a></span> <span class=\"fn\">t₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">t₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">t₂</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.sound","kind":"theorem","line":102,"name":"Std.ExtDTreeMap.sound","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.pliftOn\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">pliftOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>) → <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">x</span></span> → <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>) (<span class=\"fn\">h₁</span> : <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">a</span></span>) (<span class=\"fn\">h₂</span> : <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\">mk</a> <span class=\"fn\">b</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap.Equiv\">Equiv</a></span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">h₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">h₂</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"Implementation detail of the tree map ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.pliftOn","kind":"def","line":97,"name":"Std.ExtDTreeMap.pliftOn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L97-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.liftOn₂\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">liftOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap.Equiv\">Equiv</a></span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap.Equiv\">Equiv</a></span> <span class=\"fn\">d</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"Implementation detail of the tree map ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.liftOn₂","kind":"def","line":92,"name":"Std.ExtDTreeMap.liftOn₂","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L92-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.lift\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap.Equiv\">Equiv</a></span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"Implementation detail of the tree map ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.lift","kind":"def","line":87,"name":"Std.ExtDTreeMap.lift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L87-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Basic.html#Std.DTreeMap\">DTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Implementation detail of the tree map ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk","kind":"def","line":83,"name":"Std.ExtDTreeMap.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L83-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.inner\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>)</span> <a href=\"./Std/Data/ExtDTreeMap/Basic.html#_auto._@.Std.Data.ExtDTreeMap.Basic.2720708648._hygCtx._hyg.30\">_auto✝</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Quotient\">Quotient</a> <span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Lemmas.html#Std.DTreeMap.isSetoid\">DTreeMap.isSetoid</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span></div></div>","info":{"doc":"Implementation detail of the tree map ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.inner","kind":"def","line":81,"name":"Std.ExtDTreeMap.inner","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk'\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span>.<span class=\"name\">mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>)</span> <a href=\"./Std/Data/ExtDTreeMap/Basic.html#_auto._@.Std.Data.ExtDTreeMap.Basic.2720708648._hygCtx._hyg.30\">_auto✝</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inner</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Quotient\">Quotient</a> <span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Lemmas.html#Std.DTreeMap.isSetoid\">DTreeMap.isSetoid</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\">ExtDTreeMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"Implementation detail of the tree map ","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap.mk'","kind":"ctor","line":79,"name":"Std.ExtDTreeMap.mk'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap\"><span class=\"name\">Std</span>.<span class=\"name\">ExtDTreeMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span> := by exact compare)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"Extensional dependent tree maps.\n\nA tree map stores an assignment of keys to values. It depends on a comparator function that\ndefines an ordering on the keys and provides efficient order-dependent queries, such as retrieval\nof the minimum or maximum.\n\nTo ensure that the operations behave as expected, the comparator function `cmp` should satisfy\ncertain laws that ensure a consistent ordering:\n\n* If `a` is less than (or equal) to `b`, then `b` is greater than (or equal) to `a`\nand vice versa (see the `OrientedCmp` typeclass).\n* If `a` is less than or equal to `b` and `b` is, in turn, less than or equal to `c`, then `a`\nis less than or equal to `c` (see the `TransCmp` typeclass).\n\nKeys for which `cmp a b = Ordering.eq` are considered the same, i.e., there can be only one entry\nwith key either `a` or `b` in a tree map. Looking up either `a` or `b` always yields the same entry,\nif any is present. The `get` operations of the _dependent_ tree map additionally require a\n`LawfulEqCmp` instance to ensure that `cmp a b = .eq` always implies `a = b`, so that their\nrespective value types are equal.\n\nTo avoid expensive copies, users should make sure that the tree map is used linearly.\n\nInternally, the tree maps are represented as size-bounded trees, a type of self-balancing binary\nsearch tree with efficient order statistic lookups.\n\nIn contrast to regular dependent tree maps, `Std.ExtDTreeMap` offers several extensionality lemmas\nand therefore has more lemmas about equality of tree maps. This doesn't affect the amount of\nsupported functions though: `Std.ExtDTreeMap` supports all operations from `Std.DTreeMap`.\n\nIn order to use most functions, a `TransCmp` instance is required. This is necessary to make sure\nthat the functions are congruent, i.e. equivalent tree maps as parameters produce equivalent return\nvalues.\n\nThese tree maps contain a bundled well-formedness invariant, which means that they cannot\nbe used in nested inductive types. For these use cases, `Std.DTreeMap.Raw` and\n`Std.DTreeMap.Raw.WF` unbundle the invariant from the tree map. When in doubt, prefer\n`ExtDTreeMap` over `DTreeMap.Raw`.\n","docLink":"./Std/Data/ExtDTreeMap/Basic.html#Std.ExtDTreeMap","kind":"structure","line":38,"name":"Std.ExtDTreeMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/ExtDTreeMap/Basic.lean#L38-L81"}}],"imports":["Std.Data.DTreeMap.Lemmas"],"instances":[{"className":"EmptyCollection","name":"Std.ExtDTreeMap.instEmptyCollection","typeNames":["Std.ExtDTreeMap"]},{"className":"Inhabited","name":"Std.ExtDTreeMap.instInhabited","typeNames":["Std.ExtDTreeMap"]},{"className":"Singleton","name":"Std.ExtDTreeMap.instSingletonSigmaOfTransCmp","typeNames":["Sigma","Std.ExtDTreeMap"]},{"className":"Insert","name":"Std.ExtDTreeMap.instInsertSigmaOfTransCmp","typeNames":["Sigma","Std.ExtDTreeMap"]},{"className":"LawfulSingleton","name":"Std.ExtDTreeMap.instLawfulSingletonSigma","typeNames":["Sigma","Std.ExtDTreeMap"]},{"className":"Membership","name":"Std.ExtDTreeMap.instMembershipOfTransCmp","typeNames":["Std.ExtDTreeMap"]},{"className":"Decidable","name":"Std.ExtDTreeMap.instDecidableMem","typeNames":["Membership.mem"]},{"className":"ForM","name":"Std.ExtDTreeMap.instForMSigmaOfTransCmpOfLawfulMonad","typeNames":["Std.ExtDTreeMap","Sigma"]},{"className":"ForIn","name":"Std.ExtDTreeMap.instForInSigmaOfTransCmpOfLawfulMonad","typeNames":["Std.ExtDTreeMap","Sigma"]},{"className":"Repr","name":"Std.ExtDTreeMap.instReprOfTransCmp","typeNames":["Std.ExtDTreeMap"]}],"name":"Std.Data.ExtDTreeMap.Basic"}