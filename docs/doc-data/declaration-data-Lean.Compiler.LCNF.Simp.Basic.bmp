{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Basic.html#Lean.Compiler.LCNF.Simp.findFunDecl'?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">findFunDecl'?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span></div></div>","info":{"doc":"Similar to `findFunDecl?`, but follows aliases (i.e., `let _x.i := _x.j`).\nConsider the following example\n```\nfun _f.1 ... := ...\nlet _x.2 := _f.1\n```\n`findFunDecl? _x.2` returns `none`, but `findFunDecl'? _x.2` returns the declaration for `_f.1`.\n","docLink":"./Lean/Compiler/LCNF/Simp/Basic.html#Lean.Compiler.LCNF.Simp.findFunDecl'?","kind":"opaque","line":16,"name":"Lean.Compiler.LCNF.Simp.findFunDecl'?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Basic.lean#L16-L31"}}],"imports":["Lean.Compiler.LCNF.CompilerM"],"instances":[],"name":"Lean.Compiler.LCNF.Simp.Basic"}