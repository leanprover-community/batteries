{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.collect\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">collect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Info\">Info</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.collect","kind":"def","line":173,"name":"Lean.Meta.Try.collect","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L173-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Info\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Info</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Info","kind":"def","line":171,"name":"Lean.Meta.Try.Info","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.main","kind":"def","line":154,"name":"Lean.Meta.Try.Collector.main","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L154-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Cache\">Cache</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visit","kind":"def","line":134,"name":"Lean.Meta.Try.Collector.visit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L134-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Cache","kind":"def","line":132,"name":"Lean.Meta.Try.Collector.Cache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.checkInductive\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">checkInductive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.checkInductive","kind":"def","line":125,"name":"Lean.Meta.Try.Collector.checkInductive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L125-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visitApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">visitApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visitApp","kind":"def","line":119,"name":"Lean.Meta.Try.Collector.visitApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L119-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveLibSearchCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveLibSearchCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveLibSearchCandidates","kind":"def","line":109,"name":"Lean.Meta.Try.Collector.saveLibSearchCandidates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L109-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveFunInd\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveFunInd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveFunInd","kind":"def","line":101,"name":"Lean.Meta.Try.Collector.saveFunInd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L101-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visitConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">visitConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visitConst","kind":"def","line":97,"name":"Lean.Meta.Try.Collector.visitConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L97-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveUnfoldCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveUnfoldCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveUnfoldCandidate","kind":"def","line":92,"name":"Lean.Meta.Try.Collector.saveUnfoldCandidate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L92-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.getEqDefDecl?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">getEqDefDecl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.getEqDefDecl?","kind":"def","line":83,"name":"Lean.Meta.Try.Collector.getEqDefDecl?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L83-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveEqnCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveEqnCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveEqnCandidate","kind":"def","line":76,"name":"Lean.Meta.Try.Collector.saveEqnCandidate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L76-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.isEligible\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">isEligible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.isEligible","kind":"def","line":66,"name":"Lean.Meta.Try.Collector.isEligible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L66-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.inCurrentModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">inCurrentModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `declName` is in the module being compiled. ","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.inCurrentModule","kind":"def","line":62,"name":"Lean.Meta.Try.Collector.inCurrentModule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L62-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveConst","kind":"def","line":59,"name":"Lean.Meta.Try.Collector.saveConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.getConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">getConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.getConfig","kind":"def","line":56,"name":"Lean.Meta.Try.Collector.getConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L56-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M","kind":"def","line":54,"name":"Lean.Meta.Try.Collector.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Context</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context.config","kind":"def","line":52,"name":"Lean.Meta.Try.Collector.Context.config","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context.mk","kind":"ctor","line":51,"name":"Lean.Meta.Try.Collector.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context","kind":"structure","line":51,"name":"Lean.Meta.Try.Collector.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L51-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.libSearchResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">libSearchResults</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheoremKind\">Grind.EMatchTheoremKind</a>)</span></div></div>","info":{"doc":"Relevant declarations by `libSearch` ","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.libSearchResults","kind":"def","line":49,"name":"Lean.Meta.Try.Collector.Result.libSearchResults","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.indCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">indCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a></span></div></div>","info":{"doc":"Induction candidates. ","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.indCandidates","kind":"def","line":47,"name":"Lean.Meta.Try.Collector.Result.indCandidates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.funIndCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">funIndCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/FunIndCollect.html#Lean.Meta.FunInd.SeenCalls\">FunInd.SeenCalls</a></div></div>","info":{"doc":"Function induction candidates ","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.funIndCandidates","kind":"def","line":45,"name":"Lean.Meta.Try.Collector.Result.funIndCandidates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.eqnCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">eqnCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Equation function candidates. ","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.eqnCandidates","kind":"def","line":43,"name":"Lean.Meta.Try.Collector.Result.eqnCandidates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.unfoldCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">unfoldCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Unfolding candidates. ","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.unfoldCandidates","kind":"def","line":41,"name":"Lean.Meta.Try.Collector.Result.unfoldCandidates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.allConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">allConsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"All constant symbols occurring in the gal. ","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.allConsts","kind":"def","line":39,"name":"Lean.Meta.Try.Collector.Result.allConsts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allConsts </span><span class=\"fn\">unfoldCandidates </span><span class=\"fn\">eqnCandidates</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funIndCandidates</span> : <a href=\"./Lean/Meta/Tactic/FunIndCollect.html#Lean.Meta.FunInd.SeenCalls\">FunInd.SeenCalls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indCandidates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">libSearchResults</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheoremKind\">Grind.EMatchTheoremKind</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.mk","kind":"ctor","line":37,"name":"Lean.Meta.Try.Collector.Result.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result","kind":"structure","line":37,"name":"Lean.Meta.Try.Collector.Result","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L37-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.isEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.isEmpty","kind":"def","line":34,"name":"Lean.Meta.Try.Collector.OrdSet.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L34-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.insert","kind":"def","line":27,"name":"Lean.Meta.Try.Collector.OrdSet.insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L27-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.instInhabitedOrdSet.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">instInhabitedOrdSet</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.instInhabitedOrdSet.default","kind":"def","line":25,"name":"Lean.Meta.Try.Collector.instInhabitedOrdSet.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.instInhabitedOrdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">instInhabitedOrdSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.instInhabitedOrdSet","kind":"instance","line":25,"name":"Lean.Meta.Try.Collector.instInhabitedOrdSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.set\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.set","kind":"def","line":24,"name":"Lean.Meta.Try.Collector.OrdSet.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.elems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">elems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.elems","kind":"def","line":23,"name":"Lean.Meta.Try.Collector.OrdSet.elems","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">set</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.mk","kind":"ctor","line":22,"name":"Lean.Meta.Try.Collector.OrdSet.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Set` with insertion order preserved. ","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet","kind":"structure","line":21,"name":"Lean.Meta.Try.Collector.OrdSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L21-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">InductionCandidate</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.InductiveVal\">InductiveVal</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.val","kind":"def","line":19,"name":"Lean.Meta.Try.Collector.InductionCandidate.val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">InductionCandidate</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.fvarId","kind":"def","line":18,"name":"Lean.Meta.Try.Collector.InductionCandidate.fvarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">InductionCandidate</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.mk","kind":"ctor","line":17,"name":"Lean.Meta.Try.Collector.InductionCandidate.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">InductionCandidate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate","kind":"structure","line":17,"name":"Lean.Meta.Try.Collector.InductionCandidate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Try/Collect.lean#L17-L19"}}],"imports":["Init.Try","Lean.Meta.Tactic.LibrarySearch","Lean.Meta.Tactic.Grind.Cases","Lean.Meta.Tactic.Grind.EMatchTheorem","Lean.Meta.Tactic.FunIndCollect","Lean.Meta.Eqns"],"instances":[{"className":"Inhabited","name":"Lean.Meta.Try.Collector.instInhabitedOrdSet","typeNames":["Lean.Meta.Try.Collector.OrdSet"]}],"name":"Lean.Meta.Tactic.Try.Collect"}