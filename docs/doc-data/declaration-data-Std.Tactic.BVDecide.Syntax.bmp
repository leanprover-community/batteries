{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.bvNormalizeProcBuiltinAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">bvNormalizeProcBuiltinAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Auxiliary attribute for builtin `bv_normalize` simprocs.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.bvNormalizeProcBuiltinAttr","kind":"def","line":107,"name":"Lean.Parser.bvNormalizeProcBuiltinAttr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L107-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.bv_normalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">bv_normalize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Theorems tagged with the `bv_normalize` attribute are used during the rewriting step of the\n`bv_decide` tactic.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.bv_normalize","kind":"def","line":101,"name":"Lean.Parser.bv_normalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L101-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvNormalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">bvNormalize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Run the normalization procedure of `bv_decide` only. Sometimes this is enough to solve basic\n`BitVec` goals already.\n\nNote: include `import Std.Tactic.BVDecide`\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvNormalize","kind":"def","line":96,"name":"Lean.Parser.Tactic.bvNormalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L96-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">bvTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Suggest a proof script for a `bv_decide` tactic call. Useful for caching LRAT proofs.\n\nNote: include `import Std.Tactic.BVDecide`\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvTrace","kind":"def","line":93,"name":"Lean.Parser.Tactic.bvTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L93-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">bvDecide</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Close fixed-width `BitVec` and `Bool` goals by obtaining a proof from an external SAT solver and\nverifying it inside Lean. The solvable goals are currently limited to\n- the Lean equivalent of [`QF_BV`](https://smt-lib.org/logics-all.shtml#QF_BV)\n- automatically splitting up `structure`s that contain information about `BitVec` or `Bool`\n```lean\nexample : âˆ€ (a b : BitVec 64), (a &&& b) + (a ^^^ b) = a ||| b := by\n  intros\n  bv_decide\n```\n\nIf `bv_decide` encounters an unknown definition it will be treated like an unconstrained `BitVec`\nvariable. Sometimes this enables solving goals despite not understanding the definition because\nthe precise properties of the definition do not matter in the specific proof.\n\nIf `bv_decide` fails to close a goal it provides a counter-example, containing assignments for all\nterms that were considered as variables.\n\nIn order to avoid calling a SAT solver every time, the proof can be cached with `bv_decide?`.\n\nIf solving your problem relies inherently on using associativity or commutativity, consider enabling\nthe `bv.ac_nf` option.\n\n\nNote: `bv_decide` uses `ofReduceBool` and thus trusts the correctness of the code generator.\n\nNote: include `import Std.Tactic.BVDecide`\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvDecide","kind":"def","line":89,"name":"Lean.Parser.Tactic.bvDecide","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L89-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvCheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">bvCheck</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"This tactic works just like `bv_decide` but skips calling a SAT solver by using a proof that is\nalready stored on disk. It is called with the name of an LRAT file in the same directory as the\ncurrent Lean file:\n```\nbv_check \"proof.lrat\"\n```\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Parser.Tactic.bvCheck","kind":"def","line":79,"name":"Lean.Parser.Tactic.bvCheck","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L79-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.shortCircuit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">shortCircuit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Short-circuit multiplication as a abstraction-style optimization that triggers\nif matching multiplications are not needed to proof a goal.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.shortCircuit","kind":"def","line":70,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.shortCircuit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.maxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The maximum number of subexpressions to visit when performing simplification.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.maxSteps","kind":"def","line":65,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.maxSteps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.graphviz\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">graphviz</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Output the AIG of bv_decide as graphviz into a file called aig.gv in the working directory of the\nLean process.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.graphviz","kind":"def","line":61,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.graphviz","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.enums\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">enums</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Handle equality on enum inductives by turning them into `BitVec`.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.enums","kind":"def","line":56,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.enums","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.fixedInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">fixedInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Enable preprocessing with the `int_toBitVec` simp set to reduce `UIntX`/`IntX` to `BitVec` and\nthus make them accessible for `bv_decide`.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.fixedInt","kind":"def","line":52,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.fixedInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.structures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">structures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Split up local declarations of structures that are collections of other supported types into their\nindividual parts automatically.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.structures","kind":"def","line":47,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.structures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.embeddedConstraintSubst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">embeddedConstraintSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Look at all hypotheses of the form `h : x = true`, if `x` occurs in another hypothesis substitute\nit with `true`.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.embeddedConstraintSubst","kind":"def","line":42,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.embeddedConstraintSubst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.andFlattening\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">andFlattening</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Split hypotheses of the form `h : (x && y) = true` into `h1 : x = true` and `h2 : y = true`.\nThis has synergy potential with embedded constraint substitution.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.andFlattening","kind":"def","line":37,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.andFlattening","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.acNf\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">acNf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Canonicalize with respect to associativity and commutativity.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.acNf","kind":"def","line":32,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.acNf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.binaryProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">binaryProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether to use the binary LRAT proof format.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.binaryProofs","kind":"def","line":28,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.binaryProofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.trimProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">trimProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether to run the trimming algorithm on LRAT proofs. ","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.trimProofs","kind":"def","line":24,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.trimProofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.timeout\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">timeout</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of seconds that the SAT solver is run before aborting. ","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.timeout","kind":"def","line":22,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.timeout","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">timeout</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trimProofs </span><span class=\"fn\">binaryProofs </span><span class=\"fn\">acNf </span><span class=\"fn\">andFlattening </span><span class=\"fn\">embeddedConstraintSubst </span><span class=\"fn\">structures </span><span class=\"fn\">fixedInt </span><span class=\"fn\">enums </span><span class=\"fn\">graphviz</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxSteps</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shortCircuit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\">BVDecideConfig</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.mk","kind":"ctor","line":20,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">BVDecideConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The configuration options for `bv_decide`.\n","docLink":"./Std/Tactic/BVDecide/Syntax.html#Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig","kind":"structure","line":17,"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecideConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Syntax.lean#L17-L70"}}],"imports":["Init.Simproc"],"instances":[],"name":"Std.Tactic.BVDecide.Syntax"}