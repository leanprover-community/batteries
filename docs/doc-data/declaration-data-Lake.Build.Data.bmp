{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.customDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">customDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Macro for declaring new `CustomData`. ","docLink":"./Lake/Build/Data.html#Lake.customDataDecl","kind":"def","line":273,"name":"Lake.customDataDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L273-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.targetDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">targetDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Macro for declaring new `TargetData`. ","docLink":"./Lake/Build/Data.html#Lake.targetDataDecl","kind":"def","line":265,"name":"Lake.targetDataDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L265-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.libraryDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">libraryDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Macro for declaring new `LibraryData`. ","docLink":"./Lake/Build/Data.html#Lake.libraryDataDecl","kind":"def","line":260,"name":"Lake.libraryDataDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L260-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.moduleDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">moduleDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Macro for declaring new `ModuleData`. ","docLink":"./Lake/Build/Data.html#Lake.moduleDataDecl","kind":"def","line":255,"name":"Lake.moduleDataDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L255-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.packageDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">packageDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Macro for declaring new `PackageData`. ","docLink":"./Lake/Build/Data.html#Lake.packageDataDecl","kind":"def","line":250,"name":"Lake.packageDataDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L250-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.facetDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">facetDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Macro for declaring new `FacetData`. ","docLink":"./Lake/Build/Data.html#Lake.facetDataDecl","kind":"def","line":236,"name":"Lake.facetDataDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L236-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.builtinFacetCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">builtinFacetCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Internal macro for declaring new facet within Lake. ","docLink":"./Lake/Build/Data.html#Lake.builtinFacetCommand","kind":"def","line":205,"name":"Lake.builtinFacetCommand","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L205-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">axiom</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType.dynlib\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span>.<span class=\"name\">dynlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`dynlib</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.DataType.dynlib","kind":"axiom","line":202,"name":"Lake.DataType.dynlib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instDataKindDynlib\"><span class=\"name\">Lake</span>.<span class=\"name\">instDataKindDynlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instDataKindDynlib","kind":"instance","line":202,"name":"Lake.instDataKindDynlib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Dynlib\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameDataTypeMkStr1Dynlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`dynlib</span> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Dynlib","kind":"instance","line":202,"name":"Lake.instFamilyDefNameDataTypeMkStr1Dynlib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">axiom</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType.filepath\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span>.<span class=\"name\">filepath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`filepath</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.DataType.filepath","kind":"axiom","line":201,"name":"Lake.DataType.filepath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1FilePath\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameDataTypeMkStr1FilePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`filepath</span> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1FilePath","kind":"instance","line":201,"name":"Lake.instFamilyDefNameDataTypeMkStr1FilePath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instDataKindFilePath\"><span class=\"name\">Lake</span>.<span class=\"name\">instDataKindFilePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instDataKindFilePath","kind":"instance","line":201,"name":"Lake.instDataKindFilePath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instDataKindBool\"><span class=\"name\">Lake</span>.<span class=\"name\">instDataKindBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instDataKindBool","kind":"instance","line":200,"name":"Lake.instDataKindBool","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Bool\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameDataTypeMkStr1Bool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`bool</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Bool","kind":"instance","line":200,"name":"Lake.instFamilyDefNameDataTypeMkStr1Bool","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">axiom</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType.bool\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span>.<span class=\"name\">bool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`bool</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.DataType.bool","kind":"axiom","line":200,"name":"Lake.DataType.bool","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">axiom</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType.unit\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span>.<span class=\"name\">unit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`unit</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.DataType.unit","kind":"axiom","line":199,"name":"Lake.DataType.unit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Unit\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameDataTypeMkStr1Unit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`unit</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Unit","kind":"instance","line":199,"name":"Lake.instFamilyDefNameDataTypeMkStr1Unit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instDataKindUnit\"><span class=\"name\">Lake</span>.<span class=\"name\">instDataKindUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instDataKindUnit","kind":"instance","line":199,"name":"Lake.instDataKindUnit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.dataTypeDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">dataTypeDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Macro for declaring a new `DataType`. ","docLink":"./Lake/Build/Data.html#Lake.dataTypeDecl","kind":"def","line":190,"name":"Lake.dataTypeDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L190-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">FamilyOut</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <a href=\"./Lake/Config/Kinds.html#Lake.Package.facetKind\">Package.facetKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<a href=\"./Lake/Build/Key.html#Lake.BuildKey.package\">BuildKey.package</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind","kind":"instance","line":181,"name":"Lake.instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L181-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">FamilyOut</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <a href=\"./Lake/Config/Kinds.html#Lake.Module.facetKind\">Module.facetKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<a href=\"./Lake/Build/Key.html#Lake.BuildKey.module\">BuildKey.module</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind","kind":"instance","line":177,"name":"Lake.instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L177-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">FamilyOut</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.CustomData\">CustomData</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<a href=\"./Lake/Build/Key.html#Lake.BuildKey.packageTarget\">BuildKey.packageTarget</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData","kind":"instance","line":173,"name":"Lake.instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L173-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataFacetFacetOut\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataFacetFacetOut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Lake/Build/Key.html#Lake.BuildKey\">BuildKey</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Lake/Build/Key.html#Lake.BuildKey.facet\">facet</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.FacetOut\">FacetOut</a> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataFacetFacetOut","kind":"instance","line":171,"name":"Lake.instFamilyDefBuildKeyBuildDataFacetFacetOut","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageTargetCustomData\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataPackageTargetCustomData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<a href=\"./Lake/Build/Key.html#Lake.BuildKey.packageTarget\">BuildKey.packageTarget</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.CustomData\">CustomData</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageTargetCustomData","kind":"instance","line":170,"name":"Lake.instFamilyDefBuildKeyBuildDataPackageTargetCustomData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L170-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.BuildData\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Key.html#Lake.BuildKey\">BuildKey</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"A mapping between a build key and its associated build data in the store.\nIt is a simple type function composed of the separate open type families for\nmodules facets, package facets, Lake target facets, and custom targets.\n","docLink":"./Lake/Build/Data.html#Lake.BuildData","kind":"def","line":159,"name":"Lake.BuildData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L159-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameCustomDataOfProdCustomOutMk\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameCustomDataOfProdCustomOutMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.CustomOut\">CustomOut</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">t</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.CustomData\">CustomData</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameCustomDataOfProdCustomOutMk","kind":"instance","line":152,"name":"Lake.instFamilyDefNameCustomDataOfProdCustomOutMk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L152-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.CustomData\"><span class=\"name\">Lake</span>.<span class=\"name\">CustomData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">package </span><span class=\"fn\">target</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The open type family which maps a custom package target to its output type.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `custom_data`).\n","docLink":"./Lake/Build/Data.html#Lake.CustomData","kind":"def","line":144,"name":"Lake.CustomData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L144-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.CustomOut\"><span class=\"name\">Lake</span>.<span class=\"name\">CustomOut</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The open type family which maps a custom package target\n(package × target name) to its output type.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `custom_data`).\n","docLink":"./Lake/Build/Data.html#Lake.CustomOut","kind":"opaque","line":135,"name":"Lake.CustomOut","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L135-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.LeanLibData\"><span class=\"name\">Lake</span>.<span class=\"name\">LeanLibData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The open type family which maps a Lean library facet's name to its output type.\nFor example, the `FilePath` pf the generated static library for the `static` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `library_data`).\n","docLink":"./Lake/Build/Data.html#Lake.LeanLibData","kind":"def","line":132,"name":"Lake.LeanLibData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L132-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.LibraryData\"><span class=\"name\">Lake</span>.<span class=\"name\">LibraryData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The open type family which maps a Lean library facet's name to its output type.\nFor example, the `FilePath` pf the generated static library for the `static` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `library_data`).\n","docLink":"./Lake/Build/Data.html#Lake.LibraryData","kind":"def","line":123,"name":"Lake.LibraryData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L123-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.PackageData\"><span class=\"name\">Lake</span>.<span class=\"name\">PackageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The open type family which maps a package facet's name to output type.\nFor example, an `Array Package` of direct dependencies for the `deps` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `package_data`).\n","docLink":"./Lake/Build/Data.html#Lake.PackageData","kind":"def","line":114,"name":"Lake.PackageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L114-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.ModuleData\"><span class=\"name\">Lake</span>.<span class=\"name\">ModuleData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The open type family which maps a module facet's name to its output type.\nFor example, a `FilePath` for the module `olean` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `module_data`).\n","docLink":"./Lake/Build/Data.html#Lake.ModuleData","kind":"def","line":105,"name":"Lake.ModuleData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L105-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameFacetOutHAppendOfFacetData\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameFacetOutHAppendOfFacetData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">kind </span><span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.FacetData\">FacetData</a> <span class=\"fn\">kind</span>)</span> <span class=\"fn\">facet</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.FacetOut\">FacetOut</a> (<span class=\"fn\">kind</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">facet</span>) <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameFacetOutHAppendOfFacetData","kind":"instance","line":102,"name":"Lake.instFamilyDefNameFacetOutHAppendOfFacetData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameFacetDataOfFacetOutHAppend\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameFacetDataOfFacetOutHAppend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">kind </span><span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.FacetOut\">FacetOut</a> (<span class=\"fn\">kind</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">facet</span>) <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.FacetData\">FacetData</a> <span class=\"fn\">kind</span>)</span> <span class=\"fn\">facet</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameFacetDataOfFacetOutHAppend","kind":"instance","line":99,"name":"Lake.instFamilyDefNameFacetDataOfFacetOutHAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L99-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.FacetData\"><span class=\"name\">Lake</span>.<span class=\"name\">FacetData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind </span><span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The open type family which maps a Lake facet kind and name to its output type.\nFor example, a `FilePath` for the `module` `olean` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `facet_data`).\n","docLink":"./Lake/Build/Data.html#Lake.FacetData","kind":"def","line":90,"name":"Lake.FacetData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L90-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.FacetOut\"><span class=\"name\">Lake</span>.<span class=\"name\">FacetOut</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The open type family which maps a Lake facet to its output type.\nFor example, a `FilePath` for the `module.olean` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `facet_data`).\n","docLink":"./Lake/Build/Data.html#Lake.FacetOut","kind":"opaque","line":81,"name":"Lake.FacetOut","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L81-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.TargetData\"><span class=\"name\">Lake</span>.<span class=\"name\">TargetData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.TargetData","kind":"def","line":79,"name":"Lake.TargetData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.instToString\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.instToString","kind":"instance","line":75,"name":"Lake.OptDataKind.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.instCoeOutName\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">instCoeOutName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.instCoeOutName","kind":"instance","line":74,"name":"Lake.OptDataKind.instCoeOutName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.instOfDataKind\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">instOfDataKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.instOfDataKind","kind":"instance","line":70,"name":"Lake.OptDataKind.instOfDataKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L70-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.eq_data_type\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">eq_data_type</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\">name</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.eq_data_type","kind":"theorem","line":66,"name":"Lake.OptDataKind.eq_data_type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L66-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous_iff_name_isAnonymous\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">isAnonymous_iff_name_isAnonymous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\">name</a> <span class=\"fn\">α✝</span>)</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous_iff_name_isAnonymous","kind":"theorem","line":63,"name":"Lake.OptDataKind.isAnonymous_iff_name_isAnonymous","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L63-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">isAnonymous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous","kind":"def","line":60,"name":"Lake.OptDataKind.isAnonymous","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.instInhabited\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.instInhabited","kind":"instance","line":58,"name":"Lake.OptDataKind.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.anonymous\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">anonymous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.anonymous","kind":"instance","line":53,"name":"Lake.OptDataKind.anonymous","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L53-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.wf\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\">name</a> <span class=\"fn\">α</span>)</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\">name</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Proof that `α` is the data type described by `name` (if valid). ","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.wf","kind":"theorem","line":49,"name":"Lake.OptDataKind.wf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The name which describes `α` (or `Name.anonymous` if none). ","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.name","kind":"def","line":47,"name":"Lake.OptDataKind.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">name</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">name</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.mk","kind":"ctor","line":45,"name":"Lake.OptDataKind.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Tries to synthesize a `Name` descriptor of a data type.\nOtherwise uses `Name.anonymous` to indicate none was found.\n","docLink":"./Lake/Build/Data.html#Lake.OptDataKind","kind":"class","line":41,"name":"Lake.OptDataKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L41-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataKind.wf\"><span class=\"name\">Lake</span>.<span class=\"name\">DataKind</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.DataKind.name\">name</a> <span class=\"fn\">α</span>)</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.DataKind.name\">name</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Proof that `α` is the data type described by `name`. ","docLink":"./Lake/Build/Data.html#Lake.DataKind.wf","kind":"theorem","line":39,"name":"Lake.DataKind.wf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataKind.name\"><span class=\"name\">Lake</span>.<span class=\"name\">DataKind</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The name which describes `α`. ","docLink":"./Lake/Build/Data.html#Lake.DataKind.name","kind":"def","line":37,"name":"Lake.DataKind.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataKind.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">DataKind</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">name</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">name</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Data.html#Lake.DataKind.mk","kind":"ctor","line":35,"name":"Lake.DataKind.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataKind\"><span class=\"name\">Lake</span>.<span class=\"name\">DataKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Name` descriptor of a data type. ","docLink":"./Lake/Build/Data.html#Lake.DataKind","kind":"class","line":34,"name":"Lake.DataKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L34-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"The open type family which maps a Lake data kind to its associated type.\nFor example, `LeanLib.facetKind` maps to `LeanLib`.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `data_type`).\n","docLink":"./Lake/Build/Data.html#Lake.DataType","kind":"opaque","line":25,"name":"Lake.DataType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Data.lean#L25-L32"}}],"imports":["Lake.Build.Key","Lake.Util.Family","Lake.Config.Dynlib","Lake.Config.Kinds","Lake.Config.Kinds","Lake.Util.Name","Lake.Config.Kinds"],"instances":[{"className":"Lake.OptDataKind","name":"Lake.OptDataKind.anonymous","typeNames":[]},{"className":"Inhabited","name":"Lake.OptDataKind.instInhabited","typeNames":["Lake.OptDataKind"]},{"className":"Lake.OptDataKind","name":"Lake.OptDataKind.instOfDataKind","typeNames":[]},{"className":"CoeOut","name":"Lake.OptDataKind.instCoeOutName","typeNames":["Lake.OptDataKind","Lean.Name"]},{"className":"ToString","name":"Lake.OptDataKind.instToString","typeNames":["Lake.OptDataKind"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefNameFacetDataOfFacetOutHAppend","typeNames":["Lake.FacetData"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefNameFacetOutHAppendOfFacetData","typeNames":["Lake.FacetOut","HAppend.hAppend"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefNameCustomDataOfProdCustomOutMk","typeNames":["Lake.CustomData"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefBuildKeyBuildDataPackageTargetCustomData","typeNames":["Lake.BuildData","Lake.BuildKey.packageTarget","Lake.CustomData"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefBuildKeyBuildDataFacetFacetOut","typeNames":["Lake.BuildData","Lake.BuildKey.facet","Lake.FacetOut"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData","typeNames":["Lake.BuildData","Lake.BuildKey.packageTarget"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind","typeNames":["Lake.BuildData","Lake.BuildKey.module"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind","typeNames":["Lake.BuildData","Lake.BuildKey.package"]},{"className":"Lake.DataKind","name":"Lake.instDataKindUnit","typeNames":["Unit"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefNameDataTypeMkStr1Unit","typeNames":["Lake.DataType","Lean.Name.mkStr1","Unit"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefNameDataTypeMkStr1Bool","typeNames":["Lake.DataType","Lean.Name.mkStr1","Bool"]},{"className":"Lake.DataKind","name":"Lake.instDataKindBool","typeNames":["Bool"]},{"className":"Lake.DataKind","name":"Lake.instDataKindFilePath","typeNames":["System.FilePath"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefNameDataTypeMkStr1FilePath","typeNames":["Lake.DataType","Lean.Name.mkStr1","System.FilePath"]},{"className":"Lake.FamilyDef","name":"Lake.instFamilyDefNameDataTypeMkStr1Dynlib","typeNames":["Lake.DataType","Lean.Name.mkStr1","Lake.Dynlib"]},{"className":"Lake.DataKind","name":"Lake.instDataKindDynlib","typeNames":["Lake.Dynlib"]}],"name":"Lake.Build.Data"}