{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.mkVarJPMaps\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkVarJPMaps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.VarTypeMap\">VarTypeMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.JPParamsMap\">JPParamsMap</a></div></div>","info":{"doc":"Return a pair `(v, j)`, where `v` is a mapping from variable/parameter to type,\nand `j` is a mapping from join point to parameters.\nThis function assumes `d` has normalized indexes (see `normids.lean`). ","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.mkVarJPMaps","kind":"def","line":83,"name":"Lean.IR.mkVarJPMaps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L83-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectMaps</span>.<span class=\"name\">collectDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.Collector\">Collector</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectDecl","kind":"def","line":77,"name":"Lean.IR.CollectMaps.collectDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L77-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectMaps</span>.<span class=\"name\">collectFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.Collector\">Collector</a></span></div></div>","info":{"doc":"`collectFnBody` assumes the variables in ","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectFnBody","kind":"opaque","line":70,"name":"Lean.IR.CollectMaps.collectFnBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L70-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectMaps</span>.<span class=\"name\">collectJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.Collector\">Collector</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectJP","kind":"def","line":67,"name":"Lean.IR.CollectMaps.collectJP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectMaps</span>.<span class=\"name\">collectParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.Collector\">Collector</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectParams","kind":"def","line":65,"name":"Lean.IR.CollectMaps.collectParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectMaps</span>.<span class=\"name\">collectVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.Collector\">Collector</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.collectVar","kind":"def","line":63,"name":"Lean.IR.CollectMaps.collectVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L63-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.Collector\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectMaps</span>.<span class=\"name\">Collector</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectMaps.Collector","kind":"def","line":62,"name":"Lean.IR.CollectMaps.Collector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.JPParamsMap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JPParamsMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.JPParamsMap","kind":"def","line":59,"name":"Lean.IR.JPParamsMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.VarTypeMap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarTypeMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.VarTypeMap","kind":"def","line":58,"name":"Lean.IR.VarTypeMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.collectUsedDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">collectUsedDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.collectUsedDecls","kind":"def","line":55,"name":"Lean.IR.collectUsedDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.collectDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectUsedDecls</span>.<span class=\"name\">collectDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.M\">M</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.collectDecl","kind":"def","line":49,"name":"Lean.IR.CollectUsedDecls.collectDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L49-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.collectInitDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectUsedDecls</span>.<span class=\"name\">collectInitDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.collectInitDecl","kind":"def","line":43,"name":"Lean.IR.CollectUsedDecls.collectInitDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L43-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.collectFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectUsedDecls</span>.<span class=\"name\">collectFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.collectFnBody","kind":"opaque","line":33,"name":"Lean.IR.CollectUsedDecls.collectFnBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L33-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.collect\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectUsedDecls</span>.<span class=\"name\">collect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.collect","kind":"def","line":30,"name":"Lean.IR.CollectUsedDecls.collect","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CollectUsedDecls</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.CollectUsedDecls.M","kind":"def","line":28,"name":"Lean.IR.CollectUsedDecls.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.usesModuleFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">usesModuleFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modulePrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.usesModuleFrom","kind":"def","line":23,"name":"Lean.IR.usesModuleFrom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L23-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.isTailCallTo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">isTailCallTo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return true iff `b` is of the form `let x := g ys; ret x` ","docLink":"./Lean/Compiler/IR/EmitUtil.html#Lean.IR.isTailCallTo","kind":"def","line":17,"name":"Lean.IR.isTailCallTo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/EmitUtil.lean#L17-L21"}}],"imports":["Lean.Compiler.InitAttr","Lean.Compiler.IR.CompilerM"],"instances":[],"name":"Lean.Compiler.IR.EmitUtil"}