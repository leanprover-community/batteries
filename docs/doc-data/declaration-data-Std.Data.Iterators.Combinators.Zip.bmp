{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Zip.html#Std.Iterators.Iter.zip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α₁ </span><span class=\"fn\">β₁ </span><span class=\"fn\">α₂ </span><span class=\"fn\">β₂</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₁</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β₁</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α₂</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β₂</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> (<span class=\"fn\">β₁</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β₂</span>)</span></div></div>","info":{"doc":"Given two iterators `left` and `right`, `left.zip right` is an iterator that yields pairs of\noutputs of `left` and `right`. When one of them terminates,\nthe `zip` iterator will also terminate.\n\n**Marble diagram:**\n\n```text\nleft               --a        ---b        --c\nright                 --x         --y        --⊥\nleft.zip right     -----(a, x)------(b, y)-----⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if either `left` or `right` is finite and the other is productive\n* `Productive` instance: only if `left` and `right` are productive\n\nThere are situations where `left.zip right` is finite (or productive) but none of the instances\nabove applies. For example, if `left` immediately terminates but `right` always skips, then\n`left.zip.right` is finite even though no `Finite` (or even `Productive`) instance is available.\nSuch instances need to be proved manually.\n\n**Performance:**\n\nThis combinator incurs an additional O(1) cost with each step taken by `left` or `right`.\n\nRight now, the compiler does not unbox the internal state, leading to worse performance than\ntheoretically possible.\n","docLink":"./Std/Data/Iterators/Combinators/Zip.html#Std.Iterators.Iter.zip","kind":"def","line":15,"name":"Std.Iterators.Iter.zip","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Zip.lean#L15-L49"}}],"imports":["Std.Data.Iterators.Combinators.Monadic.Zip"],"instances":[],"name":"Std.Data.Iterators.Combinators.Zip"}