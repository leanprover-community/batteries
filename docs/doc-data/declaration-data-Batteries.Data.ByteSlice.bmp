{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#instCoeByteArrayByteSubarray\"><span class=\"name\">instCoeByteArrayByteSubarray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">Batteries.ByteSubarray</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#instCoeByteArrayByteSubarray","kind":"instance","line":191,"name":"instCoeByteArrayByteSubarray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L191-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteArray.toByteSubarray\"><span class=\"name\">ByteArray</span>.<span class=\"name\">toByteSubarray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">array</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">Batteries.ByteSubarray</a></div></div>","info":{"doc":"`O(1)`. Coerce a byte array into a byte slice. ","docLink":"./Batteries/Data/ByteSlice.html#ByteArray.toByteSubarray","kind":"def","line":181,"name":"ByteArray.toByteSubarray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L181-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.instStreamUInt8\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">instStreamUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Std.Stream</a> <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.instStreamUInt8","kind":"instance","line":175,"name":"Batteries.ByteSubarray.instStreamUInt8","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L175-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.instForInUInt8\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">instForInUInt8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.instForInUInt8","kind":"instance","line":172,"name":"Batteries.ByteSubarray.instForInUInt8","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L172-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.forIn.loop\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">forIn</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Inner loop of the `forIn` implementation for `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.forIn.loop","kind":"def","line":164,"name":"Batteries.ByteSubarray.forIn.loop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L164-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.forIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Implementation of `forIn` for a `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.forIn","kind":"def","line":157,"name":"Batteries.ByteSubarray.forIn","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L157-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.foldl\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"Folds a function over a `ByteSubarray` from left to right. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.foldl","kind":"def","line":152,"name":"Batteries.ByteSubarray.foldl","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L152-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.foldlM\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Folds a monadic function over a `ByteSubarray` from left to right. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.foldlM","kind":"def","line":147,"name":"Batteries.ByteSubarray.foldlM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L147-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.popFront\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">popFront</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a></div></div>","info":{"doc":"`O(1)`. Pop the first element of a `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.popFront","kind":"def","line":138,"name":"Batteries.ByteSubarray.popFront","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L138-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.pop\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">pop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a></div></div>","info":{"doc":"`O(1)`. Pop the last element of a `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.pop","kind":"def","line":128,"name":"Batteries.ByteSubarray.pop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L128-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.instGetElemNatUInt8LtSize\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">instGetElemNatUInt8LtSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <span class=\"fn\">fun (<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>) (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.size\">size</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.instGetElemNatUInt8LtSize","kind":"instance","line":125,"name":"Batteries.ByteSubarray.instGetElemNatUInt8LtSize","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L125-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.get\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"`O(1)`. Get the element at index `i` from the start of a `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.get","kind":"def","line":116,"name":"Batteries.ByteSubarray.get","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L116-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.toByteArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">toByteArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"`O(n)`. Extract a `ByteSubarray` to a `ByteArray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.toByteArray","kind":"def","line":111,"name":"Batteries.ByteSubarray.toByteArray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L111-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop_eq_start_add_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">stop_eq_start_add_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop\">stop</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.start\">start</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop_eq_start_add_size","kind":"theorem","line":107,"name":"Batteries.ByteSubarray.stop_eq_start_add_size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L107-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`O(1)`. Test if a `ByteSubarray` is empty. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.isEmpty","kind":"def","line":103,"name":"Batteries.ByteSubarray.isEmpty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L103-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"`O(1)`. Get the size of a `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.size","kind":"def","line":99,"name":"Batteries.ByteSubarray.size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L99-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop_le_array_size\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">stop_le_array_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop\">stop</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.array\">array</a></span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></div></div>","info":{"doc":"Stop index is before end of data array. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop_le_array_size","kind":"theorem","line":79,"name":"Batteries.ByteSubarray.stop_le_array_size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.start_le_stop\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">start_le_stop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.start\">start</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop\">stop</a></span></div></div>","info":{"doc":"Start index is before stop index. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.start_le_stop","kind":"theorem","line":77,"name":"Batteries.ByteSubarray.start_le_stop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">stop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"`O(1)`. Get stop index of a `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.stop","kind":"def","line":75,"name":"Batteries.ByteSubarray.stop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.start\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">start</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"`O(1)`. Get start index of a `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.start","kind":"def","line":73,"name":"Batteries.ByteSubarray.start","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.array\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">array</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"`O(1)`. Get data array of a `ByteSubarray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.array","kind":"def","line":71,"name":"Batteries.ByteSubarray.array","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">array</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start_le_stop</span> : <span class=\"fn\">start</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">stop</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop_le_array_size</span> : <span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\">ByteSubarray</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray.mk","kind":"ctor","line":69,"name":"Batteries.ByteSubarray.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray\"><span class=\"name\">Batteries</span>.<span class=\"name\">ByteSubarray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A subarray of a `ByteArray`. ","docLink":"./Batteries/Data/ByteSlice.html#Batteries.ByteSubarray","kind":"structure","line":67,"name":"Batteries.ByteSubarray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L67-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.instCoeByteArray_batteries\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">instCoeByteArray_batteries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.instCoeByteArray_batteries","kind":"instance","line":60,"name":"ByteSlice.instCoeByteArray_batteries","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.instStreamUInt8_batteries\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">instStreamUInt8_batteries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Std.Stream</a> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.instStreamUInt8_batteries","kind":"instance","line":57,"name":"ByteSlice.instStreamUInt8_batteries","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L57-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.instForInUInt8_batteries\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">instForInUInt8_batteries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.instForInUInt8_batteries","kind":"instance","line":54,"name":"ByteSlice.instForInUInt8_batteries","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L54-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.forIn.loop\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">forIn</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/ByteSlice.html#ByteSlice.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Inner loop of the `forIn` implementation for `ByteSlice`. ","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.forIn.loop","kind":"def","line":46,"name":"ByteSlice.forIn.loop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L46-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.forIn\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Implementation of `forIn` for a `ByteSlice`. ","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.forIn","kind":"def","line":40,"name":"ByteSlice.forIn","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L40-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.foldl\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"Folds a function over a `ByteSubarray` from left to right. ","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.foldl","kind":"def","line":35,"name":"ByteSlice.foldl","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L35-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.foldlM\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Folds a monadic function over a `ByteSubarray` from left to right. ","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.foldlM","kind":"def","line":30,"name":"ByteSlice.foldlM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L30-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.popFront\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">popFront</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></div></div>","info":{"doc":"Returns the subslice obtained by removing the first element. ","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.popFront","kind":"def","line":26,"name":"ByteSlice.popFront","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L26-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.pop\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">pop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a></div></div>","info":{"doc":"Returns the subslice obtained by removing the last element. ","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.pop","kind":"def","line":22,"name":"ByteSlice.pop","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L22-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.stop_eq_start_add_size\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">stop_eq_start_add_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/ByteSlice.html#ByteSlice.stop\">stop</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/ByteSlice.html#ByteSlice.start\">start</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/ByteSlice.html#ByteSlice.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.stop_eq_start_add_size","kind":"theorem","line":19,"name":"ByteSlice.stop_eq_start_add_size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L19-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/ByteSlice.html#ByteSlice.isEmpty\"><span class=\"name\">ByteSlice</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Data/ByteSlice.html#ByteSlice\">ByteSlice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Test whether a byte slice is empty. ","docLink":"./Batteries/Data/ByteSlice.html#ByteSlice.isEmpty","kind":"def","line":16,"name":"ByteSlice.isEmpty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/ByteSlice.lean#L16-L17"}}],"imports":["Init","Std.Data.ByteSlice","Std.Data.ByteSlice"],"instances":[{"className":"ForIn","name":"ByteSlice.instForInUInt8_batteries","typeNames":["ByteSlice","UInt8"]},{"className":"Std.Stream","name":"ByteSlice.instStreamUInt8_batteries","typeNames":["ByteSlice","UInt8"]},{"className":"Coe","name":"ByteSlice.instCoeByteArray_batteries","typeNames":["ByteArray","ByteSlice"]},{"className":"GetElem","name":"Batteries.ByteSubarray.instGetElemNatUInt8LtSize","typeNames":["Batteries.ByteSubarray","Nat","UInt8"]},{"className":"ForIn","name":"Batteries.ByteSubarray.instForInUInt8","typeNames":["Batteries.ByteSubarray","UInt8"]},{"className":"Std.Stream","name":"Batteries.ByteSubarray.instStreamUInt8","typeNames":["Batteries.ByteSubarray","UInt8"]},{"className":"Coe","name":"instCoeByteArrayByteSubarray","typeNames":["ByteArray","Batteries.ByteSubarray"]}],"name":"Batteries.Data.ByteSlice"}