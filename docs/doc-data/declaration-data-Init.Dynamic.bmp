{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#Dynamic.mk\"><span class=\"name\">Dynamic</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">obj</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a></div></div>","info":{"doc":"Stores the provided value in a `Dynamic`.\n\nUse `Dynamic.get? α` to retrieve it.\n","docLink":"./Init/Dynamic.html#Dynamic.mk","kind":"opaque","line":101,"name":"Dynamic.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L101-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#Dynamic.get?\"><span class=\"name\">Dynamic</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">any</span> : <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Retrieves the value stored in the `Dynamic`.\nReturns `some a` if the value has the right type, and `none` otherwise.\n","docLink":"./Init/Dynamic.html#Dynamic.get?","kind":"opaque","line":91,"name":"Dynamic.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L91-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#Dynamic.typeName\"><span class=\"name\">Dynamic</span>.<span class=\"name\">typeName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">any</span> : <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"The name of the type of the value stored in the `Dynamic`.\n","docLink":"./Init/Dynamic.html#Dynamic.typeName","kind":"opaque","line":78,"name":"Dynamic.typeName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L78-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#instNonemptyDynamic\"><span class=\"name\">instNonemptyDynamic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Dynamic.html#instNonemptyDynamic","kind":"instance","line":73,"name":"instNonemptyDynamic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#Dynamic\"><span class=\"name\">Dynamic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A type-tagged union that can store any type with a `TypeName` instance.\n\nThis is roughly equivalent to `(α : Type) × TypeName α × α`, but without the universe bump. Use\n`Dynamic.mk` to inject a value into `Dynamic` from another type, and `Dynamic.get?` to extract a\nvalue from `Dynamic` if it has some expected type.\n","docLink":"./Init/Dynamic.html#Dynamic","kind":"def","line":64,"name":"Dynamic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L64-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#TypeName.typeName\"><span class=\"name\">TypeName</span>.<span class=\"name\">typeName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"Returns a declaration name of the type.\n","docLink":"./Init/Dynamic.html#TypeName.typeName","kind":"opaque","line":55,"name":"TypeName.typeName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L55-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#TypeName.mk\"><span class=\"name\">TypeName</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Creates a `TypeName` instance.\n\nFor safety, it is required that the constant `typeName` is definitionally equal\nto `α`.\n","docLink":"./Init/Dynamic.html#TypeName.mk","kind":"def","line":43,"name":"TypeName.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L43-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#instNonemptyTypeName\"><span class=\"name\">instNonemptyTypeName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Dynamic.html#instNonemptyTypeName","kind":"instance","line":41,"name":"instNonemptyTypeName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#TypeName\"><span class=\"name\">TypeName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Dynamic type name information.\nTypes with an instance of `TypeName` can be stored in an `Dynamic`.\nThe type class contains the declaration name of the type,\nwhich must not have any universe parameters\nand be of type `Sort ..` (i.e., monomorphic).\n\nThe preferred way to declare instances of this type is using the derive\nhandler, which will internally use the unsafe `TypeName.mk` function.\n\nMorally, this is the same as:\n```lean\nclass TypeName (α : Type) where unsafe mk ::\n  typeName : Name\n```\n","docLink":"./Init/Dynamic.html#TypeName","kind":"class","line":21,"name":"TypeName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L21-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Dynamic.html#TypeNameData\"><span class=\"name\">TypeNameData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#NonemptyType\">NonemptyType</a></div></div>","info":{"doc":"","docLink":"./Init/Dynamic.html#TypeNameData","kind":"opaque","line":18,"name":"TypeNameData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Dynamic.lean#L18-L19"}}],"imports":["Init.Core"],"instances":[{"className":"Nonempty","name":"instNonemptyTypeName","typeNames":["TypeName"]},{"className":"Nonempty","name":"instNonemptyDynamic","typeNames":["Dynamic"]}],"name":"Init.Dynamic"}