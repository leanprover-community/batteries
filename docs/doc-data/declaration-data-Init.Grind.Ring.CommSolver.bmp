{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_norm0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_norm0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">0</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_norm0","kind":"theorem","line":1806,"name":"Lean.Grind.CommRing.eq_norm0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1806-L1807"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.lt_norm0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">lt_norm0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">0</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.lt_norm0","kind":"theorem","line":1803,"name":"Lean.Grind.CommRing.lt_norm0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1803-L1804"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.le_norm0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">le_norm0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">0</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.le_norm0","kind":"theorem","line":1800,"name":"Lean.Grind.CommRing.le_norm0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1800-L1801"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_norm_expr_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_norm_expr_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_eq_nc_cert\">norm_eq_nc_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_norm_expr_nc","kind":"theorem","line":1789,"name":"Lean.Grind.CommRing.eq_norm_expr_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1789-L1794"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_eq_nc_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">norm_eq_nc_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_eq_nc_cert","kind":"def","line":1786,"name":"Lean.Grind.CommRing.norm_eq_nc_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1786-L1787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.lt_norm_expr_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">lt_norm_expr_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">Std.LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_cnstr_nc_cert\">norm_cnstr_nc_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.lt_norm_expr_nc","kind":"theorem","line":1779,"name":"Lean.Grind.CommRing.lt_norm_expr_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1779-L1784"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.le_norm_expr_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">le_norm_expr_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_cnstr_nc_cert\">norm_cnstr_nc_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.le_norm_expr_nc","kind":"theorem","line":1772,"name":"Lean.Grind.CommRing.le_norm_expr_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1772-L1777"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_cnstr_nc_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">norm_cnstr_nc_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_cnstr_nc_cert","kind":"def","line":1769,"name":"Lean.Grind.CommRing.norm_cnstr_nc_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1769-L1770"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_norm_expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_norm_expr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_norm_expr","kind":"theorem","line":1762,"name":"Lean.Grind.CommRing.eq_norm_expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1762-L1767"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_eq_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">norm_eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_eq_cert","kind":"def","line":1759,"name":"Lean.Grind.CommRing.norm_eq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1759-L1760"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.lt_norm_expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">lt_norm_expr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">Std.LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_cnstr_cert\">norm_cnstr_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.lt_norm_expr","kind":"theorem","line":1752,"name":"Lean.Grind.CommRing.lt_norm_expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1752-L1757"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.le_norm_expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">le_norm_expr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_cnstr_cert\">norm_cnstr_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs'</span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs'</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.le_norm_expr","kind":"theorem","line":1745,"name":"Lean.Grind.CommRing.le_norm_expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1745-L1750"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_cnstr_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">norm_cnstr_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_cnstr_cert","kind":"def","line":1742,"name":"Lean.Grind.CommRing.norm_cnstr_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1742-L1743"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_int\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">norm_int</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_int_cert\">norm_int_cert</a> <span class=\"fn\">e</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_int","kind":"theorem","line":1735,"name":"Lean.Grind.CommRing.norm_int","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1735-L1736"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_int_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">norm_int_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.norm_int_cert","kind":"def","line":1732,"name":"Lean.Grind.CommRing.norm_int_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1732-L1733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.d_normEq0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">d_normEq0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init </span><span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.d_normEq0_cert\">d_normEq0_cert</a> <span class=\"fn\">c</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.d_normEq0","kind":"theorem","line":1727,"name":"Lean.Grind.CommRing.d_normEq0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1727-L1730"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.d_normEq0_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">d_normEq0_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.d_normEq0_cert","kind":"def","line":1724,"name":"Lean.Grind.CommRing.d_normEq0_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1724-L1725"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_gcd\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_gcd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_gcd_cert\">eq_gcd_cert</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_gcd","kind":"theorem","line":1718,"name":"Lean.Grind.CommRing.eq_gcd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1718-L1722"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_gcd_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_gcd_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_gcd_cert","kind":"def","line":1707,"name":"Lean.Grind.CommRing.eq_gcd_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1707-L1716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.gcd_eq_0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">gcd_eq_0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g </span><span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.gcd_eq_0","kind":"theorem","line":1696,"name":"Lean.Grind.CommRing.gcd_eq_0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1696-L1705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_normEq0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_normEq0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_normEq0_cert\">eq_normEq0_cert</a> <span class=\"fn\">c</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_normEq0","kind":"theorem","line":1691,"name":"Lean.Grind.CommRing.eq_normEq0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1691-L1694"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_normEq0_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_normEq0_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_normEq0_cert","kind":"def","line":1688,"name":"Lean.Grind.CommRing.eq_normEq0_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1688-L1689"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.normEq0_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">normEq0_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">c</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.normEq0\">normEq0</a></span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.normEq0_eq","kind":"theorem","line":1679,"name":"Lean.Grind.CommRing.Poly.normEq0_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1679-L1686"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.diseq0_to_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">diseq0_to_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Field.html#Lean.Grind.Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.diseq0_to_eq","kind":"theorem","line":1664,"name":"Lean.Grind.CommRing.diseq0_to_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1664-L1665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.diseq_to_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">diseq_to_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Field.html#Lean.Grind.Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span> → (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)<a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.diseq_to_eq","kind":"theorem","line":1657,"name":"Lean.Grind.CommRing.diseq_to_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1657-L1662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.one_eq_zero_unsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">one_eq_zero_unsat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Field.html#Lean.Grind.Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.one_eq_zero_unsat_cert\">one_eq_zero_unsat_cert</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.one_eq_zero_unsat","kind":"theorem","line":1652,"name":"Lean.Grind.CommRing.one_eq_zero_unsat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1652-L1655"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.one_eq_zero_unsat_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">one_eq_zero_unsat_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.one_eq_zero_unsat_cert","kind":"def","line":1649,"name":"Lean.Grind.CommRing.one_eq_zero_unsat_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1649-L1650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.inv_split\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">inv_split</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Field.html#Lean.Grind.Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.inv_split","kind":"theorem","line":1644,"name":"Lean.Grind.CommRing.inv_split","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1644-L1647"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.inv_zero_eqC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">inv_zero_eqC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Field.html#Lean.Grind.Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">0</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt\">denoteInt</a> <span class=\"fn\">b</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.inv_zero_eqC","kind":"theorem","line":1636,"name":"Lean.Grind.CommRing.inv_zero_eqC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1636-L1641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.inv_int_eqC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">inv_int_eqC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Field.html#Lean.Grind.Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">0</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt\">denoteInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt\">denoteInt</a> <span class=\"fn\">b</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.inv_int_eqC","kind":"theorem","line":1629,"name":"Lean.Grind.CommRing.inv_int_eqC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1629-L1634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.inv_int_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">inv_int_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Field.html#Lean.Grind.Field\">Field</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">0</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt\">denoteInt</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt\">denoteInt</a> <span class=\"fn\">b</span>)</span><a href=\"./Init/Prelude.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.inv_int_eq","kind":"theorem","line":1622,"name":"Lean.Grind.CommRing.inv_int_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1622-L1627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.not_lt_norm'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">not_lt_norm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">Std.LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">Stepwise.core_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">Poly.denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.not_lt_norm'","kind":"theorem","line":1615,"name":"Lean.Grind.CommRing.not_lt_norm'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1615-L1620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.not_le_norm'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">not_le_norm'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">Stepwise.core_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">Poly.denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.not_le_norm'","kind":"theorem","line":1608,"name":"Lean.Grind.CommRing.not_le_norm'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1608-L1613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.not_lt_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">not_lt_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">Std.LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearOrder\">Std.IsLinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">Stepwise.core_cert</a> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">Poly.denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.not_lt_norm","kind":"theorem","line":1600,"name":"Lean.Grind.CommRing.not_lt_norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1600-L1606"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.not_le_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">not_le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">Std.LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearOrder\">Std.IsLinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">Stepwise.core_cert</a> <span class=\"fn\">rhs</span> <span class=\"fn\">lhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">Poly.denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.not_le_norm","kind":"theorem","line":1592,"name":"Lean.Grind.CommRing.not_le_norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1592-L1598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.lt_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">lt_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">Std.LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">Stepwise.core_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">Poly.denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.lt_norm","kind":"theorem","line":1585,"name":"Lean.Grind.CommRing.lt_norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1585-L1590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.le_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">le_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ordered/Ring.html#Lean.Grind.OrderedRing\">OrderedRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">Stepwise.core_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">Poly.denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.le_norm","kind":"theorem","line":1578,"name":"Lean.Grind.CommRing.le_norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1578-L1583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.diseq_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">diseq_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">Stepwise.core_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">Poly.denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.diseq_norm","kind":"theorem","line":1571,"name":"Lean.Grind.CommRing.diseq_norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1571-L1574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">Stepwise.core_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">Poly.denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_norm","kind":"theorem","line":1567,"name":"Lean.Grind.CommRing.eq_norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1567-L1569"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule_eq_denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteAsIntModule_eq_denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\">denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule_eq_denote","kind":"theorem","line":1562,"name":"Lean.Grind.CommRing.Poly.denoteAsIntModule_eq_denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1562-L1563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule_eq_denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denoteAsIntModule_eq_denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule\">denoteAsIntModule</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule_eq_denote","kind":"theorem","line":1558,"name":"Lean.Grind.CommRing.Mon.denoteAsIntModule_eq_denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1558-L1560"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule_go_eq_denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denoteAsIntModule_go_eq_denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule.go\">denoteAsIntModule.go</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">acc</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule_go_eq_denote","kind":"theorem","line":1554,"name":"Lean.Grind.CommRing.Mon.denoteAsIntModule_go_eq_denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1554-L1556"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteAsIntModule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteAsIntModule","kind":"def","line":1549,"name":"Lean.Grind.CommRing.Poly.denoteAsIntModule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1549-L1552"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denoteAsIntModule</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule.go","kind":"def","line":1544,"name":"Lean.Grind.CommRing.Mon.denoteAsIntModule.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1544-L1547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denoteAsIntModule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denoteAsIntModule","kind":"def","line":1539,"name":"Lean.Grind.CommRing.Mon.denoteAsIntModule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1539-L1547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keqC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">imp_keqC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keq_certC\">imp_keq_certC</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">k</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keqC","kind":"theorem","line":1528,"name":"Lean.Grind.CommRing.Stepwise.imp_keqC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1528-L1533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keq_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">imp_keq_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keq_certC","kind":"def","line":1525,"name":"Lean.Grind.CommRing.Stepwise.imp_keq_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1525-L1526"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eqC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">imp_1eqC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eq_certC\">imp_1eq_certC</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eqC","kind":"theorem","line":1520,"name":"Lean.Grind.CommRing.Stepwise.imp_1eqC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1520-L1523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eq_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">imp_1eq_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eq_certC","kind":"def","line":1517,"name":"Lean.Grind.CommRing.Stepwise.imp_1eq_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1517-L1518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepkC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_stepkC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init </span><span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepk_certC\">d_stepk_certC</a> <span class=\"fn\">k₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">m₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">↑(<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k</span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepkC","kind":"theorem","line":1511,"name":"Lean.Grind.CommRing.Stepwise.d_stepkC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1511-L1515"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepk_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_stepk_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepk_certC","kind":"def","line":1508,"name":"Lean.Grind.CommRing.Stepwise.d_stepk_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1508-L1509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1C\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_step1C</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init </span><span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1_certC\">d_step1_certC</a> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">m₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1C","kind":"theorem","line":1503,"name":"Lean.Grind.CommRing.Stepwise.d_step1C","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1503-L1506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_step1_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1_certC","kind":"def","line":1500,"name":"Lean.Grind.CommRing.Stepwise.d_step1_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1500-L1501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eqC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">unsat_eqC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eq_certC\">unsat_eq_certC</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eqC","kind":"def","line":1493,"name":"Lean.Grind.CommRing.Stepwise.unsat_eqC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1493-L1498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eq_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">unsat_eq_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eq_certC","kind":"def","line":1490,"name":"Lean.Grind.CommRing.Stepwise.unsat_eq_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1490-L1491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simpC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">simpC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simp_certC\">simp_certC</a> <span class=\"fn\">k₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">m₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simpC","kind":"theorem","line":1485,"name":"Lean.Grind.CommRing.Stepwise.simpC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1485-L1488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simp_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">simp_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simp_certC","kind":"def","line":1482,"name":"Lean.Grind.CommRing.Stepwise.simp_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1482-L1483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.divC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">divC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.div_certC\">div_certC</a> <span class=\"fn\">p₁</span> <span class=\"fn\">k</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.divC","kind":"def","line":1476,"name":"Lean.Grind.CommRing.Stepwise.divC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1476-L1480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.div_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">div_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.div_certC","kind":"def","line":1473,"name":"Lean.Grind.CommRing.Stepwise.div_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1473-L1474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mulC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mulC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mul_certC\">mul_certC</a> <span class=\"fn\">p₁</span> <span class=\"fn\">k</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mulC","kind":"def","line":1468,"name":"Lean.Grind.CommRing.Stepwise.mulC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1468-L1471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mul_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mul_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mul_certC","kind":"def","line":1465,"name":"Lean.Grind.CommRing.Stepwise.mul_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1465-L1466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superposeC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">superposeC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superpose_certC\">superpose_certC</a> <span class=\"fn\">k₁</span> <span class=\"fn\">m₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">m₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superposeC","kind":"theorem","line":1460,"name":"Lean.Grind.CommRing.Stepwise.superposeC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1460-L1463"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superpose_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">superpose_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superpose_certC","kind":"def","line":1457,"name":"Lean.Grind.CommRing.Stepwise.superpose_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1457-L1458"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.coreC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">coreC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_certC\">core_certC</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.coreC","kind":"theorem","line":1451,"name":"Lean.Grind.CommRing.Stepwise.coreC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1451-L1455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_certC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">core_certC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_certC","kind":"def","line":1448,"name":"Lean.Grind.CommRing.Stepwise.core_certC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1448-L1449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">imp_keq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keq_cert\">imp_keq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">k</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keq","kind":"theorem","line":1441,"name":"Lean.Grind.CommRing.Stepwise.imp_keq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1441-L1446"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keq_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">imp_keq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_keq_cert","kind":"def","line":1438,"name":"Lean.Grind.CommRing.Stepwise.imp_keq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1438-L1439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">imp_1eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eq_cert\">imp_1eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eq","kind":"theorem","line":1433,"name":"Lean.Grind.CommRing.Stepwise.imp_1eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1433-L1436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eq_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">imp_1eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.imp_1eq_cert","kind":"def","line":1430,"name":"Lean.Grind.CommRing.Stepwise.imp_1eq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1430-L1431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_stepk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init </span><span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepk_cert\">d_stepk_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">m₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">↑(<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k</span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepk","kind":"theorem","line":1424,"name":"Lean.Grind.CommRing.Stepwise.d_stepk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1424-L1428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepk_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_stepk_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_stepk_cert","kind":"def","line":1421,"name":"Lean.Grind.CommRing.Stepwise.d_stepk_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1421-L1422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_step1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init </span><span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1_cert\">d_step1_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">m₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1","kind":"theorem","line":1416,"name":"Lean.Grind.CommRing.Stepwise.d_step1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1416-L1419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_step1_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_step1_cert","kind":"def","line":1413,"name":"Lean.Grind.CommRing.Stepwise.d_step1_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1413-L1414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_init\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">d_init</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.d_init","kind":"theorem","line":1410,"name":"Lean.Grind.CommRing.Stepwise.d_init","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1410-L1411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">unsat_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">0</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eq_cert\">unsat_eq_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eq","kind":"def","line":1403,"name":"Lean.Grind.CommRing.Stepwise.unsat_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1403-L1408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eq_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">unsat_eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.unsat_eq_cert","kind":"def","line":1400,"name":"Lean.Grind.CommRing.Stepwise.unsat_eq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1400-L1401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.div\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NoNatZeroDivisors\">NoNatZeroDivisors</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.div_cert\">div_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.div","kind":"def","line":1394,"name":"Lean.Grind.CommRing.Stepwise.div","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1394-L1398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.div_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">div_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.div_cert","kind":"def","line":1391,"name":"Lean.Grind.CommRing.Stepwise.div_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1391-L1392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mul_cert\">mul_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mul","kind":"def","line":1386,"name":"Lean.Grind.CommRing.Stepwise.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1386-L1389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mul_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mul_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.mul_cert","kind":"def","line":1383,"name":"Lean.Grind.CommRing.Stepwise.mul_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1383-L1384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">simp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simp_cert\">simp_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">m₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simp","kind":"theorem","line":1378,"name":"Lean.Grind.CommRing.Stepwise.simp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1378-L1381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simp_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">simp_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.simp_cert","kind":"def","line":1375,"name":"Lean.Grind.CommRing.Stepwise.simp_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1375-L1376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superpose\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">superpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superpose_cert\">superpose_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">m₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">m₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superpose","kind":"theorem","line":1370,"name":"Lean.Grind.CommRing.Stepwise.superpose","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1370-L1373"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superpose_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">superpose_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.superpose_cert","kind":"def","line":1367,"name":"Lean.Grind.CommRing.Stepwise.superpose_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1367-L1368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">core</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\">core_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core","kind":"theorem","line":1361,"name":"Lean.Grind.CommRing.Stepwise.core","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1361-L1365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">core_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Stepwise.core_cert","kind":"def","line":1358,"name":"Lean.Grind.CommRing.Stepwise.core_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1358-L1359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.eq_of_toPolyC_nc_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eq_of_toPolyC_nc_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC_nc\">toPolyC_nc</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC_nc\">toPolyC_nc</a></span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.eq_of_toPolyC_nc_eq","kind":"theorem","line":1348,"name":"Lean.Grind.CommRing.Expr.eq_of_toPolyC_nc_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1348-L1352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.eq_of_toPolyC_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eq_of_toPolyC_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC\">toPolyC</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC\">toPolyC</a></span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.eq_of_toPolyC_eq","kind":"theorem","line":1342,"name":"Lean.Grind.CommRing.Expr.eq_of_toPolyC_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1342-L1346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote_toPolyC_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toPolyC_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC_nc\">toPolyC_nc</a></span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote_toPolyC_nc","kind":"theorem","line":1327,"name":"Lean.Grind.CommRing.Expr.denote_toPolyC_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1327-L1340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote_toPolyC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toPolyC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC\">toPolyC</a></span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote_toPolyC","kind":"theorem","line":1312,"name":"Lean.Grind.CommRing.Expr.denote_toPolyC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1312-L1325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_powC_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_powC_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.powC_nc\">powC_nc</a></span> <span class=\"fn\">k</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_powC_nc","kind":"theorem","line":1305,"name":"Lean.Grind.CommRing.Poly.denote_powC_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1305-L1310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_powC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_powC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.powC\">powC</a></span> <span class=\"fn\">k</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_powC","kind":"theorem","line":1298,"name":"Lean.Grind.CommRing.Poly.denote_powC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1298-L1303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulC_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulC_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC_nc\">mulC_nc</a></span> <span class=\"fn\">p₂</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulC_nc","kind":"theorem","line":1294,"name":"Lean.Grind.CommRing.Poly.denote_mulC_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1294-L1296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulC_nc_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulC_nc_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC_nc.go\">mulC_nc.go</a> <span class=\"fn\">p₂</span> <span class=\"fn\">c</span> <span class=\"fn\">p₁</span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulC_nc_go","kind":"theorem","line":1289,"name":"Lean.Grind.CommRing.Poly.denote_mulC_nc_go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1289-L1292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC\">mulC</a></span> <span class=\"fn\">p₂</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulC","kind":"theorem","line":1285,"name":"Lean.Grind.CommRing.Poly.denote_mulC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1285-L1287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulC_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulC_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC.go\">mulC.go</a> <span class=\"fn\">p₂</span> <span class=\"fn\">c</span> <span class=\"fn\">p₁</span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulC_go","kind":"theorem","line":1280,"name":"Lean.Grind.CommRing.Poly.denote_mulC_go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1280-L1283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_combineC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combineC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combineC\">combineC</a></span> <span class=\"fn\">p₂</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_combineC","kind":"theorem","line":1265,"name":"Lean.Grind.CommRing.Poly.denote_combineC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1265-L1278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMonC_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulMonC_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC_nc\">mulMonC_nc</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMonC_nc","kind":"theorem","line":1254,"name":"Lean.Grind.CommRing.Poly.denote_mulMonC_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1254-L1263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMonC_nc_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulMonC_nc_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC_nc.go\">mulMonC_nc.go</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span> <span class=\"fn\">p</span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMonC_nc_go","kind":"theorem","line":1243,"name":"Lean.Grind.CommRing.Poly.denote_mulMonC_nc_go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1243-L1252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMonC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulMonC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC\">mulMonC</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMonC","kind":"theorem","line":1215,"name":"Lean.Grind.CommRing.Poly.denote_mulMonC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1215-L1241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulConstC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulConstC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConstC\">mulConstC</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulConstC","kind":"theorem","line":1194,"name":"Lean.Grind.CommRing.Poly.denote_mulConstC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1194-L1213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_insertC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_insertC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insertC\">insertC</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_insertC","kind":"theorem","line":1177,"name":"Lean.Grind.CommRing.Poly.denote_insertC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1177-L1192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_addConstC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_addConstC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <span class=\"fn\">α</span> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConstC\">addConstC</a></span> <span class=\"fn\">k</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_addConstC","kind":"theorem","line":1172,"name":"Lean.Grind.CommRing.Poly.denote_addConstC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1172-L1175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.eq_of_toPoly_nc_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eq_of_toPoly_nc_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_nc\">toPoly_nc</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_nc\">toPoly_nc</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.eq_of_toPoly_nc_eq","kind":"theorem","line":1163,"name":"Lean.Grind.CommRing.Expr.eq_of_toPoly_nc_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1163-L1166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.eq_of_toPoly_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eq_of_toPoly_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly\">toPoly</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly\">toPoly</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.eq_of_toPoly_eq","kind":"theorem","line":1158,"name":"Lean.Grind.CommRing.Expr.eq_of_toPoly_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1158-L1161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote_toPoly_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toPoly_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_nc\">toPoly_nc</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote_toPoly_nc","kind":"theorem","line":1147,"name":"Lean.Grind.CommRing.Expr.denote_toPoly_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1147-L1156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote_toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toPoly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly\">toPoly</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote_toPoly","kind":"theorem","line":1136,"name":"Lean.Grind.CommRing.Expr.denote_toPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1136-L1145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_pow_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_pow_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.pow_nc\">pow_nc</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_pow_nc","kind":"theorem","line":1129,"name":"Lean.Grind.CommRing.Poly.denote_pow_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1129-L1134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.pow\">pow</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_pow","kind":"theorem","line":1122,"name":"Lean.Grind.CommRing.Poly.denote_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1122-L1127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mul_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mul_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul_nc\">mul_nc</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mul_nc","kind":"theorem","line":1118,"name":"Lean.Grind.CommRing.Poly.denote_mul_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1118-L1120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mul_nc_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mul_nc_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul_nc.go\">mul_nc.go</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p₁</span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mul_nc_go","kind":"theorem","line":1113,"name":"Lean.Grind.CommRing.Poly.denote_mul_nc_go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1113-L1116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul\">mul</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mul","kind":"theorem","line":1109,"name":"Lean.Grind.CommRing.Poly.denote_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1109-L1111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mul_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mul_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul.go\">mul.go</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p₁</span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mul_go","kind":"theorem","line":1104,"name":"Lean.Grind.CommRing.Poly.denote_mul_go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1104-L1107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_combine","kind":"theorem","line":1092,"name":"Lean.Grind.CommRing.Poly.denote_combine","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1092-L1102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMon_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulMon_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_nc\">mulMon_nc</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMon_nc","kind":"theorem","line":1081,"name":"Lean.Grind.CommRing.Poly.denote_mulMon_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1081-L1090"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMon_nc_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulMon_nc_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_nc.go\">mulMon_nc.go</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMon_nc_go","kind":"theorem","line":1071,"name":"Lean.Grind.CommRing.Poly.denote_mulMon_nc_go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1071-L1079"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulMon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon\">mulMon</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulMon","kind":"theorem","line":1057,"name":"Lean.Grind.CommRing.Poly.denote_mulMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1057-L1069"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mulConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst\">mulConst</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_mulConst","kind":"theorem","line":1047,"name":"Lean.Grind.CommRing.Poly.denote_mulConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1047-L1055"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.concat\">concat</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_concat","kind":"theorem","line":1041,"name":"Lean.Grind.CommRing.Poly.denote_concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1041-L1045"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_insert","kind":"theorem","line":1024,"name":"Lean.Grind.CommRing.Poly.denote_insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1024-L1039"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_addConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_addConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_addConst","kind":"theorem","line":1016,"name":"Lean.Grind.CommRing.Poly.denote_addConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1016-L1022"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_ofVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_ofVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.ofVar\">ofVar</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_ofVar","kind":"theorem","line":1012,"name":"Lean.Grind.CommRing.Poly.denote_ofVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1012-L1014"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_ofMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_ofMon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.ofMon\">ofMon</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote_ofMon","kind":"theorem","line":1008,"name":"Lean.Grind.CommRing.Poly.denote_ofMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1008-L1010"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'_eq_denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_eq_denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'\">denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'_eq_denote","kind":"theorem","line":1001,"name":"Lean.Grind.CommRing.Poly.denote'_eq_denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L1001-L1006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteTerm_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteTerm_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'.denoteTerm\">denote'.denoteTerm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">k</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denoteTerm_eq","kind":"theorem","line":998,"name":"Lean.Grind.CommRing.Poly.denoteTerm_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L998-L999"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.eq_of_grevlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">eq_of_grevlex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex\">grevlex</a></span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.eq_of_grevlex","kind":"theorem","line":995,"name":"Lean.Grind.CommRing.Mon.eq_of_grevlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L995-L996"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.eq_of_revlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">eq_of_revlex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex\">revlex</a></span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.eq_of_revlex","kind":"theorem","line":992,"name":"Lean.Grind.CommRing.Mon.eq_of_revlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L992-L993"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.eq_of_revlexFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">eq_of_revlexFuel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlexFuel\">revlexFuel</a> <span class=\"fn\">fuel</span> <span class=\"fn\">m₁</span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.eq_of_revlexFuel","kind":"theorem","line":982,"name":"Lean.Grind.CommRing.Mon.eq_of_revlexFuel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L982-L990"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.eq_of_revlexWF\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">eq_of_revlexWF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlexWF\">revlexWF</a></span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.eq_of_revlexWF","kind":"theorem","line":975,"name":"Lean.Grind.CommRing.Mon.eq_of_revlexWF","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L975-L980"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.eq_of_revlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">eq_of_revlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.revlex\">revlex</a></span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.eq_of_revlex","kind":"theorem","line":961,"name":"Lean.Grind.CommRing.Power.eq_of_revlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L961-L964"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_of_powerRevlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">eq_of_powerRevlex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex\">powerRevlex</a> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.eq_of_powerRevlex","kind":"theorem","line":957,"name":"Lean.Grind.CommRing.eq_of_powerRevlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L957-L959"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.eq_of_revlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Var</span>.<span class=\"name\">eq_of_revlex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.revlex\">revlex</a></span> <span class=\"fn\">x₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.eq_of_revlex","kind":"theorem","line":953,"name":"Lean.Grind.CommRing.Var.eq_of_revlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L953-L955"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_mul_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote_mul_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mul_nc\">mul_nc</a></span> <span class=\"fn\">m₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_mul_nc","kind":"theorem","line":949,"name":"Lean.Grind.CommRing.Mon.denote_mul_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L949-L951"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mul\">mul</a></span> <span class=\"fn\">m₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_mul","kind":"theorem","line":938,"name":"Lean.Grind.CommRing.Mon.denote_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L938-L947"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_mulPow_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote_mulPow_nc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mulPow_nc\">mulPow_nc</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.denote\">Power.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_mulPow_nc","kind":"theorem","line":931,"name":"Lean.Grind.CommRing.Mon.denote_mulPow_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L931-L936"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_mulPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote_mulPow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mulPow\">mulPow</a> <span class=\"fn\">p</span> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.denote\">Power.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_mulPow","kind":"theorem","line":924,"name":"Lean.Grind.CommRing.Mon.denote_mulPow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L924-L929"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote_concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.concat\">concat</a></span> <span class=\"fn\">m₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_concat","kind":"theorem","line":909,"name":"Lean.Grind.CommRing.Mon.denote_concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L909-L912"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_ofVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote_ofVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.ofVar\">ofVar</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote_ofVar","kind":"theorem","line":905,"name":"Lean.Grind.CommRing.Mon.denote_ofVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L905-L907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote'_eq_denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote'_eq_denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote'\">denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote'_eq_denote","kind":"theorem","line":897,"name":"Lean.Grind.CommRing.Mon.denote'_eq_denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L897-L903"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.denote_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">denote_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.x\">x</a></span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.k\">k</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.denote_eq","kind":"theorem","line":893,"name":"Lean.Grind.CommRing.Power.denote_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L893-L895"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">denoteInt_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt\">denoteInt</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt_eq","kind":"theorem","line":888,"name":"Lean.Grind.CommRing.denoteInt_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L888-L891"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC_nc.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPolyC_nc</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC_nc.go","kind":"def","line":862,"name":"Lean.Grind.CommRing.Expr.toPolyC_nc.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L862-L877"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPolyC_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC_nc","kind":"def","line":859,"name":"Lean.Grind.CommRing.Expr.toPolyC_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L859-L877"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPolyC</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC.go","kind":"def","line":842,"name":"Lean.Grind.CommRing.Expr.toPolyC.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L842-L857"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPolyC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPolyC","kind":"def","line":839,"name":"Lean.Grind.CommRing.Expr.toPolyC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L839-L857"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.powC_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">powC_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.powC_nc","kind":"def","line":833,"name":"Lean.Grind.CommRing.Poly.powC_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L833-L837"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.powC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">powC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.powC","kind":"def","line":827,"name":"Lean.Grind.CommRing.Poly.powC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L827-L831"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC_nc.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulC_nc</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC_nc.go","kind":"def","line":822,"name":"Lean.Grind.CommRing.Poly.mulC_nc.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L822-L825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulC_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC_nc","kind":"def","line":819,"name":"Lean.Grind.CommRing.Poly.mulC_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L819-L825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulC</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC.go","kind":"def","line":814,"name":"Lean.Grind.CommRing.Poly.mulC.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L814-L817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulC","kind":"def","line":811,"name":"Lean.Grind.CommRing.Poly.mulC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L811-L817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combineC.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combineC</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combineC.go","kind":"def","line":793,"name":"Lean.Grind.CommRing.Poly.combineC.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L793-L809"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combineC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combineC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combineC","kind":"def","line":790,"name":"Lean.Grind.CommRing.Poly.combineC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L790-L809"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC_nc.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMonC_nc</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC_nc.go","kind":"def","line":785,"name":"Lean.Grind.CommRing.Poly.mulMonC_nc.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L785-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMonC_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC_nc","kind":"def","line":776,"name":"Lean.Grind.CommRing.Poly.mulMonC_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L776-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMonC</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC.go","kind":"def","line":762,"name":"Lean.Grind.CommRing.Poly.mulMonC.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L762-L774"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMonC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMonC","kind":"def","line":753,"name":"Lean.Grind.CommRing.Poly.mulMonC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L753-L774"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConstC.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulConstC</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConstC.go","kind":"def","line":744,"name":"Lean.Grind.CommRing.Poly.mulConstC.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L744-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConstC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulConstC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConstC","kind":"def","line":735,"name":"Lean.Grind.CommRing.Poly.mulConstC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L735-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insertC.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">insertC</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insertC.go","kind":"def","line":722,"name":"Lean.Grind.CommRing.Poly.insertC.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L722-L733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insertC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">insertC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insertC","kind":"def","line":715,"name":"Lean.Grind.CommRing.Poly.insertC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L715-L733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConstC\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConstC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConstC","kind":"def","line":710,"name":"Lean.Grind.CommRing.Poly.addConstC","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L710-L713"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.normEq0\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">normEq0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.normEq0","kind":"def","line":694,"name":"Lean.Grind.CommRing.Poly.normEq0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L694-L699"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly_nc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_nc","kind":"def","line":675,"name":"Lean.Grind.CommRing.Expr.toPoly_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L675-L692"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_k_eq_toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly_k_eq_toPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_k\">toPoly_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly\">toPoly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_k_eq_toPoly","kind":"theorem","line":649,"name":"Lean.Grind.CommRing.Expr.toPoly_k_eq_toPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L649-L673"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly_k","kind":"def","line":629,"name":"Lean.Grind.CommRing.Expr.toPoly_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L629-L647"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.toPoly","kind":"def","line":610,"name":"Lean.Grind.CommRing.Expr.toPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L610-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.pow_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">pow_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.pow_nc","kind":"def","line":604,"name":"Lean.Grind.CommRing.Poly.pow_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L604-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.pow","kind":"def","line":598,"name":"Lean.Grind.CommRing.Poly.pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L598-L602"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul_nc.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_nc</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p₁ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul_nc.go","kind":"def","line":593,"name":"Lean.Grind.CommRing.Poly.mul_nc.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L593-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul_nc","kind":"def","line":590,"name":"Lean.Grind.CommRing.Poly.mul_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L590-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p₁ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul.go","kind":"def","line":585,"name":"Lean.Grind.CommRing.Poly.mul.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L585-L588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul","kind":"def","line":582,"name":"Lean.Grind.CommRing.Poly.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L582-L588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine_k_eq_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine_k_eq_combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine_k\">combine_k</a></span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine_k_eq_combine","kind":"theorem","line":564,"name":"Lean.Grind.CommRing.Poly.combine_k_eq_combine","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L564-L580"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine_k</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"A `Poly.combine` optimized for the kernel. ","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine_k","kind":"def","line":540,"name":"Lean.Grind.CommRing.Poly.combine_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L540-L562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine.go","kind":"def","line":522,"name":"Lean.Grind.CommRing.Poly.combine.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L522-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine","kind":"def","line":519,"name":"Lean.Grind.CommRing.Poly.combine","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L519-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_nc.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMon_nc</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_nc.go","kind":"def","line":514,"name":"Lean.Grind.CommRing.Poly.mulMon_nc.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L514-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMon_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_nc","kind":"def","line":506,"name":"Lean.Grind.CommRing.Poly.mulMon_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L506-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_k_eq_mulMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMon_k_eq_mulMon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_k\">mulMon_k</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon\">mulMon</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_k_eq_mulMon","kind":"theorem","line":481,"name":"Lean.Grind.CommRing.Poly.mulMon_k_eq_mulMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L481-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMon_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon_k","kind":"def","line":469,"name":"Lean.Grind.CommRing.Poly.mulMon_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L469-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMon</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon.go","kind":"def","line":461,"name":"Lean.Grind.CommRing.Poly.mulMon.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L461-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon","kind":"def","line":453,"name":"Lean.Grind.CommRing.Poly.mulMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L453-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst_k_eq_mulConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulConst_k_eq_mulConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst_k\">mulConst_k</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst\">mulConst</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst_k_eq_mulConst","kind":"theorem","line":435,"name":"Lean.Grind.CommRing.Poly.mulConst_k_eq_mulConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L435-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulConst_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst_k","kind":"def","line":427,"name":"Lean.Grind.CommRing.Poly.mulConst_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L427-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulConst</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst.go","kind":"def","line":423,"name":"Lean.Grind.CommRing.Poly.mulConst.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L423-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst","kind":"def","line":415,"name":"Lean.Grind.CommRing.Poly.mulConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L415-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">concat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.concat","kind":"def","line":410,"name":"Lean.Grind.CommRing.Poly.concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L410-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insert.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">insert</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insert.go","kind":"def","line":397,"name":"Lean.Grind.CommRing.Poly.insert.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L397-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insert","kind":"def","line":389,"name":"Lean.Grind.CommRing.Poly.insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L389-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst_k_eq_addConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst_k_eq_addConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst_k\">addConst_k</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst_k_eq_addConst","kind":"theorem","line":380,"name":"Lean.Grind.CommRing.Poly.addConst_k_eq_addConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L380-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst_k","kind":"def","line":374,"name":"Lean.Grind.CommRing.Poly.addConst_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L374-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst.go","kind":"def","line":370,"name":"Lean.Grind.CommRing.Poly.addConst.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L370-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst","kind":"def","line":364,"name":"Lean.Grind.CommRing.Poly.addConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L364-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.isSorted\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isSorted</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.isSorted","kind":"def","line":359,"name":"Lean.Grind.CommRing.Poly.isSorted","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L359-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.ofVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">ofVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.ofVar","kind":"def","line":356,"name":"Lean.Grind.CommRing.Poly.ofVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L356-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.ofMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">ofMon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.ofMon","kind":"def","line":353,"name":"Lean.Grind.CommRing.Poly.ofMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L353-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'.go","kind":"def","line":347,"name":"Lean.Grind.CommRing.Poly.denote'.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L347-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'.denoteTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span>.<span class=\"name\">denoteTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'.denoteTerm","kind":"def","line":341,"name":"Lean.Grind.CommRing.Poly.denote'.denoteTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L341-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote'","kind":"def","line":336,"name":"Lean.Grind.CommRing.Poly.denote'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L336-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.denote","kind":"def","line":331,"name":"Lean.Grind.CommRing.Poly.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L331-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.beq'_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">beq'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.beq'\">beq'</a></span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.beq'_eq","kind":"theorem","line":324,"name":"Lean.Grind.CommRing.Poly.beq'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L324-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.beq'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">beq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.beq'","kind":"def","line":315,"name":"Lean.Grind.CommRing.Poly.beq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L315-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashablePoly.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instHashablePoly</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashablePoly.hash","kind":"def","line":313,"name":"Lean.Grind.CommRing.instHashablePoly.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashablePoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instHashablePoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashablePoly","kind":"instance","line":313,"name":"Lean.Grind.CommRing.instHashablePoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instInhabitedPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedPoly","kind":"instance","line":313,"name":"Lean.Grind.CommRing.instInhabitedPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedPoly.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instInhabitedPoly</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedPoly.default","kind":"def","line":313,"name":"Lean.Grind.CommRing.instInhabitedPoly.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprPoly.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReprPoly</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprPoly.repr","kind":"def","line":313,"name":"Lean.Grind.CommRing.instReprPoly.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReprPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprPoly","kind":"instance","line":313,"name":"Lean.Grind.CommRing.instReprPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instLawfulBEqPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instLawfulBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instLawfulBEqPoly","kind":"instance","line":313,"name":"Lean.Grind.CommRing.instLawfulBEqPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReflBEqPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReflBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ReflBEq\">ReflBEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReflBEqPoly","kind":"instance","line":313,"name":"Lean.Grind.CommRing.instReflBEqPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqPoly","kind":"instance","line":313,"name":"Lean.Grind.CommRing.instBEqPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqPoly.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instBEqPoly</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqPoly.beq","kind":"def","line":313,"name":"Lean.Grind.CommRing.instBEqPoly.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L313-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.add","kind":"ctor","line":312,"name":"Lean.Grind.CommRing.Poly.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L312-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.num","kind":"ctor","line":311,"name":"Lean.Grind.CommRing.Poly.num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L311-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly","kind":"inductive","line":310,"name":"Lean.Grind.CommRing.Poly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L310-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex_k_eq_grevlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">grevlex_k_eq_grevlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex_k\">grevlex_k</a></span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex\">grevlex</a></span> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex_k_eq_grevlex","kind":"theorem","line":290,"name":"Lean.Grind.CommRing.Mon.grevlex_k_eq_grevlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L290-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex_k_eq_revlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">revlex_k_eq_revlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex_k\">revlex_k</a></span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex\">revlex</a></span> <span class=\"fn\">m₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex_k_eq_revlex","kind":"theorem","line":267,"name":"Lean.Grind.CommRing.Mon.revlex_k_eq_revlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L267-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">grevlex_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex_k","kind":"def","line":261,"name":"Lean.Grind.CommRing.Mon.grevlex_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L261-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">revlex_k</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex_k","kind":"def","line":243,"name":"Lean.Grind.CommRing.Mon.revlex_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L243-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">grevlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.grevlex","kind":"def","line":240,"name":"Lean.Grind.CommRing.Mon.grevlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L240-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">revlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlex","kind":"def","line":237,"name":"Lean.Grind.CommRing.Mon.revlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L237-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlexFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">revlexFuel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlexFuel","kind":"def","line":218,"name":"Lean.Grind.CommRing.Mon.revlexFuel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L218-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlexWF\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">revlexWF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.revlexWF","kind":"def","line":205,"name":"Lean.Grind.CommRing.Mon.revlexWF","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L205-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.revlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">revlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.revlex","kind":"def","line":202,"name":"Lean.Grind.CommRing.Power.revlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L202-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex_k_eq_powerRevlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">powerRevlex_k_eq_powerRevlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex_k\">powerRevlex_k</a> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex\">powerRevlex</a> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex_k_eq_powerRevlex","kind":"theorem","line":198,"name":"Lean.Grind.CommRing.powerRevlex_k_eq_powerRevlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L198-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex_k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">powerRevlex_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex_k","kind":"def","line":195,"name":"Lean.Grind.CommRing.powerRevlex_k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L195-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">powerRevlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.powerRevlex","kind":"def","line":190,"name":"Lean.Grind.CommRing.powerRevlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L190-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.revlex\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Var</span>.<span class=\"name\">revlex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.revlex","kind":"def","line":185,"name":"Lean.Grind.CommRing.Var.revlex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L185-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.degree\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">degree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.degree","kind":"def","line":181,"name":"Lean.Grind.CommRing.Mon.degree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L181-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mul_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">mul_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mul_nc","kind":"def","line":175,"name":"Lean.Grind.CommRing.Mon.mul_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L175-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mul.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">mul</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mul.go","kind":"def","line":160,"name":"Lean.Grind.CommRing.Mon.mul.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L160-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mul","kind":"def","line":156,"name":"Lean.Grind.CommRing.Mon.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L156-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.hugeFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">hugeFuel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.hugeFuel","kind":"def","line":154,"name":"Lean.Grind.CommRing.hugeFuel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.length\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">length</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.length","kind":"def","line":150,"name":"Lean.Grind.CommRing.Mon.length","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L150-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mulPow_nc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">mulPow_nc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pw</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mulPow_nc","kind":"def","line":141,"name":"Lean.Grind.CommRing.Mon.mulPow_nc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L141-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mulPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">mulPow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pw</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mulPow","kind":"def","line":127,"name":"Lean.Grind.CommRing.Mon.mulPow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L127-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">concat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.concat","kind":"def","line":122,"name":"Lean.Grind.CommRing.Mon.concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L122-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.ofVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">ofVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.ofVar","kind":"def","line":119,"name":"Lean.Grind.CommRing.Mon.ofVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L119-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote'.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote'</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote'.go","kind":"def","line":114,"name":"Lean.Grind.CommRing.Mon.denote'.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L114-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote'","kind":"def","line":109,"name":"Lean.Grind.CommRing.Mon.denote'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L109-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote","kind":"def","line":105,"name":"Lean.Grind.CommRing.Mon.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L105-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.beq'_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">beq'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.beq'\">beq'</a></span> <span class=\"fn\">m₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m₂</span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.beq'_eq","kind":"theorem","line":98,"name":"Lean.Grind.CommRing.Mon.beq'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L98-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.beq'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">beq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.beq'","kind":"def","line":93,"name":"Lean.Grind.CommRing.Mon.beq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L93-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashableMon.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instHashableMon</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashableMon.hash","kind":"def","line":91,"name":"Lean.Grind.CommRing.instHashableMon.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashableMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instHashableMon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashableMon","kind":"instance","line":91,"name":"Lean.Grind.CommRing.instHashableMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedMon.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instInhabitedMon</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedMon.default","kind":"def","line":91,"name":"Lean.Grind.CommRing.instInhabitedMon.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instInhabitedMon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedMon","kind":"instance","line":91,"name":"Lean.Grind.CommRing.instInhabitedMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReprMon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprMon","kind":"instance","line":91,"name":"Lean.Grind.CommRing.instReprMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprMon.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReprMon</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprMon.repr","kind":"def","line":91,"name":"Lean.Grind.CommRing.instReprMon.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instLawfulBEqMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instLawfulBEqMon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instLawfulBEqMon","kind":"instance","line":91,"name":"Lean.Grind.CommRing.instLawfulBEqMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReflBEqMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReflBEqMon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ReflBEq\">ReflBEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReflBEqMon","kind":"instance","line":91,"name":"Lean.Grind.CommRing.instReflBEqMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqMon.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instBEqMon</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqMon.beq","kind":"def","line":91,"name":"Lean.Grind.CommRing.instBEqMon.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instBEqMon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqMon","kind":"instance","line":91,"name":"Lean.Grind.CommRing.instBEqMon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mult\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">mult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.mult","kind":"ctor","line":90,"name":"Lean.Grind.CommRing.Mon.mult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.unit\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span>.<span class=\"name\">unit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.unit","kind":"ctor","line":89,"name":"Lean.Grind.CommRing.Mon.unit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Mon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon","kind":"inductive","line":88,"name":"Lean.Grind.CommRing.Mon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L88-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.denote","kind":"def","line":81,"name":"Lean.Grind.CommRing.Power.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L81-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.varLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">varLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.varLt","kind":"def","line":78,"name":"Lean.Grind.CommRing.Power.varLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L78-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.beq'_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">beq'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pw₁ </span><span class=\"fn\">pw₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pw₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.beq'\">beq'</a></span> <span class=\"fn\">pw₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">pw₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pw₂</span>)</div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.beq'_eq","kind":"theorem","line":75,"name":"Lean.Grind.CommRing.Power.beq'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.beq'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">beq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pw₁ </span><span class=\"fn\">pw₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.beq'","kind":"def","line":72,"name":"Lean.Grind.CommRing.Power.beq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L72-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashablePower.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instHashablePower</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashablePower.hash","kind":"def","line":70,"name":"Lean.Grind.CommRing.instHashablePower.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashablePower\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instHashablePower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashablePower","kind":"instance","line":70,"name":"Lean.Grind.CommRing.instHashablePower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedPower\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instInhabitedPower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedPower","kind":"instance","line":70,"name":"Lean.Grind.CommRing.instInhabitedPower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedPower.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instInhabitedPower</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedPower.default","kind":"def","line":70,"name":"Lean.Grind.CommRing.instInhabitedPower.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprPower\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReprPower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprPower","kind":"instance","line":70,"name":"Lean.Grind.CommRing.instReprPower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprPower.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReprPower</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprPower.repr","kind":"def","line":70,"name":"Lean.Grind.CommRing.instReprPower.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instLawfulBEqPower\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instLawfulBEqPower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instLawfulBEqPower","kind":"instance","line":70,"name":"Lean.Grind.CommRing.instLawfulBEqPower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReflBEqPower\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReflBEqPower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ReflBEq\">ReflBEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReflBEqPower","kind":"instance","line":70,"name":"Lean.Grind.CommRing.instReflBEqPower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqPower.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instBEqPower</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqPower.beq","kind":"def","line":70,"name":"Lean.Grind.CommRing.instBEqPower.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqPower\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instBEqPower</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqPower","kind":"instance","line":70,"name":"Lean.Grind.CommRing.instBEqPower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.k\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.k","kind":"def","line":69,"name":"Lean.Grind.CommRing.Power.k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.x\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">x</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.x","kind":"def","line":68,"name":"Lean.Grind.CommRing.Power.x","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\">Power</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power.mk","kind":"ctor","line":67,"name":"Lean.Grind.CommRing.Power.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Power</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Power","kind":"structure","line":67,"name":"Lean.Grind.CommRing.Power","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L67-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.denote","kind":"def","line":54,"name":"Lean.Grind.CommRing.Expr.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L54-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">denoteInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Ring\">Ring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.denoteInt","kind":"def","line":48,"name":"Lean.Grind.CommRing.denoteInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L48-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Var</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.denote","kind":"def","line":45,"name":"Lean.Grind.CommRing.Var.denote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context","kind":"def","line":43,"name":"Lean.Grind.CommRing.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprExpr.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReprExpr</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprExpr.repr","kind":"def","line":41,"name":"Lean.Grind.CommRing.instReprExpr.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instReprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instReprExpr","kind":"instance","line":41,"name":"Lean.Grind.CommRing.instReprExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashableExpr.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instHashableExpr</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashableExpr.hash","kind":"def","line":41,"name":"Lean.Grind.CommRing.instHashableExpr.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashableExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instHashableExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instHashableExpr","kind":"instance","line":41,"name":"Lean.Grind.CommRing.instHashableExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqExpr.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instBEqExpr</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqExpr.beq","kind":"def","line":41,"name":"Lean.Grind.CommRing.instBEqExpr.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instBEqExpr","kind":"instance","line":41,"name":"Lean.Grind.CommRing.instBEqExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedExpr","kind":"instance","line":41,"name":"Lean.Grind.CommRing.instInhabitedExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedExpr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">instInhabitedExpr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.instInhabitedExpr.default","kind":"def","line":41,"name":"Lean.Grind.CommRing.instInhabitedExpr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.pow","kind":"ctor","line":40,"name":"Lean.Grind.CommRing.Expr.pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.mul","kind":"ctor","line":39,"name":"Lean.Grind.CommRing.Expr.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.sub","kind":"ctor","line":38,"name":"Lean.Grind.CommRing.Expr.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.add","kind":"ctor","line":37,"name":"Lean.Grind.CommRing.Expr.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.neg","kind":"ctor","line":36,"name":"Lean.Grind.CommRing.Expr.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.var","kind":"ctor","line":35,"name":"Lean.Grind.CommRing.Expr.var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.intCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">intCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.intCast","kind":"ctor","line":34,"name":"Lean.Grind.CommRing.Expr.intCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.natCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">natCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.natCast","kind":"ctor","line":33,"name":"Lean.Grind.CommRing.Expr.natCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr.num","kind":"ctor","line":32,"name":"Lean.Grind.CommRing.Expr.num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Expr","kind":"inductive","line":31,"name":"Lean.Grind.CommRing.Expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L31-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var","kind":"def","line":29,"name":"Lean.Grind.CommRing.Var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Ring/CommSolver.lean#L29-L29"}}],"imports":["Init.Data.Hashable","Init.Data.Ord.Basic","Init.Grind.Ring.Field","Init.Grind.Ordered.Ring","Init.GrindInstances.Ring.Int","Init.Data.Ord.Basic","Init.LawfulBEqTactics"],"instances":[{"className":"Inhabited","name":"Lean.Grind.CommRing.instInhabitedExpr","typeNames":["Lean.Grind.CommRing.Expr"]},{"className":"BEq","name":"Lean.Grind.CommRing.instBEqExpr","typeNames":["Lean.Grind.CommRing.Expr"]},{"className":"Hashable","name":"Lean.Grind.CommRing.instHashableExpr","typeNames":["Lean.Grind.CommRing.Expr"]},{"className":"Repr","name":"Lean.Grind.CommRing.instReprExpr","typeNames":["Lean.Grind.CommRing.Expr"]},{"className":"BEq","name":"Lean.Grind.CommRing.instBEqPower","typeNames":["Lean.Grind.CommRing.Power"]},{"className":"ReflBEq","name":"Lean.Grind.CommRing.instReflBEqPower","typeNames":["Lean.Grind.CommRing.Power"]},{"className":"LawfulBEq","name":"Lean.Grind.CommRing.instLawfulBEqPower","typeNames":["Lean.Grind.CommRing.Power"]},{"className":"Repr","name":"Lean.Grind.CommRing.instReprPower","typeNames":["Lean.Grind.CommRing.Power"]},{"className":"Inhabited","name":"Lean.Grind.CommRing.instInhabitedPower","typeNames":["Lean.Grind.CommRing.Power"]},{"className":"Hashable","name":"Lean.Grind.CommRing.instHashablePower","typeNames":["Lean.Grind.CommRing.Power"]},{"className":"BEq","name":"Lean.Grind.CommRing.instBEqMon","typeNames":["Lean.Grind.CommRing.Mon"]},{"className":"ReflBEq","name":"Lean.Grind.CommRing.instReflBEqMon","typeNames":["Lean.Grind.CommRing.Mon"]},{"className":"LawfulBEq","name":"Lean.Grind.CommRing.instLawfulBEqMon","typeNames":["Lean.Grind.CommRing.Mon"]},{"className":"Repr","name":"Lean.Grind.CommRing.instReprMon","typeNames":["Lean.Grind.CommRing.Mon"]},{"className":"Inhabited","name":"Lean.Grind.CommRing.instInhabitedMon","typeNames":["Lean.Grind.CommRing.Mon"]},{"className":"Hashable","name":"Lean.Grind.CommRing.instHashableMon","typeNames":["Lean.Grind.CommRing.Mon"]},{"className":"BEq","name":"Lean.Grind.CommRing.instBEqPoly","typeNames":["Lean.Grind.CommRing.Poly"]},{"className":"ReflBEq","name":"Lean.Grind.CommRing.instReflBEqPoly","typeNames":["Lean.Grind.CommRing.Poly"]},{"className":"LawfulBEq","name":"Lean.Grind.CommRing.instLawfulBEqPoly","typeNames":["Lean.Grind.CommRing.Poly"]},{"className":"Repr","name":"Lean.Grind.CommRing.instReprPoly","typeNames":["Lean.Grind.CommRing.Poly"]},{"className":"Inhabited","name":"Lean.Grind.CommRing.instInhabitedPoly","typeNames":["Lean.Grind.CommRing.Poly"]},{"className":"Hashable","name":"Lean.Grind.CommRing.instHashablePoly","typeNames":["Lean.Grind.CommRing.Poly"]}],"name":"Init.Grind.Ring.CommSolver"}