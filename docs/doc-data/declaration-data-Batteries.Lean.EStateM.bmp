{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.ext_iff\"><span class=\"name\">EStateM</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.ext_iff","kind":"theorem","line":217,"name":"EStateM.ext_iff","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L217-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.ext\"><span class=\"name\">EStateM</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.ext","kind":"theorem","line":217,"name":"EStateM.ext","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L217-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_fromStateM\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_fromStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/EState.html#EStateM.fromStateM\">fromStateM</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT.run'\">StateT.run'</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_fromStateM","kind":"theorem","line":214,"name":"EStateM.run'_fromStateM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L214-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_fromStateM\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_fromStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/EState.html#EStateM.fromStateM\">fromStateM</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT.run\">StateT.run</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT.run\">StateT.run</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_fromStateM","kind":"theorem","line":210,"name":"EStateM.run_fromStateM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L210-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_tryFinally'\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_tryFinally'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/Except.html#MonadFinally.tryFinally'\">tryFinally'</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span>)</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_tryFinally'","kind":"theorem","line":200,"name":"EStateM.run'_tryFinally'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L200-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_tryFinally'\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_tryFinally'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Control/Except.html#MonadFinally.tryFinally'\">tryFinally'</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt;\n    <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span>)</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">s</span></span>\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e₁</span> <span class=\"fn\">s</span></span> =&gt;\n    <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e₁</span> <span class=\"fn\">s</span></span>\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e₂</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e₂</span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_tryFinally'","kind":"theorem","line":191,"name":"EStateM.run_tryFinally'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L191-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_adaptExcept\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_adaptExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.adaptExcept\">adaptExcept</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_adaptExcept","kind":"theorem","line":186,"name":"EStateM.run'_adaptExcept","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L186-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_adaptExcept\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_adaptExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.adaptExcept\">adaptExcept</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">e</span>)</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_adaptExcept","kind":"theorem","line":177,"name":"EStateM.run_adaptExcept","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L177-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_tryCatch\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">body</span> <span class=\"fn\">handler</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">body</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">handler</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_tryCatch","kind":"theorem","line":169,"name":"EStateM.run'_tryCatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L169-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_tryCatch\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">body</span> <span class=\"fn\">handler</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">body</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">handler</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_tryCatch","kind":"theorem","line":159,"name":"EStateM.run_tryCatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L159-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_orElse\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x₁</span> &lt;|&gt; <span class=\"fn\">x₂</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">s'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_orElse","kind":"theorem","line":152,"name":"EStateM.run'_orElse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L152-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_orElse\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x₁</span> &lt;|&gt; <span class=\"fn\">x₂</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₁</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">s'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x₂</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_orElse","kind":"theorem","line":143,"name":"EStateM.run_orElse","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L143-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_throw\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_throw</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_throw","kind":"theorem","line":140,"name":"EStateM.run'_throw","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L140-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_throw\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_throw</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_throw","kind":"theorem","line":137,"name":"EStateM.run_throw","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L137-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_getModify\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_getModify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#getModify\">getModify</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_getModify","kind":"theorem","line":134,"name":"EStateM.run'_getModify","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L134-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_getModify\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_getModify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#getModify\">getModify</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_getModify","kind":"theorem","line":131,"name":"EStateM.run_getModify","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L131-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_modifyGet\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_modifyGet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadState.modifyGet\">modifyGet</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_modifyGet","kind":"theorem","line":128,"name":"EStateM.run'_modifyGet","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_modifyGet\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_modifyGet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadState.modifyGet\">modifyGet</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_modifyGet","kind":"theorem","line":125,"name":"EStateM.run_modifyGet","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L125-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_modify\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#modify\">modify</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_modify","kind":"theorem","line":122,"name":"EStateM.run'_modify","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L122-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_modify\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#modify\">modify</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_modify","kind":"theorem","line":119,"name":"EStateM.run_modify","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L119-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_set\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_set","kind":"theorem","line":116,"name":"EStateM.run'_set","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L116-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_set\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_set","kind":"theorem","line":113,"name":"EStateM.run_set","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L113-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_get\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState.get\">get</a>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_get","kind":"theorem","line":110,"name":"EStateM.run'_get","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L110-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_get\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState.get\">get</a>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_get","kind":"theorem","line":107,"name":"EStateM.run_get","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L107-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_seqRight\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_seqRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> *&gt; <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_seqRight","kind":"theorem","line":100,"name":"EStateM.run'_seqRight","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L100-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_seqRight\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_seqRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> *&gt; <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_seqRight","kind":"theorem","line":95,"name":"EStateM.run_seqRight","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L95-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_seqLeft\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_seqLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> &lt;* <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">v</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_seqLeft","kind":"theorem","line":89,"name":"EStateM.run'_seqLeft","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L89-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_seqLeft\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_seqLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> &lt;* <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">v</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">Result.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_seqLeft","kind":"theorem","line":83,"name":"EStateM.run_seqLeft","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L83-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_seq\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> &lt;*&gt; <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_seq","kind":"theorem","line":76,"name":"EStateM.run'_seq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L76-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_seq\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> &lt;*&gt; <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">g</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">Result.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span>)</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_seq","kind":"theorem","line":69,"name":"EStateM.run_seq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L69-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_map\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>).<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_map","kind":"theorem","line":64,"name":"EStateM.run'_map","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L64-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_map\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>).<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">Result.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_map","kind":"theorem","line":61,"name":"EStateM.run_map","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L61-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_bind\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>).<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">a</span> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_bind","kind":"theorem","line":54,"name":"EStateM.run'_bind","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L54-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_bind\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>).<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">Result.error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_bind","kind":"theorem","line":49,"name":"EStateM.run_bind","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L49-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run'_pure\"><span class=\"name\">EStateM</span>.<span class=\"name\">run'_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run'\">run'</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run'_pure","kind":"theorem","line":46,"name":"EStateM.run'_pure","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.run_pure\"><span class=\"name\">EStateM</span>.<span class=\"name\">run_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#EStateM.run\">run</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">Result.ok</a> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.run_pure","kind":"theorem","line":43,"name":"EStateM.run_pure","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.dummyRestore_apply\"><span class=\"name\">EStateM</span>.<span class=\"name\">dummyRestore_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.dummyRestore\">dummyRestore</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.const\">Function.const</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.dummyRestore_apply","kind":"theorem","line":41,"name":"EStateM.dummyRestore_apply","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.dummySave_apply\"><span class=\"name\">EStateM</span>.<span class=\"name\">dummySave_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.dummySave\">dummySave</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.dummySave_apply","kind":"theorem","line":39,"name":"EStateM.dummySave_apply","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_error\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_eq_error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_error","kind":"theorem","line":33,"name":"EStateM.Result.map_eq_error","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L33-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_ok\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_eq_ok</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">ok</a> <span class=\"fn\">b</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_eq_ok","kind":"theorem","line":29,"name":"EStateM.Result.map_eq_ok","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L29-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_error\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.error\">error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.error\">error</a> <span class=\"fn\">e</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_error","kind":"theorem","line":26,"name":"EStateM.Result.map_error","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map_ok\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map_ok</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Result.ok\">ok</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result.ok\">ok</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map_ok","kind":"theorem","line":23,"name":"EStateM.Result.map_ok","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L23-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/EStateM.html#EStateM.Result.map\"><span class=\"name\">EStateM</span>.<span class=\"name\">Result</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Result\">Result</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Map a function over an `EStateM.Result`, preserving states and errors. ","docLink":"./Batteries/Lean/EStateM.html#EStateM.Result.map","kind":"def","line":17,"name":"EStateM.Result.map","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/EStateM.lean#L17-L21"}}],"imports":["Init","Init.Control.EState"],"instances":[],"name":"Batteries.Lean.EStateM"}