{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Array/InsertionSort.html#Array.insertionSort\"><span class=\"name\">Array</span>.<span class=\"name\">insertionSort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := by exact (· &lt; ·))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Sorts an array using insertion sort.\n\nThe optional parameter `lt` specifies an ordering predicate. It defaults to `LT.lt`, which must be\ndecidable to be used for sorting.\n","docLink":"./Init/Data/Array/InsertionSort.html#Array.insertionSort","kind":"def","line":16,"name":"Array.insertionSort","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Array/InsertionSort.lean#L16-L41"}}],"imports":["Init.Data.Array.Basic"],"instances":[],"name":"Init.Data.Array.InsertionSort"}