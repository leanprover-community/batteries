{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Instances.html#Batteries.Tactic.Instances.«command#instances__:_»\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Instances</span>.<span class=\"name\">«command#instances__:_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#instances term` prints all the instances for the given class.\nFor example, `#instances Add _` gives all `Add` instances, and `#instances Add Nat` gives the\n`Nat` instance. The `term` can be any type that can appear in `[...]` binders.\n\nTrailing underscores can be omitted, and `#instances Add` and `#instances Add _` are equivalent;\nthe command adds metavariables until the argument is no longer a function.\n\nThe `#instances` command is closely related to `#synth`, but `#synth` does the full\ninstance synthesis algorithm and `#instances` does the first step of finding potential instances. ","docLink":"./Batteries/Tactic/Instances.html#Batteries.Tactic.Instances.«command#instances__:_»","kind":"def","line":63,"name":"Batteries.Tactic.Instances.«command#instances__:_»","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Instances.lean#L63-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Instances.html#Batteries.Tactic.Instances.instancesCmd\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Instances</span>.<span class=\"name\">instancesCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`#instances term` prints all the instances for the given class.\nFor example, `#instances Add _` gives all `Add` instances, and `#instances Add Nat` gives the\n`Nat` instance. The `term` can be any type that can appear in `[...]` binders.\n\nTrailing underscores can be omitted, and `#instances Add` and `#instances Add _` are equivalent;\nthe command adds metavariables until the argument is no longer a function.\n\nThe `#instances` command is closely related to `#synth`, but `#synth` does the full\ninstance synthesis algorithm and `#instances` does the first step of finding potential instances. ","docLink":"./Batteries/Tactic/Instances.html#Batteries.Tactic.Instances.instancesCmd","kind":"def","line":24,"name":"Batteries.Tactic.Instances.instancesCmd","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Instances.lean#L24-L60"}}],"imports":["Init","Lean.Elab.Command","Lean.PrettyPrinter"],"instances":[],"name":"Batteries.Tactic.Instances"}