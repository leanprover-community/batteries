{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.command\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">command</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A block-level command, which invokes an extension during documentation processing.\n\nThe `NAME` is an identifier that determines which command is being used, akin to a function name.\nEach of the `ARGS` may have the following forms:\n* A value, which is a string literal, natural number, or identifier\n* A named argument, of the form `(NAME := VALUE)`\n* A flag, of the form `+NAME` or `-NAME`\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.command","kind":"def","line":312,"name":"Lean.Doc.Syntax.command","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L312-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.metadata_block\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">metadata_block</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Metadata for the preceding header.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.metadata_block","kind":"def","line":306,"name":"Lean.Doc.Syntax.metadata_block","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L306-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.metadataContents\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">metadataContents</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser.Parser</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.metadataContents","kind":"def","line":303,"name":"Lean.Doc.Syntax.metadataContents","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L303-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A header\n\nHeaders must be correctly nested to form a tree structure. The first header in a document must\nstart with `#`, and subsequent headers must have at most one more `#` than the preceding header.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.header","kind":"def","line":293,"name":"Lean.Doc.Syntax.header","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L293-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.directive\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">directive</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A _directive_, which is an extension to the Verso language in block position.\n\nDirectives have the following syntax:\n```\n:::NAME ARGS*\nCONTENT*\n:::\n```\n\nThe `NAME` is an identifier that determines which directive is being used, akin to a function name.\nEach of the `ARGS` may have the following forms:\n* A value, which is a string literal, natural number, or identifier\n* A named argument, of the form `(NAME := VALUE)`\n* A flag, of the form `+NAME` or `-NAME`\n\nThe `CONTENT` is a sequence of block content. Directives may be nested by using more colons in\nthe outer directive. For example:\n```\n::::outer +flag (arg := 5)\nA paragraph.\n:::inner \"label\"\n* 1\n* 2\n:::\n::::\n```\n\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.directive","kind":"def","line":262,"name":"Lean.Doc.Syntax.directive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L262-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.footnote_ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">footnote_ref</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A footnote definition.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.footnote_ref","kind":"def","line":257,"name":"Lean.Doc.Syntax.footnote_ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L257-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.link_ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">link_ref</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A named URL that can be used in links and images.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.link_ref","kind":"def","line":252,"name":"Lean.Doc.Syntax.link_ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L252-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.blockquote\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">blockquote</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A quotation, which contains a sequence of blocks that are at least as indented as the `>`.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.blockquote","kind":"def","line":247,"name":"Lean.Doc.Syntax.blockquote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L247-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.codeblock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">codeblock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A code block that contains literal code.\n\nCode blocks have the following syntax:\n````\n```(NAME ARGS*)?\nCONTENT\n```\n````\n\n`CONTENT` is a literal string. If the `CONTENT` contains a sequence of three or more backticks, then\nthe opening and closing ` ``` ` (called _fences_) should have more backticks than the longest\nsequence in `CONTENT`. Additionally, the opening and closing fences should have the same number of\nbackticks.\n\nIf `NAME` and `ARGS` are not provided, then the code block represents literal text. If provided, the\n`NAME` is an identifier that selects an interpretation of the block. Unlike Markdown, this name is\nnot necessarily the language in which the code is written, though many custom code blocks are, in\npractice, named after the language that they contain. `NAME` is more akin to a function name. Each\nof the `ARGS` may have the following forms:\n* A value, which is a string literal, natural number, or identifier\n* A named argument, of the form `(NAME := VALUE)`\n* A flag, of the form `+NAME` or `-NAME`\n\nThe `CONTENT` is interpreted according to the indentation of the fences. If the fences are indented\n`n` spaces, then `n` spaces are removed from the start of each line of `CONTENT`.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.codeblock","kind":"def","line":218,"name":"Lean.Doc.Syntax.codeblock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L218-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.ol\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ol</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Ordered list ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.ol","kind":"def","line":215,"name":"Lean.Doc.Syntax.ol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L215-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.dl\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">dl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Description list ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.dl","kind":"def","line":212,"name":"Lean.Doc.Syntax.dl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L212-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.ul\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Unordered List ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.ul","kind":"def","line":209,"name":"Lean.Doc.Syntax.ul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L209-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.para\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">para</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Paragraph ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.para","kind":"def","line":206,"name":"Lean.Doc.Syntax.para","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L206-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.desc\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">desc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A description of an item ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.desc","kind":"def","line":202,"name":"Lean.Doc.Syntax.desc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L202-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.desc_item.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">desc_item</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.desc_item.quot","kind":"def","line":200,"name":"Lean.Doc.Syntax.desc_item.quot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L200-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Parser.Category.desc_item\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">desc_item</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Category</a></div></div>","info":{"doc":"A description of an item ","docLink":"./Lean/DocString/Syntax.html#Lean.Parser.Category.desc_item","kind":"def","line":200,"name":"Lean.Parser.Category.desc_item","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L200-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.li\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">li</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A list item ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.li","kind":"def","line":196,"name":"Lean.Doc.Syntax.li","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L196-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.list_item.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">list_item</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.list_item.quot","kind":"def","line":194,"name":"Lean.Doc.Syntax.list_item.quot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L194-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Parser.Category.list_item\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">list_item</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Category</a></div></div>","info":{"doc":"Items from both ordered and unordered lists ","docLink":"./Lean/DocString/Syntax.html#Lean.Parser.Category.list_item","kind":"def","line":194,"name":"Lean.Parser.Category.list_item","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L194-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.block.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">block</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.block.quot","kind":"def","line":177,"name":"Lean.Doc.Syntax.block.quot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L177-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Parser.Category.block\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">block</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Category</a></div></div>","info":{"doc":"Block-level elements, such as paragraphs, headers, and lists.\n\nConventions:\n* When there's concrete syntax that can be written as Lean atoms, do so (code blocks are ` ``` `,\n  directives `:::`)\n* When Verso's syntax requires a newline, use `|` because `\"\\n\"` is not a valid Lean token\n* Directive bodies are in `{` and `}` to avoid quotation parsing issues with `:::` ... `:::`\n* If there's no concrete syntax per se, such as for paragraphs or lists, use a name with brackets\n  and braces\n* Use parentheses around required literals, such as the starting number of an ordered list\n* Use square brackets around sequences of literals\n* Use curly braces around blocks or lists items (because names and arguments a la roles are always\n  newline-separated for directives and code)\n","docLink":"./Lean/DocString/Syntax.html#Lean.Parser.Category.block","kind":"def","line":177,"name":"Lean.Parser.Category.block","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L177-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.display_math\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">display_math</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Display-mode mathematical notation ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.display_math","kind":"def","line":173,"name":"Lean.Doc.Syntax.display_math","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L173-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.inline_math\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">inline_math</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Inline mathematical notation (equivalent to LaTeX's `$` notation) ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.inline_math","kind":"def","line":170,"name":"Lean.Doc.Syntax.inline_math","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L170-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.role\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">role</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A _role_: an extension to the Verso document language in an inline position.\n\nText is given a role using the following syntax: `{NAME ARGS*}[CONTENT]`. The `NAME` is an\nidentifier that determines which role is being used, akin to a function name. Each of the `ARGS` may\nhave the following forms:\n* A value, which is a string literal, natural number, or identifier\n* A named argument, of the form `(NAME := VALUE)`\n* A flag, of the form `+NAME` or `-NAME`\n\nThe `CONTENT` is a sequence of inline content. If there is only one piece of content and it has\nbeginning and ending delimiters (e.g. code literals, links, or images, but not ordinary text), then\nthe `[` and `]` may be omitted. In particular, `` {NAME ARGS*}`x` `` is equivalent to\n``{NAME ARGS*}[`x`]``.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.role","kind":"def","line":153,"name":"Lean.Doc.Syntax.role","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L153-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">code</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Literal code.\n\nCode may begin with any non-zero number of backticks. It must be terminated with the same number,\nand it may not contain a sequence of backticks that is at least as long as its starting or ending\ndelimiters.\n\nIf the first and last characters are space, and it contains at least one non-space character, then\nthe resulting string has a single space stripped from each end. Thus, ``` `` `x `` ``` represents\n``\"`x\"``, not ``\" `x \"``.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.code","kind":"def","line":140,"name":"Lean.Doc.Syntax.code","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L140-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.linebreak\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">linebreak</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.linebreak","kind":"def","line":139,"name":"Lean.Doc.Syntax.linebreak","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.footnote\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">footnote</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A footnote use site.\n\nFootnotes must be defined elsewhere using the `[^NAME]: TEXT` syntax.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.footnote","kind":"def","line":132,"name":"Lean.Doc.Syntax.footnote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L132-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.image\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">image</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"An image, with alternate text and a URL.\n\nThe alternate text is a plain string, rather than Verso markup.\n\nThe image URL may either be a concrete URL (written in parentheses) or a named URL (written in\nsquare brackets).\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.image","kind":"def","line":121,"name":"Lean.Doc.Syntax.image","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L121-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.link\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">link</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A link. The link's target may either be a concrete URL (written in parentheses) or a named URL\n(written in square brackets).\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.link","kind":"def","line":115,"name":"Lean.Doc.Syntax.link","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L115-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.bold\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">bold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Bold emphasis.\n\nA single `*` suffices to make text bold. Using `_` for emphasis.\n\nBold text may be nested by using longer sequences of `*` for the outer delimiters.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.bold","kind":"def","line":106,"name":"Lean.Doc.Syntax.bold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L106-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.emph\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">emph</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Emphasis, often rendered as italics.\n\nEmphasis may be nested by using longer sequences of `_` for the outer delimiters. For example:\n```\nRemember: __always butter the _rugbrød_ before adding toppings!__\n```\nHere, the outer `__` is used to emphasize the instructions, while the inner `_` indicates the use of\na non-English word.\n","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.emph","kind":"def","line":94,"name":"Lean.Doc.Syntax.emph","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L94-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.text\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">text</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.text","kind":"def","line":93,"name":"Lean.Doc.Syntax.text","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.inline.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">inline</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.inline.quot","kind":"def","line":84,"name":"Lean.Doc.Syntax.inline.quot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L84-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Parser.Category.inline\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">inline</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Category</a></div></div>","info":{"doc":"Verso inline objects. These are part of the ordinary text flow of a paragraph.\n\nThis syntax uses the following conventions:\n* Sequences of inline items are in square brackets\n* Literal data, like strings or numbers, are in parentheses\n* Verso metaprogram names and arguments are in curly braces\n","docLink":"./Lean/DocString/Syntax.html#Lean.Parser.Category.inline","kind":"def","line":84,"name":"Lean.Parser.Category.inline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L84-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A named reference to a URL defined elsewhere. Use parentheses to write the URL here. ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.ref","kind":"def","line":80,"name":"Lean.Doc.Syntax.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L80-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.url\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">url</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A URL target, written explicitly. Use square brackets for a named target. ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.url","kind":"def","line":77,"name":"Lean.Doc.Syntax.url","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L77-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.link_target.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">link_target</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.link_target.quot","kind":"def","line":75,"name":"Lean.Doc.Syntax.link_target.quot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Parser.Category.link_target\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">link_target</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Category</a></div></div>","info":{"doc":"Link targets, which may be URLs or named references ","docLink":"./Lean/DocString/Syntax.html#Lean.Parser.Category.link_target","kind":"def","line":75,"name":"Lean.Parser.Category.link_target","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.flag_off\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">flag_off</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Boolean flag, turned off ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.flag_off","kind":"def","line":71,"name":"Lean.Doc.Syntax.flag_off","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L71-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.flag_on\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">flag_on</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Boolean flag, turned on ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.flag_on","kind":"def","line":68,"name":"Lean.Doc.Syntax.flag_on","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L68-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.named_no_paren\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">named_no_paren</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Named argument ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.named_no_paren","kind":"def","line":66,"name":"Lean.Doc.Syntax.named_no_paren","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L66-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.named\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">named</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Named argument ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.named","kind":"def","line":63,"name":"Lean.Doc.Syntax.named","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L63-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.anon\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">anon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Anonymous positional argument ","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.anon","kind":"def","line":60,"name":"Lean.Doc.Syntax.anon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L60-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.doc_arg.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">doc_arg</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.doc_arg.quot","kind":"def","line":58,"name":"Lean.Doc.Syntax.doc_arg.quot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Parser.Category.doc_arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">doc_arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Category</a></div></div>","info":{"doc":"Arguments ","docLink":"./Lean/DocString/Syntax.html#Lean.Parser.Category.doc_arg","kind":"def","line":58,"name":"Lean.Parser.Category.doc_arg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.arg_num\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">arg_num</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.arg_num","kind":"def","line":56,"name":"Lean.Doc.Syntax.arg_num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.arg_ident\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">arg_ident</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.arg_ident","kind":"def","line":55,"name":"Lean.Doc.Syntax.arg_ident","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.arg_str\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">arg_str</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.arg_str","kind":"def","line":54,"name":"Lean.Doc.Syntax.arg_str","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.arg_val.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">arg_val</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Syntax.html#Lean.Doc.Syntax.arg_val.quot","kind":"def","line":52,"name":"Lean.Doc.Syntax.arg_val.quot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L52-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Syntax.html#Lean.Parser.Category.arg_val\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Category</span>.<span class=\"name\">arg_val</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Notation.html#Lean.Parser.Category\">Category</a></div></div>","info":{"doc":"Argument values ","docLink":"./Lean/DocString/Syntax.html#Lean.Parser.Category.arg_val","kind":"def","line":52,"name":"Lean.Parser.Category.arg_val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Syntax.lean#L52-L53"}}],"imports":["Lean.Parser.Term.Basic","Lean.Parser.Term.Basic"],"instances":[],"name":"Lean.DocString.Syntax"}