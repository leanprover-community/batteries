{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.toListRev_eq_toListRev_iter\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">toListRev_eq_toListRev_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Slice/Operations.html#Std.Slice.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/Iterators/Producers/Slice.html#Std.Slice.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.toListRev_eq_toListRev_iter","kind":"theorem","line":47,"name":"Std.Slice.toListRev_eq_toListRev_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Slice.lean#L47-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.toList_eq_toList_iter\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">toList_eq_toList_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Slice/Operations.html#Std.Slice.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/Iterators/Producers/Slice.html#Std.Slice.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.toList_eq_toList_iter","kind":"theorem","line":41,"name":"Std.Slice.toList_eq_toList_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Slice.lean#L41-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.toArray_eq_toArray_iter\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">toArray_eq_toArray_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Slice/Operations.html#Std.Slice.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/Iterators/Producers/Slice.html#Std.Slice.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.toArray_eq_toArray_iter","kind":"theorem","line":35,"name":"Std.Slice.toArray_eq_toArray_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Slice.lean#L35-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.size_eq_size_iter\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">size_eq_size_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">Iterators.IteratorSize</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Slice/Operations.html#Std.Slice.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/Iterators/Producers/Slice.html#Std.Slice.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Loop.html#Std.Iterators.Iter.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.size_eq_size_iter","kind":"theorem","line":30,"name":"Std.Slice.size_eq_size_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Slice.lean#L30-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.iter_eq_toIteratorIter\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">iter_eq_toIteratorIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/Iterators/Producers/Slice.html#Std.Slice.iter\">iter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.iter\">Iterators.ToIterator.iter</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.iter_eq_toIteratorIter","kind":"theorem","line":25,"name":"Std.Slice.iter_eq_toIteratorIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Slice.lean#L25-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.Internal.iter_eq_iter\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Internal</span>.<span class=\"name\">iter_eq_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Data/Iterators/Producers/Slice.html#Std.Slice.iter\">iter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Slice/Operations.html#Std.Slice.Internal.iter\">iter</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Slice.html#Std.Slice.Internal.iter_eq_iter","kind":"theorem","line":21,"name":"Std.Slice.Internal.iter_eq_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Lemmas/Producers/Slice.lean#L21-L23"}}],"imports":["Std.Data.Iterators.Producers.Slice","Std.Data.Iterators.Producers.Slice","Init.Data.Slice.Lemmas"],"instances":[],"name":"Std.Data.Iterators.Lemmas.Producers.Slice"}