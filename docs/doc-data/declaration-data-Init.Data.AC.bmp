{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eq_of_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eq_of_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eq_of_norm","kind":"theorem","line":340,"name":"Lean.Data.AC.Context.eq_of_norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L340-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eval_norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eval_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.norm\">norm</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eval_norm","kind":"theorem","line":335,"name":"Lean.Data.AC.Context.eval_norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L335-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.eval_toList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eval_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\">toList</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.eval\">eval</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.eval_toList","kind":"theorem","line":328,"name":"Lean.Data.AC.Context.eval_toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L328-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_append\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.append\">append</a></span> <span class=\"fn\">r</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_append","kind":"theorem","line":314,"name":"Lean.Data.AC.Context.evalList_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L314-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_removeNeutrals\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_removeNeutrals</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals\">removeNeutrals</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_removeNeutrals","kind":"theorem","line":299,"name":"Lean.Data.AC.Context.evalList_removeNeutrals","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L299-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.unwrap_isNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">unwrap_isNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral\">ContextInformation.isNeutral</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp\">EvalInformation.evalOp</a> <span class=\"fn\">ctx</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar\">EvalInformation.evalVar</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.unwrap_isNeutral","kind":"theorem","line":288,"name":"Lean.Data.AC.Context.unwrap_isNeutral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L288-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.toList_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">toList_nonEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\">toList</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.toList_nonEmpty","kind":"theorem","line":279,"name":"Lean.Data.AC.Context.toList_nonEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L279-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm\">ContextInformation.isComm</a> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">sort</a> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort","kind":"theorem","line":261,"name":"Lean.Data.AC.Context.evalList_sort","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L261-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">sort</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort\">sort</a> <span class=\"fn\">xs</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_cons","kind":"theorem","line":237,"name":"Lean.Data.AC.Context.evalList_sort_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L237-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_loop_swap\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_loop_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> <span class=\"fn\">xs</span> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">ys</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_loop_swap","kind":"theorem","line":222,"name":"Lean.Data.AC.Context.evalList_sort_loop_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L222-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_congr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_sort_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₄</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_sort_congr","kind":"theorem","line":203,"name":"Lean.Data.AC.Context.evalList_sort_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L203-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">xs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_insert","kind":"theorem","line":182,"name":"Lean.Data.AC.Context.evalList_insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L182-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.sort_loop_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">sort_loop_nonEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\">sort.loop</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.sort_loop_nonEmpty","kind":"theorem","line":177,"name":"Lean.Data.AC.Context.sort_loop_nonEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L177-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.insert_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">insert_nonEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.insert\">insert</a> <span class=\"fn\">x</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.insert_nonEmpty","kind":"theorem","line":172,"name":"Lean.Data.AC.insert_nonEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L172-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_mergeIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">evalList_mergeIdem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem\">ContextInformation.isIdem</a> <span class=\"fn\">ctx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\">evalList</a> <span class=\"fn\">α</span> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.evalList_mergeIdem","kind":"theorem","line":135,"name":"Lean.Data.AC.Context.evalList_mergeIdem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L135-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head2\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_head2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head2","kind":"theorem","line":132,"name":"Lean.Data.AC.Context.mergeIdem_head2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L132-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_head","kind":"theorem","line":129,"name":"Lean.Data.AC.Context.mergeIdem_head","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L129-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mergeIdem_nonEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">e</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\">mergeIdem</a> <span class=\"fn\">e</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mergeIdem_nonEmpty","kind":"theorem","line":123,"name":"Lean.Data.AC.Context.mergeIdem_nonEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L123-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.List.two_step_induction\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">List</span>.<span class=\"name\">two_step_induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <a href=\"./foundational_types.html\">Sort</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">empty</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">single</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">motive</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> → <span class=\"fn\"><span class=\"fn\">motive</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.List.two_step_induction","kind":"def","line":112,"name":"Lean.Data.AC.List.two_step_induction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L112-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.norm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">info</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.norm","kind":"def","line":106,"name":"Lean.Data.AC.norm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L106-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">removeNeutrals</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">info</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals.loop","kind":"def","line":99,"name":"Lean.Data.AC.removeNeutrals.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L99-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">removeNeutrals</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">info</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.removeNeutrals","kind":"def","line":93,"name":"Lean.Data.AC.removeNeutrals","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L93-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">mergeIdem</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.mergeIdem.loop","kind":"def","line":81,"name":"Lean.Data.AC.mergeIdem.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L81-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.mergeIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">mergeIdem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.mergeIdem","kind":"def","line":80,"name":"Lean.Data.AC.mergeIdem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L80-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.sort.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">sort</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.sort.loop","kind":"def","line":75,"name":"Lean.Data.AC.sort.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L75-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.sort\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">sort</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.sort","kind":"def","line":74,"name":"Lean.Data.AC.sort","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L74-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.insert","kind":"def","line":70,"name":"Lean.Data.AC.insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L70-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.evalList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">evalList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> → <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.evalList","kind":"def","line":65,"name":"Lean.Data.AC.evalList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L65-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.toList","kind":"def","line":61,"name":"Lean.Data.AC.Expr.toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L61-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.eval","kind":"def","line":57,"name":"Lean.Data.AC.eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L57-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instEvalInformationContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instEvalInformationContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.instEvalInformationContext","kind":"instance","line":52,"name":"Lean.Data.AC.instEvalInformationContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L52-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instContextInformationContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instContextInformationContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.instContextInformationContext","kind":"instance","line":47,"name":"Lean.Data.AC.instContextInformationContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L47-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">var</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\"><span class=\"fn\">ctx</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.var","kind":"def","line":44,"name":"Lean.Data.AC.Context.var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L44-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">evalVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalVar","kind":"def","line":42,"name":"Lean.Data.AC.EvalInformation.evalVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">evalOp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.evalOp","kind":"def","line":41,"name":"Lean.Data.AC.EvalInformation.evalOp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.arbitrary\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">arbitrary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.arbitrary","kind":"def","line":40,"name":"Lean.Data.AC.EvalInformation.arbitrary","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arbitrary</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">evalOp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">evalVar</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\">EvalInformation</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation.mk","kind":"ctor","line":39,"name":"Lean.Data.AC.EvalInformation.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.EvalInformation\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">EvalInformation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max (max 1 u) v)</div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.EvalInformation","kind":"class","line":39,"name":"Lean.Data.AC.EvalInformation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L39-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isIdem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isIdem","kind":"def","line":37,"name":"Lean.Data.AC.ContextInformation.isIdem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isComm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isComm","kind":"def","line":36,"name":"Lean.Data.AC.ContextInformation.isComm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">isNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.isNeutral","kind":"def","line":35,"name":"Lean.Data.AC.ContextInformation.isNeutral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isNeutral</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isComm </span><span class=\"fn\">isIdem</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\">ContextInformation</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation.mk","kind":"ctor","line":34,"name":"Lean.Data.AC.ContextInformation.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.ContextInformation\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">ContextInformation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max 1 u)</div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.ContextInformation","kind":"class","line":34,"name":"Lean.Data.AC.ContextInformation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.arbitrary\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">arbitrary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.arbitrary","kind":"def","line":32,"name":"Lean.Data.AC.Context.arbitrary","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.vars","kind":"def","line":31,"name":"Lean.Data.AC.Context.vars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.idem\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">idem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.idem","kind":"def","line":30,"name":"Lean.Data.AC.Context.idem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.comm\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.comm","kind":"def","line":29,"name":"Lean.Data.AC.Context.comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.assoc\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\">op</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.assoc","kind":"theorem","line":28,"name":"Lean.Data.AC.Context.assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">op</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.op","kind":"def","line":27,"name":"Lean.Data.AC.Context.op","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assoc</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">comm</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">op</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idem</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">op</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\">op</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arbitrary</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Context\">Context</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context.mk","kind":"ctor","line":26,"name":"Lean.Data.AC.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Context","kind":"structure","line":26,"name":"Lean.Data.AC.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L26-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.neutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">neutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">op</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.value\">value</a></span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.neutral","kind":"def","line":24,"name":"Lean.Data.AC.Variable.neutral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">value</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\">op</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.value","kind":"def","line":23,"name":"Lean.Data.AC.Variable.value","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#PLift\">PLift</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <span class=\"fn\">op</span> <span class=\"fn\">value</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\">Variable</a> <span class=\"fn\">op</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable.mk","kind":"ctor","line":22,"name":"Lean.Data.AC.Variable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Variable\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Variable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Variable","kind":"structure","line":22,"name":"Lean.Data.AC.Variable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L22-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instBEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.instBEqExpr","kind":"instance","line":18,"name":"Lean.Data.AC.instBEqExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instBEqExpr.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instBEqExpr</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a> → <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.instBEqExpr.beq","kind":"def","line":18,"name":"Lean.Data.AC.instBEqExpr.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instReprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.instReprExpr","kind":"instance","line":18,"name":"Lean.Data.AC.instReprExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instReprExpr.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instReprExpr</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.instReprExpr.repr","kind":"def","line":18,"name":"Lean.Data.AC.instReprExpr.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.instInhabitedExpr","kind":"instance","line":18,"name":"Lean.Data.AC.instInhabitedExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.instInhabitedExpr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">instInhabitedExpr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.instInhabitedExpr.default","kind":"def","line":18,"name":"Lean.Data.AC.instInhabitedExpr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.op\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">op</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.op","kind":"ctor","line":17,"name":"Lean.Data.AC.Expr.op","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr.var","kind":"ctor","line":16,"name":"Lean.Data.AC.Expr.var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/AC.html#Lean.Data.AC.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">AC</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/AC.html#Lean.Data.AC.Expr","kind":"inductive","line":15,"name":"Lean.Data.AC.Expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/AC.lean#L15-L18"}}],"imports":["Init.ByCases"],"instances":[{"className":"Inhabited","name":"Lean.Data.AC.instInhabitedExpr","typeNames":["Lean.Data.AC.Expr"]},{"className":"Repr","name":"Lean.Data.AC.instReprExpr","typeNames":["Lean.Data.AC.Expr"]},{"className":"BEq","name":"Lean.Data.AC.instBEqExpr","typeNames":["Lean.Data.AC.Expr"]},{"className":"Lean.Data.AC.ContextInformation","name":"Lean.Data.AC.instContextInformationContext","typeNames":["Lean.Data.AC.Context"]},{"className":"Lean.Data.AC.EvalInformation","name":"Lean.Data.AC.instEvalInformationContext","typeNames":["Lean.Data.AC.Context"]}],"name":"Init.Data.AC"}