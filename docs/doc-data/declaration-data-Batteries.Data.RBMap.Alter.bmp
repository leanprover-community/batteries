{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBMap.alter\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"`O(log n)`. `alterP cut f t` simultaneously handles inserting, erasing and replacing an element\nusing a function `f : Option α → Option α`. It is passed the result of `t.findP? cut`\nand can either return `none` to remove the element or `some a` to replace/insert\nthe element with `a` (which must have the same ordering properties as the original element).\n\nThe element is used linearly if `t` is unshared.\n\nThe `AlterWF` assumption is required because `f` may change\nthe ordering properties of the element, which would break the invariants.\n","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBMap.alter","kind":"def","line":362,"name":"Batteries.RBMap.alter","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L362-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBMap.alter.adapt\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">alter</span>.<span class=\"name\">adapt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Auxiliary definition for `alter`. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBMap.alter.adapt","kind":"def","line":351,"name":"Batteries.RBMap.alter.adapt","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L351-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBMap.modify\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBMap</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span></div></div>","info":{"doc":"`O(log n)`. In-place replace the corresponding to key `k`.\nThis takes the element out of the tree while `f` runs,\nso it uses the element linearly if `t` is unshared.\n","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBMap.modify","kind":"def","line":342,"name":"Batteries.RBMap.modify","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L342-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBSet.ModifyWF.of_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBSet</span>.<span class=\"name\">ModifyWF</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet\">RBSet</a> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">RBNode.find?</a> <span class=\"fn\">cut</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">RBNode.cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBSet.ModifyWF\">ModifyWF</a></span> <span class=\"fn\">cut</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"A sufficient condition for `ModifyWF` is that the new element compares equal to the original.\n","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBSet.ModifyWF.of_eq","kind":"theorem","line":329,"name":"Batteries.RBSet.ModifyWF.of_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L329-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.find?_eq_zoom\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">find?_eq_zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> := <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.root\">Path.root</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.find?\">find?</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.root?\">root?</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.find?_eq_zoom","kind":"theorem","line":320,"name":"Batteries.RBNode.find?_eq_zoom","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L320-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.WF.modify\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.OnRoot\">OnRoot</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.modify\">RBNode.modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.WF.modify","kind":"theorem","line":315,"name":"Batteries.RBNode.WF.modify","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L315-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.WF.alter\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.root?\">root?</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.OnRoot\">OnRoot</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t'</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.WF\">WF</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.alter\">RBNode.alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.WF.alter","kind":"theorem","line":309,"name":"Batteries.RBNode.WF.alter","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L309-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Balanced.modify\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.modify\">modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"The `modify` function preserves the balance invariants. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Balanced.modify","kind":"theorem","line":305,"name":"Batteries.RBNode.Balanced.modify","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L305-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Ordered.modify\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.OnRoot\">OnRoot</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.modify\">modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span></span></div></div>","info":{"doc":"The `modify` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Ordered.modify","kind":"theorem","line":297,"name":"Batteries.RBNode.Ordered.modify","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L297-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.modify_eq_alter\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">modify_eq_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.modify\">modify</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.alter\">alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.modify_eq_alter","kind":"theorem","line":294,"name":"Batteries.RBNode.modify_eq_alter","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L294-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Balanced.alter\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.alter\">alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"The `alter` function preserves the balance invariants. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Balanced.alter","kind":"theorem","line":275,"name":"Batteries.RBNode.Balanced.alter","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L275-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Ordered.alter\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>} {<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>},\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.root?\">root?</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.OnRoot\">OnRoot</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">t'</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.alter\">alter</a> <span class=\"fn\">cut</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span></span></div></div>","info":{"doc":"The `alter` function preserves the ordering invariants. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Ordered.alter","kind":"theorem","line":257,"name":"Batteries.RBNode.Ordered.alter","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L257-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered.del\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.del\">del</a></span> <span class=\"fn\">t</span> <span class=\"fn\">c</span>)</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered.del","kind":"theorem","line":233,"name":"Batteries.RBNode.Path.Ordered.del","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L233-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered.insertNew\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">insertNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insertNew\">insertNew</a></span> <span class=\"fn\">v</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered.insertNew","kind":"theorem","line":229,"name":"Batteries.RBNode.Path.Ordered.insertNew","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L229-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered.ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span>)</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.ins\">ins</a></span> <span class=\"fn\">t</span>)</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered.ins","kind":"theorem","line":209,"name":"Batteries.RBNode.Path.Ordered.ins","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L209-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Ordered.zoom\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path'</span>)</span> <span class=\"fn\">t'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed\">Path.Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Ordered.zoom","kind":"theorem","line":204,"name":"Batteries.RBNode.Ordered.zoom","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L204-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Ordered.zoom'\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">zoom'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span>)</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pz</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed\">Path.Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">RBNode.zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Path.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path'</span>)</span> <span class=\"fn\">t'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed\">Path.Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Ordered.zoom'","kind":"theorem","line":197,"name":"Batteries.RBNode.Ordered.zoom'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L197-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered.fill\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill\">fill</a></span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\">Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Ordered\">RBNode.Ordered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.All\">All</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span>)</span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered.fill","kind":"theorem","line":183,"name":"Batteries.RBNode.Path.Ordered.fill","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L183-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Ordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"The ordering invariant for a `Path`. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Ordered","kind":"def","line":173,"name":"Batteries.RBNode.Path.Ordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L173-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed.toRootOrdered\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Zoomed</span>.<span class=\"name\">toRootOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed\">Zoomed</a> <span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">path</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">path</span> <span class=\"fn\">v</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed.toRootOrdered","kind":"theorem","line":167,"name":"Batteries.RBNode.Path.Zoomed.toRootOrdered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L167-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.cmpEq.RootOrdered_congr\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">cmpEq</span>.<span class=\"name\">RootOrdered_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.cmpEq\">cmpEq</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\">Path.RootOrdered</a> <span class=\"fn\">cmp</span> <span class=\"fn\">t</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.cmpEq.RootOrdered_congr","kind":"theorem","line":160,"name":"Batteries.RBNode.cmpEq.RootOrdered_congr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L160-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">RootOrdered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>","info":{"doc":"`path.RootOrdered cmp v` is true if `v` would be able to fit into the hole\nwithout violating the ordering invariant.\n","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.RootOrdered","kind":"def","line":151,"name":"Batteries.RBNode.Path.RootOrdered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L151-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.zoom_zoomed₂\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_zoomed₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed\">Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed\">Zoomed</a> <span class=\"fn\">cut</span> <span class=\"fn\">path'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.zoom_zoomed₂","kind":"theorem","line":141,"name":"Batteries.RBNode.Path.zoom_zoomed₂","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L141-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Zoomed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"The property of a path returned by `t.zoom cut`. Each of the parents visited along the path have\nthe appropriate ordering relation to the cut.\n","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Zoomed","kind":"def","line":132,"name":"Batteries.RBNode.Path.Zoomed","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L132-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.del\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">del</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c'</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.DelProp\">DelProp</a> <span class=\"fn\">c'</span> <span class=\"fn\">t</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> → <span class=\"fn\">c'</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.del\">del</a></span> <span class=\"fn\">t</span> <span class=\"fn\">c'</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.del","kind":"theorem","line":113,"name":"Batteries.RBNode.Path.Balanced.del","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L113-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.insertNew\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">insertNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c</span> <span class=\"fn\">n</span> <span class=\"fn\">path</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.insertNew\">insertNew</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.insertNew","kind":"theorem","line":110,"name":"Batteries.RBNode.Path.Balanced.insertNew","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L110-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.ins\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">ins</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/WF.html#Batteries.RBNode.RedRed\">RedRed</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a>) <span class=\"fn\">t</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.ins\">ins</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.ins","kind":"theorem","line":94,"name":"Batteries.RBNode.Path.Balanced.ins","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L94-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Balanced.zoom\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">zoom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">c</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path'</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Balanced.zoom","kind":"theorem","line":80,"name":"Batteries.RBNode.Balanced.zoom","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L80-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.fill\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">path</span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill\">fill</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span></span></span></span></div></div>","info":{"doc":"The defining property of a balanced path: If `path` is a `c₀,n₀` tree with a `c,n` hole,\nthen filling the hole with a `c,n` tree yields a `c₀,n₀` tree.\n","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.fill","kind":"theorem","line":70,"name":"Batteries.RBNode.Path.Balanced.fill","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L70-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.blackR\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">blackR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">parent</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₂</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">parent</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.right\">right</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span> <span class=\"fn\">parent</span>)</span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span></span></span></div></div>","info":{"doc":"Descend into the right subtree of a black node. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.blackR","kind":"ctor","line":66,"name":"Batteries.RBNode.Path.Balanced.blackR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L66-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.blackL\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">blackL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₂</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">parent</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <span class=\"fn\">c₂</span> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">parent</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.left\">left</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">parent</span> <span class=\"fn\">v</span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">c₁</span> <span class=\"fn\">n</span></span></span></span></div></div>","info":{"doc":"Descend into the left subtree of a black node. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.blackL","kind":"ctor","line":63,"name":"Batteries.RBNode.Path.Balanced.blackL","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L63-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.redR\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">redR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">parent</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">parent</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.right\">right</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span> <span class=\"fn\">parent</span>)</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n</span></span></span></span></div></div>","info":{"doc":"Descend into the right subtree of a red node. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.redR","kind":"ctor","line":60,"name":"Batteries.RBNode.Path.Balanced.redR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L60-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.redL\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">redL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">parent</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Balanced\">Balanced</a></span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">parent</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.left\">left</a> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.red\">RBColor.red</a> <span class=\"fn\">parent</span> <span class=\"fn\">v</span> <span class=\"fn\">y</span>)</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor.black\">RBColor.black</a> <span class=\"fn\">n</span></span></span></span></div></div>","info":{"doc":"Descend into the left subtree of a red node. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.redL","kind":"ctor","line":57,"name":"Batteries.RBNode.Path.Balanced.redL","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L57-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.root\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\">Path.Balanced</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span> <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.root\">root</a> <span class=\"fn\">c₀</span> <span class=\"fn\">n₀</span></span></div></div>","info":{"doc":"The root of the tree is `c₀, n₀`-balanced by assumption. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced.root","kind":"ctor","line":55,"name":"Batteries.RBNode.Path.Balanced.root","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">Balanced</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₀</span> : <a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₀</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBColor\">RBColor</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></div></div>","info":{"doc":"The balance invariant for a path. `path.Balanced c₀ n₀ c n` means that `path` is a red-black tree\nwith balance invariant `c₀, n₀`, but it has a \"hole\" where a tree with balance invariant `c, n`\nhas been removed. The defining property is `Balanced.fill`: if `path.Balanced c₀ n₀ c n` and you\nfill the hole with a tree satisfying `t.Balanced c n`, then `(path.fill t).Balanced c₀ n₀` .\n","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.Balanced","kind":"inductive","line":48,"name":"Batteries.RBNode.Path.Balanced","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L48-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.zoom_fill\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_fill</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">path'</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">t'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">path'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill\">fill</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path'</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill\">fill</a></span> <span class=\"fn\">t'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.zoom_fill","kind":"theorem","line":44,"name":"Batteries.RBNode.Path.zoom_fill","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L44-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.zoom_fill'\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">zoom_fill'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cut</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.fill'\">fill'</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.zoom\">zoom</a> <span class=\"fn\">cut</span> <span class=\"fn\">t</span> <span class=\"fn\">path</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">path</span>.<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path.fill\">fill</a></span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.zoom_fill'","kind":"theorem","line":38,"name":"Batteries.RBNode.Path.zoom_fill'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L38-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.fill'\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">Path</span>.<span class=\"name\">fill'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode.Path\">Path</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Same as `fill` but taking its arguments in a pair for easier composition with `zoom`. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.Path.fill'","kind":"def","line":35,"name":"Batteries.RBNode.Path.fill'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L35-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.OnRoot\"><span class=\"name\">Batteries</span>.<span class=\"name\">RBNode</span>.<span class=\"name\">OnRoot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBNode\">RBNode</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Asserts that property `p` holds on the root of the tree, if any. ","docLink":"./Batteries/Data/RBMap/Alter.html#Batteries.RBNode.OnRoot","kind":"def","line":28,"name":"Batteries.RBNode.OnRoot","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/RBMap/Alter.lean#L28-L31"}}],"imports":["Init","Batteries.Data.RBMap.WF"],"instances":[],"name":"Batteries.Data.RBMap.Alter"}