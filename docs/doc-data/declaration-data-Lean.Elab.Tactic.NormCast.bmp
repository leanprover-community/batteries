{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.elabAddElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">elabAddElim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Command.CommandElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.elabAddElim","kind":"def","line":279,"name":"Lean.Elab.Tactic.NormCast.elabAddElim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L279-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.evalPushCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">evalPushCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.evalPushCast","kind":"def","line":270,"name":"Lean.Elab.Tactic.NormCast.evalPushCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L270-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.evalConvNormCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">evalConvNormCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.evalConvNormCast","kind":"def","line":265,"name":"Lean.Elab.Tactic.NormCast.evalConvNormCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L265-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.evalNormCast0\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">evalNormCast0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.evalNormCast0","kind":"def","line":249,"name":"Lean.Elab.Tactic.NormCast.evalNormCast0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L249-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.normCastHyp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">normCastHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">Meta.Simp.NormCastConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Implementation of the `norm_cast` tactic when operating on a hypothesis. ","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.normCastHyp","kind":"def","line":242,"name":"Lean.Elab.Tactic.NormCast.normCastHyp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L242-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.normCastTarget\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">normCastTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">Meta.Simp.NormCastConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Implementation of the `norm_cast` tactic when operating on the main goal. ","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.normCastTarget","kind":"def","line":235,"name":"Lean.Elab.Tactic.NormCast.normCastTarget","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L235-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.elabModCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">elabModCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">Term.TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.elabModCast","kind":"def","line":218,"name":"Lean.Elab.Tactic.NormCast.elabModCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L218-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.derive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">derive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">Meta.Simp.NormCastConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Meta.Simp.Result</a></span></div></div>","info":{"doc":"The core simplification routine of `normCast`.\n","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.derive","kind":"def","line":176,"name":"Lean.Elab.Tactic.NormCast.derive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L176-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.elabNormCastConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">elabNormCastConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">Meta.Simp.NormCastConfig</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.elabNormCastConfig","kind":"def","line":174,"name":"Lean.Elab.Tactic.NormCast.elabNormCastConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.numeralToCoe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">numeralToCoe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Meta.Simp.Result</a></span></div></div>","info":{"doc":"If possible, rewrites `(n : Î±)` to `(Nat.cast n : Î±)` where `n` is a numeral and `Î± â‰  â„•`.\nReturns a pair of the new expression and proof that they are equal.\n","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.numeralToCoe","kind":"def","line":163,"name":"Lean.Elab.Tactic.NormCast.numeralToCoe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L163-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.upwardAndElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">upwardAndElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">up</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Meta.Simp.Step</a></span></div></div>","info":{"doc":"Core rewriting function used in the \"squash\" step, which moves casts upwards\nand eliminates them.\n\nIt tries to rewrite an expression using the elim and move lemmas.\nOn failure, it calls the splitting procedure heuristic.\n","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.upwardAndElim","kind":"def","line":146,"name":"Lean.Elab.Tactic.NormCast.upwardAndElim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L146-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.prove\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">prove</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Discharging function used during simplification in the \"squash\" step.\n","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.prove","kind":"def","line":137,"name":"Lean.Elab.Tactic.NormCast.prove","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L137-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.splittingProcedure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">splittingProcedure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Meta.Simp.Result</a></span></div></div>","info":{"doc":"This is the main heuristic used alongside the elim and move lemmas.\nThe goal is to help casts move past operators by adding intermediate casts.\nAn expression of the shape:\n```\nop (â†‘(x : Î±) : Î³) (â†‘(y : Î²) : Î³)\n```\nis rewritten to:\n```\nop (â†‘(â†‘(x : Î±) : Î²) : Î³) (â†‘(y : Î²) : Î³)\n```\nwhen\n```\n(â†‘(â†‘(x : Î±) : Î²) : Î³) = (â†‘(x : Î±) : Î³)\n```\ncan be proven with a squash lemma\n","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.splittingProcedure","kind":"def","line":74,"name":"Lean.Elab.Tactic.NormCast.splittingProcedure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L74-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.isNumeral?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">isNumeral?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"Checks whether an expression is a numeral in some type,\nand if so returns that type and the natural number.\n","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.isNumeral?","kind":"def","line":60,"name":"Lean.Elab.Tactic.NormCast.isNumeral?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L60-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.isCoeOf?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">isCoeOf?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Checks whether an expression is the coercion of some other expression,\nand if so returns that expression.\n","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.isCoeOf?","kind":"def","line":49,"name":"Lean.Elab.Tactic.NormCast.isCoeOf?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L49-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.mkCoe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">mkCoe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Constructs the expression `(e : ty)`. ","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.mkCoe","kind":"def","line":44,"name":"Lean.Elab.Tactic.NormCast.mkCoe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L44-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.proveEqUsingDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">proveEqUsingDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Meta.Simp.Result</a>)</span></span></div></div>","info":{"doc":"Proves `a = b` by simplifying using move and squash lemmas. ","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.proveEqUsingDown","kind":"def","line":39,"name":"Lean.Elab.Tactic.NormCast.proveEqUsingDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L39-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.proveEqUsing\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">proveEqUsing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Meta.SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Meta.Simp.Result</a>)</span></span></div></div>","info":{"doc":"Proves `a = b` using the given simp set. ","docLink":"./Lean/Elab/Tactic/NormCast.html#Lean.Elab.Tactic.NormCast.proveEqUsing","kind":"def","line":26,"name":"Lean.Elab.Tactic.NormCast.proveEqUsing","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/NormCast.lean#L26-L37"}}],"imports":["Lean.Meta.Tactic.NormCast","Lean.Elab.Tactic.Conv.Simp"],"instances":[],"name":"Lean.Elab.Tactic.NormCast"}