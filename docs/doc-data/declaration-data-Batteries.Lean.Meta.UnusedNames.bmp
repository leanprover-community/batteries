{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnusedUserNames</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestion</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Obtain `n` distinct names such that each name is unused in the current local\ncontext and `suggestion` is a prefix of each name.\n","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserNames","kind":"def","line":136,"name":"Lean.Meta.getUnusedUserNames","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L136-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnusedUserName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestion</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Obtain a name `n` such that `n` is unused in the current local context and\n`suggestion` is a prefix of `n`.\n","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.Meta.getUnusedUserName","kind":"def","line":129,"name":"Lean.Meta.getUnusedUserName","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L129-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNames\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedUserNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestion</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Obtain `n` distinct names such that each name is unused in the given local\ncontext and `suggestion` is a prefix of each name.\n","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNames","kind":"def","line":103,"name":"Lean.LocalContext.getUnusedUserNames","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L103-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedUserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestion</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Obtain a name `n` such that `n` is unused in the given local context and\n`suggestion` is a prefix of `n`. This is similar to `getUnusedName` but uses\na different algorithm which may or may not be faster.\n","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserName","kind":"def","line":92,"name":"Lean.LocalContext.getUnusedUserName","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L92-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNameIndex\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedUserNameIndex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestion</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Obtain the least natural number `i` such that `suggestion ++ \"_i\"` is an unused\nname in the given local context. If `suggestion` itself is unused, the result\nis `none`.\n","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.LocalContext.getUnusedUserNameIndex","kind":"def","line":68,"name":"Lean.LocalContext.getUnusedUserNameIndex","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L68-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.matchUpToIndexSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">matchUpToIndexSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">query</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\">MatchUpToIndexSuffix</a></div></div>","info":{"doc":"Succeeds if `n` is equal to `query`, except `n` may have an additional `_i`\nsuffix for some natural number `i`. More specifically:\n\n- If `n = query`, the result is `exactMatch`.\n- If `n = query ++ \"_i\"` for some natural number `i`, the result is\n  `suffixMatch i`.\n- Otherwise the result is `noMatch`.\n","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.matchUpToIndexSuffix","kind":"def","line":35,"name":"Lean.Name.matchUpToIndexSuffix","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L35-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.suffixMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">MatchUpToIndexSuffix</span>.<span class=\"name\">suffixMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\">MatchUpToIndexSuffix</a></div></div>","info":{"doc":"Match up to suffix. ","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.suffixMatch","kind":"ctor","line":32,"name":"Lean.Name.MatchUpToIndexSuffix.suffixMatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.noMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">MatchUpToIndexSuffix</span>.<span class=\"name\">noMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\">MatchUpToIndexSuffix</a></div></div>","info":{"doc":"No match. ","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.noMatch","kind":"ctor","line":30,"name":"Lean.Name.MatchUpToIndexSuffix.noMatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.exactMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">MatchUpToIndexSuffix</span>.<span class=\"name\">exactMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\">MatchUpToIndexSuffix</a></div></div>","info":{"doc":"Exact match. ","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix.exactMatch","kind":"ctor","line":28,"name":"Lean.Name.MatchUpToIndexSuffix.exactMatch","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">MatchUpToIndexSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result type of `Lean.Name.matchUpToIndexSuffix`. See there for details.\n","docLink":"./Batteries/Lean/Meta/UnusedNames.html#Lean.Name.MatchUpToIndexSuffix","kind":"inductive","line":24,"name":"Lean.Name.MatchUpToIndexSuffix","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/UnusedNames.lean#L24-L33"}}],"imports":["Init","Lean.LocalContext"],"instances":[],"name":"Batteries.Lean.Meta.UnusedNames"}