{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.unreachableTacticLinter\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">unreachableTacticLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>","info":{"doc":"Enables the 'unreachable tactic' linter. This will warn on any tactics that are never executed.\nFor example, in `example : True := by trivial <;> done`, the tactic `done` is never executed\nbecause `trivial` produces no subgoals; you could put `sorry` or `apply I_don't_exist`\nor anything else there and no error would result.\n\nA common source of such things is `simp <;> tac` in the case that `simp` improves and\ncloses a subgoal that was previously being closed by `tac`.\n","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.unreachableTacticLinter","kind":"def","line":95,"name":"Batteries.Linter.UnreachableTactic.unreachableTacticLinter","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L95-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.eraseUsedTactics\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">eraseUsedTactics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\"><a href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. ","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.eraseUsedTactics","kind":"opaque","line":83,"name":"Batteries.Linter.UnreachableTactic.eraseUsedTactics","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L83-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.eraseUsedTacticsList\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">eraseUsedTacticsList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trees</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. ","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.eraseUsedTacticsList","kind":"opaque","line":79,"name":"Batteries.Linter.UnreachableTactic.eraseUsedTacticsList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L79-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.getTactics\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">getTactics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ignoreTacticKinds</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameHashSet\">Lean.NameHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isTacKind</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Accumulates the set of tactic syntaxes that should be evaluated at least once. ","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.getTactics","kind":"opaque","line":68,"name":"Batteries.Linter.UnreachableTactic.getTactics","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L68-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.addIgnoreTacticKind\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">addIgnoreTacticKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a new syntax kind whose children will be ignored by the `unreachableTactic` linter.\nThis should be called from an `initialize` block.\n","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.addIgnoreTacticKind","kind":"def","line":60,"name":"Batteries.Linter.UnreachableTactic.addIgnoreTacticKind","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L60-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.isIgnoreTacticKind\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">isIgnoreTacticKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ignoreTacticKinds</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameHashSet\">Lean.NameHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Is this a syntax kind that contains intentionally unevaluated tactic subterms? ","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.isIgnoreTacticKind","kind":"def","line":54,"name":"Batteries.Linter.UnreachableTactic.isIgnoreTacticKind","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L54-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.ignoreTacticKindsRef\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">ignoreTacticKindsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameHashSet\">Lean.NameHashSet</a></span></div></div>","info":{"doc":"A list of blacklisted syntax kinds, which are expected to have subterms that contain\nunevaluated tactics.\n","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.ignoreTacticKindsRef","kind":"opaque","line":40,"name":"Batteries.Linter.UnreachableTactic.ignoreTacticKindsRef","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L40-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.M\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The monad for collecting used tactic syntaxes. ","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.M","kind":"def","line":37,"name":"Batteries.Linter.UnreachableTactic.M","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.getLinterUnreachableTactic\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnreachableTactic</span>.<span class=\"name\">getLinterUnreachableTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Lean/Linter/Basic.html#Lean.Linter.LinterOptions\">Lean.Linter.LinterOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Gets the value of the `linter.unreachableTactic` option. ","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.UnreachableTactic.getLinterUnreachableTactic","kind":"def","line":33,"name":"Batteries.Linter.UnreachableTactic.getLinterUnreachableTactic","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L33-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.linter.unreachableTactic\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">unreachableTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Enables the 'unreachable tactic' linter. This will warn on any tactics that are never executed.\nFor example, in `example : True := by trivial <;> done`, the tactic `done` is never executed\nbecause `trivial` produces no subgoals; you could put `sorry` or `apply I_don't_exist`\nor anything else there and no error would result.\n\nA common source of such things is `simp <;> tac` in the case that `simp` improves and\ncloses a subgoal that was previously being closed by `tac`.\n","docLink":"./Batteries/Linter/UnreachableTactic.html#Batteries.Linter.linter.unreachableTactic","kind":"opaque","line":18,"name":"Batteries.Linter.linter.unreachableTactic","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Linter/UnreachableTactic.lean#L18-L30"}}],"imports":["Init","Lean.Elab.Command","Lean.Parser.Syntax","Batteries.Tactic.Unreachable","Lean.Linter.Basic"],"instances":[],"name":"Batteries.Linter.UnreachableTactic"}