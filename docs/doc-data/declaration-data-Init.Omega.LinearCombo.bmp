{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul_eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mul_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.isZero\">isZero</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.isZero\">isZero</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul\">mul</a></span> <span class=\"fn\">l₂</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul_eval","kind":"theorem","line":188,"name":"Lean.Omega.LinearCombo.mul_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L188-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul_eval_of_const_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mul_eval_of_const_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.isZero\">isZero</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul\">mul</a></span> <span class=\"fn\">l₂</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul_eval_of_const_right","kind":"theorem","line":182,"name":"Lean.Omega.LinearCombo.mul_eval_of_const_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L182-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul_eval_of_const_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mul_eval_of_const_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.isZero\">isZero</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul\">mul</a></span> <span class=\"fn\">l₂</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul_eval_of_const_left","kind":"theorem","line":176,"name":"Lean.Omega.LinearCombo.mul_eval_of_const_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L176-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></div></div>","info":{"doc":"Multiplication of two linear combinations.\nThis is useful only if at least one of the linear combinations is constant,\nand otherwise should be considered as a junk value.\n","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mul","kind":"def","line":168,"name":"Lean.Omega.LinearCombo.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L168-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul_eval_comm\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul_eval_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">lc</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lc</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul_eval_comm","kind":"theorem","line":164,"name":"Lean.Omega.LinearCombo.smul_eval_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L164-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul_eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">lc</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lc</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul_eval","kind":"theorem","line":159,"name":"Lean.Omega.LinearCombo.smul_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L159-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub_eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub_eval","kind":"theorem","line":155,"name":"Lean.Omega.LinearCombo.sub_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L155-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.neg_eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">neg_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">lc</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lc</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.neg_eval","kind":"theorem","line":151,"name":"Lean.Omega.LinearCombo.neg_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L151-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.add_eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">add_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.add_eval","kind":"theorem","line":144,"name":"Lean.Omega.LinearCombo.add_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L144-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul_coeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul_coeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">lc</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">lc</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul_coeffs","kind":"theorem","line":142,"name":"Lean.Omega.LinearCombo.smul_coeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul_const\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">lc</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">lc</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul_const","kind":"theorem","line":141,"name":"Lean.Omega.LinearCombo.smul_const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L141-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instHMulInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instHMulInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMul\">HMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instHMulInt","kind":"instance","line":139,"name":"Lean.Omega.LinearCombo.instHMulInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></div></div>","info":{"doc":"Implementation of scalar multiplication of a `LinearCombo` by an `Int`. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.smul","kind":"def","line":134,"name":"Lean.Omega.LinearCombo.smul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L134-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">l₂</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub_eq_add_neg","kind":"theorem","line":128,"name":"Lean.Omega.LinearCombo.sub_eq_add_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L128-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.neg_coeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">neg_coeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">l</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.neg_coeffs","kind":"theorem","line":126,"name":"Lean.Omega.LinearCombo.neg_coeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.neg_const\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">neg_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">l</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.neg_const","kind":"theorem","line":125,"name":"Lean.Omega.LinearCombo.neg_const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instNeg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instNeg","kind":"instance","line":123,"name":"Lean.Omega.LinearCombo.instNeg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></div></div>","info":{"doc":"Implementation of negation on `LinearCombo`. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.neg","kind":"def","line":118,"name":"Lean.Omega.LinearCombo.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L118-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub_coeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub_coeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub_coeffs","kind":"theorem","line":116,"name":"Lean.Omega.LinearCombo.sub_coeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L116-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub_const\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub_const","kind":"theorem","line":115,"name":"Lean.Omega.LinearCombo.sub_const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instSub","kind":"instance","line":113,"name":"Lean.Omega.LinearCombo.instSub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></div></div>","info":{"doc":"Implementation of subtraction on `LinearCombo`. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.sub","kind":"def","line":108,"name":"Lean.Omega.LinearCombo.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L108-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.add_coeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">add_coeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.add_coeffs","kind":"theorem","line":106,"name":"Lean.Omega.LinearCombo.add_coeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.add_const\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">add_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.add_const","kind":"theorem","line":105,"name":"Lean.Omega.LinearCombo.add_const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instAdd","kind":"instance","line":103,"name":"Lean.Omega.LinearCombo.instAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></div></div>","info":{"doc":"Implementation of addition on `LinearCombo`. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.add","kind":"def","line":98,"name":"Lean.Omega.LinearCombo.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L98-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_9\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_9</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1 </span><span class=\"fn\">a2 </span><span class=\"fn\">a3 </span><span class=\"fn\">a4 </span><span class=\"fn\">a5 </span><span class=\"fn\">a6 </span><span class=\"fn\">a7 </span><span class=\"fn\">a8 </span><span class=\"fn\">a9</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">9</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a6</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a7</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a8</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a9</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a9</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_9","kind":"theorem","line":94,"name":"Lean.Omega.LinearCombo.coordinate_eval_9","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L94-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_8\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1 </span><span class=\"fn\">a2 </span><span class=\"fn\">a3 </span><span class=\"fn\">a4 </span><span class=\"fn\">a5 </span><span class=\"fn\">a6 </span><span class=\"fn\">a7 </span><span class=\"fn\">a8</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">8</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a6</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a7</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a8</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a8</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_8","kind":"theorem","line":91,"name":"Lean.Omega.LinearCombo.coordinate_eval_8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L91-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_7\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_7</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1 </span><span class=\"fn\">a2 </span><span class=\"fn\">a3 </span><span class=\"fn\">a4 </span><span class=\"fn\">a5 </span><span class=\"fn\">a6 </span><span class=\"fn\">a7</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">7</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a6</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a7</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a7</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_7","kind":"theorem","line":88,"name":"Lean.Omega.LinearCombo.coordinate_eval_7","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L88-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_6\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_6</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1 </span><span class=\"fn\">a2 </span><span class=\"fn\">a3 </span><span class=\"fn\">a4 </span><span class=\"fn\">a5 </span><span class=\"fn\">a6</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">6</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a6</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a6</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_6","kind":"theorem","line":86,"name":"Lean.Omega.LinearCombo.coordinate_eval_6","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L86-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_5\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_5</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1 </span><span class=\"fn\">a2 </span><span class=\"fn\">a3 </span><span class=\"fn\">a4 </span><span class=\"fn\">a5</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">5</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a5</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a5</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_5","kind":"theorem","line":84,"name":"Lean.Omega.LinearCombo.coordinate_eval_5","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L84-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_4\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_4</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1 </span><span class=\"fn\">a2 </span><span class=\"fn\">a3 </span><span class=\"fn\">a4</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">4</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a4</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a4</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_4","kind":"theorem","line":82,"name":"Lean.Omega.LinearCombo.coordinate_eval_4","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_3\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1 </span><span class=\"fn\">a2 </span><span class=\"fn\">a3</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">3</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a3</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a3</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_3","kind":"theorem","line":80,"name":"Lean.Omega.LinearCombo.coordinate_eval_3","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L80-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_2\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1 </span><span class=\"fn\">a2</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a2</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a2</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_2","kind":"theorem","line":79,"name":"Lean.Omega.LinearCombo.coordinate_eval_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0 </span><span class=\"fn\">a1</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">1</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">a1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a1</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_1","kind":"theorem","line":78,"name":"Lean.Omega.LinearCombo.coordinate_eval_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_0\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval_0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a0</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.ofList\">Coeffs.ofList</a> (<span class=\"fn\">a0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">t</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval_0","kind":"theorem","line":77,"name":"Lean.Omega.LinearCombo.coordinate_eval_0","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\">coordinate</a> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate_eval","kind":"theorem","line":73,"name":"Lean.Omega.LinearCombo.coordinate_eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L73-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coordinate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></div></div>","info":{"doc":"The `i`-th coordinate function. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coordinate","kind":"def","line":68,"name":"Lean.Omega.LinearCombo.coordinate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L68-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">eval_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lc</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\">eval</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">lc</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval_nil","kind":"theorem","line":65,"name":"Lean.Omega.LinearCombo.eval_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lc</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">values</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Evaluate a linear combination `⟨r, [c_1, …, c_k]⟩` at values `[v_1, …, v_k]` to obtain\n`r + (c_1 * x_1 + (c_2 * x_2 + ... (c_k * x_k + 0))))`.\n","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.eval","kind":"def","line":58,"name":"Lean.Omega.LinearCombo.eval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L58-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.isAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">isAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check if a linear combination is an atom, i.e. the constant term is zero and there is exactly one nonzero coefficient, which is one. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.isAtom","kind":"def","line":54,"name":"Lean.Omega.LinearCombo.isAtom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\">const</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\">coeffs</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.ext","kind":"theorem","line":48,"name":"Lean.Omega.LinearCombo.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L48-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instInhabited","kind":"instance","line":46,"name":"Lean.Omega.LinearCombo.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.instToString","kind":"instance","line":42,"name":"Lean.Omega.LinearCombo.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L42-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.instReprLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instReprLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.instReprLinearCombo","kind":"instance","line":32,"name":"Lean.Omega.instReprLinearCombo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.instReprLinearCombo.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instReprLinearCombo</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.instReprLinearCombo.repr","kind":"def","line":32,"name":"Lean.Omega.instReprLinearCombo.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.instDecidableEqLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instDecidableEqLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.instDecidableEqLinearCombo","kind":"instance","line":32,"name":"Lean.Omega.instDecidableEqLinearCombo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.instDecidableEqLinearCombo.decEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instDecidableEqLinearCombo</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.instDecidableEqLinearCombo.decEq","kind":"def","line":32,"name":"Lean.Omega.instDecidableEqLinearCombo.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">coeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>","info":{"doc":"Coefficients of the atoms. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.coeffs","kind":"def","line":31,"name":"Lean.Omega.LinearCombo.coeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Constant term. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.const","kind":"def","line":29,"name":"Lean.Omega.LinearCombo.const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">const</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeffs</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">LinearCombo</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo.mk","kind":"ctor","line":27,"name":"Lean.Omega.LinearCombo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Internal representation of a linear combination of atoms, and a constant term. ","docLink":"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo","kind":"structure","line":26,"name":"Lean.Omega.LinearCombo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/LinearCombo.lean#L26-L32"}}],"imports":["Init.Omega.Coeffs","Init.Data.ToString.Macro"],"instances":[{"className":"Decidable","name":"Lean.Omega.instDecidableEqLinearCombo","typeNames":["Eq"]},{"className":"Repr","name":"Lean.Omega.instReprLinearCombo","typeNames":["Lean.Omega.LinearCombo"]},{"className":"ToString","name":"Lean.Omega.LinearCombo.instToString","typeNames":["Lean.Omega.LinearCombo"]},{"className":"Inhabited","name":"Lean.Omega.LinearCombo.instInhabited","typeNames":["Lean.Omega.LinearCombo"]},{"className":"Add","name":"Lean.Omega.LinearCombo.instAdd","typeNames":["Lean.Omega.LinearCombo"]},{"className":"Sub","name":"Lean.Omega.LinearCombo.instSub","typeNames":["Lean.Omega.LinearCombo"]},{"className":"Neg","name":"Lean.Omega.LinearCombo.instNeg","typeNames":["Lean.Omega.LinearCombo"]},{"className":"HMul","name":"Lean.Omega.LinearCombo.instHMulInt","typeNames":["Int","Lean.Omega.LinearCombo","Lean.Omega.LinearCombo"]}],"name":"Init.Omega.LinearCombo"}