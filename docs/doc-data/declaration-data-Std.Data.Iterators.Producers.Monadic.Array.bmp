{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorSizePartialArrayIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorSizePartialArrayIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSizePartial\">IteratorSizePartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorSizePartialArrayIterator","kind":"instance","line":138,"name":"Std.Iterators.instIteratorSizePartialArrayIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L138-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorSizeArrayIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorSizeArrayIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorSizeArrayIterator","kind":"instance","line":134,"name":"Std.Iterators.instIteratorSizeArrayIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L134-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorLoopPartialArrayIteratorOfMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorLoopPartialArrayIteratorOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> x → <a href=\"./foundational_types.html\">Type</a> x'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorLoopPartialArrayIteratorOfMonad","kind":"instance","line":129,"name":"Std.Iterators.instIteratorLoopPartialArrayIteratorOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L129-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorLoopArrayIteratorOfMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorLoopArrayIteratorOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> x → <a href=\"./foundational_types.html\">Type</a> x'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">IteratorLoop</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorLoopArrayIteratorOfMonad","kind":"instance","line":124,"name":"Std.Iterators.instIteratorLoopArrayIteratorOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L124-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorCollectPartialArrayIteratorOfMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorCollectPartialArrayIteratorOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w''</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorCollectPartialArrayIteratorOfMonad","kind":"instance","line":119,"name":"Std.Iterators.instIteratorCollectPartialArrayIteratorOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L119-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorCollectArrayIteratorOfMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorCollectArrayIteratorOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w''</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorCollectArrayIteratorOfMonad","kind":"instance","line":114,"name":"Std.Iterators.instIteratorCollectArrayIteratorOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L114-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instFiniteArrayIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instFiniteArrayIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instFiniteArrayIterator","kind":"instance","line":111,"name":"Std.Iterators.instFiniteArrayIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L111-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorArrayIteratorOfPure\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorArrayIteratorOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.instIteratorArrayIteratorOfPure","kind":"instance","line":77,"name":"Std.Iterators.instIteratorArrayIteratorOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L77-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\"><span class=\"name\">Array</span>.<span class=\"name\">iterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">Std.IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns a finite monadic iterator for the given array.\nThe iterator yields the elements of the array in order and then terminates. There are no side\neffects.\n\nThe pure version of this iterator is `Array.iter`.\n\n**Termination properties:**\n\n* `Finite` instance: always\n* `Productive` instance: always\n","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM","kind":"def","line":60,"name":"Array.iterM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L60-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\"><span class=\"name\">Array</span>.<span class=\"name\">iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">Std.IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns a finite monadic iterator for the given array starting at the given index.\nThe iterator yields the elements of the array in order and then terminates.\n\nThe pure version of this iterator is `Array.iterFromIdx`.\n\n**Termination properties:**\n\n* `Finite` instance: always\n* `Productive` instance: always\n","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM","kind":"def","line":43,"name":"Array.iterFromIdxM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L43-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.exists_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ArrayIterator</span>.<span class=\"name\">exists_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">s</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">array</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.mk\">{</a> <span class=\"fn\">array</span> := <span class=\"fn\">array</span>, <span class=\"fn\">pos</span> := <span class=\"fn\">pos</span> <a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.mk\">}</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.exists_iff","kind":"theorem","line":35,"name":"Std.Iterators.ArrayIterator.exists_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L35-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.pos\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ArrayIterator</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Internal implementation detail of the iterator library. ","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.pos","kind":"def","line":33,"name":"Std.Iterators.ArrayIterator.pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.array\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ArrayIterator</span>.<span class=\"name\">array</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Internal implementation detail of the iterator library. ","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.array","kind":"def","line":31,"name":"Std.Iterators.ArrayIterator.array","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ArrayIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.mk","kind":"ctor","line":29,"name":"Std.Iterators.ArrayIterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.ext\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ArrayIterator</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">array</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.array\">array</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.array\">array</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.pos\">pos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.pos\">pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.ext","kind":"theorem","line":28,"name":"Std.Iterators.ArrayIterator.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.ext_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ArrayIterator</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\">ArrayIterator</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.array\">array</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.array\">array</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.pos\">pos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.pos\">pos</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.ext_iff","kind":"theorem","line":28,"name":"Std.Iterators.ArrayIterator.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ArrayIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>","info":{"doc":"The underlying state of a list iterator. Its contents are internal and should\nnot be used by downstream users of the library.\n","docLink":"./Std/Data/Iterators/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator","kind":"structure","line":24,"name":"Std.Iterators.ArrayIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/Array.lean#L24-L33"}}],"imports":["Init.Data.Iterators.Consumers","Init.Data.Iterators.Internal.Termination"],"instances":[{"className":"Std.Iterators.Iterator","name":"Std.Iterators.instIteratorArrayIteratorOfPure","typeNames":["Std.Iterators.ArrayIterator"]},{"className":"Std.Iterators.Finite","name":"Std.Iterators.instFiniteArrayIterator","typeNames":["Std.Iterators.ArrayIterator"]},{"className":"Std.Iterators.IteratorCollect","name":"Std.Iterators.instIteratorCollectArrayIteratorOfMonad","typeNames":["Std.Iterators.ArrayIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"Std.Iterators.instIteratorCollectPartialArrayIteratorOfMonad","typeNames":["Std.Iterators.ArrayIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"Std.Iterators.instIteratorLoopArrayIteratorOfMonad","typeNames":["Std.Iterators.ArrayIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"Std.Iterators.instIteratorLoopPartialArrayIteratorOfMonad","typeNames":["Std.Iterators.ArrayIterator"]},{"className":"Std.Iterators.IteratorSize","name":"Std.Iterators.instIteratorSizeArrayIterator","typeNames":["Std.Iterators.ArrayIterator"]},{"className":"Std.Iterators.IteratorSizePartial","name":"Std.Iterators.instIteratorSizePartialArrayIterator","typeNames":["Std.Iterators.ArrayIterator"]}],"name":"Std.Data.Iterators.Producers.Monadic.Array"}