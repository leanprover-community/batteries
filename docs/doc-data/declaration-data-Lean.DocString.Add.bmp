{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addVersoModDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">addVersoModDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <a href=\"./Lean/Data/DeclarationRange.html#Lean.DeclarationRange\">DeclarationRange</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Doc.Parser.document</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a Verso docstring to the environment.\n\n`binders` should be the syntax of the parameters to the constant that is being documented, as a null\nnode that contains a sequence of bracketed binders. It is used to allow interactive features such as\ndocument highlights and “find references” to work for documented parameters. If no parameter binders\nare available, pass `Syntax.missing` or an empty null node.\n","docLink":"./Lean/DocString/Add.html#Lean.addVersoModDocString","kind":"def","line":321,"name":"Lean.addVersoModDocString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L321-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addDocString'\"><span class=\"name\">Lean</span>.<span class=\"name\">addDocString'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docString?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a docstring to the environment, if it is provided. If no docstring is provided, nothing\nhappens.\n\nIf the option `doc.verso` is `true`, the docstring is processed as a Verso docstring. Otherwise, it\nis considered a Markdown docstring, and documentation links are validated. To explicitly control\nwhether the docstring is in Verso format, use `addDocStringOf` instead.\n\nFor Verso docstrings, `binders` should be the syntax of the parameters to the constant that is being\ndocumented, as a null node that contains a sequence of bracketed binders. It is used to allow\ninteractive features such as document highlights and “find references” to work for documented\nparameters. If no parameter binders are available, pass `Syntax.missing` or an empty null node.\n`binders` is not used for Markdown docstrings.\n\n","docLink":"./Lean/DocString/Add.html#Lean.addDocString'","kind":"def","line":296,"name":"Lean.addDocString'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L296-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">addDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a docstring to the environment.\n\nIf the option `doc.verso` is `true`, the docstring is processed as a Verso docstring. Otherwise, it\nis considered a Markdown docstring, and documentation links are validated. To explicitly control\nwhether the docstring is in Verso format, use `addDocStringOf` instead.\n\nFor Verso docstrings, `binders` should be the syntax of the parameters to the constant that is being\ndocumented, as a null node that contains a sequence of bracketed binders. It is used to allow\ninteractive features such as document highlights and “find references” to work for documented\nparameters. If no parameter binders are available, pass `Syntax.missing` or an empty null node.\n`binders` is not used for Markdown docstrings.\n","docLink":"./Lean/DocString/Add.html#Lean.addDocString","kind":"def","line":278,"name":"Lean.addDocString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L278-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.makeDocStringVerso\"><span class=\"name\">Lean</span>.<span class=\"name\">makeDocStringVerso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Interprets a docstring that has been saved as a Markdown string as Verso, elaborating it. This is\nused during bootstrapping.\n","docLink":"./Lean/DocString/Add.html#Lean.makeDocStringVerso","kind":"def","line":265,"name":"Lean.makeDocStringVerso","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L265-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addDocStringOf\"><span class=\"name\">Lean</span>.<span class=\"name\">addDocStringOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isVerso</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a docstring to the environment. If `isVerso` is `false`, then the docstring is interpreted as\nMarkdown.\n","docLink":"./Lean/DocString/Add.html#Lean.addDocStringOf","kind":"def","line":252,"name":"Lean.addDocStringOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L252-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addVersoDocStringFromString\"><span class=\"name\">Lean</span>.<span class=\"name\">addVersoDocStringFromString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a Verso docstring to the environment from a string value, which disables the interactive\nfeatures. This should be used for programs that add documentation when there is no syntax available.\n","docLink":"./Lean/DocString/Add.html#Lean.addVersoDocStringFromString","kind":"def","line":240,"name":"Lean.addVersoDocStringFromString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L240-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addVersoDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">addVersoDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a Verso docstring to the environment.\n\n`binders` should be the syntax of the parameters to the constant that is being documented, as a null\nnode that contains a sequence of bracketed binders. It is used to allow interactive features such as\ndocument highlights and “find references” to work for documented parameters. If no parameter binders\nare available, pass `Syntax.missing` or an empty null node.\n","docLink":"./Lean/DocString/Add.html#Lean.addVersoDocString","kind":"def","line":224,"name":"Lean.addVersoDocString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L224-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addVersoModDocStringCore\"><span class=\"name\">Lean</span>.<span class=\"name\">addVersoModDocStringCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docs</span> : <a href=\"./Lean/DocString/Extension.html#Lean.VersoModuleDocs.Snippet\">VersoModuleDocs.Snippet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds an elaborated Verso module docstring to the environment.\n","docLink":"./Lean/DocString/Add.html#Lean.addVersoModDocStringCore","kind":"def","line":211,"name":"Lean.addVersoModDocStringCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L211-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addVersoDocStringCore\"><span class=\"name\">Lean</span>.<span class=\"name\">addVersoDocStringCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docs</span> : <a href=\"./Lean/DocString/Extension.html#Lean.VersoDocString\">VersoDocString</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds an elaborated Verso docstring to the environment.\n","docLink":"./Lean/DocString/Add.html#Lean.addVersoDocStringCore","kind":"def","line":197,"name":"Lean.addVersoDocStringCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L197-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.addMarkdownDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">addMarkdownDocString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a Markdown docstring to the environment, validating documentation links.\n","docLink":"./Lean/DocString/Add.html#Lean.addMarkdownDocString","kind":"def","line":180,"name":"Lean.addMarkdownDocString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L180-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.versoDocStringFromString\"><span class=\"name\">Lean</span>.<span class=\"name\">versoDocStringFromString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Doc.Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Doc.Part</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a>)</span></span>)</span></div></div>","info":{"doc":"Adds a Verso docstring to the specified declaration, which should already be present in the\nenvironment. The docstring is added from a string value, rather than syntax, which means that the\ninteractive features are disabled.\n","docLink":"./Lean/DocString/Add.html#Lean.versoDocStringFromString","kind":"def","line":135,"name":"Lean.versoDocStringFromString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L135-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.versoModDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">versoModDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <a href=\"./Lean/Data/DeclarationRange.html#Lean.DeclarationRange\">DeclarationRange</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doc</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Doc.Parser.document</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/DocString/Extension.html#Lean.VersoModuleDocs.Snippet\">VersoModuleDocs.Snippet</a></span></div></div>","info":{"doc":"Parses and elaborates a Verso module docstring.\n","docLink":"./Lean/DocString/Add.html#Lean.versoModDocString","kind":"def","line":122,"name":"Lean.versoModDocString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L122-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.versoDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">versoDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Doc.Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Doc.Part</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a>)</span></span>)</span></div></div>","info":{"doc":"Elaborates a Verso docstring for the specified declaration, which should already be present in the\nenvironment.\n\n`binders` should be the syntax of the parameters to the constant that is being documented, as a null\nnode that contains a sequence of bracketed binders. It is used to allow interactive features such as\ndocument highlights and “find references” to work for documented parameters. If no parameter binders\nare available, pass `Syntax.missing` or an empty null node.\n","docLink":"./Lean/DocString/Add.html#Lean.versoDocString","kind":"def","line":103,"name":"Lean.versoDocString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L103-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.parseVersoDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">parseVersoDocString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Position.html#Lean.MonadFileMap\">MonadFileMap</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">MonadResolveName</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docComment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">`Lean.Parser.Command.docComment</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">`Lean.Parser.Command.moduleDoc</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>","info":{"doc":"Parses a docstring as Verso, returning the syntax if successful.\n\nWhen not successful, parser errors are logged.\n","docLink":"./Lean/DocString/Add.html#Lean.parseVersoDocString","kind":"def","line":47,"name":"Lean.parseVersoDocString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L47-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Add.html#Lean.validateDocComment\"><span class=\"name\">Lean</span>.<span class=\"name\">validateDocComment</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docstring</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Validates all links to the Lean reference manual in `docstring`.\n\nThis is intended to be used before saving a docstring that is later subject to rewriting with\n`rewriteManualLinks`.\n","docLink":"./Lean/DocString/Add.html#Lean.validateDocComment","kind":"def","line":23,"name":"Lean.validateDocComment","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Add.lean#L23-L44"}}],"imports":["Lean.Elab.DocString","Lean.DocString.Parser","Lean.Elab.Term.TermElabM","Std.Data.HashMap"],"instances":[],"name":"Lean.DocString.Add"}