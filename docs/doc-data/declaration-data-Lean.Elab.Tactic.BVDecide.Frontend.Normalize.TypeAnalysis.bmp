{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.typeAnalysisPass\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">typeAnalysisPass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Basic.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Pass\">Pass</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.typeAnalysisPass","kind":"def","line":197,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.typeAnalysisPass","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.lean#L197-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.addDefaultTypeAnalysisLemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">addDefaultTypeAnalysisLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Meta.SimpTheoremsArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Basic.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.PreProcessM\">PreProcessM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheoremsArray\">Meta.SimpTheoremsArray</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.addDefaultTypeAnalysisLemmas","kind":"def","line":184,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.addDefaultTypeAnalysisLemmas","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.lean#L184-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.isBuiltIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">isBuiltIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.isBuiltIn","kind":"def","line":181,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.isBuiltIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.lean#L181-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.builtinTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">builtinTypes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.builtinTypes","kind":"def","line":176,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.builtinTypes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.lean#L176-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.isSupportedMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">isSupportedMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Basic.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.MatchKind\">MatchKind</a>)</span></span></div></div>","info":{"doc":"Determine whether `declName` is an enum inductive `.match_x` definition that is supported, see\n`MatchKind` for the supported shapes.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.isSupportedMatch","kind":"def","line":25,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.isSupportedMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/TypeAnalysis.lean#L25-L174"}}],"imports":["Std.Tactic.BVDecide.Normalize.BitVec","Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Basic"],"instances":[],"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.TypeAnalysis"}