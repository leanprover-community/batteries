{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.shiftRight_or\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.shiftRight_or","kind":"theorem","line":767,"name":"ISize.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L767-L768"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.shiftRight_or\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.shiftRight_or","kind":"theorem","line":765,"name":"Int64.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L765-L766"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.shiftRight_or\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.shiftRight_or","kind":"theorem","line":763,"name":"Int32.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L763-L764"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.shiftRight_or\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.shiftRight_or","kind":"theorem","line":761,"name":"Int16.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L761-L762"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.shiftRight_or\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.shiftRight_or","kind":"theorem","line":759,"name":"Int8.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L759-L760"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.shiftRight_and\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.shiftRight_and","kind":"theorem","line":756,"name":"ISize.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L756-L757"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.shiftRight_and\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.shiftRight_and","kind":"theorem","line":754,"name":"Int64.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L754-L755"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.shiftRight_and\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.shiftRight_and","kind":"theorem","line":752,"name":"Int32.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L752-L753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.shiftRight_and\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.shiftRight_and","kind":"theorem","line":750,"name":"Int16.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L750-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.shiftRight_and\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.shiftRight_and","kind":"theorem","line":748,"name":"Int8.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L748-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.shiftRight_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.shiftRight_xor","kind":"theorem","line":745,"name":"ISize.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L745-L746"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.shiftRight_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.shiftRight_xor","kind":"theorem","line":743,"name":"Int64.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L743-L744"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.shiftRight_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.shiftRight_xor","kind":"theorem","line":741,"name":"Int32.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L741-L742"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.shiftRight_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.shiftRight_xor","kind":"theorem","line":739,"name":"Int16.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L739-L740"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.shiftRight_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.shiftRight_xor","kind":"theorem","line":737,"name":"Int8.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L737-L738"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.zero_shiftRight\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.zero_shiftRight","kind":"theorem","line":735,"name":"ISize.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L735-L735"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.zero_shiftRight\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.zero_shiftRight","kind":"theorem","line":734,"name":"Int64.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L734-L734"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.zero_shiftRight\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.zero_shiftRight","kind":"theorem","line":733,"name":"Int32.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L733-L733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.zero_shiftRight\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.zero_shiftRight","kind":"theorem","line":732,"name":"Int16.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L732-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.zero_shiftRight\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.zero_shiftRight","kind":"theorem","line":731,"name":"Int8.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L731-L731"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.shiftRight_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.shiftRight_zero","kind":"theorem","line":729,"name":"ISize.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L729-L729"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.shiftRight_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.shiftRight_zero","kind":"theorem","line":728,"name":"Int64.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L728-L728"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.shiftRight_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.shiftRight_zero","kind":"theorem","line":727,"name":"Int32.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L727-L727"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.shiftRight_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.shiftRight_zero","kind":"theorem","line":726,"name":"Int16.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L726-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.shiftRight_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.shiftRight_zero","kind":"theorem","line":725,"name":"Int8.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L725-L725"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":722,"name":"ISize.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L722-L723"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":720,"name":"Int64.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L720-L721"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":718,"name":"Int32.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L718-L719"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":716,"name":"Int16.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L716-L717"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":714,"name":"Int8.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L714-L715"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":711,"name":"ISize.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L711-L712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":709,"name":"Int64.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L709-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":707,"name":"Int32.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L707-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":705,"name":"Int16.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L705-L706"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":703,"name":"Int8.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L703-L704"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.shiftLeft_or\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.shiftLeft_or","kind":"theorem","line":700,"name":"ISize.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L700-L701"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.shiftLeft_or\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.shiftLeft_or","kind":"theorem","line":698,"name":"Int64.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L698-L699"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.shiftLeft_or\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.shiftLeft_or","kind":"theorem","line":696,"name":"Int32.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L696-L697"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.shiftLeft_or\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.shiftLeft_or","kind":"theorem","line":694,"name":"Int16.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L694-L695"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.shiftLeft_or\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.shiftLeft_or","kind":"theorem","line":692,"name":"Int8.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L692-L693"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.shiftLeft_and\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.shiftLeft_and","kind":"theorem","line":689,"name":"ISize.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L689-L690"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.shiftLeft_and\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.shiftLeft_and","kind":"theorem","line":687,"name":"Int64.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L687-L688"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.shiftLeft_and\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.shiftLeft_and","kind":"theorem","line":685,"name":"Int32.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L685-L686"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.shiftLeft_and\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.shiftLeft_and","kind":"theorem","line":683,"name":"Int16.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L683-L684"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.shiftLeft_and\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.shiftLeft_and","kind":"theorem","line":681,"name":"Int8.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L681-L682"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.shiftLeft_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.shiftLeft_xor","kind":"theorem","line":678,"name":"ISize.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L678-L679"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.shiftLeft_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.shiftLeft_xor","kind":"theorem","line":676,"name":"Int64.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L676-L677"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.shiftLeft_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.shiftLeft_xor","kind":"theorem","line":674,"name":"Int32.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L674-L675"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.shiftLeft_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.shiftLeft_xor","kind":"theorem","line":672,"name":"Int16.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L672-L673"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.shiftLeft_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.shiftLeft_xor","kind":"theorem","line":670,"name":"Int8.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L670-L671"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.zero_shiftLeft\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.zero_shiftLeft","kind":"theorem","line":668,"name":"ISize.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L668-L668"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.zero_shiftLeft\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.zero_shiftLeft","kind":"theorem","line":667,"name":"Int64.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L667-L667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.zero_shiftLeft\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.zero_shiftLeft","kind":"theorem","line":666,"name":"Int32.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L666-L666"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.zero_shiftLeft\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.zero_shiftLeft","kind":"theorem","line":665,"name":"Int16.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L665-L665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.zero_shiftLeft\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.zero_shiftLeft","kind":"theorem","line":664,"name":"Int8.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L664-L664"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.shiftLeft_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.shiftLeft_zero","kind":"theorem","line":662,"name":"ISize.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L662-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.shiftLeft_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.shiftLeft_zero","kind":"theorem","line":661,"name":"Int64.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L661-L661"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.shiftLeft_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.shiftLeft_zero","kind":"theorem","line":660,"name":"Int32.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L660-L660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.shiftLeft_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.shiftLeft_zero","kind":"theorem","line":659,"name":"Int16.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L659-L659"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.shiftLeft_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.shiftLeft_zero","kind":"theorem","line":658,"name":"Int8.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L658-L658"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_not\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_not","kind":"theorem","line":655,"name":"ISize.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L655-L656"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_not\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_not","kind":"theorem","line":653,"name":"Int64.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L653-L654"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_not\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_not","kind":"theorem","line":651,"name":"Int32.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L651-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_not\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_not","kind":"theorem","line":649,"name":"Int16.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L649-L650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_not\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_not","kind":"theorem","line":647,"name":"Int8.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L647-L648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_xor","kind":"theorem","line":644,"name":"ISize.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L644-L645"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_xor","kind":"theorem","line":642,"name":"Int64.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L642-L643"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_xor","kind":"theorem","line":640,"name":"Int32.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L640-L641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_xor","kind":"theorem","line":638,"name":"Int16.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L638-L639"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_xor","kind":"theorem","line":636,"name":"Int8.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L636-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_ne_self\"><span class=\"name\">ISize</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_ne_self","kind":"theorem","line":634,"name":"ISize.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L634-L634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_ne_self\"><span class=\"name\">Int64</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_ne_self","kind":"theorem","line":633,"name":"Int64.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L633-L633"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_ne_self\"><span class=\"name\">Int32</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_ne_self","kind":"theorem","line":632,"name":"Int32.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L632-L632"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_ne_self\"><span class=\"name\">Int16</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_ne_self","kind":"theorem","line":631,"name":"Int16.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L631-L631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_ne_self\"><span class=\"name\">Int8</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_ne_self","kind":"theorem","line":630,"name":"Int8.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L630-L630"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.ne_not_self\"><span class=\"name\">ISize</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.ne_not_self","kind":"theorem","line":628,"name":"ISize.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L628-L628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.ne_not_self\"><span class=\"name\">Int64</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.ne_not_self","kind":"theorem","line":627,"name":"Int64.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L627-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.ne_not_self\"><span class=\"name\">Int32</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.ne_not_self","kind":"theorem","line":626,"name":"Int32.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L626-L626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.ne_not_self\"><span class=\"name\">Int16</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.ne_not_self","kind":"theorem","line":625,"name":"Int16.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L625-L625"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.ne_not_self\"><span class=\"name\">Int8</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.ne_not_self","kind":"theorem","line":624,"name":"Int8.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L624-L624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_eq_comm\"><span class=\"name\">ISize</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_eq_comm","kind":"theorem","line":621,"name":"ISize.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L621-L622"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_eq_comm\"><span class=\"name\">Int64</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_eq_comm","kind":"theorem","line":619,"name":"Int64.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L619-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_eq_comm\"><span class=\"name\">Int32</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_eq_comm","kind":"theorem","line":617,"name":"Int32.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L617-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_eq_comm\"><span class=\"name\">Int16</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_eq_comm","kind":"theorem","line":615,"name":"Int16.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L615-L616"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_eq_comm\"><span class=\"name\">Int8</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_eq_comm","kind":"theorem","line":613,"name":"Int8.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L613-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_or_self\"><span class=\"name\">ISize</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_or_self","kind":"theorem","line":611,"name":"ISize.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L611-L611"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_or_self\"><span class=\"name\">Int64</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_or_self","kind":"theorem","line":610,"name":"Int64.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L610-L610"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_or_self\"><span class=\"name\">Int32</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_or_self","kind":"theorem","line":609,"name":"Int32.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L609-L609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_or_self\"><span class=\"name\">Int16</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_or_self","kind":"theorem","line":608,"name":"Int16.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L608-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_or_self\"><span class=\"name\">Int8</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_or_self","kind":"theorem","line":607,"name":"Int8.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L607-L607"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.or_not_self\"><span class=\"name\">ISize</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.or_not_self","kind":"theorem","line":603,"name":"ISize.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L603-L605"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.or_not_self\"><span class=\"name\">Int64</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.or_not_self","kind":"theorem","line":600,"name":"Int64.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L600-L602"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.or_not_self\"><span class=\"name\">Int32</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.or_not_self","kind":"theorem","line":597,"name":"Int32.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L597-L599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.or_not_self\"><span class=\"name\">Int16</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.or_not_self","kind":"theorem","line":594,"name":"Int16.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L594-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.or_not_self\"><span class=\"name\">Int8</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.or_not_self","kind":"theorem","line":591,"name":"Int8.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L591-L593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_and_self\"><span class=\"name\">ISize</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_and_self","kind":"theorem","line":589,"name":"ISize.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L589-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_and_self\"><span class=\"name\">Int64</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_and_self","kind":"theorem","line":588,"name":"Int64.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L588-L588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_and_self\"><span class=\"name\">Int32</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_and_self","kind":"theorem","line":587,"name":"Int32.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L587-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_and_self\"><span class=\"name\">Int16</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_and_self","kind":"theorem","line":586,"name":"Int16.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L586-L586"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_and_self\"><span class=\"name\">Int8</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_and_self","kind":"theorem","line":585,"name":"Int8.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L585-L585"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.and_not_self\"><span class=\"name\">ISize</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.and_not_self","kind":"theorem","line":583,"name":"ISize.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L583-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.and_not_self\"><span class=\"name\">Int64</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.and_not_self","kind":"theorem","line":582,"name":"Int64.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L582-L582"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.and_not_self\"><span class=\"name\">Int32</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.and_not_self","kind":"theorem","line":581,"name":"Int32.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L581-L581"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.and_not_self\"><span class=\"name\">Int16</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.and_not_self","kind":"theorem","line":580,"name":"Int16.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L580-L580"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.and_not_self\"><span class=\"name\">Int8</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.and_not_self","kind":"theorem","line":579,"name":"Int8.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L579-L579"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_inj","kind":"theorem","line":577,"name":"ISize.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L577-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_inj","kind":"theorem","line":576,"name":"Int64.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L576-L576"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_inj","kind":"theorem","line":575,"name":"Int32.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L575-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_inj","kind":"theorem","line":574,"name":"Int16.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L574-L574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_inj","kind":"theorem","line":573,"name":"Int8.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L573-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_not\"><span class=\"name\">ISize</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_not","kind":"theorem","line":571,"name":"ISize.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L571-L571"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_not\"><span class=\"name\">Int64</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_not","kind":"theorem","line":570,"name":"Int64.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L570-L570"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_not\"><span class=\"name\">Int32</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_not","kind":"theorem","line":569,"name":"Int32.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L569-L569"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_not\"><span class=\"name\">Int16</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_not","kind":"theorem","line":568,"name":"Int16.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L568-L568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_not\"><span class=\"name\">Int8</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_not","kind":"theorem","line":567,"name":"Int8.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L567-L567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_neg_one\"><span class=\"name\">ISize</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_neg_one","kind":"theorem","line":565,"name":"ISize.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L565-L565"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_neg_one\"><span class=\"name\">Int64</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_neg_one","kind":"theorem","line":564,"name":"Int64.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L564-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_neg_one\"><span class=\"name\">Int32</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_neg_one","kind":"theorem","line":563,"name":"Int32.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L563-L563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_neg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_neg_one","kind":"theorem","line":562,"name":"Int16.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L562-L562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_neg_one","kind":"theorem","line":561,"name":"Int8.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L561-L561"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_zero","kind":"theorem","line":559,"name":"ISize.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L559-L559"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_zero","kind":"theorem","line":558,"name":"Int64.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L558-L558"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_zero","kind":"theorem","line":557,"name":"Int32.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L557-L557"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_zero","kind":"theorem","line":556,"name":"Int16.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L556-L556"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_zero","kind":"theorem","line":555,"name":"Int8.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L555-L555"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_right_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_right_inj","kind":"theorem","line":552,"name":"ISize.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L552-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_right_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_right_inj","kind":"theorem","line":550,"name":"Int64.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L550-L551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_right_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_right_inj","kind":"theorem","line":548,"name":"Int32.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L548-L549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_right_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_right_inj","kind":"theorem","line":546,"name":"Int16.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L546-L547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_right_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_right_inj","kind":"theorem","line":544,"name":"Int8.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L544-L545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_left_inj\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_left_inj","kind":"theorem","line":541,"name":"ISize.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L541-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_left_inj\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_left_inj","kind":"theorem","line":539,"name":"Int64.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L539-L540"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_left_inj\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_left_inj","kind":"theorem","line":537,"name":"Int32.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L537-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_left_inj\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_left_inj","kind":"theorem","line":535,"name":"Int16.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L535-L536"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_left_inj\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_left_inj","kind":"theorem","line":533,"name":"Int8.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L533-L534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_eq_zero_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_eq_zero_iff","kind":"theorem","line":531,"name":"ISize.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L531-L531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_eq_zero_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_eq_zero_iff","kind":"theorem","line":530,"name":"Int64.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L530-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_eq_zero_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_eq_zero_iff","kind":"theorem","line":529,"name":"Int32.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L529-L529"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_eq_zero_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_eq_zero_iff","kind":"theorem","line":528,"name":"Int16.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L528-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_eq_zero_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_eq_zero_iff","kind":"theorem","line":527,"name":"Int8.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L527-L527"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityISizeHXorOfNat\"><span class=\"name\">instLawfulCommIdentityISizeHXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityISizeHXorOfNat","kind":"instance","line":524,"name":"instLawfulCommIdentityISizeHXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L524-L525"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt64HXorOfNat\"><span class=\"name\">instLawfulCommIdentityInt64HXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt64HXorOfNat","kind":"instance","line":522,"name":"instLawfulCommIdentityInt64HXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L522-L523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt32HXorOfNat\"><span class=\"name\">instLawfulCommIdentityInt32HXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt32HXorOfNat","kind":"instance","line":520,"name":"instLawfulCommIdentityInt32HXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L520-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt16HXorOfNat\"><span class=\"name\">instLawfulCommIdentityInt16HXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt16HXorOfNat","kind":"instance","line":518,"name":"instLawfulCommIdentityInt16HXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L518-L519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt8HXorOfNat\"><span class=\"name\">instLawfulCommIdentityInt8HXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt8HXorOfNat","kind":"instance","line":516,"name":"instLawfulCommIdentityInt8HXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L516-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_neg_one\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_neg_one","kind":"theorem","line":514,"name":"ISize.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L514-L514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_neg_one\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_neg_one","kind":"theorem","line":513,"name":"Int64.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L513-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_neg_one\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_neg_one","kind":"theorem","line":512,"name":"Int32.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L512-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_neg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_neg_one","kind":"theorem","line":511,"name":"Int16.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L511-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_neg_one","kind":"theorem","line":510,"name":"Int8.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L510-L510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.neg_one_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.neg_one_xor","kind":"theorem","line":506,"name":"ISize.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L506-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.neg_one_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.neg_one_xor","kind":"theorem","line":503,"name":"Int64.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L503-L505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.neg_one_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.neg_one_xor","kind":"theorem","line":500,"name":"Int32.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L500-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.neg_one_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.neg_one_xor","kind":"theorem","line":497,"name":"Int16.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L497-L499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.neg_one_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.neg_one_xor","kind":"theorem","line":494,"name":"Int8.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L494-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.zero_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.zero_xor","kind":"theorem","line":492,"name":"ISize.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L492-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.zero_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.zero_xor","kind":"theorem","line":491,"name":"Int64.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L491-L491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.zero_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.zero_xor","kind":"theorem","line":490,"name":"Int32.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L490-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.zero_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.zero_xor","kind":"theorem","line":489,"name":"Int16.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L489-L489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.zero_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.zero_xor","kind":"theorem","line":488,"name":"Int8.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L488-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_zero","kind":"theorem","line":486,"name":"ISize.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L486-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_zero","kind":"theorem","line":485,"name":"Int64.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L485-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_zero","kind":"theorem","line":484,"name":"Int32.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L484-L484"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_zero","kind":"theorem","line":483,"name":"Int16.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L483-L483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_zero","kind":"theorem","line":482,"name":"Int8.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L482-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_self\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_self","kind":"theorem","line":480,"name":"ISize.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L480-L480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_self\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_self","kind":"theorem","line":479,"name":"Int64.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L479-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_self\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_self","kind":"theorem","line":478,"name":"Int32.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L478-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_self\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_self","kind":"theorem","line":477,"name":"Int16.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L477-L477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_self\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_self","kind":"theorem","line":476,"name":"Int8.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L476-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeISizeHXor\"><span class=\"name\">instCommutativeISizeHXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeISizeHXor","kind":"instance","line":474,"name":"instCommutativeISizeHXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L474-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt64HXor\"><span class=\"name\">instCommutativeInt64HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt64HXor","kind":"instance","line":473,"name":"instCommutativeInt64HXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L473-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt32HXor\"><span class=\"name\">instCommutativeInt32HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt32HXor","kind":"instance","line":472,"name":"instCommutativeInt32HXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L472-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt16HXor\"><span class=\"name\">instCommutativeInt16HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt16HXor","kind":"instance","line":471,"name":"instCommutativeInt16HXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L471-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt8HXor\"><span class=\"name\">instCommutativeInt8HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt8HXor","kind":"instance","line":470,"name":"instCommutativeInt8HXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L470-L470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_comm\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_comm","kind":"theorem","line":468,"name":"ISize.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L468-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_comm\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_comm","kind":"theorem","line":467,"name":"Int64.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L467-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_comm\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_comm","kind":"theorem","line":466,"name":"Int32.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L466-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_comm\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_comm","kind":"theorem","line":465,"name":"Int16.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L465-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_comm\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_comm","kind":"theorem","line":464,"name":"Int8.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L464-L464"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeISizeHXor\"><span class=\"name\">instAssociativeISizeHXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeISizeHXor","kind":"instance","line":462,"name":"instAssociativeISizeHXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L462-L462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt64HXor\"><span class=\"name\">instAssociativeInt64HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt64HXor","kind":"instance","line":461,"name":"instAssociativeInt64HXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L461-L461"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt32HXor\"><span class=\"name\">instAssociativeInt32HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt32HXor","kind":"instance","line":460,"name":"instAssociativeInt32HXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L460-L460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt16HXor\"><span class=\"name\">instAssociativeInt16HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt16HXor","kind":"instance","line":459,"name":"instAssociativeInt16HXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L459-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt8HXor\"><span class=\"name\">instAssociativeInt8HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt8HXor","kind":"instance","line":458,"name":"instAssociativeInt8HXor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L458-L458"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.xor_assoc\"><span class=\"name\">ISize</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.xor_assoc","kind":"theorem","line":456,"name":"ISize.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L456-L456"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.xor_assoc\"><span class=\"name\">Int64</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.xor_assoc","kind":"theorem","line":455,"name":"Int64.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L455-L455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.xor_assoc\"><span class=\"name\">Int32</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.xor_assoc","kind":"theorem","line":454,"name":"Int32.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L454-L454"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.xor_assoc\"><span class=\"name\">Int16</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.xor_assoc","kind":"theorem","line":453,"name":"Int16.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L453-L453"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.xor_assoc\"><span class=\"name\">Int8</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.xor_assoc","kind":"theorem","line":452,"name":"Int8.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L452-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.and_eq_neg_one_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.and_eq_neg_one_iff","kind":"theorem","line":448,"name":"ISize.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L448-L450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.and_eq_neg_one_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.and_eq_neg_one_iff","kind":"theorem","line":445,"name":"Int64.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L445-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.and_eq_neg_one_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.and_eq_neg_one_iff","kind":"theorem","line":442,"name":"Int32.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L442-L444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.and_eq_neg_one_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.and_eq_neg_one_iff","kind":"theorem","line":439,"name":"Int16.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L439-L441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.and_eq_neg_one_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.and_eq_neg_one_iff","kind":"theorem","line":436,"name":"Int8.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L436-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityISizeHAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityISizeHAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityISizeHAndNegOfNat","kind":"instance","line":433,"name":"instLawfulCommIdentityISizeHAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L433-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt64HAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityInt64HAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt64HAndNegOfNat","kind":"instance","line":431,"name":"instLawfulCommIdentityInt64HAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L431-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt32HAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityInt32HAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt32HAndNegOfNat","kind":"instance","line":429,"name":"instLawfulCommIdentityInt32HAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L429-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt16HAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityInt16HAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt16HAndNegOfNat","kind":"instance","line":427,"name":"instLawfulCommIdentityInt16HAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L427-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt8HAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityInt8HAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt8HAndNegOfNat","kind":"instance","line":425,"name":"instLawfulCommIdentityInt8HAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L425-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.and_neg_one\"><span class=\"name\">ISize</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.and_neg_one","kind":"theorem","line":423,"name":"ISize.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L423-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.and_neg_one\"><span class=\"name\">Int64</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.and_neg_one","kind":"theorem","line":422,"name":"Int64.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L422-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.and_neg_one\"><span class=\"name\">Int32</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.and_neg_one","kind":"theorem","line":421,"name":"Int32.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L421-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.and_neg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.and_neg_one","kind":"theorem","line":420,"name":"Int16.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L420-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.and_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.and_neg_one","kind":"theorem","line":419,"name":"Int8.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L419-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.neg_one_and\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.neg_one_and","kind":"theorem","line":415,"name":"ISize.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L415-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.neg_one_and\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.neg_one_and","kind":"theorem","line":412,"name":"Int64.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L412-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.neg_one_and\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.neg_one_and","kind":"theorem","line":409,"name":"Int32.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L409-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.neg_one_and\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.neg_one_and","kind":"theorem","line":406,"name":"Int16.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L406-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.neg_one_and\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.neg_one_and","kind":"theorem","line":403,"name":"Int8.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L403-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.zero_and\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.zero_and","kind":"theorem","line":401,"name":"ISize.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L401-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.zero_and\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.zero_and","kind":"theorem","line":400,"name":"Int64.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L400-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.zero_and\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.zero_and","kind":"theorem","line":399,"name":"Int32.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L399-L399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.zero_and\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.zero_and","kind":"theorem","line":398,"name":"Int16.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L398-L398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.zero_and\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.zero_and","kind":"theorem","line":397,"name":"Int8.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L397-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.and_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.and_zero","kind":"theorem","line":395,"name":"ISize.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L395-L395"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.and_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.and_zero","kind":"theorem","line":394,"name":"Int64.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L394-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.and_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.and_zero","kind":"theorem","line":393,"name":"Int32.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L393-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.and_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.and_zero","kind":"theorem","line":392,"name":"Int16.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L392-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.and_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.and_zero","kind":"theorem","line":391,"name":"Int8.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L391-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpISizeHAnd\"><span class=\"name\">instIdempotentOpISizeHAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpISizeHAnd","kind":"instance","line":389,"name":"instIdempotentOpISizeHAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L389-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt64HAnd\"><span class=\"name\">instIdempotentOpInt64HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt64HAnd","kind":"instance","line":388,"name":"instIdempotentOpInt64HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L388-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt32HAnd\"><span class=\"name\">instIdempotentOpInt32HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt32HAnd","kind":"instance","line":387,"name":"instIdempotentOpInt32HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L387-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt16HAnd\"><span class=\"name\">instIdempotentOpInt16HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt16HAnd","kind":"instance","line":386,"name":"instIdempotentOpInt16HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L386-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt8HAnd\"><span class=\"name\">instIdempotentOpInt8HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt8HAnd","kind":"instance","line":385,"name":"instIdempotentOpInt8HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L385-L385"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.and_self\"><span class=\"name\">ISize</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.and_self","kind":"theorem","line":383,"name":"ISize.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L383-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.and_self\"><span class=\"name\">Int64</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.and_self","kind":"theorem","line":382,"name":"Int64.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L382-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.and_self\"><span class=\"name\">Int32</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.and_self","kind":"theorem","line":381,"name":"Int32.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L381-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.and_self\"><span class=\"name\">Int16</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.and_self","kind":"theorem","line":380,"name":"Int16.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L380-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.and_self\"><span class=\"name\">Int8</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.and_self","kind":"theorem","line":379,"name":"Int8.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L379-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeISizeHAnd\"><span class=\"name\">instCommutativeISizeHAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeISizeHAnd","kind":"instance","line":377,"name":"instCommutativeISizeHAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L377-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt64HAnd\"><span class=\"name\">instCommutativeInt64HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt64HAnd","kind":"instance","line":376,"name":"instCommutativeInt64HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L376-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt32HAnd\"><span class=\"name\">instCommutativeInt32HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt32HAnd","kind":"instance","line":375,"name":"instCommutativeInt32HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L375-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt16HAnd\"><span class=\"name\">instCommutativeInt16HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt16HAnd","kind":"instance","line":374,"name":"instCommutativeInt16HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L374-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt8HAnd\"><span class=\"name\">instCommutativeInt8HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt8HAnd","kind":"instance","line":373,"name":"instCommutativeInt8HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L373-L373"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.and_comm\"><span class=\"name\">ISize</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.and_comm","kind":"theorem","line":371,"name":"ISize.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L371-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.and_comm\"><span class=\"name\">Int64</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.and_comm","kind":"theorem","line":370,"name":"Int64.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L370-L370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.and_comm\"><span class=\"name\">Int32</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.and_comm","kind":"theorem","line":369,"name":"Int32.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L369-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.and_comm\"><span class=\"name\">Int16</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.and_comm","kind":"theorem","line":368,"name":"Int16.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L368-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.and_comm\"><span class=\"name\">Int8</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.and_comm","kind":"theorem","line":367,"name":"Int8.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L367-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeISizeHAnd\"><span class=\"name\">instAssociativeISizeHAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeISizeHAnd","kind":"instance","line":365,"name":"instAssociativeISizeHAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L365-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt64HAnd\"><span class=\"name\">instAssociativeInt64HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt64HAnd","kind":"instance","line":364,"name":"instAssociativeInt64HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L364-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt32HAnd\"><span class=\"name\">instAssociativeInt32HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt32HAnd","kind":"instance","line":363,"name":"instAssociativeInt32HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L363-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt16HAnd\"><span class=\"name\">instAssociativeInt16HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt16HAnd","kind":"instance","line":362,"name":"instAssociativeInt16HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L362-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt8HAnd\"><span class=\"name\">instAssociativeInt8HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt8HAnd","kind":"instance","line":361,"name":"instAssociativeInt8HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L361-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.and_assoc\"><span class=\"name\">ISize</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.and_assoc","kind":"theorem","line":359,"name":"ISize.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L359-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.and_assoc\"><span class=\"name\">Int64</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.and_assoc","kind":"theorem","line":358,"name":"Int64.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L358-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.and_assoc\"><span class=\"name\">Int32</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.and_assoc","kind":"theorem","line":357,"name":"Int32.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L357-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.and_assoc\"><span class=\"name\">Int16</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.and_assoc","kind":"theorem","line":356,"name":"Int16.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L356-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.and_assoc\"><span class=\"name\">Int8</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.and_assoc","kind":"theorem","line":355,"name":"Int8.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L355-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.or_eq_zero_iff\"><span class=\"name\">ISize</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.or_eq_zero_iff","kind":"theorem","line":352,"name":"ISize.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L352-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.or_eq_zero_iff\"><span class=\"name\">Int64</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.or_eq_zero_iff","kind":"theorem","line":350,"name":"Int64.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L350-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.or_eq_zero_iff\"><span class=\"name\">Int32</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.or_eq_zero_iff","kind":"theorem","line":348,"name":"Int32.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L348-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.or_eq_zero_iff\"><span class=\"name\">Int16</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.or_eq_zero_iff","kind":"theorem","line":346,"name":"Int16.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L346-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.or_eq_zero_iff\"><span class=\"name\">Int8</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.or_eq_zero_iff","kind":"theorem","line":344,"name":"Int8.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L344-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.or_neg_one\"><span class=\"name\">ISize</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.or_neg_one","kind":"theorem","line":342,"name":"ISize.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L342-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.or_neg_one\"><span class=\"name\">Int64</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.or_neg_one","kind":"theorem","line":341,"name":"Int64.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L341-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.or_neg_one\"><span class=\"name\">Int32</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.or_neg_one","kind":"theorem","line":340,"name":"Int32.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L340-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.or_neg_one\"><span class=\"name\">Int16</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.or_neg_one","kind":"theorem","line":339,"name":"Int16.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L339-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.or_neg_one\"><span class=\"name\">Int8</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.or_neg_one","kind":"theorem","line":338,"name":"Int8.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L338-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.neg_one_or\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.neg_one_or","kind":"theorem","line":334,"name":"ISize.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L334-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.neg_one_or\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.neg_one_or","kind":"theorem","line":331,"name":"Int64.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L331-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.neg_one_or\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.neg_one_or","kind":"theorem","line":328,"name":"Int32.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L328-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.neg_one_or\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.neg_one_or","kind":"theorem","line":325,"name":"Int16.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L325-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.neg_one_or\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.neg_one_or","kind":"theorem","line":322,"name":"Int8.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L322-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityISizeHOrOfNat\"><span class=\"name\">instLawfulCommIdentityISizeHOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityISizeHOrOfNat","kind":"instance","line":319,"name":"instLawfulCommIdentityISizeHOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L319-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt64HOrOfNat\"><span class=\"name\">instLawfulCommIdentityInt64HOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt64HOrOfNat","kind":"instance","line":317,"name":"instLawfulCommIdentityInt64HOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L317-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt32HOrOfNat\"><span class=\"name\">instLawfulCommIdentityInt32HOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt32HOrOfNat","kind":"instance","line":315,"name":"instLawfulCommIdentityInt32HOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L315-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt16HOrOfNat\"><span class=\"name\">instLawfulCommIdentityInt16HOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt16HOrOfNat","kind":"instance","line":313,"name":"instLawfulCommIdentityInt16HOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L313-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt8HOrOfNat\"><span class=\"name\">instLawfulCommIdentityInt8HOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instLawfulCommIdentityInt8HOrOfNat","kind":"instance","line":311,"name":"instLawfulCommIdentityInt8HOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L311-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.zero_or\"><span class=\"name\">ISize</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.zero_or","kind":"theorem","line":309,"name":"ISize.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L309-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.zero_or\"><span class=\"name\">Int64</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.zero_or","kind":"theorem","line":308,"name":"Int64.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L308-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.zero_or\"><span class=\"name\">Int32</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.zero_or","kind":"theorem","line":307,"name":"Int32.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L307-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.zero_or\"><span class=\"name\">Int16</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.zero_or","kind":"theorem","line":306,"name":"Int16.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L306-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.zero_or\"><span class=\"name\">Int8</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.zero_or","kind":"theorem","line":305,"name":"Int8.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L305-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.or_zero\"><span class=\"name\">ISize</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.or_zero","kind":"theorem","line":303,"name":"ISize.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L303-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.or_zero\"><span class=\"name\">Int64</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.or_zero","kind":"theorem","line":302,"name":"Int64.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L302-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.or_zero\"><span class=\"name\">Int32</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.or_zero","kind":"theorem","line":301,"name":"Int32.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L301-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.or_zero\"><span class=\"name\">Int16</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.or_zero","kind":"theorem","line":300,"name":"Int16.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L300-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.or_zero\"><span class=\"name\">Int8</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.or_zero","kind":"theorem","line":299,"name":"Int8.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L299-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpISizeHOr\"><span class=\"name\">instIdempotentOpISizeHOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpISizeHOr","kind":"instance","line":297,"name":"instIdempotentOpISizeHOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L297-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt64HOr\"><span class=\"name\">instIdempotentOpInt64HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt64HOr","kind":"instance","line":296,"name":"instIdempotentOpInt64HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L296-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt32HOr\"><span class=\"name\">instIdempotentOpInt32HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt32HOr","kind":"instance","line":295,"name":"instIdempotentOpInt32HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L295-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt16HOr\"><span class=\"name\">instIdempotentOpInt16HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt16HOr","kind":"instance","line":294,"name":"instIdempotentOpInt16HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L294-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt8HOr\"><span class=\"name\">instIdempotentOpInt8HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instIdempotentOpInt8HOr","kind":"instance","line":293,"name":"instIdempotentOpInt8HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.or_self\"><span class=\"name\">ISize</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.or_self","kind":"theorem","line":291,"name":"ISize.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L291-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.or_self\"><span class=\"name\">Int64</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.or_self","kind":"theorem","line":290,"name":"Int64.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L290-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.or_self\"><span class=\"name\">Int32</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.or_self","kind":"theorem","line":289,"name":"Int32.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L289-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.or_self\"><span class=\"name\">Int16</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.or_self","kind":"theorem","line":288,"name":"Int16.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L288-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.or_self\"><span class=\"name\">Int8</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.or_self","kind":"theorem","line":287,"name":"Int8.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L287-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeISizeHOr\"><span class=\"name\">instCommutativeISizeHOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeISizeHOr","kind":"instance","line":285,"name":"instCommutativeISizeHOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L285-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt64HOr\"><span class=\"name\">instCommutativeInt64HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt64HOr","kind":"instance","line":284,"name":"instCommutativeInt64HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L284-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt32HOr\"><span class=\"name\">instCommutativeInt32HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt32HOr","kind":"instance","line":283,"name":"instCommutativeInt32HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt16HOr\"><span class=\"name\">instCommutativeInt16HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt16HOr","kind":"instance","line":282,"name":"instCommutativeInt16HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instCommutativeInt8HOr\"><span class=\"name\">instCommutativeInt8HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instCommutativeInt8HOr","kind":"instance","line":281,"name":"instCommutativeInt8HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L281-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.or_comm\"><span class=\"name\">ISize</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.or_comm","kind":"theorem","line":279,"name":"ISize.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L279-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.or_comm\"><span class=\"name\">Int64</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.or_comm","kind":"theorem","line":278,"name":"Int64.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L278-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.or_comm\"><span class=\"name\">Int32</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.or_comm","kind":"theorem","line":277,"name":"Int32.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L277-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.or_comm\"><span class=\"name\">Int16</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.or_comm","kind":"theorem","line":276,"name":"Int16.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L276-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.or_comm\"><span class=\"name\">Int8</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.or_comm","kind":"theorem","line":275,"name":"Int8.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeISizeHOr\"><span class=\"name\">instAssociativeISizeHOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeISizeHOr","kind":"instance","line":273,"name":"instAssociativeISizeHOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt64HOr\"><span class=\"name\">instAssociativeInt64HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt64HOr","kind":"instance","line":272,"name":"instAssociativeInt64HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L272-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt32HOr\"><span class=\"name\">instAssociativeInt32HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt32HOr","kind":"instance","line":271,"name":"instAssociativeInt32HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L271-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt16HOr\"><span class=\"name\">instAssociativeInt16HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt16HOr","kind":"instance","line":270,"name":"instAssociativeInt16HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L270-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#instAssociativeInt8HOr\"><span class=\"name\">instAssociativeInt8HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#instAssociativeInt8HOr","kind":"instance","line":269,"name":"instAssociativeInt8HOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L269-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.or_assoc\"><span class=\"name\">ISize</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.or_assoc","kind":"theorem","line":267,"name":"ISize.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L267-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.or_assoc\"><span class=\"name\">Int64</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.or_assoc","kind":"theorem","line":266,"name":"Int64.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L266-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.or_assoc\"><span class=\"name\">Int32</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.or_assoc","kind":"theorem","line":265,"name":"Int32.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L265-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.or_assoc\"><span class=\"name\">Int16</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.or_assoc","kind":"theorem","line":264,"name":"Int16.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L264-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.or_assoc\"><span class=\"name\">Int8</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.or_assoc","kind":"theorem","line":263,"name":"Int8.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L263-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_eq_neg_sub\"><span class=\"name\">ISize</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_eq_neg_sub","kind":"theorem","line":261,"name":"ISize.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L261-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_eq_neg_sub\"><span class=\"name\">Int64</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_eq_neg_sub","kind":"theorem","line":260,"name":"Int64.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L260-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_eq_neg_sub\"><span class=\"name\">Int32</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_eq_neg_sub","kind":"theorem","line":259,"name":"Int32.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L259-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_eq_neg_sub\"><span class=\"name\">Int16</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_eq_neg_sub","kind":"theorem","line":258,"name":"Int16.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L258-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_eq_neg_sub\"><span class=\"name\">Int8</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_eq_neg_sub","kind":"theorem","line":257,"name":"Int8.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.neg_eq_not_add\"><span class=\"name\">ISize</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.neg_eq_not_add","kind":"theorem","line":255,"name":"ISize.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L255-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.neg_eq_not_add\"><span class=\"name\">Int64</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.neg_eq_not_add","kind":"theorem","line":254,"name":"Int64.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L254-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.neg_eq_not_add\"><span class=\"name\">Int32</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.neg_eq_not_add","kind":"theorem","line":253,"name":"Int32.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L253-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.neg_eq_not_add\"><span class=\"name\">Int16</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.neg_eq_not_add","kind":"theorem","line":252,"name":"Int16.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L252-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.neg_eq_not_add\"><span class=\"name\">Int8</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.neg_eq_not_add","kind":"theorem","line":251,"name":"Int8.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L251-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_intMax\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_intMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMax\">BitVec.intMax</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_intMax","kind":"theorem","line":248,"name":"ISize.ofBitVec_intMax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L248-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_intMax\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_intMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMax\">BitVec.intMax</a> <span class=\"fn\">64</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_intMax","kind":"theorem","line":247,"name":"Int64.ofBitVec_intMax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L247-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_intMax\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_intMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMax\">BitVec.intMax</a> <span class=\"fn\">32</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_intMax","kind":"theorem","line":246,"name":"Int32.ofBitVec_intMax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L246-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_intMax\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_intMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMax\">BitVec.intMax</a> <span class=\"fn\">16</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_intMax","kind":"theorem","line":245,"name":"Int16.ofBitVec_intMax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L245-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_intMax\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_intMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMax\">BitVec.intMax</a> <span class=\"fn\">8</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_intMax","kind":"theorem","line":244,"name":"Int8.ofBitVec_intMax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L244-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_intMin\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_intMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">BitVec.intMin</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_intMin","kind":"theorem","line":241,"name":"ISize.ofBitVec_intMin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L241-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_intMin\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_intMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">BitVec.intMin</a> <span class=\"fn\">64</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_intMin","kind":"theorem","line":240,"name":"Int64.ofBitVec_intMin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_intMin\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_intMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">BitVec.intMin</a> <span class=\"fn\">32</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_intMin","kind":"theorem","line":239,"name":"Int32.ofBitVec_intMin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L239-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_intMin\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_intMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">BitVec.intMin</a> <span class=\"fn\">16</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_intMin","kind":"theorem","line":238,"name":"Int16.ofBitVec_intMin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L238-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_intMin\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_intMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">BitVec.intMin</a> <span class=\"fn\">8</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_intMin","kind":"theorem","line":237,"name":"Int8.ofBitVec_intMin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L237-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_not\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_not","kind":"theorem","line":235,"name":"ISize.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L235-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_not\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_not","kind":"theorem","line":234,"name":"Int64.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L234-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_not\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_not","kind":"theorem","line":233,"name":"Int32.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L233-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_not\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_not","kind":"theorem","line":232,"name":"Int16.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L232-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_not\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_not","kind":"theorem","line":231,"name":"Int8.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_xor","kind":"theorem","line":229,"name":"ISize.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L229-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_xor","kind":"theorem","line":228,"name":"Int64.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_xor","kind":"theorem","line":227,"name":"Int32.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_xor","kind":"theorem","line":226,"name":"Int16.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L226-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_xor","kind":"theorem","line":225,"name":"Int8.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L225-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_or\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_or","kind":"theorem","line":223,"name":"ISize.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_or\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_or","kind":"theorem","line":222,"name":"Int64.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L222-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_or\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_or","kind":"theorem","line":221,"name":"Int32.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_or\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_or","kind":"theorem","line":220,"name":"Int16.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L220-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_or\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_or","kind":"theorem","line":219,"name":"Int8.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L219-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_and\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.ofBitVec_and","kind":"theorem","line":217,"name":"ISize.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L217-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_and\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.ofBitVec_and","kind":"theorem","line":216,"name":"Int64.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L216-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_and\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.ofBitVec_and","kind":"theorem","line":215,"name":"Int32.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L215-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_and\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.ofBitVec_and","kind":"theorem","line":214,"name":"Int16.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L214-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_and\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\">ofBitVec</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.ofBitVec_and","kind":"theorem","line":213,"name":"Int8.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L213-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toISize_not\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toISize_not","kind":"theorem","line":211,"name":"Int64.toISize_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L211-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt32_not\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt32_not","kind":"theorem","line":209,"name":"ISize.toInt32_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L209-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt32_not\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt32_not","kind":"theorem","line":208,"name":"Int64.toInt32_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt16_not\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt16_not","kind":"theorem","line":206,"name":"ISize.toInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L206-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt16_not\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt16_not","kind":"theorem","line":205,"name":"Int64.toInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L205-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt16_not\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt16_not","kind":"theorem","line":204,"name":"Int32.toInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L204-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt8_not\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt8_not","kind":"theorem","line":202,"name":"ISize.toInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt8_not\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt8_not","kind":"theorem","line":201,"name":"Int64.toInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt8_not\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt8_not","kind":"theorem","line":200,"name":"Int32.toInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt8_not\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt8_not","kind":"theorem","line":199,"name":"Int16.toInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt_not\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt_not","kind":"theorem","line":196,"name":"ISize.toInt_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L196-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt_not\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt_not","kind":"theorem","line":195,"name":"Int64.toInt_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L195-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt_not\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt_not","kind":"theorem","line":194,"name":"Int32.toInt_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L194-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt_not\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt_not","kind":"theorem","line":193,"name":"Int16.toInt_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt_not\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt_not","kind":"theorem","line":192,"name":"Int8.toInt_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L192-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.not_eq_neg_add\"><span class=\"name\">ISize</span>.<span class=\"name\">not_eq_neg_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.not_eq_neg_add","kind":"theorem","line":190,"name":"ISize.not_eq_neg_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L190-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.not_eq_neg_add\"><span class=\"name\">Int64</span>.<span class=\"name\">not_eq_neg_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.not_eq_neg_add","kind":"theorem","line":189,"name":"Int64.not_eq_neg_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L189-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.not_eq_neg_add\"><span class=\"name\">Int32</span>.<span class=\"name\">not_eq_neg_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.not_eq_neg_add","kind":"theorem","line":188,"name":"Int32.not_eq_neg_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.not_eq_neg_add\"><span class=\"name\">Int16</span>.<span class=\"name\">not_eq_neg_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.not_eq_neg_add","kind":"theorem","line":187,"name":"Int16.not_eq_neg_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L187-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.not_eq_neg_add\"><span class=\"name\">Int8</span>.<span class=\"name\">not_eq_neg_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.not_eq_neg_add","kind":"theorem","line":186,"name":"Int8.not_eq_neg_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toISize_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toISize_xor","kind":"theorem","line":184,"name":"Int64.toISize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L184-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt32_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt32_xor","kind":"theorem","line":183,"name":"Int64.toInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L183-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt16_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt16_xor","kind":"theorem","line":182,"name":"Int64.toInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt8_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt8_xor","kind":"theorem","line":181,"name":"Int64.toInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L181-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt64_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt64_xor","kind":"theorem","line":179,"name":"ISize.toInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt32_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt32_xor","kind":"theorem","line":178,"name":"ISize.toInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L178-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt16_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt16_xor","kind":"theorem","line":177,"name":"ISize.toInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L177-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt8_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt8_xor","kind":"theorem","line":176,"name":"ISize.toInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toISize_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toISize_xor","kind":"theorem","line":174,"name":"Int32.toISize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt64_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt64_xor","kind":"theorem","line":173,"name":"Int32.toInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L173-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt16_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt16_xor","kind":"theorem","line":172,"name":"Int32.toInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt8_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt8_xor","kind":"theorem","line":171,"name":"Int32.toInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toISize_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toISize_xor","kind":"theorem","line":169,"name":"Int16.toISize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L169-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt64_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt64_xor","kind":"theorem","line":168,"name":"Int16.toInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L168-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt32_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt32_xor","kind":"theorem","line":167,"name":"Int16.toInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L167-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt8_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt8_xor","kind":"theorem","line":166,"name":"Int16.toInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L166-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toISize_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toISize_xor","kind":"theorem","line":164,"name":"Int8.toISize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L164-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt64_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt64_xor","kind":"theorem","line":163,"name":"Int8.toInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L163-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt32_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt32_xor","kind":"theorem","line":162,"name":"Int8.toInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L162-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt16_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt16_xor","kind":"theorem","line":161,"name":"Int8.toInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toISize_or\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toISize_or","kind":"theorem","line":159,"name":"Int64.toISize_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt32_or\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt32_or","kind":"theorem","line":158,"name":"Int64.toInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt16_or\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt16_or","kind":"theorem","line":157,"name":"Int64.toInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt8_or\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt8_or","kind":"theorem","line":156,"name":"Int64.toInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt64_or\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt64_or","kind":"theorem","line":154,"name":"ISize.toInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt32_or\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt32_or","kind":"theorem","line":153,"name":"ISize.toInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L153-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt16_or\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt16_or","kind":"theorem","line":152,"name":"ISize.toInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt8_or\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt8_or","kind":"theorem","line":151,"name":"ISize.toInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toISize_or\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toISize_or","kind":"theorem","line":149,"name":"Int32.toISize_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L149-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt64_or\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt64_or","kind":"theorem","line":148,"name":"Int32.toInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt16_or\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt16_or","kind":"theorem","line":147,"name":"Int32.toInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt8_or\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt8_or","kind":"theorem","line":146,"name":"Int32.toInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toISize_or\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toISize_or","kind":"theorem","line":144,"name":"Int16.toISize_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt64_or\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt64_or","kind":"theorem","line":143,"name":"Int16.toInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt32_or\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt32_or","kind":"theorem","line":142,"name":"Int16.toInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt8_or\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt8_or","kind":"theorem","line":141,"name":"Int16.toInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L141-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toISize_or\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toISize_or","kind":"theorem","line":139,"name":"Int8.toISize_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt64_or\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt64_or","kind":"theorem","line":138,"name":"Int8.toInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L138-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt32_or\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt32_or","kind":"theorem","line":137,"name":"Int8.toInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt16_or\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt16_or","kind":"theorem","line":136,"name":"Int8.toInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toISize_and\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toISize_and","kind":"theorem","line":134,"name":"Int64.toISize_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt32_and\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt32_and","kind":"theorem","line":133,"name":"Int64.toInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt16_and\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt16_and","kind":"theorem","line":132,"name":"Int64.toInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toInt8_and\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toInt8_and","kind":"theorem","line":131,"name":"Int64.toInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt64_and\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt64_and","kind":"theorem","line":129,"name":"ISize.toInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt32_and\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt32_and","kind":"theorem","line":128,"name":"ISize.toInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt16_and\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt16_and","kind":"theorem","line":127,"name":"ISize.toInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toInt8_and\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toInt8_and","kind":"theorem","line":126,"name":"ISize.toInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toISize_and\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toISize_and","kind":"theorem","line":124,"name":"Int32.toISize_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt64_and\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt64_and","kind":"theorem","line":123,"name":"Int32.toInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt16_and\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt16_and","kind":"theorem","line":122,"name":"Int32.toInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toInt8_and\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toInt8_and","kind":"theorem","line":121,"name":"Int32.toInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toISize_and\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toISize_and","kind":"theorem","line":119,"name":"Int16.toISize_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L119-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt64_and\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt64_and","kind":"theorem","line":118,"name":"Int16.toInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt32_and\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt32_and","kind":"theorem","line":117,"name":"Int16.toInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toInt8_and\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toInt8_and","kind":"theorem","line":116,"name":"Int16.toInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L116-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toISize_and\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toISize_and","kind":"theorem","line":114,"name":"Int8.toISize_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt64_and\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt64_and","kind":"theorem","line":113,"name":"Int8.toInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt32_and\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt32_and","kind":"theorem","line":112,"name":"Int8.toInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toInt16_and\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toInt16_and","kind":"theorem","line":111,"name":"Int8.toInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toUSize_not\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toUSize_not","kind":"theorem","line":109,"name":"ISize.toUSize_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toUInt64_not\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toUInt64_not","kind":"theorem","line":108,"name":"Int64.toUInt64_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toUInt32_not\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toUInt32_not","kind":"theorem","line":107,"name":"Int32.toUInt32_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toUInt16_not\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toUInt16_not","kind":"theorem","line":106,"name":"Int16.toUInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toUInt8_not\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toUInt8_not","kind":"theorem","line":105,"name":"Int8.toUInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toUSize_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toUSize_xor","kind":"theorem","line":103,"name":"ISize.toUSize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toUInt64_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toUInt64_xor","kind":"theorem","line":102,"name":"Int64.toUInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toUInt32_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toUInt32_xor","kind":"theorem","line":101,"name":"Int32.toUInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toUInt16_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toUInt16_xor","kind":"theorem","line":100,"name":"Int16.toUInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toUInt8_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toUInt8_xor","kind":"theorem","line":99,"name":"Int8.toUInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toUSize_or\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toUSize_or","kind":"theorem","line":97,"name":"ISize.toUSize_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L97-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toUInt64_or\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toUInt64_or","kind":"theorem","line":96,"name":"Int64.toUInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toUInt32_or\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toUInt32_or","kind":"theorem","line":95,"name":"Int32.toUInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toUInt16_or\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toUInt16_or","kind":"theorem","line":94,"name":"Int16.toUInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toUInt8_or\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toUInt8_or","kind":"theorem","line":93,"name":"Int8.toUInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toUSize_and\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toUSize_and","kind":"theorem","line":91,"name":"ISize.toUSize_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toUInt64_and\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toUInt64_and","kind":"theorem","line":90,"name":"Int64.toUInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toUInt32_and\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toUInt32_and","kind":"theorem","line":89,"name":"Int32.toUInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toUInt16_and\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toUInt16_and","kind":"theorem","line":88,"name":"Int16.toUInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toUInt8_and\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toUInt8_and","kind":"theorem","line":87,"name":"Int8.toUInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#USize.toISize_not\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#USize.toISize_not","kind":"theorem","line":85,"name":"USize.toISize_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt64.toInt64_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt64.toInt64_not","kind":"theorem","line":84,"name":"UInt64.toInt64_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt32.toInt32_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt32.toInt32_not","kind":"theorem","line":83,"name":"UInt32.toInt32_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt16.toInt16_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt16.toInt16_not","kind":"theorem","line":82,"name":"UInt16.toInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt8.toInt8_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt8.toInt8_not","kind":"theorem","line":81,"name":"UInt8.toInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#USize.toISize_xor\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#USize.toISize_xor","kind":"theorem","line":79,"name":"USize.toISize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt64.toInt64_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt64.toInt64_xor","kind":"theorem","line":78,"name":"UInt64.toInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt32.toInt32_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt32.toInt32_xor","kind":"theorem","line":77,"name":"UInt32.toInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt16.toInt16_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt16.toInt16_xor","kind":"theorem","line":76,"name":"UInt16.toInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt8.toInt8_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt8.toInt8_xor","kind":"theorem","line":75,"name":"UInt8.toInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#USize.toISize_or\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#USize.toISize_or","kind":"theorem","line":73,"name":"USize.toISize_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt64.toInt64_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt64.toInt64_or","kind":"theorem","line":72,"name":"UInt64.toInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt32.toInt32_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt32.toInt32_or","kind":"theorem","line":71,"name":"UInt32.toInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt16.toInt16_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt16.toInt16_or","kind":"theorem","line":70,"name":"UInt16.toInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt8.toInt8_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt8.toInt8_or","kind":"theorem","line":69,"name":"UInt8.toInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#USize.toISize_and\"><span class=\"name\">USize</span>.<span class=\"name\">toISize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#USize.toISize\">toISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#USize.toISize_and","kind":"theorem","line":67,"name":"USize.toISize_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt64.toInt64_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\">toInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt64.toInt64_and","kind":"theorem","line":66,"name":"UInt64.toInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt32.toInt32_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\">toInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt32.toInt32_and","kind":"theorem","line":65,"name":"UInt32.toInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt16.toInt16_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\">toInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt16.toInt16_and","kind":"theorem","line":64,"name":"UInt16.toInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#UInt8.toInt8_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\">toInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#UInt8.toInt8_and","kind":"theorem","line":63,"name":"UInt8.toInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toISize\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toISize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Bool.toISize\">toISize</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toISize","kind":"theorem","line":55,"name":"Bool.toBitVec_toISize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L55-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toInt64\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toInt64</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Bool.toInt64\">toInt64</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <span class=\"fn\">64</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toInt64","kind":"theorem","line":51,"name":"Bool.toBitVec_toInt64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L51-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toInt32\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toInt32</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Bool.toInt32\">toInt32</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <span class=\"fn\">32</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toInt32","kind":"theorem","line":47,"name":"Bool.toBitVec_toInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L47-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toInt16\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toInt16</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Bool.toInt16\">toInt16</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <span class=\"fn\">16</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toInt16","kind":"theorem","line":43,"name":"Bool.toBitVec_toInt16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L43-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toInt8\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toInt8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Bool.toInt8\">toInt8</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <span class=\"fn\">8</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Bool.toBitVec_toInt8","kind":"theorem","line":39,"name":"Bool.toBitVec_toInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L39-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_shiftRight\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">↑<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_shiftRight","kind":"theorem","line":37,"name":"ISize.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_abs\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.abs\">abs</a></span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\">abs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_abs","kind":"theorem","line":37,"name":"ISize.toBitVec_abs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_and\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_and","kind":"theorem","line":37,"name":"ISize.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_shiftLeft\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">↑<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_shiftLeft","kind":"theorem","line":37,"name":"ISize.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_not\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_not","kind":"theorem","line":37,"name":"ISize.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_xor\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_xor","kind":"theorem","line":37,"name":"ISize.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_or\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#ISize.toBitVec_or","kind":"theorem","line":37,"name":"ISize.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_abs\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.abs\">abs</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\">abs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_abs","kind":"theorem","line":36,"name":"Int64.toBitVec_abs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_not\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_not","kind":"theorem","line":36,"name":"Int64.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_xor\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_xor","kind":"theorem","line":36,"name":"Int64.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_shiftLeft\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">64</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_shiftLeft","kind":"theorem","line":36,"name":"Int64.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_and\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_and","kind":"theorem","line":36,"name":"Int64.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_shiftRight\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">64</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_shiftRight","kind":"theorem","line":36,"name":"Int64.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_or\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int64.toBitVec_or","kind":"theorem","line":36,"name":"Int64.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_shiftLeft\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">32</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_shiftLeft","kind":"theorem","line":35,"name":"Int32.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_abs\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.abs\">abs</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\">abs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_abs","kind":"theorem","line":35,"name":"Int32.toBitVec_abs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_and\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_and","kind":"theorem","line":35,"name":"Int32.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_xor\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_xor","kind":"theorem","line":35,"name":"Int32.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_not\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_not","kind":"theorem","line":35,"name":"Int32.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_shiftRight\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">32</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_shiftRight","kind":"theorem","line":35,"name":"Int32.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_or\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int32.toBitVec_or","kind":"theorem","line":35,"name":"Int32.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_abs\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.abs\">abs</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\">abs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_abs","kind":"theorem","line":34,"name":"Int16.toBitVec_abs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_not\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_not","kind":"theorem","line":34,"name":"Int16.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_and\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_and","kind":"theorem","line":34,"name":"Int16.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_shiftRight\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">16</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_shiftRight","kind":"theorem","line":34,"name":"Int16.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_shiftLeft\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">16</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_shiftLeft","kind":"theorem","line":34,"name":"Int16.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_or\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_or","kind":"theorem","line":34,"name":"Int16.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_xor\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int16.toBitVec_xor","kind":"theorem","line":34,"name":"Int16.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_not\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_not","kind":"theorem","line":33,"name":"Int8.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_abs\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.abs\">abs</a></span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\">abs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_abs","kind":"theorem","line":33,"name":"Int8.toBitVec_abs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_shiftLeft\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">8</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_shiftLeft","kind":"theorem","line":33,"name":"Int8.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_or\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_or","kind":"theorem","line":33,"name":"Int8.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_xor\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_xor","kind":"theorem","line":33,"name":"Int8.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_and\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_and","kind":"theorem","line":33,"name":"Int8.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_shiftRight\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">8</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#Int8.toBitVec_shiftRight","kind":"theorem","line":33,"name":"Int8.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Bitwise.html#commandDeclare_bitwise_int_theorems__\"><span class=\"name\">commandDeclare_bitwise_int_theorems__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/SInt/Bitwise.html#commandDeclare_bitwise_int_theorems__","kind":"def","line":19,"name":"commandDeclare_bitwise_int_theorems__","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/SInt/Bitwise.lean#L19-L32"}}],"imports":["Init.Data.UInt.Basic","Init.Data.UInt.Bitwise","Init.Data.BitVec.Basic","Init.Data.BitVec.Lemmas","Init.Data.SInt.Basic","Init.Data.SInt.Lemmas"],"instances":[{"className":"Std.Associative","name":"instAssociativeInt8HOr","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt16HOr","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt32HOr","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt64HOr","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeISizeHOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt8HOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt16HOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt32HOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt64HOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeISizeHOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpInt8HOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpInt16HOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpInt32HOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpInt64HOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpISizeHOr","typeNames":[]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt8HOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt16HOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt32HOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt64HOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityISizeHOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.Associative","name":"instAssociativeInt8HAnd","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt16HAnd","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt32HAnd","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt64HAnd","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeISizeHAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt8HAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt16HAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt32HAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt64HAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeISizeHAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpInt8HAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpInt16HAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpInt32HAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpInt64HAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpISizeHAnd","typeNames":[]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt8HAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt16HAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt32HAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt64HAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityISizeHAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.Associative","name":"instAssociativeInt8HXor","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt16HXor","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt32HXor","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeInt64HXor","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeISizeHXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt8HXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt16HXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt32HXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeInt64HXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeISizeHXor","typeNames":[]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt8HXorOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt16HXorOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt32HXorOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityInt64HXorOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityISizeHXorOfNat","typeNames":["OfNat.ofNat"]}],"name":"Init.Data.SInt.Bitwise"}