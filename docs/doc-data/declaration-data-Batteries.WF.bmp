{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#WellFounded.fix_eq_fixC\"><span class=\"name\">WellFounded</span>.<span class=\"name\">fix_eq_fixC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/WF.html#WellFounded.fix\">fix</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Batteries/WF.html#WellFounded.fixC\">fixC</a></div></div>","info":{"doc":"","docLink":"./Batteries/WF.html#WellFounded.fix_eq_fixC","kind":"theorem","line":130,"name":"WellFounded.fix_eq_fixC","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#WellFounded.fixC\"><span class=\"name\">WellFounded</span>.<span class=\"name\">fixC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwf</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"A computable version of `fix`. Workaround until Lean has native support for this. ","docLink":"./Batteries/WF.html#WellFounded.fixC","kind":"def","line":122,"name":"WellFounded.fixC","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L122-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#WellFounded.fixF_eq_fixFC\"><span class=\"name\">WellFounded</span>.<span class=\"name\">fixF_eq_fixFC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/WF.html#WellFounded.fixF\">fixF</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Batteries/WF.html#WellFounded.fixFC\">fixFC</a></div></div>","info":{"doc":"","docLink":"./Batteries/WF.html#WellFounded.fixF_eq_fixFC","kind":"theorem","line":118,"name":"WellFounded.fixF_eq_fixFC","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L118-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#WellFounded.fixFC\"><span class=\"name\">WellFounded</span>.<span class=\"name\">fixFC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">r</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"A computable version of `WellFounded.fixF`.\nWorkaround until Lean has native support for this. ","docLink":"./Batteries/WF.html#WellFounded.fixFC","kind":"def","line":111,"name":"WellFounded.fixFC","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L111-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#WellFounded.val_wrap\"><span class=\"name\">WellFounded</span>.<span class=\"name\">val_wrap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">h</span>.<a href=\"./Batteries/WF.html#WellFounded.wrap\">wrap</a></span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Batteries/WF.html#WellFounded.val_wrap","kind":"theorem","line":107,"name":"WellFounded.val_wrap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L107-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#WellFounded.wrap\"><span class=\"name\">WellFounded</span>.<span class=\"name\">wrap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">r</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>","info":{"doc":"Attaches to `x` the proof that `x` is accessible in the given well-founded relation.\nThis can be used in recursive function definitions to explicitly use a different relation\nthan the one inferred by default:\n\n```\ndef otherWF : WellFounded Nat := …\ndef foo (n : Nat) := …\ntermination_by otherWF.wrap n\n```\n","docLink":"./Batteries/WF.html#WellFounded.wrap","kind":"def","line":94,"name":"WellFounded.wrap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L94-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#Acc.ndrecOn_eq_ndrecOnC\"><span class=\"name\">Acc</span>.<span class=\"name\">ndrecOn_eq_ndrecOnC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/WF.html#Acc.ndrecOn\">ndrecOn</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Batteries/WF.html#Acc.ndrecOnC\">ndrecOnC</a></div></div>","info":{"doc":"","docLink":"./Batteries/WF.html#Acc.ndrecOn_eq_ndrecOnC","kind":"theorem","line":86,"name":"Acc.ndrecOn_eq_ndrecOnC","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L86-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#Acc.ndrecOnC\"><span class=\"name\">Acc</span>.<span class=\"name\">ndrecOnC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">r</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"A computable version of `Acc.ndrecOn`. Workaround until Lean has native support for this. ","docLink":"./Batteries/WF.html#Acc.ndrecOnC","kind":"def","line":81,"name":"Acc.ndrecOnC","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L81-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#Acc.ndrec_eq_ndrecC\"><span class=\"name\">Acc</span>.<span class=\"name\">ndrec_eq_ndrecC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/WF.html#Acc.ndrec\">ndrec</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Batteries/WF.html#Acc.ndrecC\">ndrecC</a></div></div>","info":{"doc":"","docLink":"./Batteries/WF.html#Acc.ndrec_eq_ndrecC","kind":"theorem","line":77,"name":"Acc.ndrec_eq_ndrecC","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L77-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#Acc.ndrecC\"><span class=\"name\">Acc</span>.<span class=\"name\">ndrecC</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">r</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">r</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"A computable version of `Acc.ndrec`. Workaround until Lean has native support for this. ","docLink":"./Batteries/WF.html#Acc.ndrecC","kind":"def","line":71,"name":"Acc.ndrecC","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L71-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/WF.html#Acc.wfRel\"><span class=\"name\">Acc</span>.<span class=\"name\">wfRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Init/WF.html#Acc\">Acc</a> <span class=\"fn\">r</span> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/WF.html#Acc.wfRel","kind":"instance","line":51,"name":"Acc.wfRel","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/WF.lean#L51-L53"}}],"imports":["Init","Init.Prelude","Init.WF"],"instances":[{"className":"WellFoundedRelation","name":"Acc.wfRel","typeNames":["Subtype"]}],"name":"Batteries.WF"}