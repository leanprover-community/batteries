{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toArrayUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n)`. Convert the heap to an array in arbitrary order. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toArrayUnordered","kind":"def","line":590,"name":"Batteries.BinomialHeap.toArrayUnordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L590-L591"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toListUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n)`. Convert the heap to a list in arbitrary order. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toListUnordered","kind":"def","line":587,"name":"Batteries.BinomialHeap.toListUnordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L587-L588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Convert the heap to an array in increasing order. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toArray","kind":"def","line":584,"name":"Batteries.BinomialHeap.toArray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L584-L585"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Convert the heap to a list in increasing order. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toList","kind":"def","line":581,"name":"Batteries.BinomialHeap.toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L581-L582"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.fold\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"`O(n log n)`. Fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.fold","kind":"def","line":575,"name":"Batteries.BinomialHeap.fold","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L575-L579"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.foldM\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"`O(n log n)`. Monadic fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.foldM","kind":"def","line":568,"name":"Batteries.BinomialHeap.foldM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L568-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(log n)`. Removes the smallest element from the heap, if possible. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.tail","kind":"def","line":565,"name":"Batteries.BinomialHeap.tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L565-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span></span></div></div>","info":{"doc":"`O(log n)`. Removes the smallest element from the heap, or `none` if the heap is empty. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.tail?","kind":"def","line":559,"name":"Batteries.BinomialHeap.tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L559-L563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.headI\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">headI</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"`O(log n)`. Returns the smallest element in the heap, or `default` if the heap is empty. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.headI","kind":"def","line":556,"name":"Batteries.BinomialHeap.headI","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L556-L557"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.head!\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">head!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"`O(log n)`. Returns the smallest element in the heap, or panics if the heap is empty. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.head!","kind":"def","line":553,"name":"Batteries.BinomialHeap.head!","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L553-L554"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.head?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(log n)`. Returns the smallest element in the heap, or `none` if the heap is empty. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.head?","kind":"def","line":550,"name":"Batteries.BinomialHeap.head?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L550-L551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instForIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instForIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instForIn","kind":"instance","line":548,"name":"Batteries.BinomialHeap.instForIn","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L548-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.forIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"`O(n log n)`. Implementation of `for x in (b : BinomialHeap α le) ...` notation,\nwhich iterates over the elements in the heap in increasing order.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.forIn","kind":"def","line":541,"name":"Batteries.BinomialHeap.forIn","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L541-L546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Std.Stream\">Std.Stream</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instStream","kind":"instance","line":539,"name":"Batteries.BinomialHeap.instStream","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L539-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></div></div>","info":{"doc":"`O(log n)`. Remove and return the minimum element from the heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.deleteMin","kind":"def","line":533,"name":"Batteries.BinomialHeap.deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L533-L537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.ofArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.ofArray","kind":"def","line":530,"name":"Batteries.BinomialHeap.ofArray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L530-L531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.ofList\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.ofList","kind":"def","line":527,"name":"Batteries.BinomialHeap.ofList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L527-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(log n)`. Add element `a` to the given heap `h`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.insert","kind":"def","line":524,"name":"Batteries.BinomialHeap.insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L524-L525"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></span></div></div>","info":{"doc":"`O(log n)`. Merge the contents of two heaps. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.merge","kind":"def","line":520,"name":"Batteries.BinomialHeap.merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L520-L522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(1)`. Make a new heap containing `a`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.singleton","kind":"def","line":517,"name":"Batteries.BinomialHeap.singleton","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L517-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"`O(log n)`. The number of elements in the heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.size","kind":"def","line":514,"name":"Batteries.BinomialHeap.size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L514-L515"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`O(1)`. Is the heap empty? ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.isEmpty","kind":"def","line":511,"name":"Batteries.BinomialHeap.isEmpty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L511-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instInhabited\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instInhabited","kind":"instance","line":509,"name":"Batteries.BinomialHeap.instInhabited","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L509-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instEmptyCollection\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instEmptyCollection","kind":"instance","line":508,"name":"Batteries.BinomialHeap.instEmptyCollection","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L508-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.empty\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(1)`. Make a new empty binomial heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.empty","kind":"def","line":505,"name":"Batteries.BinomialHeap.empty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L505-L506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.mkBinomialHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">mkBinomialHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>","info":{"doc":"`O(1)`. Make a new empty binomial heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.mkBinomialHeap","kind":"def","line":498,"name":"Batteries.mkBinomialHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L498-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A [binomial heap](https://en.wikipedia.org/wiki/Binomial_heap) is a data structure which supports\nthe following primary operations:\n\n* `insert : α → BinomialHeap α → BinomialHeap α`: add an element to the heap\n* `deleteMin : BinomialHeap α → Option (α × BinomialHeap α)`:\n  remove the minimum element from the heap\n* `merge : BinomialHeap α → BinomialHeap α → BinomialHeap α`: combine two heaps\n\nThe first two operations are known as a \"priority queue\", so this could be called\na \"mergeable priority queue\". The standard choice for a priority queue is a binary heap,\nwhich supports `insert` and `deleteMin` in `O(log n)`, but `merge` is `O(n)`.\nWith a `BinomialHeap`, all three operations are `O(log n)`.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap","kind":"def","line":481,"name":"Batteries.BinomialHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L481-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwf</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail\">Heap.tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.tail","kind":"theorem","line":470,"name":"Batteries.BinomialHeap.Imp.Heap.WF.tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L470-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwf</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail?\">Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">tl</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">tl</span></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.tail?","kind":"theorem","line":465,"name":"Batteries.BinomialHeap.Imp.Heap.WF.tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L465-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.deleteMin\">Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">s'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.deleteMin","kind":"theorem","line":453,"name":"Batteries.BinomialHeap.Imp.Heap.WF.deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L453-L463"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.findMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">findMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\">k</span> <span class=\"fn\">s</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.findMin\">Heap.findMin</a> <span class=\"fn\">le</span> <span class=\"fn\">k</span> <span class=\"fn\">s</span> <span class=\"fn\">res</span>)</span></span></div></div>","info":{"doc":"The conditions under which `findMin` is well-formed. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.findMin","kind":"def","line":441,"name":"Batteries.BinomialHeap.Imp.Heap.WF.findMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L441-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.next\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> (<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank\">rank</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.next\">next</a></span></span></div></div>","info":{"doc":"`next` is a binomial heap with ranks above `rank + 1`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.next","kind":"theorem","line":439,"name":"Batteries.BinomialHeap.Imp.FindMin.WF.next","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L439-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.val\">val</a></span> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.node\">node</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank\">rank</a></span></span></div></div>","info":{"doc":"`node` is a well formed forest of rank `rank` with `val` at the root. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.node","kind":"theorem","line":437,"name":"Batteries.BinomialHeap.Imp.FindMin.WF.node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L437-L437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.before\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">before</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank\">rank</a></span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.before\">before</a></span> <span class=\"fn\">s</span>)</span></span></span></div></div>","info":{"doc":"`before` is a difference list which can be appended to a binomial heap\nwith ranks at least `rank` to produce another well formed heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.before","kind":"theorem","line":435,"name":"Batteries.BinomialHeap.Imp.FindMin.WF.before","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L435-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">rank</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The rank of the minimum element ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank","kind":"def","line":432,"name":"Batteries.BinomialHeap.Imp.FindMin.WF.rank","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L432-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rank</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">before</span> : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">rank</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.before\">before</a></span> <span class=\"fn\">s</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">node</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.val\">val</a></span> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.node\">node</a></span> <span class=\"fn\">rank</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> (<span class=\"fn\">rank</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.next\">next</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.mk","kind":"ctor","line":430,"name":"Batteries.BinomialHeap.Imp.FindMin.WF.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L430-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The well formedness predicate for a `FindMin` value.\nThis is not actually a predicate, as it contains an additional data value\n`rank` corresponding to the rank of the returned node, which is omitted from `findMin`.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF","kind":"structure","line":425,"name":"Batteries.BinomialHeap.Imp.FindMin.WF","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L425-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap\">toHeap</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap","kind":"theorem","line":417,"name":"Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L417-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.rank_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">rank_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank\">rank</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.rank_eq","kind":"theorem","line":413,"name":"Batteries.BinomialHeap.Imp.HeapNode.WF.rank_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L413-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\">Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.merge","kind":"theorem","line":410,"name":"Batteries.BinomialHeap.Imp.Heap.WF.merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L410-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.merge'\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\">Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">((<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\">Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.merge'","kind":"theorem","line":374,"name":"Batteries.BinomialHeap.Imp.Heap.WF.merge'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L374-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.rankGT\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">rankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">lt</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.rankGT","kind":"theorem","line":369,"name":"Batteries.BinomialHeap.Imp.Heap.WF.rankGT","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L369-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT.of_le\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">rankGT</span>.<span class=\"name\">of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">n'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n'</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT.of_le","kind":"theorem","line":364,"name":"Batteries.BinomialHeap.Imp.Heap.rankGT.of_le","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L364-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.of_le\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n'</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.of_le","kind":"theorem","line":359,"name":"Batteries.BinomialHeap.Imp.Heap.WF.of_le","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L359-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.of_rankGT\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">of_rankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n'</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.of_rankGT","kind":"theorem","line":354,"name":"Batteries.BinomialHeap.Imp.Heap.WF.of_rankGT","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L354-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.singleton\">Heap.singleton</a> <span class=\"fn\">a</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.singleton","kind":"theorem","line":352,"name":"Batteries.BinomialHeap.Imp.Heap.WF.singleton","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L352-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.nil\">Heap.nil</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.nil","kind":"theorem","line":350,"name":"Batteries.BinomialHeap.Imp.Heap.WF.nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L350-L350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"The well formedness predicate for a binomial heap.\nIt asserts that:\n* It consists of a list of well formed trees with the specified ranks\n* The ranks are in strictly increasing order, and all are at least `n`\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF","kind":"def","line":340,"name":"Batteries.BinomialHeap.Imp.Heap.WF","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L340-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>","info":{"doc":"The well formedness predicate for a heap node.\nIt asserts that:\n* If `a` is added at the top to make the forest into a tree, the resulting tree\n  is a `le`-min-heap (if `le` is well-behaved)\n* When interpreting `child` and `sibling` as left and right children of a binary tree,\n  it is a perfect binary tree with depth `r`\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF","kind":"def","line":328,"name":"Batteries.BinomialHeap.Imp.HeapNode.WF","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L328-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toArrayUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n)`. Convert the heap to an array in arbitrary order. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toArrayUnordered","kind":"def","line":324,"name":"Batteries.BinomialHeap.Imp.Heap.toArrayUnordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L324-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toListUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n)`. Convert the heap to a list in arbitrary order. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toListUnordered","kind":"def","line":320,"name":"Batteries.BinomialHeap.Imp.Heap.toListUnordered","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L320-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldTree\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">join</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"`O(n)`. Fold a function over the tree structure to accumulate a value. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldTree","kind":"def","line":316,"name":"Batteries.BinomialHeap.Imp.Heap.foldTree","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L316-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldTreeM\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">join</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"`O(n)`. Fold a monadic function over the tree structure to accumulate a value. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldTreeM","kind":"def","line":309,"name":"Batteries.BinomialHeap.Imp.Heap.foldTreeM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L309-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.foldTreeM\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">foldTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">join</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"`O(n)`. Fold a monadic function over the tree structure to accumulate a value. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.foldTreeM","kind":"def","line":304,"name":"Batteries.BinomialHeap.Imp.HeapNode.foldTreeM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L304-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Convert the heap to a list in increasing order. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toList","kind":"def","line":298,"name":"Batteries.BinomialHeap.Imp.Heap.toList","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L298-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Convert the heap to an array in increasing order. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toArray","kind":"def","line":295,"name":"Batteries.BinomialHeap.Imp.Heap.toArray","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L295-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.fold\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"`O(n log n)`. Fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.fold","kind":"def","line":288,"name":"Batteries.BinomialHeap.Imp.Heap.fold","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L288-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldM\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"`O(n log n)`. Monadic fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldM","kind":"def","line":275,"name":"Batteries.BinomialHeap.Imp.Heap.foldM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L275-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail\">tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_tail","kind":"theorem","line":269,"name":"Batteries.BinomialHeap.Imp.Heap.realSize_tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L269-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail?\">tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_tail?","kind":"theorem","line":263,"name":"Batteries.BinomialHeap.Imp.Heap.realSize_tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L263-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.deleteMin\">deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_deleteMin","kind":"theorem","line":251,"name":"Batteries.BinomialHeap.Imp.Heap.realSize_deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L251-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">realSize_toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap\">toHeap</a></span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize\">realSize</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap","kind":"theorem","line":246,"name":"Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L246-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\">merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_merge","kind":"theorem","line":209,"name":"Batteries.BinomialHeap.Imp.Heap.realSize_merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L209-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(log n)`. Remove the minimum element of the heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail","kind":"def","line":206,"name":"Batteries.BinomialHeap.Imp.Heap.tail","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L206-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"`O(log n)`. Get the tail of the binomial heap after removing the minimum element. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail?","kind":"def","line":202,"name":"Batteries.BinomialHeap.Imp.Heap.tail?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L202-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>","info":{"doc":"`O(log n)`. Find and remove the the minimum element from the binomial heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.deleteMin","kind":"def","line":195,"name":"Batteries.BinomialHeap.Imp.Heap.deleteMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L195-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.findMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">findMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"`O(log n)`. Find the minimum element, and return a data structure `FindMin` with information\nneeded to reconstruct the rest of the binomial heap.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.findMin","kind":"def","line":182,"name":"Batteries.BinomialHeap.Imp.Heap.findMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L182-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.next\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The forest after the minimum element. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.next","kind":"def","line":180,"name":"Batteries.BinomialHeap.Imp.FindMin.next","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L180-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The children of the minimum element. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.node","kind":"def","line":178,"name":"Batteries.BinomialHeap.Imp.FindMin.node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L178-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.val\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"The minimum element. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.val","kind":"def","line":176,"name":"Batteries.BinomialHeap.Imp.FindMin.val","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.before\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">before</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"The list of elements prior to the minimum element, encoded as a \"difference list\". ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.before","kind":"def","line":174,"name":"Batteries.BinomialHeap.Imp.FindMin.before","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">before</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">node</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.mk","kind":"ctor","line":172,"name":"Batteries.BinomialHeap.Imp.FindMin.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"The return type of `FindMin`, which encodes various quantities needed to\nreconstruct the tree in `deleteMin`.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin","kind":"structure","line":168,"name":"Batteries.BinomialHeap.Imp.FindMin","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L168-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.head?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"`O(log n)`. Get the smallest element in the heap, if it has an element. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.head?","kind":"def","line":163,"name":"Batteries.BinomialHeap.Imp.Heap.head?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L163-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.headD\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">headD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(log n)`. Get the smallest element in the heap, including the passed in value `a`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.headD","kind":"def","line":158,"name":"Batteries.BinomialHeap.Imp.Heap.headD","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L158-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap.go\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">toHeap</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span></span></span></div></div>","info":{"doc":"Computes `s.toHeap ++ res` tail-recursively, assuming `n = s.rank`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap.go","kind":"def","line":154,"name":"Batteries.BinomialHeap.Imp.HeapNode.toHeap.go","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L154-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(log n)`. Convert a `HeapNode` to a `Heap` by reversing the order of the nodes\nalong the `sibling` spine.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap","kind":"def","line":148,"name":"Batteries.BinomialHeap.Imp.HeapNode.toHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L148-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Merge two forests of binomial trees. The forests are assumed to be ordered\nby rank and `merge` maintains this invariant.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge","kind":"def","line":127,"name":"Batteries.BinomialHeap.Imp.Heap.merge","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L127-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.combine\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(1)`. Auxiliary for `Heap.merge`: combines two heap nodes of the same rank\ninto one with the next larger rank.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.combine","kind":"def","line":120,"name":"Batteries.BinomialHeap.Imp.combine","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L120-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.length\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"`O(log n)`. The number of trees in the forest. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.length","kind":"def","line":115,"name":"Batteries.BinomialHeap.Imp.Heap.length","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L115-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instDecidableRankGT\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instDecidableRankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instDecidableRankGT","kind":"instance","line":110,"name":"Batteries.BinomialHeap.Imp.instDecidableRankGT","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L110-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">rankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>","info":{"doc":"`O(1)`. Auxiliary for `Heap.merge`: Is the minimum rank in `Heap` strictly larger than `n`? ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT","kind":"def","line":105,"name":"Batteries.BinomialHeap.Imp.Heap.rankGT","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L105-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(1)`. The heap containing a single value `a`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.singleton","kind":"def","line":102,"name":"Batteries.BinomialHeap.Imp.Heap.singleton","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"`O(1)`. Is the heap empty? ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.isEmpty","kind":"def","line":97,"name":"Batteries.BinomialHeap.Imp.Heap.isEmpty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L97-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"`O(log n)`. The number of elements in the heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.size","kind":"def","line":92,"name":"Batteries.BinomialHeap.Imp.Heap.size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L92-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"`O(n)`. The \"real size\" of the heap, counting up how many values of type `α` are stored.\nThis is intended mainly for specification purposes.\nPrefer `Heap.size`, which is the same for well formed heaps.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize","kind":"def","line":83,"name":"Batteries.BinomialHeap.Imp.Heap.realSize","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L83-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instReprHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeap","kind":"instance","line":81,"name":"Batteries.BinomialHeap.Imp.instReprHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeap.repr\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instReprHeap</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeap.repr","kind":"def","line":81,"name":"Batteries.BinomialHeap.Imp.instReprHeap.repr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rank</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">node</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"A cons node contains a tree of root `val`, children `node` and rank `rank`,\nand then `next` which is the rest of the forest. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.cons","kind":"ctor","line":78,"name":"Batteries.BinomialHeap.Imp.Heap.cons","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L78-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"An empty heap. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.nil","kind":"ctor","line":76,"name":"Batteries.BinomialHeap.Imp.Heap.nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A `Heap` is the top level structure in a binomial heap.\nIt consists of a forest of `HeapNode`s with strictly increasing ranks.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap","kind":"inductive","line":71,"name":"Batteries.BinomialHeap.Imp.Heap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L71-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rankTR_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">rankTR_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rankTR\">rankTR</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank\">rank</a></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rankTR_eq","kind":"theorem","line":64,"name":"Batteries.BinomialHeap.Imp.HeapNode.rankTR_eq","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L64-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rankTR.go\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">rankTR</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"Computes `s.rank + r` ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rankTR.go","kind":"def","line":60,"name":"Batteries.BinomialHeap.Imp.HeapNode.rankTR.go","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L60-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rankTR\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">rankTR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Tail-recursive version of `HeapNode.rank`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rankTR","kind":"def","line":57,"name":"Batteries.BinomialHeap.Imp.HeapNode.rankTR","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L57-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">rank</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"`O(log n)`. The rank, or the number of trees in the forest.\nIt is also the depth of the forest.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank","kind":"def","line":49,"name":"Batteries.BinomialHeap.Imp.HeapNode.rank","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L49-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"A node containing a single element `a`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.singleton","kind":"def","line":46,"name":"Batteries.BinomialHeap.Imp.HeapNode.singleton","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The \"real size\" of the node, counting up how many values of type `α` are stored.\nThis is `O(n)` and is intended mainly for specification purposes.\nFor a well formed `HeapNode` the size is always `2^n - 1` where `n` is the depth.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize","kind":"def","line":37,"name":"Batteries.BinomialHeap.Imp.HeapNode.realSize","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L37-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeapNode\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instReprHeapNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeapNode","kind":"instance","line":35,"name":"Batteries.BinomialHeap.Imp.instReprHeapNode","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeapNode.repr\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instReprHeapNode</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeapNode.repr","kind":"def","line":35,"name":"Batteries.BinomialHeap.Imp.instReprHeapNode.repr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">child </span><span class=\"fn\">sibling</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"A forest of rank `r + 1` consists of a root `a`,\na forest `child` of rank `r` elements greater than `a`,\nand another forest `sibling` of rank `r`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.node","kind":"ctor","line":31,"name":"Batteries.BinomialHeap.Imp.HeapNode.node","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L31-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"An empty forest, which has depth `0`. ","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.nil","kind":"ctor","line":29,"name":"Batteries.BinomialHeap.Imp.HeapNode.nil","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L29-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A `HeapNode` is one of the internal nodes of the binomial heap.\nIt is always a perfect binary tree, with the depth of the tree stored in the `Heap`.\nHowever the interpretation of the two pointers is different: we view the `child`\nas going to the first child of this node, and `sibling` goes to the next sibling\nof this tree. So it actually encodes a forest where each node has children\n`node.child`, `node.child.sibling`, `node.child.sibling.sibling`, etc.\n\nEach edge in this forest denotes a `le a b` relation that has been checked, so\nthe root is smaller than everything else under it.\n","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode","kind":"inductive","line":17,"name":"Batteries.BinomialHeap.Imp.HeapNode","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinomialHeap/Basic.lean#L17-L35"}}],"imports":["Init","Batteries.Classes.Order","Batteries.Control.ForInStep.Basic"],"instances":[{"className":"Repr","name":"Batteries.BinomialHeap.Imp.instReprHeapNode","typeNames":["Batteries.BinomialHeap.Imp.HeapNode"]},{"className":"Repr","name":"Batteries.BinomialHeap.Imp.instReprHeap","typeNames":["Batteries.BinomialHeap.Imp.Heap"]},{"className":"Decidable","name":"Batteries.BinomialHeap.Imp.instDecidableRankGT","typeNames":["Batteries.BinomialHeap.Imp.Heap.rankGT"]},{"className":"EmptyCollection","name":"Batteries.BinomialHeap.instEmptyCollection","typeNames":["Batteries.BinomialHeap"]},{"className":"Inhabited","name":"Batteries.BinomialHeap.instInhabited","typeNames":["Batteries.BinomialHeap"]},{"className":"Std.Stream","name":"Batteries.BinomialHeap.instStream","typeNames":["Batteries.BinomialHeap"]},{"className":"ForIn","name":"Batteries.BinomialHeap.instForIn","typeNames":["Batteries.BinomialHeap"]}],"name":"Batteries.Data.BinomialHeap.Basic"}