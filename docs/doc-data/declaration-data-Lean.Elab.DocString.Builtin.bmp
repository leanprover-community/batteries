{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `module` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestModule","kind":"def","line":1343,"name":"Lean.Doc.suggestModule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1343-L1353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `syntax` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestSyntax","kind":"def","line":1322,"name":"Lean.Doc.suggestSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1322-L1341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `syntaxCat` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestCat","kind":"def","line":1310,"name":"Lean.Doc.suggestCat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1310-L1320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestOption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `option` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestOption","kind":"def","line":1291,"name":"Lean.Doc.suggestOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1291-L1308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `attr` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestAttr","kind":"def","line":1265,"name":"Lean.Doc.suggestAttr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1265-L1288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `tactic` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestTactic","kind":"def","line":1247,"name":"Lean.Doc.suggestTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1247-L1262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestLeanBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestLeanBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion\">CodeBlockSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `lean` code block, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestLeanBlock","kind":"def","line":1236,"name":"Lean.Doc.suggestLeanBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1236-L1245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestLeanTermBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestLeanTermBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion\">CodeBlockSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `leanTerm` code block, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestLeanTermBlock","kind":"def","line":1218,"name":"Lean.Doc.suggestLeanTermBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1218-L1234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestLean\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestLean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `lean` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestLean","kind":"def","line":1199,"name":"Lean.Doc.suggestLean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1199-L1216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestGiven\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestGiven</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests `given` for the syntaxes not covered by `suggestName`.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestGiven","kind":"def","line":1189,"name":"Lean.Doc.suggestGiven","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1189-L1197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestName\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `name` and `given` roles, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestName","kind":"def","line":1171,"name":"Lean.Doc.suggestName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1171-L1187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.manual.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">manual</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"Constructs a link to the Lean langauge reference. Two positional arguments are expected:\n* `domain` should be one of the valid domains, such as `section`.\n* `name` should be the content's canonical name in the domain.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.manual.getArgs","kind":"def","line":1159,"name":"Lean.Doc.manual.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1159-L1159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.manual\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">manual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">domain</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Constructs a link to the Lean langauge reference. Two positional arguments are expected:\n* `domain` should be one of the valid domains, such as `section`.\n* `name` should be the content's canonical name in the domain.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.manual","kind":"def","line":1154,"name":"Lean.Doc.manual","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1154-L1169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.set_option.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">set_option</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Sets the specified option to the specified value for the remainder of the comment.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.set_option.getArgs","kind":"def","line":1143,"name":"Lean.Doc.set_option.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1143-L1143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.set_option\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">set_option</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">option</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Data/KVMap.html#Lean.DataValue\">DataValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Sets the specified option to the specified value for the remainder of the comment.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.set_option","kind":"def","line":1140,"name":"Lean.Doc.set_option","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1140-L1152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.open.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">open</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Opens a namespace in the remainder of the documentation comment.\n\nThe `+scoped` flag causes scoped instances and attributes to be activated, but no identifiers are\nbrought into scope. The named argument `only`, which can be repeated, specifies a subset of names to\nbring into scope from the namespace.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.open.getArgs","kind":"def","line":1120,"name":"Lean.Doc.open.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1120-L1120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.open\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">open</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«scoped»</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\">flag</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">only</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.many\">many</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Opens a namespace in the remainder of the documentation comment.\n\nThe `+scoped` flag causes scoped instances and attributes to be activated, but no identifiers are\nbrought into scope. The named argument `only`, which can be repeated, specifies a subset of names to\nbring into scope from the namespace.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.open","kind":"def","line":1113,"name":"Lean.Doc.open","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1113-L1138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.assert.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">assert</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"Asserts that an equality holds.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.assert.getArgs","kind":"def","line":1100,"name":"Lean.Doc.assert.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1100-L1100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.assert\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">assert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Asserts that an equality holds.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.assert","kind":"def","line":1097,"name":"Lean.Doc.assert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1097-L1111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.assert'.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">assert'</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"Asserts that an equality holds.\n\nThis doesn't use the equality type because it is needed in the prelude, before the = notation is\nintroduced.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.assert'.getArgs","kind":"def","line":1081,"name":"Lean.Doc.assert'.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1081-L1081"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.assert'\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">assert'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Asserts that an equality holds.\n\nThis doesn't use the equality type because it is needed in the prelude, before the = notation is\nintroduced.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.assert'","kind":"def","line":1075,"name":"Lean.Doc.assert'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1075-L1095"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.option.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">option</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"A reference to an option.\n\nIn `` {option}`O` ``, `O` can be either:\n* The name of an option (e.g. `pp.all`)\n* Syntax to set an option to a particular value (e.g. `set_option pp.all true`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.option.getArgs","kind":"def","line":1003,"name":"Lean.Doc.option.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L1003-L1003"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.option\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">option</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to an option.\n\nIn `` {option}`O` ``, `O` can be either:\n* The name of an option (e.g. `pp.all`)\n* Syntax to set an option to a particular value (e.g. `set_option pp.all true`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.option","kind":"def","line":996,"name":"Lean.Doc.option","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L996-L1064"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanTerm.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">leanTerm</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></span></div></div>","info":{"doc":"Treats the provided term as Lean syntax in the documentation's scope.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanTerm.getArgs","kind":"def","line":973,"name":"Lean.Doc.leanTerm.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L973-L973"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">leanTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Treats the provided term as Lean syntax in the documentation's scope.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanTerm","kind":"def","line":970,"name":"Lean.Doc.leanTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L970-L992"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanRole.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">leanRole</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"Treats the provided term as Lean syntax in the documentation's scope.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanRole.getArgs","kind":"def","line":944,"name":"Lean.Doc.leanRole.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L944-L944"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanRole\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">leanRole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Treats the provided term as Lean syntax in the documentation's scope.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanRole","kind":"def","line":941,"name":"Lean.Doc.leanRole","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L941-L968"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSetOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameSetOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption\">SetOption</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSetOption","kind":"instance","line":848,"name":"Lean.Doc.Data.instTypeNameSetOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L848-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SetOption</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption\">SetOption</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a></div></div>","info":{"doc":"The `set_option ...` syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption.term","kind":"def","line":847,"name":"Lean.Doc.Data.SetOption.term","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L847-L847"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SetOption</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption\">SetOption</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption.mk","kind":"ctor","line":845,"name":"Lean.Doc.Data.SetOption.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L845-L845"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SetOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents syntax to set an option. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption","kind":"structure","line":844,"name":"Lean.Doc.Data.SetOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L844-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameLeanTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameLeanTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm\">LeanTerm</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameLeanTerm","kind":"instance","line":842,"name":"Lean.Doc.Data.instTypeNameLeanTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L842-L842"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">LeanTerm</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm\">LeanTerm</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a></div></div>","info":{"doc":"The highlighted code to be displayed.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm.term","kind":"def","line":841,"name":"Lean.Doc.Data.LeanTerm.term","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L841-L841"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">LeanTerm</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm\">LeanTerm</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm.mk","kind":"ctor","line":837,"name":"Lean.Doc.Data.LeanTerm.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L837-L837"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">LeanTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents an elaborated Lean term.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.LeanTerm","kind":"structure","line":834,"name":"Lean.Doc.Data.LeanTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L834-L842"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.instAppendDocCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instAppendDocCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.instAppendDocCode","kind":"instance","line":830,"name":"Lean.Doc.instAppendDocCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L830-L832"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.instHAppendDocCodeString\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instHAppendDocCodeString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAppend\">HAppend</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.instHAppendDocCodeString","kind":"instance","line":826,"name":"Lean.Doc.instHAppendDocCodeString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L826-L828"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode.push\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocCode</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a></div></div>","info":{"doc":"Adds the provided string `str`, with optional highlighting `hl?`, to the end of the code.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode.push","kind":"def","line":820,"name":"Lean.Doc.DocCode.push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L820-L824"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocCode</span>.<span class=\"name\">code</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></span>)</span></div></div>","info":{"doc":"The highlighted strings.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode.code","kind":"def","line":818,"name":"Lean.Doc.DocCode.code","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L818-L818"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocCode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\">DocCode</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode.mk","kind":"ctor","line":814,"name":"Lean.Doc.DocCode.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L814-L814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A code snippet contained within a docstring. Code snippets consist of a series of strings, which are\noptionally associated with highlighting information.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocCode","kind":"structure","line":810,"name":"Lean.Doc.DocCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L810-L818"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.literal\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocHighlight</span>.<span class=\"name\">literal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></div></div>","info":{"doc":"The text is an atom that represents a literal, such as a string literal.\n\n`isLitKind` returns `true` for `kind`.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.literal","kind":"ctor","line":803,"name":"Lean.Doc.DocHighlight.literal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L803-L808"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.keyword\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocHighlight</span>.<span class=\"name\">keyword</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></div></div>","info":{"doc":"The text is an atom, such as `if` or `def`.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.keyword","kind":"ctor","line":799,"name":"Lean.Doc.DocHighlight.keyword","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L799-L802"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.option\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocHighlight</span>.<span class=\"name\">option</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></div></div>","info":{"doc":"The text represents the name of a compiler option.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.option","kind":"ctor","line":795,"name":"Lean.Doc.DocHighlight.option","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L795-L798"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.field\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocHighlight</span>.<span class=\"name\">field</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">signature</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></div></div>","info":{"doc":"The text represents the name of a field. `name` and `signature` refer to the projection function.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.field","kind":"ctor","line":791,"name":"Lean.Doc.DocHighlight.field","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L791-L794"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocHighlight</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></div></div>","info":{"doc":"The text represents the indicated local variable.\n\nThe `fvarId` is not connected to a local context, but it can be useful for tracking bindings\nacross elaborated fragments of syntax.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.var","kind":"ctor","line":784,"name":"Lean.Doc.DocHighlight.var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L784-L790"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocHighlight</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">signature</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\">DocHighlight</a></div></div>","info":{"doc":"The text represents the indicated constant. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight.const","kind":"ctor","line":782,"name":"Lean.Doc.DocHighlight.const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L782-L783"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocHighlight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Semantic highlighting included on syntax from elaborated terms in documentation.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.DocHighlight","kind":"inductive","line":778,"name":"Lean.Doc.DocHighlight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L778-L808"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lit.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">lit</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"Indicates that a code element is intended as just a literal string, with no further meaning.\n\nThis is equivalent to a bare code element, except suggestions will not be provided for it.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lit.getArgs","kind":"def","line":773,"name":"Lean.Doc.lit.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L773-L773"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Indicates that a code element is intended as just a literal string, with no further meaning.\n\nThis is equivalent to a bare code element, except suggestions will not be provided for it.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lit","kind":"def","line":768,"name":"Lean.Doc.lit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L768-L776"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.output.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">output</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></span></div></div>","info":{"doc":"Displays output from a named Lean code block.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.output.getArgs","kind":"def","line":732,"name":"Lean.Doc.output.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L732-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.output\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">output</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">severity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a>)</span></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Displays output from a named Lean code block.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.output","kind":"def","line":729,"name":"Lean.Doc.output","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L729-L766"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lean.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">lean</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></span></div></div>","info":{"doc":"Elaborates a sequence of Lean commands as examples.\n\nTo make examples self-contained, elaboration ignores the surrouncing section scopes. Modifications\nto the environment are preserved during a single documentation comment, and discarded afterwards.\n\nThe named argument `name` allows a name to be assigned to the code block; any messages created by\nelaboration are saved under this name.\n\nThe flags `error` and `warning` indicate that an error or warning is expected in the code.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lean.getArgs","kind":"def","line":641,"name":"Lean.Doc.lean.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L641-L641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">lean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">error </span><span class=\"fn\">warning </span><span class=\"fn\">«show»</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\">flag</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Elaborates a sequence of Lean commands as examples.\n\nTo make examples self-contained, elaboration ignores the surrouncing section scopes. Modifications\nto the environment are preserved during a single documentation comment, and discarded afterwards.\n\nThe named argument `name` allows a name to be assigned to the code block; any messages created by\nelaboration are saved under this name.\n\nThe flags `error` and `warning` indicate that an error or warning is expected in the code.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lean","kind":"def","line":630,"name":"Lean.Doc.lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L630-L727"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.given.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">given</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"A metavariable to be discussed in the remainder of the docstring.\n\nThere are four syntaxes that can be used:\n* `` {given}`x` `` establishes `x`'s type as a metavariable.\n* `` {given (type := \"A\")}`x` `` uses `A` as the type for metavariable `x`, but does not show that\n  to readers.\n* `` {given}`x : A` `` uses `A` as the type for metavariable `x`.\n* `` {given}`x = e` `` establishes `x` as an alias for the term `e`\n\nAdditionally, the contents of the code literal can be repeated, with comma separators.\n\nIf the `show` flag is `false` (default `true`), then the metavariable is not shown in the docstring.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.given.getArgs","kind":"def","line":540,"name":"Lean.Doc.given.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L540-L540"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.given\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">given</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeIsMeta</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\">flag</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«show»</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\">flag</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A metavariable to be discussed in the remainder of the docstring.\n\nThere are four syntaxes that can be used:\n* `` {given}`x` `` establishes `x`'s type as a metavariable.\n* `` {given (type := \"A\")}`x` `` uses `A` as the type for metavariable `x`, but does not show that\n  to readers.\n* `` {given}`x : A` `` uses `A` as the type for metavariable `x`.\n* `` {given}`x = e` `` establishes `x` as an alias for the term `e`\n\nAdditionally, the contents of the code literal can be repeated, with comma separators.\n\nIf the `show` flag is `false` (default `true`), then the metavariable is not shown in the docstring.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.given","kind":"def","line":526,"name":"Lean.Doc.given","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L526-L613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntax.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">syntax</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"A description of syntax in the provided category.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntax.getArgs","kind":"def","line":505,"name":"Lean.Doc.syntax.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L505-L505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">syntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cat</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A description of syntax in the provided category.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntax","kind":"def","line":502,"name":"Lean.Doc.syntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L502-L514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntaxCat.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">syntaxCat</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"A reference to a syntax category.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntaxCat.getArgs","kind":"def","line":479,"name":"Lean.Doc.syntaxCat.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L479-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntaxCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">syntaxCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to a syntax category.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntaxCat","kind":"def","line":476,"name":"Lean.Doc.syntaxCat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L476-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.attr.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">attr</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"A reference to an attribute or attribute-application syntax.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.attr.getArgs","kind":"def","line":405,"name":"Lean.Doc.attr.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L405-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.attr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">attr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to an attribute or attribute-application syntax.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.attr","kind":"def","line":402,"name":"Lean.Doc.attr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L402-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.conv.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">conv</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"A reference to a conv tactic.\n\nIn `` {conv}`T` ``, `T` can be any of the following:\n* The name of a conv tactic syntax kind (e.g. `Lean.Parser.Tactic.Conv.lhs`)\n* Valid conv tactic syntax, potentially including antiquotations (e.g. `lhs`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.conv.getArgs","kind":"def","line":379,"name":"Lean.Doc.conv.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L379-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.conv\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">conv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to a conv tactic.\n\nIn `` {conv}`T` ``, `T` can be any of the following:\n* The name of a conv tactic syntax kind (e.g. `Lean.Parser.Tactic.Conv.lhs`)\n* Valid conv tactic syntax, potentially including antiquotations (e.g. `lhs`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.conv","kind":"def","line":372,"name":"Lean.Doc.conv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L372-L399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.tactic.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">tactic</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"A reference to a tactic.\n\nIn `` {tactic}`T` ``, `T` can be any of the following:\n* The name of a tactic syntax kind (e.g. `Lean.Parser.Tactic.induction`)\n* The first token of a tactic (e.g. `induction`)\n* Valid tactic syntax, potentially including antiquotations (e.g. `intro $x*`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.tactic.getArgs","kind":"def","line":312,"name":"Lean.Doc.tactic.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L312-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">tactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checked</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\">flag</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to a tactic.\n\nIn `` {tactic}`T` ``, `T` can be any of the following:\n* The name of a tactic syntax kind (e.g. `Lean.Parser.Tactic.induction`)\n* The first token of a tactic (e.g. `induction`)\n* Valid tactic syntax, potentially including antiquotations (e.g. `intro $x*`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.tactic","kind":"def","line":304,"name":"Lean.Doc.tactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L304-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.module.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">module</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"Displays a name, without attempting to elaborate implicit arguments.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.module.getArgs","kind":"def","line":249,"name":"Lean.Doc.module.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.module\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">module</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checked</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\">flag</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Displays a name, without attempting to elaborate implicit arguments.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.module","kind":"def","line":246,"name":"Lean.Doc.module","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L246-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.name.getArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">name</span>.<span class=\"name\">getArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></span></div></div>","info":{"doc":"Displays a name, without attempting to elaborate implicit arguments.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.name.getArgs","kind":"def","line":152,"name":"Lean.Doc.name.getArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">full</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scope</span> : <a href=\"./Lean/Elab/DocString/Builtin/Scopes.html#Lean.Doc.DocScope\">DocScope</a> := <a href=\"./Lean/Elab/DocString/Builtin/Scopes.html#Lean.Doc.DocScope.local\">DocScope.local</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Displays a name, without attempting to elaborate implicit arguments.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.name","kind":"def","line":149,"name":"Lean.Doc.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L149-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.checkNameExists\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">checkNameExists</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin/Postponed.html#Lean.Doc.PostponedCheckHandler\">PostponedCheckHandler</a></div></div>","info":{"doc":"Checks that a name exists when it is expected to.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.checkNameExists","kind":"def","line":130,"name":"Lean.Doc.checkNameExists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L130-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameModuleName\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameModuleName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName\">ModuleName</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameModuleName","kind":"instance","line":114,"name":"Lean.Doc.Data.instTypeNameModuleName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName.module\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ModuleName</span>.<span class=\"name\">module</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName\">ModuleName</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The module. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName.module","kind":"def","line":113,"name":"Lean.Doc.Data.ModuleName.module","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ModuleName</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">module</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName\">ModuleName</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName.mk","kind":"ctor","line":111,"name":"Lean.Doc.Data.ModuleName.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ModuleName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a module name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ModuleName","kind":"structure","line":110,"name":"Lean.Doc.Data.ModuleName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L110-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSyntax","kind":"instance","line":108,"name":"Lean.Doc.Data.instTypeNameSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>","info":{"doc":"The parsed syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.stx","kind":"def","line":107,"name":"Lean.Doc.Data.Syntax.stx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.category\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">category</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The syntax category. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.category","kind":"def","line":105,"name":"Lean.Doc.Data.Syntax.category","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">category</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.mk","kind":"ctor","line":103,"name":"Lean.Doc.Data.Syntax.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Syntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents syntax in a given category. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax","kind":"structure","line":102,"name":"Lean.Doc.Data.Syntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L102-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSyntaxCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameSyntaxCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat\">SyntaxCat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSyntaxCat","kind":"instance","line":100,"name":"Lean.Doc.Data.instTypeNameSyntaxCat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SyntaxCat</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat\">SyntaxCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The syntax category. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat.name","kind":"def","line":99,"name":"Lean.Doc.Data.SyntaxCat.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SyntaxCat</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat\">SyntaxCat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat.mk","kind":"ctor","line":97,"name":"Lean.Doc.Data.SyntaxCat.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L97-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SyntaxCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a syntax category name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat","kind":"structure","line":96,"name":"Lean.Doc.Data.SyntaxCat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L96-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\">Option</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameOption","kind":"instance","line":93,"name":"Lean.Doc.Data.instTypeNameOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Option</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\">Option</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The option's declaration name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.declName","kind":"def","line":92,"name":"Lean.Doc.Data.Option.declName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Option</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\">Option</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The option's name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.name","kind":"def","line":90,"name":"Lean.Doc.Data.Option.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Option</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\">Option</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.mk","kind":"ctor","line":88,"name":"Lean.Doc.Data.Option.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Option</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents an option. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option","kind":"structure","line":87,"name":"Lean.Doc.Data.Option","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L87-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute\">Attribute</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAttribute","kind":"instance","line":85,"name":"Lean.Doc.Data.instTypeNameAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute\">Attribute</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>","info":{"doc":"The attribute syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute.stx","kind":"def","line":84,"name":"Lean.Doc.Data.Attribute.stx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute\">Attribute</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute.mk","kind":"ctor","line":82,"name":"Lean.Doc.Data.Attribute.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a single attribute. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute","kind":"structure","line":81,"name":"Lean.Doc.Data.Attribute","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L81-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAttributes\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameAttributes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes\">Attributes</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAttributes","kind":"instance","line":79,"name":"Lean.Doc.Data.instTypeNameAttributes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attributes</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes\">Attributes</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>","info":{"doc":"The attribute syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes.stx","kind":"def","line":78,"name":"Lean.Doc.Data.Attributes.stx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attributes</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes\">Attributes</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes.mk","kind":"ctor","line":76,"name":"Lean.Doc.Data.Attributes.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attributes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents an attribute application `@[...]`. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes","kind":"structure","line":75,"name":"Lean.Doc.Data.Attributes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L75-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameConvTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameConvTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic\">ConvTactic</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameConvTactic","kind":"instance","line":73,"name":"Lean.Doc.Data.instTypeNameConvTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ConvTactic</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic\">ConvTactic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the tactic's syntax kind. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic.name","kind":"def","line":72,"name":"Lean.Doc.Data.ConvTactic.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ConvTactic</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic\">ConvTactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic.mk","kind":"ctor","line":70,"name":"Lean.Doc.Data.ConvTactic.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ConvTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a conv tactic. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic","kind":"structure","line":69,"name":"Lean.Doc.Data.ConvTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L69-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic\">Tactic</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameTactic","kind":"instance","line":67,"name":"Lean.Doc.Data.instTypeNameTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic\">Tactic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the tactic's syntax kind. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic.name","kind":"def","line":66,"name":"Lean.Doc.Data.Tactic.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic.mk","kind":"ctor","line":64,"name":"Lean.Doc.Data.Tactic.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a tactic. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic","kind":"structure","line":63,"name":"Lean.Doc.Data.Tactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L63-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameLocal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameLocal","kind":"instance","line":60,"name":"Lean.Doc.Data.instTypeNameLocal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"The local variable's type. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.type","kind":"def","line":59,"name":"Lean.Doc.Data.Local.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"The local variable's context. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.lctx","kind":"def","line":57,"name":"Lean.Doc.Data.Local.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>","info":{"doc":"The local variable's ID. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.fvarId","kind":"def","line":55,"name":"Lean.Doc.Data.Local.fvarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The local variable's name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.name","kind":"def","line":53,"name":"Lean.Doc.Data.Local.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.mk","kind":"ctor","line":51,"name":"Lean.Doc.Data.Local.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a local variable. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local","kind":"structure","line":50,"name":"Lean.Doc.Data.Local","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L50-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameConst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const\">Const</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameConst","kind":"instance","line":48,"name":"Lean.Doc.Data.instTypeNameConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Const</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const\">Const</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The constant's name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const.name","kind":"def","line":47,"name":"Lean.Doc.Data.Const.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Const</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const\">Const</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const.mk","kind":"ctor","line":45,"name":"Lean.Doc.Data.Const.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a global constant. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const","kind":"structure","line":44,"name":"Lean.Doc.Data.Const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString/Builtin.lean#L44-L48"}}],"imports":["Lean.Elab.DocString.Builtin.Parsing","Lean.Elab.DocString.Builtin.Scopes","Lean.Elab.DocString.Builtin.Postponed","Lean.Elab.Open","Lean.Meta.Reduce","Lean.Elab.Tactic.Doc","Lean.Data.EditDistance","Lean.Elab.DocString.Builtin.Keywords","Lean.Server.InfoUtils"],"instances":[{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameConst","typeNames":["Lean.Doc.Data.Const"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameLocal","typeNames":["Lean.Doc.Data.Local"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameTactic","typeNames":["Lean.Doc.Data.Tactic"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameConvTactic","typeNames":["Lean.Doc.Data.ConvTactic"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameAttributes","typeNames":["Lean.Doc.Data.Attributes"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameAttribute","typeNames":["Lean.Doc.Data.Attribute"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameOption","typeNames":["Lean.Doc.Data.Option"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameSyntaxCat","typeNames":["Lean.Doc.Data.SyntaxCat"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameSyntax","typeNames":["Lean.Doc.Data.Syntax"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameModuleName","typeNames":["Lean.Doc.Data.ModuleName"]},{"className":"HAppend","name":"Lean.Doc.instHAppendDocCodeString","typeNames":["Lean.Doc.DocCode","String","Lean.Doc.DocCode"]},{"className":"Append","name":"Lean.Doc.instAppendDocCode","typeNames":["Lean.Doc.DocCode"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameLeanTerm","typeNames":["Lean.Doc.Data.LeanTerm"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameSetOption","typeNames":["Lean.Doc.Data.SetOption"]}],"name":"Lean.Elab.DocString.Builtin"}