{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float.toFloat32\"><span class=\"name\">Float</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Converts a 64-bit floating-point number to a 32-bit floating-point number.\nThis may lose precision.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float.toFloat32","kind":"opaque","line":506,"name":"Float.toFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L506-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toFloat\"><span class=\"name\">Float32</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Converts a 32-bit floating-point number to a 64-bit floating-point number.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.toFloat","kind":"opaque","line":500,"name":"Float32.toFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L500-L505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.scaleB\"><span class=\"name\">Float32</span>.<span class=\"name\">scaleB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Efficiently computes `x * 2^i`.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.scaleB","kind":"opaque","line":492,"name":"Float32.scaleB","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L492-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instMaxFloat32\"><span class=\"name\">instMaxFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instMaxFloat32","kind":"instance","line":490,"name":"instMaxFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L490-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instMinFloat32\"><span class=\"name\">instMinFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instMinFloat32","kind":"instance","line":488,"name":"instMinFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L488-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instHomogeneousPowFloat32\"><span class=\"name\">instHomogeneousPowFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HomogeneousPow\">HomogeneousPow</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instHomogeneousPowFloat32","kind":"instance","line":486,"name":"instHomogeneousPowFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L486-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.abs\"><span class=\"name\">Float32</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the absolute value of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`fabsf`.\n","docLink":"./Init/Data/Float32.html#Float32.abs","kind":"opaque","line":478,"name":"Float32.abs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L478-L484"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.round\"><span class=\"name\">Float32</span>.<span class=\"name\">round</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Rounds to the nearest integer, rounding away from zero at half-way points.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`roundf`.\n","docLink":"./Init/Data/Float32.html#Float32.round","kind":"opaque","line":471,"name":"Float32.round","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L471-L477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.floor\"><span class=\"name\">Float32</span>.<span class=\"name\">floor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the floor of a floating-point number, which is the largest integer that's no larger\nthan the given number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`floorf`.\n\nExamples:\n * `Float32.floor 1.5 = 1`\n * `Float32.floor (-1.5) = (-2)`\n","docLink":"./Init/Data/Float32.html#Float32.floor","kind":"opaque","line":459,"name":"Float32.floor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L459-L470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.ceil\"><span class=\"name\">Float32</span>.<span class=\"name\">ceil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the ceiling of a floating-point number, which is the smallest integer that's no smaller\nthan the given number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`ceilf`.\n\nExamples:\n * `Float32.ceil 1.5 = 2`\n * `Float32.ceil (-1.5) = (-1)`\n","docLink":"./Init/Data/Float32.html#Float32.ceil","kind":"opaque","line":447,"name":"Float32.ceil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L447-L458"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.cbrt\"><span class=\"name\">Float32</span>.<span class=\"name\">cbrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the cube root of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cbrtf`.\n","docLink":"./Init/Data/Float32.html#Float32.cbrt","kind":"opaque","line":440,"name":"Float32.cbrt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L440-L446"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.sqrt\"><span class=\"name\">Float32</span>.<span class=\"name\">sqrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the square root of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sqrtf`.\n","docLink":"./Init/Data/Float32.html#Float32.sqrt","kind":"opaque","line":433,"name":"Float32.sqrt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L433-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.pow\"><span class=\"name\">Float32</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Raises one floating-point number to the power of another. Typically used via the `^` operator.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`powf`.\n","docLink":"./Init/Data/Float32.html#Float32.pow","kind":"opaque","line":426,"name":"Float32.pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L426-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.log10\"><span class=\"name\">Float32</span>.<span class=\"name\">log10</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the base-10 logarithm of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log10f`.\n","docLink":"./Init/Data/Float32.html#Float32.log10","kind":"opaque","line":419,"name":"Float32.log10","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L419-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.log2\"><span class=\"name\">Float32</span>.<span class=\"name\">log2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the base-2 logarithm of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log2f`.\n","docLink":"./Init/Data/Float32.html#Float32.log2","kind":"opaque","line":412,"name":"Float32.log2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L412-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.log\"><span class=\"name\">Float32</span>.<span class=\"name\">log</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the natural logarithm `ln x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`logf`.\n","docLink":"./Init/Data/Float32.html#Float32.log","kind":"opaque","line":405,"name":"Float32.log","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L405-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.exp2\"><span class=\"name\">Float32</span>.<span class=\"name\">exp2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the base-2 exponential `2^x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`exp2f`.\n","docLink":"./Init/Data/Float32.html#Float32.exp2","kind":"opaque","line":398,"name":"Float32.exp2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L398-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.exp\"><span class=\"name\">Float32</span>.<span class=\"name\">exp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the exponential `e^x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`expf`.\n","docLink":"./Init/Data/Float32.html#Float32.exp","kind":"opaque","line":391,"name":"Float32.exp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L391-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.atanh\"><span class=\"name\">Float32</span>.<span class=\"name\">atanh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the hyperbolic arc tangent (inverse tangent) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atanhf`.\n","docLink":"./Init/Data/Float32.html#Float32.atanh","kind":"opaque","line":384,"name":"Float32.atanh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L384-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.acosh\"><span class=\"name\">Float32</span>.<span class=\"name\">acosh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the hyperbolic arc cosine (inverse cosine) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`acoshf`.\n","docLink":"./Init/Data/Float32.html#Float32.acosh","kind":"opaque","line":377,"name":"Float32.acosh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L377-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.asinh\"><span class=\"name\">Float32</span>.<span class=\"name\">asinh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the hyperbolic arc sine (inverse sine) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`asinhf`.\n","docLink":"./Init/Data/Float32.html#Float32.asinh","kind":"opaque","line":370,"name":"Float32.asinh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L370-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.tanh\"><span class=\"name\">Float32</span>.<span class=\"name\">tanh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the hyperbolic tangent of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`tanhf`.\n","docLink":"./Init/Data/Float32.html#Float32.tanh","kind":"opaque","line":363,"name":"Float32.tanh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L363-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.cosh\"><span class=\"name\">Float32</span>.<span class=\"name\">cosh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the hyperbolic cosine of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`coshf`.\n","docLink":"./Init/Data/Float32.html#Float32.cosh","kind":"opaque","line":356,"name":"Float32.cosh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L356-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.sinh\"><span class=\"name\">Float32</span>.<span class=\"name\">sinh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the hyperbolic sine of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sinhf`.\n","docLink":"./Init/Data/Float32.html#Float32.sinh","kind":"opaque","line":349,"name":"Float32.sinh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L349-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.atan2\"><span class=\"name\">Float32</span>.<span class=\"name\">atan2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the arc tangent (inverse tangent) of `y / x` in radians, in the range `-π`–`π`. The signs\nof the arguments determine the quadrant of the result.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atan2f`.\n","docLink":"./Init/Data/Float32.html#Float32.atan2","kind":"opaque","line":341,"name":"Float32.atan2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L341-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.atan\"><span class=\"name\">Float32</span>.<span class=\"name\">atan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the arc tangent (inverse tangent) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atanf`.\n","docLink":"./Init/Data/Float32.html#Float32.atan","kind":"opaque","line":334,"name":"Float32.atan","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L334-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.acos\"><span class=\"name\">Float32</span>.<span class=\"name\">acos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the arc cosine (inverse cosine) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`acosf`.\n","docLink":"./Init/Data/Float32.html#Float32.acos","kind":"opaque","line":327,"name":"Float32.acos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L327-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.asin\"><span class=\"name\">Float32</span>.<span class=\"name\">asin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the arc sine (inverse sine) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`asinf`.\n","docLink":"./Init/Data/Float32.html#Float32.asin","kind":"opaque","line":320,"name":"Float32.asin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L320-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.tan\"><span class=\"name\">Float32</span>.<span class=\"name\">tan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the tangent of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`tanf`.\n","docLink":"./Init/Data/Float32.html#Float32.tan","kind":"opaque","line":313,"name":"Float32.tan","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L313-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.cos\"><span class=\"name\">Float32</span>.<span class=\"name\">cos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the cosine of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cosf`.\n","docLink":"./Init/Data/Float32.html#Float32.cos","kind":"opaque","line":306,"name":"Float32.cos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L306-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.sin\"><span class=\"name\">Float32</span>.<span class=\"name\">sin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Computes the sine of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sinf`.\n","docLink":"./Init/Data/Float32.html#Float32.sin","kind":"opaque","line":299,"name":"Float32.sin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L299-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instReprAtomFloat32\"><span class=\"name\">instReprAtomFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instReprAtomFloat32","kind":"instance","line":297,"name":"instReprAtomFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L297-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instReprFloat32\"><span class=\"name\">instReprFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instReprFloat32","kind":"instance","line":294,"name":"instReprFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L294-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.repr\"><span class=\"name\">Float32</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#Float32.repr","kind":"def","line":291,"name":"Float32.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L291-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instInhabitedFloat32\"><span class=\"name\">instInhabitedFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instInhabitedFloat32","kind":"instance","line":288,"name":"instInhabitedFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L288-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#USize.toFloat32\"><span class=\"name\">USize</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Obtains a `Float32` whose value is near the given `USize`.\n\nIt will be exactly the value of the given `USize` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n","docLink":"./Init/Data/Float32.html#USize.toFloat32","kind":"opaque","line":277,"name":"USize.toFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L277-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#UInt64.toFloat32\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Obtains a `Float32` whose value is near the given `UInt64`.\n\nIt will be exactly the value of the given `UInt64` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n","docLink":"./Init/Data/Float32.html#UInt64.toFloat32","kind":"opaque","line":266,"name":"UInt64.toFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L266-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#UInt32.toFloat32\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Obtains a `Float32` whose value is near the given `UInt32`.\n\nIt will be exactly the value of the given `UInt32` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n","docLink":"./Init/Data/Float32.html#UInt32.toFloat32","kind":"opaque","line":255,"name":"UInt32.toFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L255-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#UInt16.toFloat32\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Obtains the `Float32` whose value is the same as the given `UInt16`. ","docLink":"./Init/Data/Float32.html#UInt16.toFloat32","kind":"opaque","line":253,"name":"UInt16.toFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L253-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#UInt8.toFloat32\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Obtains the `Float32` whose value is the same as the given `UInt8`. ","docLink":"./Init/Data/Float32.html#UInt8.toFloat32","kind":"opaque","line":251,"name":"UInt8.toFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L251-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instToStringFloat32\"><span class=\"name\">instToStringFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instToStringFloat32","kind":"instance","line":248,"name":"instToStringFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L248-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.frExp\"><span class=\"name\">Float32</span>.<span class=\"name\">frExp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"Splits the given float `x` into a significand/exponent pair `(s, i)` such that `x = s * 2^i` where\n`s ∈ (-1;-0.5] ∪ [0.5; 1)`. Returns an undefined value if `x` is not finite.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`frexp`.\n","docLink":"./Init/Data/Float32.html#Float32.frExp","kind":"opaque","line":239,"name":"Float32.frExp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L239-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.isInf\"><span class=\"name\">Float32</span>.<span class=\"name\">isInf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether a floating-point number is a positive or negative infinite number, but not a finite\nnumber or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isinf`.\n","docLink":"./Init/Data/Float32.html#Float32.isInf","kind":"opaque","line":232,"name":"Float32.isInf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L232-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.isFinite\"><span class=\"name\">Float32</span>.<span class=\"name\">isFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether a floating-point number is finite, that is, whether it is normal, subnormal, or zero,\nbut not infinite or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isfinite`.\n","docLink":"./Init/Data/Float32.html#Float32.isFinite","kind":"opaque","line":225,"name":"Float32.isFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L225-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.isNaN\"><span class=\"name\">Float32</span>.<span class=\"name\">isNaN</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether a floating point number is `NaN` (\"not a number\") value.\n\n`NaN` values result from operations that might otherwise be errors, such as dividing zero by zero.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isnan`.\n","docLink":"./Init/Data/Float32.html#Float32.isNaN","kind":"opaque","line":217,"name":"Float32.isNaN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L217-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUSize\"><span class=\"name\">Float32</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"Converts a floating-point number to a word-sized unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `USize`. Returns `0` if the `Float32` is negative or `NaN`, and returns the\nlargest `USize` value (i.e. `USize.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.toUSize","kind":"opaque","line":206,"name":"Float32.toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L206-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUInt64\"><span class=\"name\">Float32</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"Converts a floating-point number to a 64-bit unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt64`. Returns `0` if the `Float32` is negative or `NaN`, and returns\nthe largest `UInt64` value (i.e. `UInt64.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.toUInt64","kind":"opaque","line":196,"name":"Float32.toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L196-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUInt32\"><span class=\"name\">Float32</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"Converts a floating-point number to a 32-bit unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt32`. Returns `0` if the `Float32` is negative or `NaN`, and returns\nthe largest `UInt32` value (i.e. `UInt32.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.toUInt32","kind":"opaque","line":186,"name":"Float32.toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L186-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUInt16\"><span class=\"name\">Float32</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"Converts a floating-point number to a 16-bit unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt16`. Returns `0` if the `Float32` is negative or `NaN`, and returns\nthe largest `UInt16` value (i.e. `UInt16.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.toUInt16","kind":"opaque","line":176,"name":"Float32.toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L176-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUInt8\"><span class=\"name\">Float32</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"Converts a floating-point number to an 8-bit unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt8`. Returns `0` if the `Float32` is negative or `NaN`, and returns the\nlargest `UInt8` value (i.e. `UInt8.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.toUInt8","kind":"opaque","line":166,"name":"Float32.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L166-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toString\"><span class=\"name\">Float32</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Converts a floating-point number to a string.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.toString","kind":"opaque","line":160,"name":"Float32.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L160-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.decLe\"><span class=\"name\">Float32</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Compares two floating point numbers for non-strict inequality.\n\nThis function does not reduce in the kernel. It is compiled to the C inequality operator.\n","docLink":"./Init/Data/Float32.html#Float32.decLe","kind":"opaque","line":151,"name":"Float32.decLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L151-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.decLt\"><span class=\"name\">Float32</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Compares two floating point numbers for strict inequality.\n\nThis function does not reduce in the kernel. It is compiled to the C inequality operator.\n","docLink":"./Init/Data/Float32.html#Float32.decLt","kind":"opaque","line":142,"name":"Float32.decLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L142-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instBEqFloat32\"><span class=\"name\">instBEqFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instBEqFloat32","kind":"instance","line":140,"name":"instBEqFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L140-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.beq\"><span class=\"name\">Float32</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether two floating-point numbers are equal according to IEEE 754.\n\nFloating-point equality does not correspond with propositional equality. In particular, it is not\nreflexive since `NaN != NaN`, and it is not a congruence because `0.0 == -0.0`, but\n`1.0 / 0.0 != 1.0 / -0.0`.\n\nThis function does not reduce in the kernel. It is compiled to the C equality operator.\n","docLink":"./Init/Data/Float32.html#Float32.beq","kind":"opaque","line":129,"name":"Float32.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L129-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instLEFloat32\"><span class=\"name\">instLEFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instLEFloat32","kind":"instance","line":127,"name":"instLEFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instLTFloat32\"><span class=\"name\">instLTFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instLTFloat32","kind":"instance","line":126,"name":"instLTFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instNegFloat32\"><span class=\"name\">instNegFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instNegFloat32","kind":"instance","line":125,"name":"instNegFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instDivFloat32\"><span class=\"name\">instDivFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instDivFloat32","kind":"instance","line":124,"name":"instDivFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instMulFloat32\"><span class=\"name\">instMulFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instMulFloat32","kind":"instance","line":123,"name":"instMulFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instSubFloat32\"><span class=\"name\">instSubFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instSubFloat32","kind":"instance","line":122,"name":"instSubFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instAddFloat32\"><span class=\"name\">instAddFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instAddFloat32","kind":"instance","line":121,"name":"instAddFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toBits\"><span class=\"name\">Float32</span>.<span class=\"name\">toBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"Bit-for-bit conversion to `UInt32`. Interprets a `Float32` as a `UInt32`, ignoring the numeric value\nand treating the `Float32`'s bit pattern as a `UInt32`.\n\n`Float32`s and `UInt32`s have the same endianness on all supported platforms. IEEE 754 very\nprecisely specifies the bit layout of floats.\n\nThis function is distinct from `Float.toUInt32`, which attempts to preserve the numeric value rather\nthan reinterpreting the bit pattern.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.toBits","kind":"opaque","line":107,"name":"Float32.toBits","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L107-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.ofBits\"><span class=\"name\">Float32</span>.<span class=\"name\">ofBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Bit-for-bit conversion from `UInt32`. Interprets a `UInt32` as a `Float32`, ignoring the numeric\nvalue and treating the `UInt32`'s bit pattern as a `Float32`.\n\n`Float32`s and `UInt32`s have the same endianness on all supported platforms. IEEE 754 very\nprecisely specifies the bit layout of floats.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float32.html#Float32.ofBits","kind":"opaque","line":95,"name":"Float32.ofBits","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L95-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.le\"><span class=\"name\">Float32</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Non-strict inequality of floating-point numbers. Typically used via the `≤` operator.\n","docLink":"./Init/Data/Float32.html#Float32.le","kind":"def","line":89,"name":"Float32.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L89-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.lt\"><span class=\"name\">Float32</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Strict inequality of floating-point numbers. Typically used via the `<` operator.\n","docLink":"./Init/Data/Float32.html#Float32.lt","kind":"def","line":82,"name":"Float32.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L82-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.neg\"><span class=\"name\">Float32</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Negates 32-bit floating-point numbers according to IEEE 754. Typically used via the `-` prefix\noperator.\n\nThis function does not reduce in the kernel. It is compiled to the C negation operator.\n","docLink":"./Init/Data/Float32.html#Float32.neg","kind":"opaque","line":73,"name":"Float32.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L73-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.div\"><span class=\"name\">Float32</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Divides 32-bit floating-point numbers according to IEEE 754. Typically used via the `/` operator.\n\nIn Lean, division by zero typically yields zero. For `Float32`, it instead yields either `Inf`,\n`-Inf`, or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C division operator.\n","docLink":"./Init/Data/Float32.html#Float32.div","kind":"opaque","line":64,"name":"Float32.div","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L64-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.mul\"><span class=\"name\">Float32</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Multiplies 32-bit floating-point numbers according to IEEE 754. Typically used via the `*` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C multiplication operator.\n","docLink":"./Init/Data/Float32.html#Float32.mul","kind":"opaque","line":58,"name":"Float32.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L58-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.sub\"><span class=\"name\">Float32</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Subtracts 32-bit floating-point numbers according to IEEE 754. Typically used via the `-` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C subtraction operator.\n","docLink":"./Init/Data/Float32.html#Float32.sub","kind":"opaque","line":52,"name":"Float32.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L52-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.add\"><span class=\"name\">Float32</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Adds two 32-bit floating-point numbers according to IEEE 754. Typically used via the `+` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C addition operator.\n","docLink":"./Init/Data/Float32.html#Float32.add","kind":"opaque","line":46,"name":"Float32.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L46-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instNonemptyFloat32\"><span class=\"name\">instNonemptyFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#instNonemptyFloat32","kind":"instance","line":44,"name":"instNonemptyFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.val\"><span class=\"name\">Float32</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#float32Spec\">float32Spec</a>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#Float32.val","kind":"def","line":42,"name":"Float32.val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.mk\"><span class=\"name\">Float32</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\"><a href=\"./Init/Data/Float32.html#float32Spec\">float32Spec</a>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#Float32.mk","kind":"ctor","line":41,"name":"Float32.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32\"><span class=\"name\">Float32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"32-bit floating-point numbers.\n\n`Float32` corresponds to the IEEE 754 *binary32* format (`float` in C or `f32` in Rust).\nFloating-point numbers are a finite representation of a subset of the real numbers, extended with\nextra “sentinel” values that represent undefined and infinite results as well as separate positive\nand negative zeroes. Arithmetic on floating-point numbers approximates the corresponding operations\non the real numbers by rounding the results to numbers that are representable, propagating error and\ninfinite values.\n\nFloating-point numbers include [subnormal numbers](https://en.wikipedia.org/wiki/Subnormal_number).\nTheir special values are:\n * `NaN`, which denotes a class of “not a number” values that result from operations such as\n   dividing zero by zero, and\n * `Inf` and `-Inf`, which represent positive and infinities that result from dividing non-zero\n   values by zero.\n\n","docLink":"./Init/Data/Float32.html#Float32","kind":"structure","line":23,"name":"Float32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L23-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#float32Spec\"><span class=\"name\">float32Spec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Float32.html#float32Spec","kind":"opaque","line":14,"name":"float32Spec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float32.lean#L14-L21"}}],"imports":["Init.Data.Float"],"instances":[{"className":"Nonempty","name":"instNonemptyFloat32","typeNames":["Float32"]},{"className":"Add","name":"instAddFloat32","typeNames":["Float32"]},{"className":"Sub","name":"instSubFloat32","typeNames":["Float32"]},{"className":"Mul","name":"instMulFloat32","typeNames":["Float32"]},{"className":"Div","name":"instDivFloat32","typeNames":["Float32"]},{"className":"Neg","name":"instNegFloat32","typeNames":["Float32"]},{"className":"LT","name":"instLTFloat32","typeNames":["Float32"]},{"className":"LE","name":"instLEFloat32","typeNames":["Float32"]},{"className":"BEq","name":"instBEqFloat32","typeNames":["Float32"]},{"className":"ToString","name":"instToStringFloat32","typeNames":["Float32"]},{"className":"Inhabited","name":"instInhabitedFloat32","typeNames":["Float32"]},{"className":"Repr","name":"instReprFloat32","typeNames":["Float32"]},{"className":"ReprAtom","name":"instReprAtomFloat32","typeNames":["Float32"]},{"className":"HomogeneousPow","name":"instHomogeneousPowFloat32","typeNames":["Float32"]},{"className":"Min","name":"instMinFloat32","typeNames":["Float32"]},{"className":"Max","name":"instMaxFloat32","typeNames":["Float32"]}],"name":"Init.Data.Float32"}