{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.combine\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selectable</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">selectables</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable\">Selectable</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a `Selector` that performs fair and data-loss free multiplexing on multiple `Selectable`s.\nThis allows the multiplexing operation to be composed with other selectors.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.combine","kind":"def","line":199,"name":"Std.Internal.IO.Async.Selectable.combine","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L199-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.tryOne\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selectable</span>.<span class=\"name\">tryOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">selectables</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable\">Selectable</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Performs fair and data-loss free non-blocking multiplexing on the `Selectable`s in `selectables`.\n\nThis function only tries the non-blocking `tryFn` for each `Selectable` without registering\nwaiters or blocking. It returns `some result` if any `Selectable` is immediately available,\nor `none` if all would block.\n\nThe protocol for this is as follows:\n1. The `selectables` are shuffled randomly for fairness.\n2. Run `Selector.tryFn` for each element in `selectables`. If any succeed, the corresponding\n   `Selectable.cont` is executed and its result is returned as `some result`.\n3. If none succeed, `none` is returned immediately without blocking.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.tryOne","kind":"def","line":171,"name":"Std.Internal.IO.Async.Selectable.tryOne","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L171-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.one\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selectable</span>.<span class=\"name\">one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">selectables</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable\">Selectable</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Performs fair and data-loss free multiplexing on the `Selectable`s in `selectables`.\n\nThe protocol for this is as follows:\n1. The `selectables` are shuffled randomly.\n2. Run `Selector.tryFn` for each element in `selectables`. If any succeed, the corresponding\n  `Selectable.cont` is executed and its result is returned immediately.\n3. If none succeed, a `Waiter` is registered with each `Selector` using `Selector.registerFn`.\n   Once one of them resolves the `Waiter`, all `Selector.unregisterFn` functions are called, and\n   the `Selectable.cont` of the winning `Selector` is executed and returned.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.one","kind":"def","line":114,"name":"Std.Internal.IO.Async.Selectable.one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L114-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.cont\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selectable</span>.<span class=\"name\">cont</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable\">Selectable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.β\">β</a></span> → <span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"The continuation that is called on results from the event source.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.cont","kind":"def","line":101,"name":"Std.Internal.IO.Async.Selectable.cont","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.selector\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selectable</span>.<span class=\"name\">selector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable\">Selectable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.β\">β</a></span></span></div></div>","info":{"doc":"The event source.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.selector","kind":"def","line":97,"name":"Std.Internal.IO.Async.Selectable.selector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L97-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.β\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selectable</span>.<span class=\"name\">β</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable\">Selectable</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.β","kind":"def","line":93,"name":"Std.Internal.IO.Async.Selectable.β","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.case\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selectable</span>.<span class=\"name\">case</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">selector</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable\">Selectable</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable.case","kind":"ctor","line":92,"name":"Std.Internal.IO.Async.Selectable.case","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selectable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>","info":{"doc":"An event source together with a continuation to call on data obtained from that event source,\nusually used together in conjunction with `Selectable.one`.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selectable","kind":"structure","line":87,"name":"Std.Internal.IO.Async.Selectable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L87-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector.unregisterFn\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selector</span>.<span class=\"name\">unregisterFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"A cleanup function that is called once any `Selector` has won the `Selectable.one` race.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector.unregisterFn","kind":"def","line":85,"name":"Std.Internal.IO.Async.Selector.unregisterFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector.registerFn\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selector</span>.<span class=\"name\">registerFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\">Waiter</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"Registers a `Waiter` with the event source. Once data is available, the event source should\nattempt to call `Waiter.race` and resolve the `Waiter`'s promise if it wins. It is crucial that\ndata is never actually consumed from the event source unless `Waiter.race` wins in order to\nprevent data loss.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector.registerFn","kind":"def","line":81,"name":"Std.Internal.IO.Async.Selector.registerFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector.tryFn\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selector</span>.<span class=\"name\">tryFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Attempts to retrieve a piece of data from the event source in a non-blocking fashion, returning\n`some` if data is available and `none` otherwise.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector.tryFn","kind":"def","line":74,"name":"Std.Internal.IO.Async.Selector.tryFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selector</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryFn</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">registerFn</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\">Waiter</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unregisterFn</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Async</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector.mk","kind":"ctor","line":69,"name":"Std.Internal.IO.Async.Selector.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selector</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An event source that can be multiplexed using `Selectable.one`, see the documentation of\n`Selectable.one` for how the protocol of communicating with a `Selector` works.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector","kind":"structure","line":65,"name":"Std.Internal.IO.Async.Selector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L65-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter.checkFinished\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">checkFinished</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\">Waiter</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Atomically checks whether the `Waiter` has already finished. Note that right after this function\ncall ends this might have already changed.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter.checkFinished","kind":"def","line":57,"name":"Std.Internal.IO.Async.Waiter.checkFinished","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L57-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter.race\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">race</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\">Waiter</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lose</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">win</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">IO.Error</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Try to atomically finish the `Waiter`. If the race for finishing it is won, `win` is executed\nwith the internal `IO.Promise` of the `Waiter`. This promise must under all circumstances be\nresolved by `win`. If the race is lost some cleanup work can be done in `lose`.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter.race","kind":"def","line":43,"name":"Std.Internal.IO.Async.Waiter.race","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L43-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter.withPromise\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">withPromise</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\">Waiter</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">IO.Error</a> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\">Waiter</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Swap out the `IO.Promise` within the `Waiter`. Note that the part which determines whether the\n`Waiter` is finished is not swapped out.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter.withPromise","kind":"def","line":35,"name":"Std.Internal.IO.Async.Waiter.withPromise","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L35-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter.promise\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">promise</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\">Waiter</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/System/IOError.html#IO.Error\">IO.Error</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter.promise","kind":"def","line":33,"name":"Std.Internal.IO.Async.Waiter.promise","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Waiter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The core data structure for racing on winning a `Selectable.one` if multiple event sources are ready\nat the same time. A `Task` can try to finish the waiter by calling `Waiter.race`.\n","docLink":"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter","kind":"structure","line":26,"name":"Std.Internal.IO.Async.Waiter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Internal/Async/Select.lean#L26-L33"}}],"imports":["Init.Data.Random","Std.Internal.Async.Basic","Init.Data.ByteArray.Extra"],"instances":[],"name":"Std.Internal.Async.Select"}