{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.addSubgoalsAction\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">addSubgoalsAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/CodeAction/Attr.html#Batteries.CodeAction.TacticCodeAction\">TacticCodeAction</a></div></div>","info":{"doc":"The \"Add subgoals\" code action puts `· done` subgoals for any goals remaining at the end of a\nproof.\n```\nexample : True ∧ True := by\n  constructor\n  -- <- here\n```\nis transformed to\n```\nexample : True ∧ True := by\n  constructor\n  · done\n  · done\n```\n","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.addSubgoalsAction","kind":"def","line":439,"name":"Batteries.CodeAction.addSubgoalsAction","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L439-L444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.addSubgoalsSeqAction\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">addSubgoalsSeqAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/CodeAction/Attr.html#Batteries.CodeAction.TacticSeqCodeAction\">TacticSeqCodeAction</a></div></div>","info":{"doc":"The \"Add subgoals\" code action puts `· done` subgoals for any goals remaining at the end of a\nproof.\n```\nexample : True ∧ True := by\n  constructor\n  -- <- here\n```\nis transformed to\n```\nexample : True ∧ True := by\n  constructor\n  · done\n  · done\n```\n","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.addSubgoalsSeqAction","kind":"def","line":434,"name":"Batteries.CodeAction.addSubgoalsSeqAction","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L434-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.addSubgoalsActionCore\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">addSubgoalsActionCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <a href=\"./Lean/Data/Lsp/CodeActions.html#Lean.Lsp.CodeActionParams\">Lean.Lsp.CodeActionParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stk</span> : <a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/Requests.html#Lean.Server.RequestM\">Lean.Server.RequestM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Server/CodeActions/Basic.html#Lean.Server.LazyCodeAction\">Lean.Server.LazyCodeAction</a>)</span></span></div></div>","info":{"doc":"The \"Add subgoals\" code action puts `· done` subgoals for any goals remaining at the end of a\nproof.\n```\nexample : True ∧ True := by\n  constructor\n  -- <- here\n```\nis transformed to\n```\nexample : True ∧ True := by\n  constructor\n  · done\n  · done\n```\n","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.addSubgoalsActionCore","kind":"def","line":377,"name":"Batteries.CodeAction.addSubgoalsActionCore","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L377-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.casesExpand\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">casesExpand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/CodeAction/Attr.html#Batteries.CodeAction.TacticCodeAction\">TacticCodeAction</a></div></div>","info":{"doc":"Invoking tactic code action \"Generate an explicit pattern match for 'induction'\" in the\nfollowing:\n```lean\nexample (x : Nat) : x = x := by\n  induction x\n```\nproduces:\n```lean\nexample (x : Nat) : x = x := by\n  induction x with\n  | zero => sorry\n  | succ n ih => sorry\n```\n\nIt also works for `cases`.\n","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.casesExpand","kind":"def","line":274,"name":"Batteries.CodeAction.casesExpand","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L274-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.findTermInfo?\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findTermInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">node</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">Lean.Elab.TermInfo</a></span></div></div>","info":{"doc":"Finds the `TermInfo` for an elaborated term `stx`. ","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.findTermInfo?","kind":"def","line":265,"name":"Batteries.CodeAction.findTermInfo?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L265-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.getElimExprNames\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">getElimExprNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>))</span></span></div></div>","info":{"doc":"Similar to `getElimExprInfo`, but returns the names of binders instead of just the numbers;\nintended for code actions which need to name the binders.\n","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.getElimExprNames","kind":"def","line":240,"name":"Batteries.CodeAction.getElimExprNames","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L240-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.removeAfterDoneAction\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">removeAfterDoneAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/CodeAction/Attr.html#Batteries.CodeAction.TacticCodeAction\">TacticCodeAction</a></div></div>","info":{"doc":"The \"Remove tactics after 'no goals'\" code action deletes any tactics following a completed\nproof.\n```\nexample : True := by\n  trivial\n  trivial -- <- remove this, proof is already done\n  rfl\n```\nis transformed to\n```\nexample : True := by\n  trivial\n```\n","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.removeAfterDoneAction","kind":"def","line":207,"name":"Batteries.CodeAction.removeAfterDoneAction","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L207-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.startTacticStub\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">startTacticStub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Attr.html#Lean.CodeAction.HoleCodeAction\">Lean.CodeAction.HoleCodeAction</a></div></div>","info":{"doc":"Invoking hole code action \"Start a tactic proof\" will fill in a hole with `by done`. ","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.startTacticStub","kind":"def","line":193,"name":"Batteries.CodeAction.startTacticStub","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L193-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.eqnStub\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">eqnStub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Attr.html#Lean.CodeAction.HoleCodeAction\">Lean.CodeAction.HoleCodeAction</a></div></div>","info":{"doc":"Invoking hole code action \"Generate a list of equations for a recursive definition\" in the\nfollowing:\n```lean\ndef foo : Expr → Unit := _\n```\n\nproduces:\n\n```lean\ndef foo : Expr → Unit := fun\n  | .bvar deBruijnIndex => _\n  | .fvar fvarId => _\n  | .mvar mvarId => _\n  | .sort u => _\n  | .const declName us => _\n  | .app fn arg => _\n  | .lam binderName binderType body binderInfo => _\n  | .forallE binderName binderType body binderInfo => _\n  | .letE declName type value body nonDep => _\n  | .lit _ => _\n  | .mdata data expr => _\n  | .proj typeName idx struct => _\n```\n\n","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.eqnStub","kind":"def","line":135,"name":"Batteries.CodeAction.eqnStub","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L135-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.getExplicitArgs\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">getExplicitArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></span></div></div>","info":{"doc":"Returns the explicit arguments given a type. ","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.getExplicitArgs","kind":"opaque","line":129,"name":"Batteries.CodeAction.getExplicitArgs","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L129-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.instanceStub\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">instanceStub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Attr.html#Lean.CodeAction.HoleCodeAction\">Lean.CodeAction.HoleCodeAction</a></div></div>","info":{"doc":"Hole code action used to fill in a structure's field when specifying an instance.\n\nIn the following:\n```lean\ninstance : Monad Id := _\n```\n\ninvoking the hole code action \"Generate a (minimal) skeleton for the structure under construction.\"\nproduces:\n```lean\ninstance : Monad Id where\n  pure := _\n  bind := _\n```\n\nand invoking \"Generate a (maximal) skeleton for the structure under construction.\" produces:\n```lean\ninstance : Monad Id where\n  map := _\n  mapConst := _\n  pure := _\n  seq := _\n  seqLeft := _\n  seqRight := _\n  bind := _\n```\n","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.instanceStub","kind":"def","line":36,"name":"Batteries.CodeAction.instanceStub","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L36-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.holeKindToHoleString\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">holeKindToHoleString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elaborator</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Constructs a hole with a kind matching the provided hole elaborator.  ","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.holeKindToHoleString","kind":"def","line":30,"name":"Batteries.CodeAction.holeKindToHoleString","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L30-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.findStack?\"><span class=\"name\">Batteries</span>.<span class=\"name\">CodeAction</span>.<span class=\"name\">findStack?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root </span><span class=\"fn\">target</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#Lean.Syntax.Stack\">Lean.Syntax.Stack</a></span></div></div>","info":{"doc":"Return the syntax stack leading to `target` from `root`, if one exists. ","docLink":"./Batteries/CodeAction/Misc.html#Batteries.CodeAction.findStack?","kind":"def","line":24,"name":"Batteries.CodeAction.findStack?","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/CodeAction/Misc.lean#L24-L28"}}],"imports":["Init","Lean.Elab.Tactic.Induction","Batteries.Lean.Position","Batteries.CodeAction.Attr","Lean.Server.CodeActions.Provider"],"instances":[],"name":"Batteries.CodeAction.Misc"}