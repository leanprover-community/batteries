{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.roundUp_eq_neg_roundDown_neg\"><span class=\"name\">Dyadic</span>.<span class=\"name\">roundUp_eq_neg_roundDown_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.roundUp\">roundUp</a></span> <span class=\"fn\">prec</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.roundDown\">roundDown</a></span> <span class=\"fn\">prec</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.roundUp_eq_neg_roundDown_neg","kind":"theorem","line":739,"name":"Dyadic.roundUp_eq_neg_roundDown_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L739-L745"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.roundUp\"><span class=\"name\">Dyadic</span>.<span class=\"name\">roundUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"`roundUp x prec` is the least dyadic number with precision at most `prec` which is greater than or equal to `x`. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.roundUp","kind":"def","line":730,"name":"Dyadic.roundUp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L730-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instIsLinearOrder\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instIsLinearOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearOrder\">Std.IsLinearOrder</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instIsLinearOrder","kind":"instance","line":728,"name":"Dyadic.instIsLinearOrder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L728-L728"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instIsLinearPreorder\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instIsLinearPreorder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearPreorder\">Std.IsLinearPreorder</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instIsLinearPreorder","kind":"instance","line":725,"name":"Dyadic.instIsLinearPreorder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L725-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instIsPartialOrder\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instIsPartialOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPartialOrder\">Std.IsPartialOrder</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instIsPartialOrder","kind":"instance","line":722,"name":"Dyadic.instIsPartialOrder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L722-L723"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instIsPreorder\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instIsPreorder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">Std.IsPreorder</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instIsPreorder","kind":"instance","line":718,"name":"Dyadic.instIsPreorder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L718-L720"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instLawfulOrderLT\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instLawfulOrderLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">Std.LawfulOrderLT</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instLawfulOrderLT","kind":"instance","line":715,"name":"Dyadic.instLawfulOrderLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L715-L716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.le_total\"><span class=\"name\">Dyadic</span>.<span class=\"name\">le_total</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.le_total","kind":"theorem","line":711,"name":"Dyadic.le_total","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L711-L713"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.le_antisymm\"><span class=\"name\">Dyadic</span>.<span class=\"name\">le_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.le_antisymm","kind":"theorem","line":706,"name":"Dyadic.le_antisymm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L706-L709"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.le_trans\"><span class=\"name\">Dyadic</span>.<span class=\"name\">le_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">z</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.le_trans","kind":"theorem","line":702,"name":"Dyadic.le_trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L702-L704"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.le_refl\"><span class=\"name\">Dyadic</span>.<span class=\"name\">le_refl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.le_refl","kind":"theorem","line":697,"name":"Dyadic.le_refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L697-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.not_lt\"><span class=\"name\">Dyadic</span>.<span class=\"name\">not_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.not_lt","kind":"theorem","line":693,"name":"Dyadic.not_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L693-L695"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.not_le\"><span class=\"name\">Dyadic</span>.<span class=\"name\">not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.not_le","kind":"theorem","line":689,"name":"Dyadic.not_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L689-L691"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.le_iff_toRat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">le_iff_toRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.le_iff_toRat","kind":"theorem","line":687,"name":"Dyadic.le_iff_toRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L687-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.lt_iff_toRat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">lt_iff_toRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.lt_iff_toRat","kind":"theorem","line":685,"name":"Dyadic.lt_iff_toRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L685-L685"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instDecidableLE\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instDecidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instDecidableLE","kind":"instance","line":683,"name":"Dyadic.instDecidableLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L683-L683"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instDecidableLT\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instDecidableLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instDecidableLT","kind":"instance","line":682,"name":"Dyadic.instDecidableLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L682-L682"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instLE\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instLE","kind":"instance","line":679,"name":"Dyadic.instLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L679-L680"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instLT\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instLT","kind":"instance","line":676,"name":"Dyadic.instLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L676-L677"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ble_iff_toRat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">ble_iff_toRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ble\">ble</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.ble_iff_toRat","kind":"theorem","line":672,"name":"Dyadic.ble_iff_toRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L672-L674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.blt_eq_false_iff\"><span class=\"name\">Dyadic</span>.<span class=\"name\">blt_eq_false_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.blt\">blt</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ble\">ble</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.blt_eq_false_iff","kind":"theorem","line":658,"name":"Dyadic.blt_eq_false_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L658-L670"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.blt_iff_toRat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">blt_iff_toRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.blt\">blt</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.blt_iff_toRat","kind":"theorem","line":640,"name":"Dyadic.blt_iff_toRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L640-L656"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ble\"><span class=\"name\">Dyadic</span>.<span class=\"name\">ble</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Determine if a dyadic rational is less than or equal to another. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.ble","kind":"def","line":629,"name":"Dyadic.ble","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L629-L638"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.blt\"><span class=\"name\">Dyadic</span>.<span class=\"name\">blt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Determine if a dyadic rational is strictly less than another. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.blt","kind":"def","line":618,"name":"Dyadic.blt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L618-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.neg_mul\"><span class=\"name\">Dyadic</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.neg_mul","kind":"theorem","line":615,"name":"Dyadic.neg_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L615-L616"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.neg_add_cancel\"><span class=\"name\">Dyadic</span>.<span class=\"name\">neg_add_cancel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.neg_add_cancel","kind":"theorem","line":612,"name":"Dyadic.neg_add_cancel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L612-L613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.mul_add\"><span class=\"name\">Dyadic</span>.<span class=\"name\">mul_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.mul_add","kind":"theorem","line":609,"name":"Dyadic.mul_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L609-L610"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.add_mul\"><span class=\"name\">Dyadic</span>.<span class=\"name\">add_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.add_mul","kind":"theorem","line":606,"name":"Dyadic.add_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L606-L607"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.one_mul\"><span class=\"name\">Dyadic</span>.<span class=\"name\">one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.one_mul","kind":"theorem","line":602,"name":"Dyadic.one_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L602-L604"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.mul_one\"><span class=\"name\">Dyadic</span>.<span class=\"name\">mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.mul_one","kind":"theorem","line":598,"name":"Dyadic.mul_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L598-L600"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.mul_assoc\"><span class=\"name\">Dyadic</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">z</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.mul_assoc","kind":"theorem","line":595,"name":"Dyadic.mul_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L595-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.mul_comm\"><span class=\"name\">Dyadic</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.mul_comm","kind":"theorem","line":592,"name":"Dyadic.mul_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L592-L593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.add_assoc\"><span class=\"name\">Dyadic</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.add_assoc","kind":"theorem","line":589,"name":"Dyadic.add_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L589-L590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.add_comm\"><span class=\"name\">Dyadic</span>.<span class=\"name\">add_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.add_comm","kind":"theorem","line":586,"name":"Dyadic.add_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L586-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_inj\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_inj","kind":"theorem","line":575,"name":"Dyadic.toRat_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L575-L584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toDyadic_toRat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toDyadic_toRat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span>.<a href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic\">toDyadic</a></span> <span class=\"fn\">prec</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.roundDown\">roundDown</a></span> <span class=\"fn\">prec</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toDyadic_toRat","kind":"theorem","line":554,"name":"Dyadic.toDyadic_toRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L554-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.roundDown_eq_self_of_le\"><span class=\"name\">Dyadic</span>.<span class=\"name\">roundDown_eq_self_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision\">precision</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">prec</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.roundDown\">roundDown</a></span> <span class=\"fn\">prec</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.roundDown_eq_self_of_le","kind":"theorem","line":543,"name":"Dyadic.roundDown_eq_self_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L543-L552"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.roundDown\"><span class=\"name\">Dyadic</span>.<span class=\"name\">roundDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Rounds a dyadic rational `x` down to the greatest dyadic number with precision at most `prec`\nwhich is less than or equal to `x`.\n","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.roundDown","kind":"def","line":531,"name":"Dyadic.roundDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L531-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Rat.lt_toRat_toDyadic_add\"><span class=\"name\">Rat</span>.<span class=\"name\">lt_toRat_toDyadic_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic\">toDyadic</a></span> <span class=\"fn\">prec</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">Dyadic.ofIntWithPrec</a> <span class=\"fn\">1</span> <span class=\"fn\">prec</span></span>).<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Rat.lt_toRat_toDyadic_add","kind":"theorem","line":514,"name":"Rat.lt_toRat_toDyadic_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L514-L523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Rat.toRat_toDyadic_le\"><span class=\"name\">Rat</span>.<span class=\"name\">toRat_toDyadic_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic\">toDyadic</a></span> <span class=\"fn\">prec</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Rat.toRat_toDyadic_le","kind":"theorem","line":505,"name":"Rat.toRat_toDyadic_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L505-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Rat.toRat_toDyadic\"><span class=\"name\">Rat</span>.<span class=\"name\">toRat_toDyadic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic\">toDyadic</a></span> <span class=\"fn\">prec</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">prec</span>).<a href=\"./Init/Data/Rat/Basic.html#Rat.floor\">floor</a></span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">prec</span></div></div>","info":{"doc":"Converting a rational to a dyadic at a given precision and then back to a rational\ngives the same result as taking the floor of the rational at precision `2 ^ prec`.\n","docLink":"./Init/Data/Dyadic/Basic.html#Rat.toRat_toDyadic","kind":"theorem","line":455,"name":"Rat.toRat_toDyadic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L455-L503"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic_eq_ofIntWithPrec\"><span class=\"name\">Rat</span>.<span class=\"name\">toDyadic_eq_ofIntWithPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic\">toDyadic</a></span> <span class=\"fn\">prec</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">Dyadic.ofIntWithPrec</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">prec</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">prec</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span>)</span>) <span class=\"fn\">prec</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Rat.toDyadic_eq_ofIntWithPrec","kind":"theorem","line":450,"name":"Rat.toDyadic_eq_ofIntWithPrec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L450-L453"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic_mkRat\"><span class=\"name\">Rat</span>.<span class=\"name\">toDyadic_mkRat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Rat/Basic.html#mkRat\">mkRat</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic\">toDyadic</a></span> <span class=\"fn\">prec</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">Dyadic.ofIntWithPrec</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">prec</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">prec</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span>)</span>) <span class=\"fn\">prec</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Rat.toDyadic_mkRat","kind":"theorem","line":433,"name":"Rat.toDyadic_mkRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L433-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Rat.toDyadic\"><span class=\"name\">Rat</span>.<span class=\"name\">toDyadic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Convert a rational number `x` to the greatest dyadic number with precision at most `prec`\nwhich is less than or equal to `x`.\n","docLink":"./Init/Data/Dyadic/Basic.html#Rat.toDyadic","kind":"def","line":424,"name":"Rat.toDyadic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L424-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision_neg\"><span class=\"name\">Dyadic</span>.<span class=\"name\">precision_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision\">precision</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision\">precision</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.precision_neg","kind":"theorem","line":413,"name":"Dyadic.precision_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L413-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision_zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">precision_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision\">precision</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Option.none\">none</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.precision_zero","kind":"theorem","line":412,"name":"Dyadic.precision_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L412-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision_ofIntWithPrec_le\"><span class=\"name\">Dyadic</span>.<span class=\"name\">precision_ofIntWithPrec_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> <span class=\"fn\">i</span> <span class=\"fn\">prec</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision\">precision</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">prec</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.precision_ofIntWithPrec_le","kind":"theorem","line":407,"name":"Dyadic.precision_ofIntWithPrec_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L407-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.precision\"><span class=\"name\">Dyadic</span>.<span class=\"name\">precision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></span></div></div>","info":{"doc":"The \"precision\" of a dyadic number, i.e. in `n * 2^(-p)` with `n` odd the precision is `p`. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.precision","kind":"def","line":401,"name":"Dyadic.precision","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L401-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec_shiftLeft_add\"><span class=\"name\">Dyadic</span>.<span class=\"name\">ofIntWithPrec_shiftLeft_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span>) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec_shiftLeft_add","kind":"theorem","line":392,"name":"Dyadic.ofIntWithPrec_shiftLeft_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L392-L399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.neg_ofIntWithPrec\"><span class=\"name\">Dyadic</span>.<span class=\"name\">neg_ofIntWithPrec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> <span class=\"fn\">i</span> <span class=\"fn\">prec</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>) <span class=\"fn\">prec</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.neg_ofIntWithPrec","kind":"theorem","line":380,"name":"Dyadic.neg_ofIntWithPrec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L380-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.neg_ofOdd\"><span class=\"name\">Dyadic</span>.<span class=\"name\">neg_ofOdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd\">ofOdd</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span> <span class=\"fn\">hn</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd\">ofOdd</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>) <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.neg_ofOdd","kind":"theorem","line":377,"name":"Dyadic.neg_ofOdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L377-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec_zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">ofIntWithPrec_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> <span class=\"fn\">0</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec_zero","kind":"theorem","line":374,"name":"Dyadic.ofIntWithPrec_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L374-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_ofOdd_eq_mul_two_pow\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_ofOdd_eq_mul_two_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd\">ofOdd</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span> <span class=\"fn\">hn</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">k</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_ofOdd_eq_mul_two_pow","kind":"theorem","line":371,"name":"Dyadic.toRat_ofOdd_eq_mul_two_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L371-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd_eq_ofIntWithPrec\"><span class=\"name\">Dyadic</span>.<span class=\"name\">ofOdd_eq_ofIntWithPrec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd\">ofOdd</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span> <span class=\"fn\">hn</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd_eq_ofIntWithPrec","kind":"theorem","line":366,"name":"Dyadic.ofOdd_eq_ofIntWithPrec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L366-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_eq_zero_iff\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_eq_zero_iff","kind":"theorem","line":356,"name":"Dyadic.toRat_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L356-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.zero_ne_of\"><span class=\"name\">Dyadic</span>.<span class=\"name\">zero_ne_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd\">ofOdd</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span> <span class=\"fn\">hn</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.zero_ne_of","kind":"theorem","line":354,"name":"Dyadic.zero_ne_of","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L354-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.of_ne_zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd\">ofOdd</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span> <span class=\"fn\">hn</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.of_ne_zero","kind":"theorem","line":353,"name":"Dyadic.of_ne_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L353-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_natCast\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_natCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_natCast","kind":"theorem","line":348,"name":"Dyadic.toRat_natCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L348-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_intCast\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_intCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_intCast","kind":"theorem","line":343,"name":"Dyadic.toRat_intCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L343-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_pow\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_pow","kind":"theorem","line":337,"name":"Dyadic.toRat_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L337-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.pow_succ\"><span class=\"name\">Dyadic</span>.<span class=\"name\">pow_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.pow_succ","kind":"theorem","line":330,"name":"Dyadic.pow_succ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L330-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.pow_zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">pow_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.pow_zero","kind":"theorem","line":325,"name":"Dyadic.pow_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L325-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_mul\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_mul","kind":"theorem","line":312,"name":"Dyadic.toRat_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L312-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_sub\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_sub","kind":"theorem","line":307,"name":"Dyadic.toRat_sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L307-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_neg\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_neg","kind":"theorem","line":300,"name":"Dyadic.toRat_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L300-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_add\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_add","kind":"theorem","line":273,"name":"Dyadic.toRat_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L273-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_ofIntWithPrec_eq_mul_two_pow\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_ofIntWithPrec_eq_mul_two_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">k</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_ofIntWithPrec_eq_mul_two_pow","kind":"theorem","line":257,"name":"Dyadic.toRat_ofIntWithPrec_eq_mul_two_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L257-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_ofIntWithPrec_eq_mkRat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_ofIntWithPrec_eq_mkRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\">ofIntWithPrec</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Rat/Basic.html#mkRat\">mkRat</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">k</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span>) (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_ofIntWithPrec_eq_mkRat","kind":"theorem","line":245,"name":"Dyadic.toRat_ofIntWithPrec_eq_mkRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L245-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_ofOdd_eq_mkRat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_ofOdd_eq_mkRat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd\">ofOdd</a> <span class=\"fn\">n</span> <span class=\"fn\">k</span> <span class=\"fn\">hn</span>)</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Rat/Basic.html#mkRat\">mkRat</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">k</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span>) (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_ofOdd_eq_mkRat","kind":"theorem","line":239,"name":"Dyadic.toRat_ofOdd_eq_mkRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L239-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Rat.mkRat_one\"><span class=\"name\">Rat</span>.<span class=\"name\">mkRat_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Rat/Basic.html#mkRat\">mkRat</a> <span class=\"fn\">x</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Rat.mkRat_one","kind":"theorem","line":236,"name":"Rat.mkRat_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L236-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\">toRat</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat_zero","kind":"theorem","line":234,"name":"Dyadic.toRat_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L234-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.zero_mul\"><span class=\"name\">Dyadic</span>.<span class=\"name\">zero_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.zero_mul","kind":"theorem","line":232,"name":"Dyadic.zero_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L232-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.mul_zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">mul_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.mul_zero","kind":"theorem","line":231,"name":"Dyadic.mul_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.neg_zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">neg_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.neg_zero","kind":"theorem","line":230,"name":"Dyadic.neg_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.zero_add\"><span class=\"name\">Dyadic</span>.<span class=\"name\">zero_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.zero_add","kind":"theorem","line":229,"name":"Dyadic.zero_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L229-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.add_zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">add_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.add_zero","kind":"theorem","line":228,"name":"Dyadic.add_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.zero_eq\"><span class=\"name\">Dyadic</span>.<span class=\"name\">zero_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic.zero\">zero</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.zero_eq","kind":"theorem","line":227,"name":"Dyadic.zero_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.toRat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">toRat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Rat/Basic.html#Rat\">Rat</a></div></div>","info":{"doc":"Convert a dyadic number to a rational number. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.toRat","kind":"def","line":214,"name":"Dyadic.toRat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L214-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.natAbs_emod_two\"><span class=\"name\">Int</span>.<span class=\"name\">natAbs_emod_two</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span>).<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.natAbs_emod_two","kind":"theorem","line":212,"name":"Int.natAbs_emod_two","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L212-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instHShiftRightNat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instHShiftRightNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instHShiftRightNat","kind":"instance","line":209,"name":"Dyadic.instHShiftRightNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L209-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instHShiftLeftNat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instHShiftLeftNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instHShiftLeftNat","kind":"instance","line":208,"name":"Dyadic.instHShiftLeftNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instHShiftRightInt\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instHShiftRightInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instHShiftRightInt","kind":"instance","line":206,"name":"Dyadic.instHShiftRightInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L206-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instHShiftLeftInt\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instHShiftLeftInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instHShiftLeftInt","kind":"instance","line":205,"name":"Dyadic.instHShiftLeftInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L205-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.shiftRight\"><span class=\"name\">Dyadic</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Shift a dyadic number right by `i` bits. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.shiftRight","kind":"def","line":199,"name":"Dyadic.shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L199-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.shiftLeft\"><span class=\"name\">Dyadic</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Shift a dyadic number left by `i` bits. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.shiftLeft","kind":"def","line":193,"name":"Dyadic.shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L193-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instSub\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instSub","kind":"instance","line":191,"name":"Dyadic.instSub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.sub\"><span class=\"name\">Dyadic</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Subtract two dyadic numbers. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.sub","kind":"def","line":188,"name":"Dyadic.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L188-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instNeg\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instNeg","kind":"instance","line":186,"name":"Dyadic.instNeg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.neg\"><span class=\"name\">Dyadic</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Negate a dyadic number. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.neg","kind":"def","line":180,"name":"Dyadic.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L180-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instPowNat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instPowNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instPowNat","kind":"instance","line":178,"name":"Dyadic.instPowNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L178-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.pow\"><span class=\"name\">Dyadic</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Multiply two dyadic numbers. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.pow","kind":"def","line":171,"name":"Dyadic.pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L171-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instMul\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instMul","kind":"instance","line":169,"name":"Dyadic.instMul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L169-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.mul\"><span class=\"name\">Dyadic</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Multiply two dyadic numbers. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.mul","kind":"def","line":161,"name":"Dyadic.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L161-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instAdd\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instAdd","kind":"instance","line":159,"name":"Dyadic.instAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.add\"><span class=\"name\">Dyadic</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Add two dyadic numbers. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.add","kind":"def","line":146,"name":"Dyadic.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L146-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instNatCast\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instNatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instNatCast","kind":"instance","line":144,"name":"Dyadic.instNatCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instIntCast\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instIntCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instIntCast","kind":"instance","line":143,"name":"Dyadic.instIntCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.instOfNat\"><span class=\"name\">Dyadic</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.instOfNat","kind":"instance","line":140,"name":"Dyadic.instOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L140-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofInt\"><span class=\"name\">Dyadic</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Convert an integer to a dyadic number (which will necessarily have non-positive precision). ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.ofInt","kind":"def","line":136,"name":"Dyadic.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L136-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec\"><span class=\"name\">Dyadic</span>.<span class=\"name\">ofIntWithPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">prec</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"Returns the dyadic number representation of `i * 2 ^ (-exp)`. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.ofIntWithPrec","kind":"def","line":131,"name":"Dyadic.ofIntWithPrec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L131-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#instDecidableEqDyadic.decEq\"><span class=\"name\">instDecidableEqDyadic</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#instDecidableEqDyadic.decEq","kind":"def","line":127,"name":"instDecidableEqDyadic.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#instDecidableEqDyadic\"><span class=\"name\">instDecidableEqDyadic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#instDecidableEqDyadic","kind":"instance","line":127,"name":"instDecidableEqDyadic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd\"><span class=\"name\">Dyadic</span>.<span class=\"name\">ofOdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"The dyadic number `n * 2^(-k)` for some odd `n` and integer `k`. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.ofOdd","kind":"ctor","line":125,"name":"Dyadic.ofOdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L125-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic.zero\"><span class=\"name\">Dyadic</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Dyadic/Basic.html#Dyadic\">Dyadic</a></div></div>","info":{"doc":"The dyadic number `0`. ","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic.zero","kind":"ctor","line":123,"name":"Dyadic.zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L123-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Dyadic\"><span class=\"name\">Dyadic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A dyadic rational is either zero or of the form `n * 2^(-k)` for some (unique) `n k : Int`\nwhere `n` is odd.\n","docLink":"./Init/Data/Dyadic/Basic.html#Dyadic","kind":"inductive","line":118,"name":"Dyadic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L118-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_neg\"><span class=\"name\">Int</span>.<span class=\"name\">trailingZeros_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_neg","kind":"theorem","line":104,"name":"Int.trailingZeros_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L104-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_shiftLeft\"><span class=\"name\">Int</span>.<span class=\"name\">trailingZeros_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_shiftLeft","kind":"theorem","line":99,"name":"Int.trailingZeros_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L99-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.two_pow_trailingZeros_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">two_pow_trailingZeros_dvd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">i</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.two_pow_trailingZeros_dvd","kind":"theorem","line":88,"name":"Int.two_pow_trailingZeros_dvd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L88-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.shiftRight_trailingZeros_mod_two\"><span class=\"name\">Int</span>.<span class=\"name\">shiftRight_trailingZeros_mod_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.shiftRight_trailingZeros_mod_two","kind":"theorem","line":76,"name":"Int.shiftRight_trailingZeros_mod_two","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L76-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_two_mul\"><span class=\"name\">Int</span>.<span class=\"name\">trailingZeros_two_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_two_mul","kind":"theorem","line":67,"name":"Int.trailingZeros_two_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L67-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_eq_zero_of_mod_eq\"><span class=\"name\">Int</span>.<span class=\"name\">trailingZeros_eq_zero_of_mod_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_eq_zero_of_mod_eq","kind":"theorem","line":61,"name":"Int.trailingZeros_eq_zero_of_mod_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L61-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_two_mul_add_one\"><span class=\"name\">Int</span>.<span class=\"name\">trailingZeros_two_mul_add_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_two_mul_add_one","kind":"theorem","line":55,"name":"Int.trailingZeros_two_mul_add_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L55-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_zero\"><span class=\"name\">Int</span>.<span class=\"name\">trailingZeros_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\">trailingZeros</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.trailingZeros_zero","kind":"theorem","line":53,"name":"Int.trailingZeros_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros.aux\"><span class=\"name\">Int</span>.<span class=\"name\">trailingZeros</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Dyadic/Basic.html#Int.trailingZeros.aux","kind":"def","line":31,"name":"Int.trailingZeros.aux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L31-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Dyadic/Basic.html#Int.trailingZeros\"><span class=\"name\">Int</span>.<span class=\"name\">trailingZeros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of trailing zeros in the binary representation of `i`. ","docLink":"./Init/Data/Dyadic/Basic.html#Int.trailingZeros","kind":"def","line":27,"name":"Int.trailingZeros","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Dyadic/Basic.lean#L27-L35"}}],"imports":["Init.Data.Rat.Lemmas","Init.Data.Int.Bitwise.Lemmas","Init.Hints"],"instances":[{"className":"Decidable","name":"instDecidableEqDyadic","typeNames":["Eq"]},{"className":"OfNat","name":"Dyadic.instOfNat","typeNames":["Dyadic"]},{"className":"IntCast","name":"Dyadic.instIntCast","typeNames":["Dyadic"]},{"className":"NatCast","name":"Dyadic.instNatCast","typeNames":["Dyadic"]},{"className":"Add","name":"Dyadic.instAdd","typeNames":["Dyadic"]},{"className":"Mul","name":"Dyadic.instMul","typeNames":["Dyadic"]},{"className":"Pow","name":"Dyadic.instPowNat","typeNames":["Dyadic","Nat"]},{"className":"Neg","name":"Dyadic.instNeg","typeNames":["Dyadic"]},{"className":"Sub","name":"Dyadic.instSub","typeNames":["Dyadic"]},{"className":"HShiftLeft","name":"Dyadic.instHShiftLeftInt","typeNames":["Dyadic","Int","Dyadic"]},{"className":"HShiftRight","name":"Dyadic.instHShiftRightInt","typeNames":["Dyadic","Int","Dyadic"]},{"className":"HShiftLeft","name":"Dyadic.instHShiftLeftNat","typeNames":["Dyadic","Nat","Dyadic"]},{"className":"HShiftRight","name":"Dyadic.instHShiftRightNat","typeNames":["Dyadic","Nat","Dyadic"]},{"className":"LT","name":"Dyadic.instLT","typeNames":["Dyadic"]},{"className":"LE","name":"Dyadic.instLE","typeNames":["Dyadic"]},{"className":"Decidable","name":"Dyadic.instDecidableLT","typeNames":["LT.lt"]},{"className":"Decidable","name":"Dyadic.instDecidableLE","typeNames":["LE.le"]},{"className":"Std.LawfulOrderLT","name":"Dyadic.instLawfulOrderLT","typeNames":["Dyadic"]},{"className":"Std.IsPreorder","name":"Dyadic.instIsPreorder","typeNames":["Dyadic"]},{"className":"Std.IsPartialOrder","name":"Dyadic.instIsPartialOrder","typeNames":["Dyadic"]},{"className":"Std.IsLinearPreorder","name":"Dyadic.instIsLinearPreorder","typeNames":["Dyadic"]},{"className":"Std.IsLinearOrder","name":"Dyadic.instIsLinearOrder","typeNames":["Dyadic"]}],"name":"Init.Data.Dyadic.Basic"}