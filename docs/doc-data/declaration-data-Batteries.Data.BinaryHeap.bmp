{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Array.heapSort\"><span class=\"name\">Array</span>.<span class=\"name\">heapSort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(n log n)`. Sort an array using a `BinaryHeap`. ","docLink":"./Batteries/Data/BinaryHeap.html#Array.heapSort","kind":"def","line":173,"name":"Array.heapSort","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L173-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Array.toBinaryHeap\"><span class=\"name\">Array</span>.<span class=\"name\">toBinaryHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">Batteries.BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(n)`. Convert an unsorted array to a `BinaryHeap`. ","docLink":"./Batteries/Data/BinaryHeap.html#Array.toBinaryHeap","kind":"def","line":168,"name":"Array.toBinaryHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L168-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.Vector.toBinaryHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">Vector</span>.<span class=\"name\">toBinaryHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(n)`. Convert an unsorted vector to a `BinaryHeap`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.Vector.toBinaryHeap","kind":"def","line":162,"name":"Batteries.Vector.toBinaryHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L162-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.increaseKey\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">increaseKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(log n)`. Replace the value at index `i` by `x`. Assumes that `self.get i ≤ x`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.increaseKey","kind":"def","line":156,"name":"Batteries.BinaryHeap.increaseKey","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L156-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.decreaseKey\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">decreaseKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(log n)`. Replace the value at index `i` by `x`. Assumes that `x ≤ self.get i`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.decreaseKey","kind":"def","line":152,"name":"Batteries.BinaryHeap.decreaseKey","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L152-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.replaceMax\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">replaceMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(log n)`. Equivalent to `(self.max, self.popMax.insert x)`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.replaceMax","kind":"def","line":144,"name":"Batteries.BinaryHeap.replaceMax","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L144-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.insertExtractMax\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">insertExtractMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(log n)`. Equivalent to `extractMax (self.insert x)`, except that extraction cannot fail. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.insertExtractMax","kind":"def","line":134,"name":"Batteries.BinaryHeap.insertExtractMax","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L134-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size_pos_of_max\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">size_pos_of_max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.max\">max</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size_pos_of_max","kind":"theorem","line":128,"name":"Batteries.BinaryHeap.size_pos_of_max","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L128-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.extractMax\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">extractMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(log n)`. Return and remove the maximum element from a `BinaryHeap`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.extractMax","kind":"def","line":124,"name":"Batteries.BinaryHeap.extractMax","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L124-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size_popMax\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">size_popMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.popMax\">popMax</a></span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size_popMax","kind":"theorem","line":117,"name":"Batteries.BinaryHeap.size_popMax","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L117-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.popMax\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">popMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(log n)`. Remove the maximum element from a `BinaryHeap`.\nCall `max` first to actually retrieve the maximum element. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.popMax","kind":"def","line":105,"name":"Batteries.BinaryHeap.popMax","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L105-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.max\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(1)`. Get the maximum element in a `BinaryHeap`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.max","kind":"def","line":102,"name":"Batteries.BinaryHeap.max","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size_insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">size_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.insert\">insert</a></span> <span class=\"fn\">x</span>)</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size_insert","kind":"theorem","line":98,"name":"Batteries.BinaryHeap.size_insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(log n)`. Insert an element into a `BinaryHeap`, preserving the max-heap property. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.insert","kind":"def","line":94,"name":"Batteries.BinaryHeap.insert","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L94-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.get\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"`O(1)`. Get an element in the heap by index. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.get","kind":"def","line":91,"name":"Batteries.BinaryHeap.get","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L91-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.vector\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">vector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\">size</a></span></span></div></div>","info":{"doc":"`O(1)`. Get data vector of a `BinaryHeap`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.vector","kind":"def","line":88,"name":"Batteries.BinaryHeap.vector","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L88-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"`O(1)`. Get the number of elements in a `BinaryHeap`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.size","kind":"def","line":85,"name":"Batteries.BinaryHeap.size","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L85-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(1)`. Build a one-element heap. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.singleton","kind":"def","line":82,"name":"Batteries.BinaryHeap.singleton","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.instEmptyCollection\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.instEmptyCollection","kind":"instance","line":80,"name":"Batteries.BinaryHeap.instEmptyCollection","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.instInhabited\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.instInhabited","kind":"instance","line":79,"name":"Batteries.BinaryHeap.instInhabited","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.empty\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"`O(1)`. Build a new empty heap. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.empty","kind":"def","line":76,"name":"Batteries.BinaryHeap.empty","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.heapifyUp\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">heapifyUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">sz</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">sz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">sz</span></span></div></div>","info":{"doc":"Core operation for binary heaps, expressed directly on arrays.\nGiven an array which is a max-heap, push item `i` up to restore the max-heap property. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.heapifyUp","kind":"def","line":64,"name":"Batteries.BinaryHeap.heapifyUp","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L64-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.mkHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">mkHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">sz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">sz</span></span></div></div>","info":{"doc":"Core operation for binary heaps, expressed directly on arrays.\nConstruct a heap from an unsorted array, by heapifying all the elements. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.mkHeap","kind":"def","line":52,"name":"Batteries.BinaryHeap.mkHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L52-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.heapifyDown\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">heapifyDown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">sz</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">sz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">sz</span></span></div></div>","info":{"doc":"Core operation for binary heaps, expressed directly on arrays.\nGiven an array which is a max-heap, push item `i` down to restore the max-heap property. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.heapifyDown","kind":"def","line":32,"name":"Batteries.BinaryHeap.heapifyDown","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L32-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.arr\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">arr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`O(1)`. Get data array for a `BinaryHeap`. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.arr","kind":"def","line":15,"name":"Batteries.BinaryHeap.arr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L15-L15"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\">BinaryHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">lt</span></span></div></div>","info":{"doc":"","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap.mk","kind":"ctor","line":13,"name":"Batteries.BinaryHeap.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L13-L13"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinaryHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"A max-heap data structure. ","docLink":"./Batteries/Data/BinaryHeap.html#Batteries.BinaryHeap","kind":"structure","line":12,"name":"Batteries.BinaryHeap","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Data/BinaryHeap.lean#L12-L15"}}],"imports":["Init"],"instances":[{"className":"Inhabited","name":"Batteries.BinaryHeap.instInhabited","typeNames":["Batteries.BinaryHeap"]},{"className":"EmptyCollection","name":"Batteries.BinaryHeap.instEmptyCollection","typeNames":["Batteries.BinaryHeap"]}],"name":"Batteries.Data.BinaryHeap"}