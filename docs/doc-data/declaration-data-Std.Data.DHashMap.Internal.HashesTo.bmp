{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Internal/HashesTo.html#Std.DHashMap.Internal.List.HashesTo.containsKey_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">List</span>.<span class=\"name\">HashesTo</span>.<span class=\"name\">containsKey_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/LawfulHashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">size</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.List.HashesTo\">HashesTo</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span> <span class=\"fn\">size</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Index.html#Std.DHashMap.Internal.mkIdx\">mkIdx</a> <span class=\"fn\">size</span> <span class=\"fn\">hs</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Hashable.hash\">hash</a> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i</span> → <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/DHashMap/Internal/HashesTo.html#Std.DHashMap.Internal.List.HashesTo.containsKey_eq_false","kind":"theorem","line":46,"name":"Std.DHashMap.Internal.List.HashesTo.containsKey_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/DHashMap/Internal/HashesTo.lean#L46-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Internal/HashesTo.html#Std.DHashMap.Internal.List.hashesTo_cons\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">List</span>.<span class=\"name\">hashesTo_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">h'</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">size</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Index.html#Std.DHashMap.Internal.mkIdx\">mkIdx</a> <span class=\"fn\">size</span> <span class=\"fn\">h'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Hashable.hash\">hash</a> <span class=\"fn\">k</span>)</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.List.HashesTo\">HashesTo</a> <span class=\"fn\">l</span> <span class=\"fn\">i</span> <span class=\"fn\">size</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.List.HashesTo\">HashesTo</a> (<a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>) <span class=\"fn\">i</span> <span class=\"fn\">size</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/DHashMap/Internal/HashesTo.html#Std.DHashMap.Internal.List.hashesTo_cons","kind":"theorem","line":37,"name":"Std.DHashMap.Internal.List.hashesTo_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/DHashMap/Internal/HashesTo.lean#L37-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Internal/HashesTo.html#Std.DHashMap.Internal.List.hashesTo_nil\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">List</span>.<span class=\"name\">hashesTo_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.List.HashesTo\">HashesTo</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span> <span class=\"fn\">size</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/DHashMap/Internal/HashesTo.html#Std.DHashMap.Internal.List.hashesTo_nil","kind":"theorem","line":32,"name":"Std.DHashMap.Internal.List.hashesTo_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/DHashMap/Internal/HashesTo.lean#L32-L35"}}],"imports":["Init.Data.LawfulHashable","Std.Data.Internal.List.Associative","Std.Data.DHashMap.Internal.Defs"],"instances":[],"name":"Std.Data.DHashMap.Internal.HashesTo"}