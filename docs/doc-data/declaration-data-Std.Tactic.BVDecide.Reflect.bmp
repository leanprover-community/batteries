{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.unsat_of_verifyBVExpr_eq_true\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">unsat_of_verifyBVExpr_eq_true</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bv</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyBVExpr\">verifyBVExpr</a> <span class=\"fn\">bv</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">bv</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr.Unsat\">Unsat</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.unsat_of_verifyBVExpr_eq_true","kind":"theorem","line":189,"name":"Std.Tactic.BVDecide.Reflect.unsat_of_verifyBVExpr_eq_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L189-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyBVExpr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">verifyBVExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bv</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Basic.html#Std.Tactic.BVDecide.BVLogicalExpr\">BVLogicalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cert</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Verify that `cert` is an UNSAT proof for the SAT problem obtained by bitblasting `bv`.\n","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyBVExpr","kind":"def","line":183,"name":"Std.Tactic.BVDecide.Reflect.verifyBVExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L183-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert_correct\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">verifyCert_correct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">Sat.CNF</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cert</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert\">verifyCert</a> <span class=\"fn\">cnf</span> <span class=\"fn\">cert</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">cnf</span>.<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\">Unsat</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert_correct","kind":"theorem","line":175,"name":"Std.Tactic.BVDecide.Reflect.verifyCert_correct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L175-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">verifyCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">Sat.CNF</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cert</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Verify that a proof certificate is valid for a given formula.\n","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.verifyCert","kind":"def","line":167,"name":"Std.Tactic.BVDecide.Reflect.verifyCert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L167-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.lemma_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">lemma_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.lemma_congr","kind":"theorem","line":160,"name":"Std.Tactic.BVDecide.Reflect.Bool.lemma_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L160-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.false_of_eq_true_of_eq_false\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">false_of_eq_true_of_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#False\">False</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.false_of_eq_true_of_eq_false","kind":"theorem","line":157,"name":"Std.Tactic.BVDecide.Reflect.Bool.false_of_eq_true_of_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L157-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.cond_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">cond_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">discr' </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">discr'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">discr</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h3</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">discr'</span> then <span class=\"fn\">lhs'</span> else <span class=\"fn\">rhs'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">discr</span> then <span class=\"fn\">lhs</span> else <span class=\"fn\">rhs</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.cond_congr","kind":"theorem","line":152,"name":"Std.Tactic.BVDecide.Reflect.Bool.cond_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L152-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.or_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">or_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">rhs'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">rhs</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.or_congr","kind":"theorem","line":148,"name":"Std.Tactic.BVDecide.Reflect.Bool.or_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L148-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.beq_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">beq_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.beq_congr","kind":"theorem","line":144,"name":"Std.Tactic.BVDecide.Reflect.Bool.beq_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L144-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.xor_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">xor_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">rhs'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">lhs</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">rhs</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.xor_congr","kind":"theorem","line":140,"name":"Std.Tactic.BVDecide.Reflect.Bool.xor_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L140-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.and_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">and_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.and_congr","kind":"theorem","line":136,"name":"Std.Tactic.BVDecide.Reflect.Bool.and_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L136-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.not_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.Bool.not_congr","kind":"theorem","line":133,"name":"Std.Tactic.BVDecide.Reflect.Bool.not_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.clz_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">clz_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.clz\">clz</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.clz\">clz</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.clz_congr","kind":"theorem","line":125,"name":"Std.Tactic.BVDecide.Reflect.BitVec.clz_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L125-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.reverse_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">reverse_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.reverse_congr","kind":"theorem","line":121,"name":"Std.Tactic.BVDecide.Reflect.BitVec.reverse_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L121-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.cond_false\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">cond_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">discr</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">(bif <span class=\"fn\">discr</span> then <span class=\"fn\">lhs</span> else <span class=\"fn\">rhs</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.cond_false","kind":"theorem","line":117,"name":"Std.Tactic.BVDecide.Reflect.BitVec.cond_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L117-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.cond_true\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">cond_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">discr</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">(bif <span class=\"fn\">discr</span> then <span class=\"fn\">lhs</span> else <span class=\"fn\">rhs</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">lhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.cond_true","kind":"theorem","line":113,"name":"Std.Tactic.BVDecide.Reflect.BitVec.cond_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L113-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.umod_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">umod_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">rhs</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.umod_congr","kind":"theorem","line":109,"name":"Std.Tactic.BVDecide.Reflect.BitVec.umod_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L109-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.udiv_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">udiv_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">rhs</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.udiv_congr","kind":"theorem","line":105,"name":"Std.Tactic.BVDecide.Reflect.BitVec.udiv_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L105-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.ofBool_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">e'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.ofBool_congr","kind":"theorem","line":102,"name":"Std.Tactic.BVDecide.Reflect.BitVec.ofBool_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.getLsbD_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">e'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">e'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.getLsbD_congr","kind":"theorem","line":98,"name":"Std.Tactic.BVDecide.Reflect.BitVec.getLsbD_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.ult_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ult_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">rhs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">rhs</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.ult_congr","kind":"theorem","line":94,"name":"Std.Tactic.BVDecide.Reflect.BitVec.ult_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L94-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.beq_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">rhs</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.beq_congr","kind":"theorem","line":90,"name":"Std.Tactic.BVDecide.Reflect.BitVec.beq_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L90-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.mul_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">rhs</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.mul_congr","kind":"theorem","line":86,"name":"Std.Tactic.BVDecide.Reflect.BitVec.mul_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L86-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.rotateRight_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">rotateRight_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.rotateRight\">rotateRight</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.rotateRight\">rotateRight</a></span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.rotateRight_congr","kind":"theorem","line":82,"name":"Std.Tactic.BVDecide.Reflect.BitVec.rotateRight_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L82-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.rotateLeft_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">rotateLeft_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.rotateLeft\">rotateLeft</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.rotateLeft\">rotateLeft</a></span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.rotateLeft_congr","kind":"theorem","line":78,"name":"Std.Tactic.BVDecide.Reflect.BitVec.rotateLeft_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L78-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.extract_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extract_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">len </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">start</span> <span class=\"fn\">len</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">start</span> <span class=\"fn\">len</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.extract_congr","kind":"theorem","line":74,"name":"Std.Tactic.BVDecide.Reflect.BitVec.extract_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L74-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.replicate_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">replicate_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr </span><span class=\"fn\">expr'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">expr'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">expr</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.replicate\">BitVec.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">expr'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.replicate\">BitVec.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">expr</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.replicate_congr","kind":"theorem","line":70,"name":"Std.Tactic.BVDecide.Reflect.BitVec.replicate_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L70-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.append_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lw </span><span class=\"fn\">rw</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">lhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">lw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">rw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rhs</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.append_congr","kind":"theorem","line":65,"name":"Std.Tactic.BVDecide.Reflect.BitVec.append_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L65-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.add_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">rhs</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.add_congr","kind":"theorem","line":61,"name":"Std.Tactic.BVDecide.Reflect.BitVec.add_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L61-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRight_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">arithShiftRight_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lhs'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">rhs'</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRight_congr","kind":"theorem","line":56,"name":"Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRight_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L56-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRightNat_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">arithShiftRightNat_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x'</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight\">sshiftRight</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight\">sshiftRight</a></span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRightNat_congr","kind":"theorem","line":52,"name":"Std.Tactic.BVDecide.Reflect.BitVec.arithShiftRightNat_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftRight_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftRight_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">rhs'</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftRight_congr","kind":"theorem","line":47,"name":"Std.Tactic.BVDecide.Reflect.BitVec.shiftRight_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L47-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftLeft_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">rhs'</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.shiftLeft_congr","kind":"theorem","line":42,"name":"Std.Tactic.BVDecide.Reflect.BitVec.shiftLeft_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L42-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.not_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">x'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.not_congr","kind":"theorem","line":39,"name":"Std.Tactic.BVDecide.Reflect.BitVec.not_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.xor_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">xor_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">rhs</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.xor_congr","kind":"theorem","line":35,"name":"Std.Tactic.BVDecide.Reflect.BitVec.xor_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L35-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.or_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">or_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">rhs</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.or_congr","kind":"theorem","line":31,"name":"Std.Tactic.BVDecide.Reflect.BitVec.or_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L31-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.and_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Reflect</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">lhs' </span><span class=\"fn\">rhs'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">rhs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs'</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">rhs'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">rhs</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Reflect.html#Std.Tactic.BVDecide.Reflect.BitVec.and_congr","kind":"theorem","line":27,"name":"Std.Tactic.BVDecide.Reflect.BitVec.and_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Reflect.lean#L27-L29"}}],"imports":["Std.Tactic.BVDecide.LRAT.Checker","Std.Tactic.BVDecide.LRAT.Parser","Std.Tactic.BVDecide.Bitblast","Std.Sat.AIG.CNF","Std.Sat.AIG.RelabelNat"],"instances":[],"name":"Std.Tactic.BVDecide.Reflect"}