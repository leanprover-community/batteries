{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.evalMonotonicity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Monotonicity</span>.<span class=\"name\">evalMonotonicity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Elab.Tactic.Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.evalMonotonicity","kind":"def","line":215,"name":"Lean.Meta.Monotonicity.evalMonotonicity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Monotonicity.lean#L215-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.solveMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Monotonicity</span>.<span class=\"name\">solveMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">failK</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span></span> := <span class=\"fn\">fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} =&gt; <a href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.defaultFailK\">defaultFailK</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.solveMono","kind":"opaque","line":210,"name":"Lean.Meta.Monotonicity.solveMono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Monotonicity.lean#L210-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.solveMonoStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Monotonicity</span>.<span class=\"name\">solveMonoStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">failK</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span></span> := @<a href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.defaultFailK\">defaultFailK</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.solveMonoStep","kind":"def","line":109,"name":"Lean.Meta.Monotonicity.solveMonoStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Monotonicity.lean#L109-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.solveMonoCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Monotonicity</span>.<span class=\"name\">solveMonoCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">inst_α </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Base case for solveMonoStep: Handles goals of the form\n```\nmonotone (fun f => f.1.2 x y)\n```\n\nIt's tricky to solve them compositionally from the outside in, so here we construct the proof\nfrom the inside out.\n","docLink":"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.solveMonoCall","kind":"opaque","line":75,"name":"Lean.Meta.Monotonicity.solveMonoCall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Monotonicity.lean#L75-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.defaultFailK\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Monotonicity</span>.<span class=\"name\">defaultFailK</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">monoThms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.defaultFailK","kind":"def","line":66,"name":"Lean.Meta.Monotonicity.defaultFailK","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Monotonicity.lean#L66-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.findMonoThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Monotonicity</span>.<span class=\"name\">findMonoThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Finds tagged monotonicity theorems of the form `monotone (fun x => e)`.\n","docLink":"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.findMonoThms","kind":"def","line":60,"name":"Lean.Meta.Monotonicity.findMonoThms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Monotonicity.lean#L60-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.monotoneExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Monotonicity</span>.<span class=\"name\">monotoneExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">DiscrTree.Key</a></span>) <span class=\"fn\">(<a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">DiscrTree</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Environment extensions for monotonicity lemmas ","docLink":"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.monotoneExt","kind":"opaque","line":28,"name":"Lean.Meta.Monotonicity.monotoneExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Monotonicity.lean#L28-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.headBetaUnderLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Monotonicity</span>.<span class=\"name\">headBetaUnderLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Monotonicity.html#Lean.Meta.Monotonicity.headBetaUnderLambda","kind":"def","line":21,"name":"Lean.Meta.Monotonicity.headBetaUnderLambda","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Monotonicity.lean#L21-L26"}}],"imports":["Lean.Meta.Tactic.Split","Lean.Elab.RecAppSyntax","Lean.Elab.Tactic.Basic","Init.Internal.Order"],"instances":[],"name":"Lean.Elab.Tactic.Monotonicity"}