{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.selector\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">selector</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">notify</span> : <a href=\"./Std/Sync/Notify.html#Std.Notify\">Notify</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Creates a selector that waits for notifications\n","docLink":"./Std/Sync/Notify.html#Std.Notify.selector","kind":"def","line":116,"name":"Std.Notify.selector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L116-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.wait\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">wait</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Std/Sync/Notify.html#Std.Notify\">Notify</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.AsyncTask\">Internal.IO.Async.AsyncTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"Wait to be notified. Returns a task that completes when notify is called.\nNote: if notify was called before wait, this will wait for the next notify call.\n","docLink":"./Std/Sync/Notify.html#Std.Notify.wait","kind":"def","line":104,"name":"Std.Notify.wait","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L104-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.notifyOne\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">notifyOne</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Std/Sync/Notify.html#Std.Notify\">Notify</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Notify exactly one waiting consumer (if any). Returns true if a consumer\nwas notified, false if no consumers were waiting.\n","docLink":"./Std/Sync/Notify.html#Std.Notify.notifyOne","kind":"def","line":89,"name":"Std.Notify.notifyOne","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L89-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.notify\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">notify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Std/Sync/Notify.html#Std.Notify\">Notify</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Notify all currently waiting consumers.\n","docLink":"./Std/Sync/Notify.html#Std.Notify.notify","kind":"def","line":70,"name":"Std.Notify.notify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L70-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.new\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">new</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Std/Sync/Notify.html#Std.Notify\">Notify</a></span></div></div>","info":{"doc":"Create a new notify.\n","docLink":"./Std/Sync/Notify.html#Std.Notify.new","kind":"def","line":64,"name":"Std.Notify.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L64-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.state\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">state</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Sync/Notify.html#Std.Notify\">Notify</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Mutex.html#Std.Mutex\">Mutex</a> <a href=\"./Std/Sync/Notify.html#Std.Notify.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Notify.html#Std.Notify.state","kind":"def","line":60,"name":"Std.Notify.state","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sync/Mutex.html#Std.Mutex\">Mutex</a> <a href=\"./Std/Sync/Notify.html#Std.Notify.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Notify.html#Std.Notify\">Notify</a></div></div>","info":{"doc":"","docLink":"./Std/Sync/Notify.html#Std.Notify.mk","kind":"ctor","line":59,"name":"Std.Notify.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A notify is a synchronization primitive that allows multiple consumers to wait\nuntil notify is called.\n","docLink":"./Std/Sync/Notify.html#Std.Notify","kind":"structure","line":55,"name":"Std.Notify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L55-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.State.consumers\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">State</span>.<span class=\"name\">consumers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Sync/Notify.html#Std.Notify.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Queue</a> <span class=\"fn\">(<a href=\"./Std/Sync/Notify.html#Std.Notify.Consumer\">Consumer</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"Consumers that are blocked waiting for a notification.\n-","docLink":"./Std/Sync/Notify.html#Std.Notify.State.consumers","kind":"def","line":53,"name":"Std.Notify.State.consumers","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.State.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">consumers</span> : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Queue</a> <span class=\"fn\">(<a href=\"./Std/Sync/Notify.html#Std.Notify.Consumer\">Consumer</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Notify.html#Std.Notify.State\">State</a></div></div>","info":{"doc":"","docLink":"./Std/Sync/Notify.html#Std.Notify.State.mk","kind":"ctor","line":48,"name":"Std.Notify.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.State\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The central state structure for an a `Notify`.\n","docLink":"./Std/Sync/Notify.html#Std.Notify.State","kind":"structure","line":45,"name":"Std.Notify.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L45-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.Consumer.resolve\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">Consumer</span>.<span class=\"name\">resolve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sync/Notify.html#Std.Notify.Consumer\">Consumer</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Notify.html#Std.Notify.Consumer.resolve","kind":"def","line":33,"name":"Std.Notify.Consumer.resolve","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L33-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.Consumer.select\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">Consumer</span>.<span class=\"name\">select</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finished</span> : <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Waiter\">Internal.IO.Async.Waiter</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Notify.html#Std.Notify.Consumer\">Consumer</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Notify.html#Std.Notify.Consumer.select","kind":"ctor","line":31,"name":"Std.Notify.Consumer.select","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.Consumer.normal\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">Consumer</span>.<span class=\"name\">normal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Notify.html#Std.Notify.Consumer\">Consumer</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Notify.html#Std.Notify.Consumer.normal","kind":"ctor","line":30,"name":"Std.Notify.Consumer.normal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Notify.html#Std.Notify.Consumer\"><span class=\"name\">Std</span>.<span class=\"name\">Notify</span>.<span class=\"name\">Consumer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Std/Sync/Notify.html#Std.Notify.Consumer","kind":"inductive","line":29,"name":"Std.Notify.Consumer","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Notify.lean#L29-L31"}}],"imports":["Init.Data.Queue","Std.Sync.Mutex","Std.Internal.Async.Select"],"instances":[],"name":"Std.Sync.Notify"}