{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintro\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rintro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"The implementation of the `rintro` tactic. It takes a list of patterns `pats` and\nan optional type ascription `ty?` and introduces the patterns, resulting in zero or more goals.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintro","kind":"def","line":512,"name":"Lean.Elab.Tactic.RCases.rintro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L512-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPats\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">expandRIntroPats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>","info":{"doc":"Expand a list of `rintroPat` into an equivalent list of `rcasesPat` patterns. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPats","kind":"opaque","line":468,"name":"Lean.Elab.Tactic.RCases.expandRIntroPats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L468-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcases\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rcases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Given a list of targets of the form `e` or `h : e`, and a pattern, match all the targets\nagainst the pattern. Returns the list of produced subgoals.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcases","kind":"def","line":418,"name":"Lean.Elab.Tactic.RCases.rcases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L418-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instReprRCasesPatt</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt.repr","kind":"opaque","line":77,"name":"Lean.Elab.Tactic.RCases.instReprRCasesPatt.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instReprRCasesPatt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt","kind":"instance","line":77,"name":"Lean.Elab.Tactic.RCases.instReprRCasesPatt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"An alternation / variant pattern `p1 | p2 | p3` ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts","kind":"ctor","line":75,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"A tuple constructor like `⟨p1, p2, p3⟩` ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple","kind":"ctor","line":73,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L73-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">typed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>","info":{"doc":"A type ascription like `pat : ty` (parentheses are optional) ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed","kind":"ctor","line":71,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.typed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.explicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">explicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"An explicit pattern `@pat`. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.explicit","kind":"ctor","line":69,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.explicit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.clear\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">clear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></div></div>","info":{"doc":"A hyphen `-`, which clears the active hypothesis and any dependents. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.clear","kind":"ctor","line":67,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.clear","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.one\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"A named pattern like `foo` ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.one","kind":"ctor","line":65,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.paren\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"A parenthesized expression, used for hovers ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.paren","kind":"ctor","line":63,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.paren","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L63-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An `rcases` pattern can be one of the following, in a nested combination:\n\n* A name like `foo`\n* The special keyword `rfl` (for pattern matching on equality using `subst`)\n* A hyphen `-`, which clears the active hypothesis and any dependents.\n* A type ascription like `pat : ty` (parentheses are optional)\n* A tuple constructor like `⟨p1, p2, p3⟩`\n* An alternation / variant pattern `p1 | p2 | p3`\n\nParentheses can be used for grouping; alternation is higher precedence than type ascription, so\n`p1 | p2 | p3 : ty` means `(p1 | p2 | p3) : ty`.\n\nN-ary alternations are treated as a group, so `p1 | p2 | p3` is not the same as `p1 | (p2 | p3)`,\nand similarly for tuples. However, note that an n-ary alternation or tuple can match an n-ary\nconjunction or disjunction, because if the number of patterns exceeds the number of constructors in\nthe type being destructed, the extra patterns will match on the last element, meaning that\n`p1 | p2 | p3` will act like `p1 | (p2 | p3)` when matching `a1 ∨ a2 ∨ a3`. If matching against a\ntype with 3 constructors,  `p1 | (p2 | p3)` will act like `p1 | (p2 | p3) | _` instead.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt","kind":"inductive","line":42,"name":"Lean.Elab.Tactic.RCases.RCasesPatt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L42-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","kind":"instance","line":32,"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatMed</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatLo</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","kind":"instance","line":30,"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatMed</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","kind":"instance","line":28,"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","kind":"instance","line":26,"name":"Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedRCasesPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Enables the 'unused rcases pattern' linter. This will warn when a pattern is ignored by\n`rcases`, `rintro`, `ext` and similar tactics.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern","kind":"opaque","line":17,"name":"Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/RCases.lean#L17-L24"}}],"imports":["Lean.Elab.Tactic.ElabTerm","Lean.Elab.Tactic.Induction","Lean.Elab.Tactic.Generalize","Lean.Meta.Tactic.Replace"],"instances":[{"className":"Coe","name":"Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","typeNames":["Lean.Syntax.Ident","Lean.TSyntax"]},{"className":"Coe","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","typeNames":["Lean.TSyntax","Lean.TSyntax"]},{"className":"Coe","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","typeNames":["Lean.TSyntax","Lean.TSyntax"]},{"className":"Coe","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","typeNames":["Lean.TSyntax","Lean.TSyntax"]},{"className":"Repr","name":"Lean.Elab.Tactic.RCases.instReprRCasesPatt","typeNames":["Lean.Elab.Tactic.RCases.RCasesPatt"]}],"name":"Lean.Elab.Tactic.RCases"}