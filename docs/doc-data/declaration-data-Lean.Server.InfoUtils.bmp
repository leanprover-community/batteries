{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.termGoalAt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">termGoalAt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hoverPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.termGoalAt?","kind":"def","line":490,"name":"Lean.Elab.InfoTree.termGoalAt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L490-L497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">goalsAt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Lean/Data/Position.html#Lean.FileMap\">FileMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hoverPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult\">GoalsAtResult</a></span></div></div>","info":{"doc":"Try to retrieve `TacticInfo` for `hoverPos`.\nWe retrieve all `TacticInfo` nodes s.t. `hoverPos` is inside the node's range plus trailing whitespace.\nWe usually prefer the innermost such nodes so that for composite tactics such as `induction`, we show the nested proofs' states.\nHowever, if `hoverPos` is after the tactic, we prefer nodes that are not indented relative to it, meaning that e.g. at `|` in\n```lean\nhave := by\n  exact foo\n|\n```\nwe show the (final, see below) state of `have`, not `exact`.\n\nMoreover, we instruct the LSP server to use the state after tactic execution if\n- the hover position is after the info's start position *and*\n- there is no nested tactic info after the hover position (tactic combinators should decide for themselves\n  where to show intermediate states by calling `withTacticInfoContext`) ","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?","kind":"def","line":428,"name":"Lean.Elab.InfoTree.goalsAt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L428-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.priority\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">GoalsAtResult</span>.<span class=\"name\">priority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult\">GoalsAtResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.priority","kind":"def","line":426,"name":"Lean.Elab.GoalsAtResult.priority","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L426-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.indented\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">GoalsAtResult</span>.<span class=\"name\">indented</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult\">GoalsAtResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether the tactic info is further indented than the hover position. ","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.indented","kind":"def","line":424,"name":"Lean.Elab.GoalsAtResult.indented","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L424-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.useAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">GoalsAtResult</span>.<span class=\"name\">useAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult\">GoalsAtResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.useAfter","kind":"def","line":422,"name":"Lean.Elab.GoalsAtResult.useAfter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L422-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.tacticInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">GoalsAtResult</span>.<span class=\"name\">tacticInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult\">GoalsAtResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.tacticInfo","kind":"def","line":421,"name":"Lean.Elab.GoalsAtResult.tacticInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L421-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.ctxInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">GoalsAtResult</span>.<span class=\"name\">ctxInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult\">GoalsAtResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.ctxInfo","kind":"def","line":420,"name":"Lean.Elab.GoalsAtResult.ctxInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L420-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">GoalsAtResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useAfter </span><span class=\"fn\">indented</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">priority</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult\">GoalsAtResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult.mk","kind":"ctor","line":419,"name":"Lean.Elab.GoalsAtResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L419-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">GoalsAtResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult","kind":"structure","line":419,"name":"Lean.Elab.GoalsAtResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L419-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">fmtHover?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ci</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Util/PPExt.html#Lean.FormatWithInfos\">FormatWithInfos</a>)</span></span></div></div>","info":{"doc":"Construct a hover popup, if any, from an info node in a context.","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?","kind":"def","line":356,"name":"Lean.Elab.Info.fmtHover?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L356-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.docString?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">docString?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.docString?","kind":"def","line":329,"name":"Lean.Elab.Info.docString?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L329-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.type?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">type?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.type?","kind":"def","line":322,"name":"Lean.Elab.Info.type?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L322-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hoverableInfoAtM?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">hoverableInfoAtM?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hoverPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeStop</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">filter</span> :\n  <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> →\n    <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a>))</span></span></span></span></span></span> :=\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>) (<span class=\"fn\">x_1</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>) (<span class=\"fn\">x_2</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span>)\n    (<span class=\"fn\">results</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a>)</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">results</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a>)</span></span></div></div>","info":{"doc":"Find an info node, if any, which should be shown on hover/cursor at position `hoverPos`. ","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hoverableInfoAtM?","kind":"def","line":282,"name":"Lean.Elab.InfoTree.hoverableInfoAtM?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L282-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.instMaxHoverableInfoPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instMaxHoverableInfoPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.instMaxHoverableInfoPrio","kind":"instance","line":280,"name":"Lean.Elab.instMaxHoverableInfoPrio","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L280-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.instLEHoverableInfoPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instLEHoverableInfoPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.instLEHoverableInfoPrio","kind":"instance","line":279,"name":"Lean.Elab.instLEHoverableInfoPrio","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L279-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.instOrdHoverableInfoPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instOrdHoverableInfoPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.instOrdHoverableInfoPrio","kind":"instance","line":259,"name":"Lean.Elab.instOrdHoverableInfoPrio","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L259-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.instBEqHoverableInfoPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instBEqHoverableInfoPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.instBEqHoverableInfoPrio","kind":"instance","line":257,"name":"Lean.Elab.instBEqHoverableInfoPrio","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.instBEqHoverableInfoPrio.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instBEqHoverableInfoPrio</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a> → <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.instBEqHoverableInfoPrio.beq","kind":"def","line":257,"name":"Lean.Elab.instBEqHoverableInfoPrio.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.isPartialTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HoverableInfoPrio</span>.<span class=\"name\">isPartialTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.isPartialTermInfo","kind":"def","line":256,"name":"Lean.Elab.HoverableInfoPrio.isPartialTermInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L256-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.isVariableInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HoverableInfoPrio</span>.<span class=\"name\">isVariableInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.isVariableInfo","kind":"def","line":254,"name":"Lean.Elab.HoverableInfoPrio.isVariableInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L254-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HoverableInfoPrio</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.size","kind":"def","line":252,"name":"Lean.Elab.HoverableInfoPrio.size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L252-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.isHoverPosOnStop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HoverableInfoPrio</span>.<span class=\"name\">isHoverPosOnStop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.isHoverPosOnStop","kind":"def","line":247,"name":"Lean.Elab.HoverableInfoPrio.isHoverPosOnStop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L247-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HoverableInfoPrio</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isHoverPosOnStop</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isVariableInfo </span><span class=\"fn\">isPartialTermInfo</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\">HoverableInfoPrio</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio.mk","kind":"ctor","line":245,"name":"Lean.Elab.HoverableInfoPrio.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L245-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HoverableInfoPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.HoverableInfoPrio","kind":"structure","line":245,"name":"Lean.Elab.HoverableInfoPrio","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L245-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.smallestInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">smallestInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.smallestInfo?","kind":"def","line":236,"name":"Lean.Elab.InfoTree.smallestInfo?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L236-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursInOrOnBoundary\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">occursInOrOnBoundary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hoverPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursInOrOnBoundary","kind":"def","line":229,"name":"Lean.Elab.Info.occursInOrOnBoundary","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L229-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursInside?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">occursInside?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hoverPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursInside?","kind":"def","line":223,"name":"Lean.Elab.Info.occursInside?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L223-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isSmaller\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">isSmaller</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isSmaller","kind":"def","line":217,"name":"Lean.Elab.Info.isSmaller","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L217-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.size?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">size?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.size?","kind":"def","line":211,"name":"Lean.Elab.Info.size?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L211-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeStop</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.contains","kind":"def","line":208,"name":"Lean.Elab.Info.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L208-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.range?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">range?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Syntax.html#String.Range\">String.Range</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.range?","kind":"def","line":205,"name":"Lean.Elab.Info.range?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L205-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.tailPos?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">tailPos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.tailPos?","kind":"def","line":202,"name":"Lean.Elab.Info.tailPos?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L202-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.pos?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">pos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.pos?","kind":"def","line":199,"name":"Lean.Elab.Info.pos?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L199-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.lctx","kind":"def","line":191,"name":"Lean.Elab.Info.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L191-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.stx","kind":"def","line":172,"name":"Lean.Elab.Info.stx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L172-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.getCompletionInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">getCompletionInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">infoTree</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.getCompletionInfos","kind":"def","line":166,"name":"Lean.Elab.InfoTree.getCompletionInfos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L166-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isCompletion\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">isCompletion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isCompletion","kind":"def","line":162,"name":"Lean.Elab.Info.isCompletion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L162-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">isTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isTerm","kind":"def","line":158,"name":"Lean.Elab.Info.isTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L158-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectTermInfoM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">collectTermInfoM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectTermInfoM","kind":"def","line":149,"name":"Lean.Elab.InfoTree.collectTermInfoM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L149-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfoTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">foldInfoTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Fold an info tree as follows, while ensuring that the correct `ContextInfo` is supplied at each stage:\n\n* Nodes are combined with the initial value `init` using `f`, and the result is then combined with the children using a left fold\n* On InfoTree holes, we just return the initial value.\n\nThis is like `InfoTree.foldInfo`, but it also passes the whole node to `f` instead of just the head.\n","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfoTree","kind":"def","line":128,"name":"Lean.Elab.InfoTree.foldInfoTree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L128-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfoM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">foldInfoM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfoM","kind":"def","line":117,"name":"Lean.Elab.InfoTree.foldInfoM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L117-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">foldInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfo","kind":"def","line":106,"name":"Lean.Elab.InfoTree.foldInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L106-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.deepestNodes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">deepestNodes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">infoTree</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"For every branch of the `InfoTree`, find the deepest node in that branch for which `p` returns\n`some _`  and return the union of all such nodes. The visitor `p` is given a node together with\nits innermost surrounding `ContextInfo`. ","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.deepestNodes","kind":"def","line":99,"name":"Lean.Elab.InfoTree.deepestNodes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L99-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.deepestNodesM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">deepestNodesM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">infoTree</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"For every branch of the `InfoTree`, find the deepest node in that branch for which `p` returns\n`some _`  and return the union of all such nodes. The visitor `p` is given a node together with\nits innermost surrounding `ContextInfo`. ","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.deepestNodesM","kind":"def","line":86,"name":"Lean.Elab.InfoTree.deepestNodesM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L86-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectNodesBottomUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">collectNodesBottomUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Visit nodes bottom-up, passing in a surrounding context (the innermost one) and the union of nested results (empty at leaves). ","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectNodesBottomUp","kind":"def","line":81,"name":"Lean.Elab.InfoTree.collectNodesBottomUp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L81-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectNodesBottomUpM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">collectNodesBottomUpM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Visit nodes bottom-up, passing in a surrounding context (the innermost one) and the union of nested results (empty at leaves). ","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectNodesBottomUpM","kind":"def","line":76,"name":"Lean.Elab.InfoTree.collectNodesBottomUpM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L76-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">visitM'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preNode</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span></span> :=\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>) (<span class=\"fn\">x_1</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>) (<span class=\"fn\">x_2</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">postNode</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></span> :=\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>) (<span class=\"fn\">x_1</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>) (<span class=\"fn\">x_2</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"`InfoTree.visitM` specialized to `Unit` return type ","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM'","kind":"def","line":69,"name":"Lean.Elab.InfoTree.visitM'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L69-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">visitM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preNode</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span></span> :=\n  <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>) (<span class=\"fn\">x_1</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>) (<span class=\"fn\">x_2</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">postNode</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a> → <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></span></div></div>","info":{"doc":"Visit nodes, passing in a surrounding context (the innermost one combined with all outer ones) and\naccumulating results on the way back up. If `preNode` returns `false`, the children of the current\nnode are skipped and `postNode` is invoked with an empty list of results.\n","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM","kind":"def","line":47,"name":"Lean.Elab.InfoTree.visitM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L47-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.children\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoWithCtx</span>.<span class=\"name\">children</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.children","kind":"def","line":45,"name":"Lean.Elab.InfoWithCtx.children","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.info\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoWithCtx</span>.<span class=\"name\">info</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.info","kind":"def","line":44,"name":"Lean.Elab.InfoWithCtx.info","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoWithCtx</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.ctx","kind":"def","line":43,"name":"Lean.Elab.InfoWithCtx.ctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoWithCtx</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">children</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\">InfoWithCtx</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx.mk","kind":"ctor","line":42,"name":"Lean.Elab.InfoWithCtx.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoWithCtx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Elaborator information with elaborator context.\n\nIt can be thought of as a \"thunked\" elaboration computation that allows us\nto retroactively extract type information, symbol locations, etc.\nthrough arbitrary invocations of `runMetaM` (where the necessary context and state\ncan be reconstructed from `ctx` and `info.lctx`).\n\nW.r.t. widgets, this is used to tag different parts of expressions in `ppExprTagged`.\nThis is the input to the RPC call `Lean.Widget.InteractiveDiagnostics.infoToInteractive`.\nIt carries over information about delaborated\n`Info` nodes in a `CodeWithInfos`, and the associated pretty-printing\nfunctionality is purpose-specific to showing the contents of infoview popups.\n\nFor use in standard LSP go-to-definition (see `Lean.Server.FileWorker.locationLinksOfInfo`),\nall the elaborator information we need for similar tasks is already fully recoverable via\nthe `InfoTree` structure (see `Lean.Elab.InfoTree.visitM`).\nThere we use this as a convenience wrapper for queried nodes (e.g. the return value of\n`Lean.Elab.InfoTree.hoverableInfoAt?`). It also includes the children info nodes\nas additional context (this is unused in the RPC case, as delaboration has no notion of child nodes).\n\nNOTE: This type is for internal use in the infoview/LSP. It should not be used in user widgets.\n","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoWithCtx","kind":"structure","line":20,"name":"Lean.Elab.InfoWithCtx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/InfoUtils.lean#L20-L45"}}],"imports":["Lean.DocString","Lean.PrettyPrinter","Lean.Parser.Term"],"instances":[{"className":"BEq","name":"Lean.Elab.instBEqHoverableInfoPrio","typeNames":["Lean.Elab.HoverableInfoPrio"]},{"className":"Ord","name":"Lean.Elab.instOrdHoverableInfoPrio","typeNames":["Lean.Elab.HoverableInfoPrio"]},{"className":"LE","name":"Lean.Elab.instLEHoverableInfoPrio","typeNames":["Lean.Elab.HoverableInfoPrio"]},{"className":"Max","name":"Lean.Elab.instMaxHoverableInfoPrio","typeNames":["Lean.Elab.HoverableInfoPrio"]}],"name":"Lean.Server.InfoUtils"}