{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxi.instIsAlwaysFiniteOfLawfulHasSize\"><span class=\"name\">Std</span>.<span class=\"name\">Rxi</span>.<span class=\"name\">instIsAlwaysFiniteOfLawfulHasSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">PRange.UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">PRange.LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.HasSize\">HasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxi.LawfulHasSize\">LawfulHasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxi.IsAlwaysFinite\">IsAlwaysFinite</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxi.instIsAlwaysFiniteOfLawfulHasSize","kind":"instance","line":167,"name":"Std.Rxi.instIsAlwaysFiniteOfLawfulHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/Instances.lean#L167-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxo.instIsAlwaysFiniteOfLawfulHasSize\"><span class=\"name\">Std</span>.<span class=\"name\">Rxo</span>.<span class=\"name\">instIsAlwaysFiniteOfLawfulHasSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">PRange.UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">PRange.LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.HasSize\">HasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.LawfulHasSize\">LawfulHasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxo.IsAlwaysFinite\">IsAlwaysFinite</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxo.instIsAlwaysFiniteOfLawfulHasSize","kind":"instance","line":141,"name":"Std.Rxo.instIsAlwaysFiniteOfLawfulHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/Instances.lean#L141-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxo.LawfulHasSize.of_closed\"><span class=\"name\">Std</span>.<span class=\"name\">Rxo</span>.<span class=\"name\">LawfulHasSize</span>.<span class=\"name\">of_closed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">PRange.UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPartialOrder\">IsPartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">PRange.LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">PRange.LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize\">Rxc.HasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.LawfulHasSize\">Rxc.LawfulHasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.LawfulHasSize\">LawfulHasSize</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxo.LawfulHasSize.of_closed","kind":"instance","line":97,"name":"Std.Rxo.LawfulHasSize.of_closed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/Instances.lean#L97-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxo.HasSize.ofClosed\"><span class=\"name\">Std</span>.<span class=\"name\">Rxo</span>.<span class=\"name\">HasSize</span>.<span class=\"name\">ofClosed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize\">Rxc.HasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxo.HasSize\">HasSize</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Creates a `HasSize α` from a `HasSize α` instance\\. If the latter is lawful\nand certain other conditions hold, then the former is also lawful by\n`Rxo.LawfulHasSize.of_closed`\\.\n","docLink":"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxo.HasSize.ofClosed","kind":"def","line":92,"name":"Std.Rxo.HasSize.ofClosed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/Instances.lean#L92-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxc.instIsAlwaysFiniteOfLawfulHasSize\"><span class=\"name\">Std</span>.<span class=\"name\">Rxc</span>.<span class=\"name\">instIsAlwaysFiniteOfLawfulHasSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">PRange.UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">PRange.LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.HasSize\">HasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.Rxc.LawfulHasSize\">LawfulHasSize</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.Rxc.IsAlwaysFinite\">IsAlwaysFinite</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Instances.html#Std.Rxc.instIsAlwaysFiniteOfLawfulHasSize","kind":"instance","line":66,"name":"Std.Rxc.instIsAlwaysFiniteOfLawfulHasSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/Instances.lean#L66-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Instances.html#Std.instLinearlyUpwardEnumerableOfTotalLeOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLE\"><span class=\"name\">Std</span>.<span class=\"name\">instLinearlyUpwardEnumerableOfTotalLeOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Std.Total\">Total</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">PRange.UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">PRange.LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">PRange.LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LinearlyUpwardEnumerable\">PRange.LinearlyUpwardEnumerable</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Instances.html#Std.instLinearlyUpwardEnumerableOfTotalLeOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLE","kind":"instance","line":43,"name":"Std.instLinearlyUpwardEnumerableOfTotalLeOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/Instances.lean#L43-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Instances.html#Std.instLawfulUpwardEnumerableLTOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLEOfLawfulOrderLT\"><span class=\"name\">Std</span>.<span class=\"name\">instLawfulUpwardEnumerableLTOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLEOfLawfulOrderLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">PRange.UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">PRange.LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">PRange.LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">LawfulOrderLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">PRange.LawfulUpwardEnumerableLT</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Instances.html#Std.instLawfulUpwardEnumerableLTOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLEOfLawfulOrderLT","kind":"instance","line":26,"name":"Std.instLawfulUpwardEnumerableLTOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLEOfLawfulOrderLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Range/Polymorphic/Instances.lean#L26-L41"}}],"imports":["Init.Data.Range.Polymorphic.Basic","Init.Data.Nat.Lemmas","Init.Data.Order.Lemmas"],"instances":[{"className":"Std.PRange.LawfulUpwardEnumerableLT","name":"Std.instLawfulUpwardEnumerableLTOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLEOfLawfulOrderLT","typeNames":[]},{"className":"Std.PRange.LinearlyUpwardEnumerable","name":"Std.instLinearlyUpwardEnumerableOfTotalLeOfLawfulUpwardEnumerableOfLawfulUpwardEnumerableLE","typeNames":[]},{"className":"Std.Rxc.IsAlwaysFinite","name":"Std.Rxc.instIsAlwaysFiniteOfLawfulHasSize","typeNames":[]},{"className":"Std.Rxo.LawfulHasSize","name":"Std.Rxo.LawfulHasSize.of_closed","typeNames":[]},{"className":"Std.Rxo.IsAlwaysFinite","name":"Std.Rxo.instIsAlwaysFiniteOfLawfulHasSize","typeNames":[]},{"className":"Std.Rxi.IsAlwaysFinite","name":"Std.Rxi.instIsAlwaysFiniteOfLawfulHasSize","typeNames":[]}],"name":"Init.Data.Range.Polymorphic.Instances"}