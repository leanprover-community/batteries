{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.toTraceElem\"><span class=\"name\">Lean</span>.<span class=\"name\">toTraceElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name.mkSimple\">Name.mkSimple</a> <span class=\"fn\">&quot;_&quot;</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Helper functions for creating a `MessageData` with the given header and elements. ","docLink":"./Lean/Message.html#Lean.toTraceElem","kind":"def","line":772,"name":"Lean.toTraceElem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L772-L774"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Kernel.Exception.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.Kernel.Exception.toMessageData","kind":"def","line":742,"name":"Lean.Kernel.Exception.toMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L742-L768"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.toMessageList\"><span class=\"name\">Lean</span>.<span class=\"name\">toMessageList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.toMessageList","kind":"def","line":734,"name":"Lean.toMessageList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L734-L735"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.termM!_\"><span class=\"name\">Lean</span>.<span class=\"name\">termM!_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.termM!_","kind":"def","line":729,"name":"Lean.termM!_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L729-L729"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOptionExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOptionExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataOptionExpr","kind":"instance","line":727,"name":"Lean.instToMessageDataOptionExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L727-L727"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataProd\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataProd","kind":"instance","line":725,"name":"Lean.instToMessageDataProd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L725-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOption\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataOption","kind":"instance","line":724,"name":"Lean.instToMessageDataOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L724-L724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataSubarray\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataSubarray","kind":"instance","line":723,"name":"Lean.instToMessageDataSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L723-L723"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataArray\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataArray","kind":"instance","line":722,"name":"Lean.instToMessageDataArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L722-L722"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataList\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataList","kind":"instance","line":721,"name":"Lean.instToMessageDataList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L721-L721"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataMessageData","kind":"instance","line":719,"name":"Lean.instToMessageDataMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L719-L720"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataMVarId","kind":"instance","line":718,"name":"Lean.instToMessageDataMVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L718-L718"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataFormat","kind":"instance","line":717,"name":"Lean.instToMessageDataFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L717-L717"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataTSyntax","kind":"instance","line":716,"name":"Lean.instToMessageDataTSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L716-L716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataSyntax","kind":"instance","line":715,"name":"Lean.instToMessageDataSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L715-L715"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataString\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataString","kind":"instance","line":714,"name":"Lean.instToMessageDataString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L714-L714"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataName\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataName","kind":"instance","line":713,"name":"Lean.instToMessageDataName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L713-L713"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataLevel","kind":"instance","line":712,"name":"Lean.instToMessageDataLevel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L712-L712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataExpr","kind":"instance","line":711,"name":"Lean.instToMessageDataExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L711-L711"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToMessageDataOfToFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">instToMessageDataOfToFormat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToMessageDataOfToFormat","kind":"instance","line":710,"name":"Lean.instToMessageDataOfToFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L710-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.stringToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">stringToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.stringToMessageData","kind":"def","line":705,"name":"Lean.stringToMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L705-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.ToMessageData.toMessageData","kind":"def","line":701,"name":"Lean.ToMessageData.toMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L701-L701"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toMessageData</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.ToMessageData.mk","kind":"ctor","line":700,"name":"Lean.ToMessageData.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L700-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.ToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">ToMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.ToMessageData","kind":"class","line":700,"name":"Lean.ToMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L700-L701"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.addMessageContextFull\"><span class=\"name\">Lean</span>.<span class=\"name\">addMessageContextFull</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.addMessageContextFull","kind":"def","line":693,"name":"Lean.addMessageContextFull","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L693-L698"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.addMessageContextPartial\"><span class=\"name\">Lean</span>.<span class=\"name\">addMessageContextPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.addMessageContextPartial","kind":"def","line":688,"name":"Lean.addMessageContextPartial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L688-L691"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instAddMessageContextOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">instAddMessageContextOfMonadLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instAddMessageContextOfMonadLift","kind":"instance","line":685,"name":"Lean.instAddMessageContextOfMonadLift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L685-L686"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext.addMessageContext\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span>.<span class=\"name\">addMessageContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>","info":{"doc":"Without context, a `MessageData` object may be missing information\n(e.g. hover info) for pretty printing, or may print an error. Hence,\n`addMessageContext` should be called on all constructed `MessageData`\n(e.g. via `m!`) before taking it out of context (e.g. leaving `MetaM` or\n`CoreM`).\n","docLink":"./Lean/Message.html#Lean.AddMessageContext.addMessageContext","kind":"def","line":681,"name":"Lean.AddMessageContext.addMessageContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L681-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addMessageContext</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.AddMessageContext.mk","kind":"ctor","line":673,"name":"Lean.AddMessageContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L673-L673"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.AddMessageContext\"><span class=\"name\">Lean</span>.<span class=\"name\">AddMessageContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.AddMessageContext","kind":"class","line":673,"name":"Lean.AddMessageContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L673-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.aquote\"><span class=\"name\">Lean</span>.<span class=\"name\">aquote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Atom quotes ","docLink":"./Lean/Message.html#Lean.aquote","kind":"def","line":669,"name":"Lean.aquote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L669-L671"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.inlineExprTrailing\"><span class=\"name\">Lean</span>.<span class=\"name\">inlineExprTrailing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxInlineLength</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">30</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"See `Lean.inlineExpr`. This variation is to be used when the expression is the trailing element of a\nmessage; it does not append a newline or space after the expression.\n","docLink":"./Lean/Message.html#Lean.inlineExprTrailing","kind":"def","line":654,"name":"Lean.inlineExprTrailing","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L654-L667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.inlineExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">inlineExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxInlineLength</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">30</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Renders an expression `e` inline in a message unless it will exceed `maxInlineLength` characters, in\nwhich case the expression is indented on a new line.\n\nNote that the output of this function is formatted with preceding and trailing space included. Thus,\nin `m₁ ++ inlineExpr e ++ m₂`, `m₁` should not end with a space or new line, nor should `m₂` begin\nwith one.\n","docLink":"./Lean/Message.html#Lean.inlineExpr","kind":"def","line":635,"name":"Lean.inlineExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L635-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.indentExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">indentExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.indentExpr","kind":"def","line":617,"name":"Lean.indentExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L617-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.indentD\"><span class=\"name\">Lean</span>.<span class=\"name\">indentD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.indentD","kind":"def","line":614,"name":"Lean.indentD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L614-L615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nestD\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nestD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.nestD","kind":"def","line":611,"name":"Lean.MessageData.nestD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L611-L612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.toArray\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">toArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></div></div>","info":{"doc":"Converts the unreported messages to an array, oldest message first. ","docLink":"./Lean/Message.html#Lean.MessageLog.toArray","kind":"def","line":605,"name":"Lean.MessageLog.toArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L605-L607"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.toList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></div></div>","info":{"doc":"Converts the unreported messages to a list, oldest message first. ","docLink":"./Lean/Message.html#Lean.MessageLog.toList","kind":"def","line":601,"name":"Lean.MessageLog.toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L601-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.forM\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Message</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.forM","kind":"def","line":598,"name":"Lean.MessageLog.forM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L598-L599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.getInfoMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">getInfoMessages</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.getInfoMessages","kind":"def","line":595,"name":"Lean.MessageLog.getInfoMessages","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L595-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.errorsToInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">errorsToInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.errorsToInfos","kind":"def","line":592,"name":"Lean.MessageLog.errorsToInfos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L592-L593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.errorsToWarnings\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">errorsToWarnings</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.errorsToWarnings","kind":"def","line":589,"name":"Lean.MessageLog.errorsToWarnings","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L589-L590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.markAllReported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">markAllReported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"Moves `unreported` messages to `reported`. ","docLink":"./Lean/Message.html#Lean.MessageLog.markAllReported","kind":"def","line":585,"name":"Lean.MessageLog.markAllReported","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L585-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.hasErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">hasErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks if either of `reported` or `unreported` contains an error, i.e. whether the current command\nhas errored yet.\n","docLink":"./Lean/Message.html#Lean.MessageLog.hasErrors","kind":"def","line":578,"name":"Lean.MessageLog.hasErrors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L578-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.instAppend","kind":"instance","line":575,"name":"Lean.MessageLog.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L575-L576"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.append\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.append","kind":"def","line":570,"name":"Lean.MessageLog.append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L570-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.add\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.add","kind":"def","line":567,"name":"Lean.MessageLog.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L567-L568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.hasUnreported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">hasUnreported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.hasUnreported","kind":"def","line":564,"name":"Lean.MessageLog.hasUnreported","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L564-L565"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.reportedPlusUnreported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">reportedPlusUnreported</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.reportedPlusUnreported","kind":"def","line":561,"name":"Lean.MessageLog.reportedPlusUnreported","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L561-L562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.msgs\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">msgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.msgs","kind":"def","line":557,"name":"Lean.MessageLog.msgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L557-L559"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.empty","kind":"def","line":553,"name":"Lean.MessageLog.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L553-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instInhabitedMessageLog","kind":"instance","line":550,"name":"Lean.instInhabitedMessageLog","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L550-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageLog.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageLog</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instInhabitedMessageLog.default","kind":"def","line":550,"name":"Lean.instInhabitedMessageLog.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L550-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.loggedKinds\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">loggedKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"Set of message kinds that have been added to the log.\nFor example, we have the kind `unsafe.exponentiation.warning` for warning messages associated with\nthe configuration option `exponentiation.threshold`.\nWe don't produce a warning if the kind is already in the following set.\n","docLink":"./Lean/Message.html#Lean.MessageLog.loggedKinds","kind":"def","line":549,"name":"Lean.MessageLog.loggedKinds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L549-L549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.unreported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">unreported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></div></div>","info":{"doc":"The list of messages not already reported, in insertion order. ","docLink":"./Lean/Message.html#Lean.MessageLog.unreported","kind":"def","line":542,"name":"Lean.MessageLog.unreported","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L542-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.reported\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">reported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span></div></div>","info":{"doc":"The list of messages already reported (i.e. saved in a `Snapshot`), in insertion order. ","docLink":"./Lean/Message.html#Lean.MessageLog.reported","kind":"def","line":540,"name":"Lean.MessageLog.reported","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L540-L540"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reported </span><span class=\"fn\">unreported</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Message.html#Lean.Message\">Message</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loggedKinds</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageLog.mk","kind":"ctor","line":538,"name":"Lean.MessageLog.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L538-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageLog\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A persistent array of messages.\n\nIn the Lean elaborator, we use a fresh message log per command but may also report diagnostics at\nvarious points inside a command, which will empty `unreported` and move its messages to `reported`.\nReported messages are preserved for some specific \"lookback\" operations such as `hasError` that\nshould consider the entire message history of the current command; most other functions such as\n`add` and `toList` will only operate on unreported messages.\n","docLink":"./Lean/Message.html#Lean.MessageLog","kind":"structure","line":529,"name":"Lean.MessageLog","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L529-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.toJson\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">toJson</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.Message.toJson","kind":"def","line":523,"name":"Lean.Message.toJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L523-L525"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeEndPos</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.Message.toString","kind":"def","line":519,"name":"Lean.Message.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L519-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.serialize\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">serialize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></div></div>","info":{"doc":"Serializes the message, converting its data into a string and saving its kind. ","docLink":"./Lean/Message.html#Lean.Message.serialize","kind":"def","line":515,"name":"Lean.Message.serialize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L515-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.isTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">isTrace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.Message.isTrace","kind":"def","line":512,"name":"Lean.Message.isTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L512-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Returns the top-level tag of the message.\nIf none, returns `Name.anonymous`.\n\nThis does not descend into message subtrees (e.g., `.compose`, `.ofLazy`).\nThe message kind is expected to describe the whole message.\n","docLink":"./Lean/Message.html#Lean.Message.kind","kind":"def","line":509,"name":"Lean.Message.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L509-L510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.SerialMessage.instToString","kind":"instance","line":503,"name":"Lean.SerialMessage.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L503-L503"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeEndPos</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.SerialMessage.toString","kind":"def","line":488,"name":"Lean.SerialMessage.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L488-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.toMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">toMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.Message\">Message</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.SerialMessage.toMessage","kind":"def","line":485,"name":"Lean.SerialMessage.toMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L485-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message.errorName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span>.<span class=\"name\">errorName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the error name with which `msg` is tagged, if one exists.\n\nNote that this is distinct from `msg.kind`: the `kind` of a named-error message is not equal to its\nname, and there exist message kinds that are not error-name kinds.\n","docLink":"./Lean/Message.html#Lean.Message.errorName?","kind":"def","line":479,"name":"Lean.Message.errorName?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L479-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.errorName?\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">errorName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the error name with which `msg` is tagged, if one exists.\n\nNote that this is distinct from `msg.kind`: the `kind` of a named-error message is not equal to its\nname, and there exist message kinds that are not error-name kinds.\n","docLink":"./Lean/Message.html#Lean.MessageData.errorName?","kind":"def","line":470,"name":"Lean.MessageData.errorName?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L470-L477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.errorNameOfKind?\"><span class=\"name\">Lean</span>.<span class=\"name\">errorNameOfKind?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span></div></div>","info":{"doc":"If the provided name is labeled as a diagnostic name, removes the label and returns the\ncorresponding diagnostic name.\n\nNote: we use this labeling mechanism so that we can have error kinds that are not intended to be\nshown to the user, without having to validate the presence of an error explanation at runtime.\n","docLink":"./Lean/Message.html#Lean.errorNameOfKind?","kind":"def","line":459,"name":"Lean.errorNameOfKind?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L459-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.tagWithErrorName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">tagWithErrorName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Produces a `MessageData` tagged with an identifier for error `name`.\n\nNote: this function generally should not be called directly; instead, use the macros `logNamedError`\nand `throwNamedError`.\n","docLink":"./Lean/Message.html#Lean.MessageData.tagWithErrorName","kind":"def","line":450,"name":"Lean.MessageData.tagWithErrorName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L450-L457"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.kindOfErrorName\"><span class=\"name\">Lean</span>.<span class=\"name\">kindOfErrorName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Creates a tag (i.e., message kind) for an error message with (user-facing) name `errorName`.\n","docLink":"./Lean/Message.html#Lean.kindOfErrorName","kind":"def","line":444,"name":"Lean.kindOfErrorName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L444-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.errorNameSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">errorNameSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"A suffix added to diagnostic name-containing tags to indicate that they should be used as an error\ncode.\n","docLink":"./Lean/Message.html#Lean.errorNameSuffix","kind":"def","line":438,"name":"Lean.errorNameSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L438-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonSerialMessage.fromJson\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonSerialMessage</span>.<span class=\"name\">fromJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instFromJsonSerialMessage.fromJson","kind":"def","line":436,"name":"Lean.instFromJsonSerialMessage.fromJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L436-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonSerialMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonSerialMessage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">FromJson</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instFromJsonSerialMessage","kind":"instance","line":436,"name":"Lean.instFromJsonSerialMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L436-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonSerialMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonSerialMessage</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">ToJson</a> <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToJsonSerialMessage","kind":"instance","line":436,"name":"Lean.instToJsonSerialMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L436-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonSerialMessage.toJson\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonSerialMessage</span>.<span class=\"name\">toJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a> → <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToJsonSerialMessage.toJson","kind":"def","line":436,"name":"Lean.instToJsonSerialMessage.toJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L436-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The message kind (i.e., the top-level tag). ","docLink":"./Lean/Message.html#Lean.SerialMessage.kind","kind":"def","line":435,"name":"Lean.SerialMessage.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L435-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toBaseMessage</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.SerialMessage.mk","kind":"ctor","line":433,"name":"Lean.SerialMessage.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L433-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage.toBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span>.<span class=\"name\">toBaseMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">SerialMessage</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.SerialMessage.toBaseMessage","kind":"def","line":433,"name":"Lean.SerialMessage.toBaseMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L433-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.SerialMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">SerialMessage</span></a></span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">Lean.BaseMessage</a> <a href=\"./Init/Prelude.html#String\">String</a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `SerialMessage` is a `Message` whose `MessageData` has been eagerly\nserialized and is thus appropriate for use in pure contexts where the effectful\n`MessageData.toString` cannot be used. ","docLink":"./Lean/Message.html#Lean.SerialMessage","kind":"structure","line":430,"name":"Lean.SerialMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L430-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.Message\"><span class=\"name\">Lean</span>.<span class=\"name\">Message</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Message` is a richly formatted piece of information emitted by Lean.\nThey are rendered by client editors in the infoview and in diagnostic windows. ","docLink":"./Lean/Message.html#Lean.Message","kind":"def","line":426,"name":"Lean.Message","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L426-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonBaseMessage.fromJson\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonBaseMessage</span>.<span class=\"name\">fromJson</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">FromJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α✝</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instFromJsonBaseMessage.fromJson","kind":"def","line":424,"name":"Lean.instFromJsonBaseMessage.fromJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L424-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonBaseMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">FromJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">FromJson</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instFromJsonBaseMessage","kind":"instance","line":424,"name":"Lean.instFromJsonBaseMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L424-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonBaseMessage.toJson\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonBaseMessage</span>.<span class=\"name\">toJson</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">ToJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α✝</span></span> → <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToJsonBaseMessage.toJson","kind":"def","line":424,"name":"Lean.instToJsonBaseMessage.toJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L424-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonBaseMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">ToJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">ToJson</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToJsonBaseMessage","kind":"instance","line":424,"name":"Lean.instToJsonBaseMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L424-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedBaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedBaseMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instInhabitedBaseMessage","kind":"instance","line":424,"name":"Lean.instInhabitedBaseMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L424-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedBaseMessage.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedBaseMessage</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instInhabitedBaseMessage.default","kind":"def","line":424,"name":"Lean.instInhabitedBaseMessage.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L424-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.data\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"The content of the message. ","docLink":"./Lean/Message.html#Lean.BaseMessage.data","kind":"def","line":423,"name":"Lean.BaseMessage.data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L423-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.caption\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">caption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.BaseMessage.caption","kind":"def","line":421,"name":"Lean.BaseMessage.caption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L421-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.isSilent\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">isSilent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `true`, filter this message from non-language server output.\nIn the language server, silent messages are served as silent diagnostics.\nSee also `DiagnosticWith.isSilent?`.\n","docLink":"./Lean/Message.html#Lean.BaseMessage.isSilent","kind":"def","line":420,"name":"Lean.BaseMessage.isSilent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L420-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.severity\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">severity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.BaseMessage.severity","kind":"def","line":414,"name":"Lean.BaseMessage.severity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L414-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.keepFullRange\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">keepFullRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `true`, report range as given; see `msgToInteractiveDiagnostic`. ","docLink":"./Lean/Message.html#Lean.BaseMessage.keepFullRange","kind":"def","line":413,"name":"Lean.BaseMessage.keepFullRange","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L413-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.endPos\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.BaseMessage.endPos","kind":"def","line":411,"name":"Lean.BaseMessage.endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L411-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.BaseMessage.pos","kind":"def","line":410,"name":"Lean.BaseMessage.pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L410-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.fileName\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">fileName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.BaseMessage.fileName","kind":"def","line":409,"name":"Lean.BaseMessage.fileName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L409-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">endPos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keepFullRange</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">severity</span> : <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSilent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caption</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.BaseMessage\">BaseMessage</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.BaseMessage.mk","kind":"ctor","line":408,"name":"Lean.BaseMessage.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L408-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.BaseMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">BaseMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A `BaseMessage` is a richly formatted piece of information emitted by Lean.\nThey are rendered by client editors in the infoview and in diagnostic windows.\nThere are two varieties in the Lean core:\n* `Message`: Uses structured, effectful `MessageData` for formatting content.\n* `SerialMessage`: Stores pure `String` data. Obtained by running the effectful\n`Message.serialize`.\n","docLink":"./Lean/Message.html#Lean.BaseMessage","kind":"structure","line":400,"name":"Lean.BaseMessage","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L400-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeListExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeListExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeListExpr","kind":"instance","line":396,"name":"Lean.MessageData.instCoeListExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L396-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeList","kind":"instance","line":395,"name":"Lean.MessageData.instCoeList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L395-L395"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hint'\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hint'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hint</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Produces a labeled hint without an associated code action (non-monadic variant of\n`MessageData.hint`).\n","docLink":"./Lean/Message.html#Lean.MessageData.hint'","kind":"def","line":388,"name":"Lean.MessageData.hint'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L388-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.note\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">note</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">note</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Produces a labeled note that can be appended to an error message.\n","docLink":"./Lean/Message.html#Lean.MessageData.note","kind":"def","line":382,"name":"Lean.MessageData.note","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L382-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.andList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">andList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Puts `MessageData` into a comma-separated list with `\"and\"` at the back (with the serial comma).\n\nBest used on non-empty lists; returns `\"– none –\"` for an empty list.\n","docLink":"./Lean/Message.html#Lean.MessageData.andList","kind":"def","line":370,"name":"Lean.MessageData.andList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L370-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.orList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">orList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Puts `MessageData` into a comma-separated list with `\"or\"` at the back (with the serial comma).\n\nBest used on non-empty lists; returns `\"– none –\"` for an empty list.\n","docLink":"./Lean/Message.html#Lean.MessageData.orList","kind":"def","line":358,"name":"Lean.MessageData.orList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L358-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofArray\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"See `MessageData.ofList`. ","docLink":"./Lean/Message.html#Lean.MessageData.ofArray","kind":"def","line":354,"name":"Lean.MessageData.ofArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L354-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofList\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Write the given list of messages as a list, separating each item with `,\\n` and surrounding with square brackets. ","docLink":"./Lean/Message.html#Lean.MessageData.ofList","kind":"def","line":349,"name":"Lean.MessageData.ofList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L349-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.joinSep\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">joinSep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>","info":{"doc":"Append the given list of messages with the given separator. ","docLink":"./Lean/Message.html#Lean.MessageData.joinSep","kind":"def","line":343,"name":"Lean.MessageData.joinSep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L343-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.sbracket\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">sbracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Wrap the given message in square brackets `[]`. ","docLink":"./Lean/Message.html#Lean.MessageData.sbracket","kind":"def","line":341,"name":"Lean.MessageData.sbracket","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L341-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.paren\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Wrap the given message in parentheses `()`. ","docLink":"./Lean/Message.html#Lean.MessageData.paren","kind":"def","line":339,"name":"Lean.MessageData.paren","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L339-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.bracket\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Wrap the given message in `l` and `r`. See also `Format.bracket`.  ","docLink":"./Lean/Message.html#Lean.MessageData.bracket","kind":"def","line":337,"name":"Lean.MessageData.bracket","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L337-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeArrayExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeArrayExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeArrayExpr","kind":"instance","line":335,"name":"Lean.MessageData.instCoeArrayExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L335-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.arrayExpr.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">arrayExpr</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.arrayExpr.toMessageData","kind":"opaque","line":327,"name":"Lean.MessageData.arrayExpr.toMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L327-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeOptionExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeOptionExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeOptionExpr","kind":"instance","line":325,"name":"Lean.MessageData.instCoeOptionExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L325-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeMVarId","kind":"instance","line":324,"name":"Lean.MessageData.instCoeMVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L324-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeSyntax","kind":"instance","line":323,"name":"Lean.MessageData.instCoeSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L323-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeName","kind":"instance","line":322,"name":"Lean.MessageData.instCoeName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L322-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeExpr","kind":"instance","line":321,"name":"Lean.MessageData.instCoeExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L321-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeLevel","kind":"instance","line":320,"name":"Lean.MessageData.instCoeLevel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L320-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeFormat","kind":"instance","line":319,"name":"Lean.MessageData.instCoeFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L319-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instCoeString\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instCoeString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instCoeString","kind":"instance","line":318,"name":"Lean.MessageData.instCoeString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L318-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.instAppend","kind":"instance","line":316,"name":"Lean.MessageData.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.toString","kind":"def","line":313,"name":"Lean.MessageData.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L313-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.format\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.format","kind":"def","line":310,"name":"Lean.MessageData.format","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L310-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.formatAux\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">formatAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a></span> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.formatAux","kind":"opaque","line":277,"name":"Lean.MessageData.formatAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L277-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.maxTraceChildren\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">maxTraceChildren</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Maximum number of trace node children to display by default to prevent slowdowns from rendering. In\nthe info view, more children can be expanded interactively.\n","docLink":"./Lean/Message.html#Lean.MessageData.maxTraceChildren","kind":"opaque","line":268,"name":"Lean.MessageData.maxTraceChildren","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L268-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hasSyntheticSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.hasSyntheticSorry","kind":"def","line":254,"name":"Lean.MessageData.hasSyntheticSorry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L254-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofConstName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofConstName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fullNames</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Represents a constant name such that hovering and \"go to definition\" works.\nIf there is no such constant in the environment, the name is simply formatted, but sanitized if it is a hygienic name.\nUse `MessageData.ofName` if hovers are undesired.\n\nIf `fullNames` is true, then pretty prints as if `pp.fullNames` is true.\nOtherwise, pretty prints using the current user setting for `pp.fullNames`.\n","docLink":"./Lean/Message.html#Lean.MessageData.ofConstName","kind":"def","line":235,"name":"Lean.MessageData.ofConstName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L235-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofName\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Simply formats the name.\nSee `MessageData.ofConstName` for richer messages.\n","docLink":"./Lean/Message.html#Lean.MessageData.ofName","kind":"def","line":229,"name":"Lean.MessageData.ofName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L229-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.ofLevel","kind":"def","line":220,"name":"Lean.MessageData.ofLevel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L220-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.ofExpr","kind":"def","line":211,"name":"Lean.MessageData.ofExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L211-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.ofSyntax","kind":"def","line":200,"name":"Lean.MessageData.ofSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L200-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.mkPPContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">mkPPContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nCtx</span> : <a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">PPContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.mkPPContext","kind":"def","line":195,"name":"Lean.MessageData.mkPPContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L195-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"An empty message. ","docLink":"./Lean/Message.html#Lean.MessageData.nil","kind":"def","line":191,"name":"Lean.MessageData.nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L191-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.composePreservingKind\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">composePreservingKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"`composePreservingKind msg msg'` appends the contents of `msg'` to the end of `msg` but ensures that\nthe resulting message preserves the kind (as given by `MessageData.kind`) of `msg`.\n","docLink":"./Lean/Message.html#Lean.MessageData.composePreservingKind","kind":"def","line":181,"name":"Lean.MessageData.composePreservingKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L181-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.isTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">isTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.isTrace","kind":"def","line":174,"name":"Lean.MessageData.isTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L174-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the top-level tag of the message.\nIf none, returns `Name.anonymous`.\n\nThis does not descend into message subtrees (e.g., `.compose`, `.ofLazy`).\nThe message kind is expected to describe the whole message.\n","docLink":"./Lean/Message.html#Lean.MessageData.kind","kind":"def","line":161,"name":"Lean.MessageData.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L161-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.hasTag\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hasTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns true when the message contains a `MessageData.tagged tag ..` constructor where `p tag`\nis true.\n\nThis does not descend into lazily generated subtrees (`.ofLazy`); message tags\nof interest (like those added by `logLinter`) are expected to be near the root\nof the `MessageData`, and not hidden inside `.ofLazy`.\n","docLink":"./Lean/Message.html#Lean.MessageData.hasTag","kind":"opaque","line":144,"name":"Lean.MessageData.hasTag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L144-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.lazy\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">lazy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">PPContext</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasSyntheticSorry</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">onMissingContext</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt;\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.MessageData.ofFormat\">ofFormat</a> <span class=\"fn\">(<a href=\"./Init/Data/Format/Basic.html#Std.Format.text\">Std.Format.text</a> <span class=\"fn\">&quot;(invalid MessageData.lazy, missing context)&quot;</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Lazy message data production, with access to the context as given by\na surrounding `MessageData.withContext` (which is expected to exist).\n","docLink":"./Lean/Message.html#Lean.MessageData.lazy","kind":"def","line":129,"name":"Lean.MessageData.lazy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L129-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofFormat\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmt</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Eagerly formatted text. ","docLink":"./Lean/Message.html#Lean.MessageData.ofFormat","kind":"def","line":126,"name":"Lean.MessageData.ofFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L126-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instTypeNameMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instTypeNameMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instTypeNameMessageData","kind":"instance","line":122,"name":"Lean.instTypeNameMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instInhabitedMessageData","kind":"instance","line":122,"name":"Lean.instInhabitedMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageData.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageData</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instInhabitedMessageData.default","kind":"def","line":122,"name":"Lean.instInhabitedMessageData.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofLazy\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofLazy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Util/PPExt.html#Lean.PPContext\">PPContext</a></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasSyntheticSorry</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"A lazy message.\nThe provided thunk will not be run until it is about to be displayed.\nThis can save computation in cases where the message may never be seen.\n\nThe `Dynamic` value is expected to be a `MessageData`,\nwhich is a workaround for the positivity restriction.\n\nIf the thunked message is produced for a term that contains a synthetic sorry,\n`hasSyntheticSorry` should return `true`.\nThis is used to filter out certain messages. ","docLink":"./Lean/Message.html#Lean.MessageData.ofLazy","kind":"ctor","line":111,"name":"Lean.MessageData.ofLazy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L111-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">children</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.trace","kind":"ctor","line":110,"name":"Lean.MessageData.trace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.tagged\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">tagged</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>","info":{"doc":"Tagged sections. `Name` should be viewed as a \"kind\", and is used by `MessageData` inspector functions.\nExample: an inspector that tries to find \"definitional equality failures\" may look for the tag \"DefEqFailure\". ","docLink":"./Lean/Message.html#Lean.MessageData.tagged","kind":"ctor","line":107,"name":"Lean.MessageData.tagged","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L107-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.compose\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">compose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Lifted `Format.compose` ","docLink":"./Lean/Message.html#Lean.MessageData.compose","kind":"ctor","line":105,"name":"Lean.MessageData.compose","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L105-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.group\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Lifted `Format.group` ","docLink":"./Lean/Message.html#Lean.MessageData.group","kind":"ctor","line":103,"name":"Lean.MessageData.group","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L103-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.nest\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">nest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>","info":{"doc":"Lifted `Format.nest` ","docLink":"./Lean/Message.html#Lean.MessageData.nest","kind":"ctor","line":101,"name":"Lean.MessageData.nest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L101-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.withNamingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">withNamingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.withNamingContext","kind":"ctor","line":100,"name":"Lean.MessageData.withNamingContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.withContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">withContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>","info":{"doc":"`withContext ctx d` specifies the pretty printing context `(env, mctx, lctx, opts)` for the nested expressions in `d`. ","docLink":"./Lean/Message.html#Lean.MessageData.withContext","kind":"ctor","line":98,"name":"Lean.MessageData.withContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L98-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofWidget\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofWidget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Widget/Types.html#Lean.Widget.WidgetInstance\">Widget.WidgetInstance</a> → <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>","info":{"doc":"A widget instance.\n\nIn `ofWidget wi alt`,\nthe nested message `alt` should approximate the contents of the widget\nwithout itself using `ofWidget wi _`.\nThis is used as fallback in environments that cannot display user widgets.\n`alt` may nest any structured message,\nfor example `ofGoal` to approximate a tactic state widget,\nand, if necessary, even other widget instances\n(for which approximations are computed recursively).\n\nNote that unlike with `Widget.savePanelWidgetInfo`,\nthe infoview will not pass any additional props to the widget instance. ","docLink":"./Lean/Message.html#Lean.MessageData.ofWidget","kind":"ctor","line":84,"name":"Lean.MessageData.ofWidget","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L84-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageData.ofGoal","kind":"ctor","line":83,"name":"Lean.MessageData.ofGoal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData.ofFormatWithInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">ofFormatWithInfos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/PPExt.html#Lean.FormatWithInfos\">FormatWithInfos</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Eagerly formatted text with info annotations.\nThis constructor is inspected in various hacks. ","docLink":"./Lean/Message.html#Lean.MessageData.ofFormatWithInfos","kind":"ctor","line":80,"name":"Lean.MessageData.ofFormatWithInfos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L80-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Structured message data. We use it for reporting errors, trace messages, etc. ","docLink":"./Lean/Message.html#Lean.MessageData","kind":"inductive","line":78,"name":"Lean.MessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L78-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.tag\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">tag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Optional tag shown in `trace.profiler.output` output after the trace class name. ","docLink":"./Lean/Message.html#Lean.TraceData.tag","kind":"def","line":76,"name":"Lean.TraceData.tag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.collapsed\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">collapsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether trace node defaults to collapsed in the infoview. ","docLink":"./Lean/Message.html#Lean.TraceData.collapsed","kind":"def","line":74,"name":"Lean.TraceData.collapsed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.stopTime\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">stopTime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Stop time in seconds; 0 if unknown to avoid `Option` allocation. ","docLink":"./Lean/Message.html#Lean.TraceData.stopTime","kind":"def","line":72,"name":"Lean.TraceData.stopTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.startTime\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">startTime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Start time in seconds; 0 if unknown to avoid `Option` allocation. ","docLink":"./Lean/Message.html#Lean.TraceData.startTime","kind":"def","line":70,"name":"Lean.TraceData.startTime","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.cls\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">cls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Trace class, e.g. `Elab.step`. ","docLink":"./Lean/Message.html#Lean.TraceData.cls","kind":"def","line":68,"name":"Lean.TraceData.cls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startTime </span><span class=\"fn\">stopTime</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">collapsed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.TraceData\">TraceData</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.TraceData.mk","kind":"ctor","line":66,"name":"Lean.TraceData.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.TraceData\"><span class=\"name\">Lean</span>.<span class=\"name\">TraceData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.TraceData","kind":"structure","line":66,"name":"Lean.TraceData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L66-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.NamingContext.openDecls","kind":"def","line":64,"name":"Lean.NamingContext.openDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.currNamespace\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">currNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.NamingContext.currNamespace","kind":"def","line":63,"name":"Lean.NamingContext.currNamespace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.NamingContext\">NamingContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.NamingContext.mk","kind":"ctor","line":62,"name":"Lean.NamingContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.NamingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">NamingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A naming context is the information needed to shorten names in pretty printing.\n\nIt gives the current namespace and the list of open declarations.\n","docLink":"./Lean/Message.html#Lean.NamingContext","kind":"structure","line":58,"name":"Lean.NamingContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L58-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageDataContext.opts","kind":"def","line":56,"name":"Lean.MessageDataContext.opts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageDataContext.lctx","kind":"def","line":55,"name":"Lean.MessageDataContext.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageDataContext.mctx","kind":"def","line":54,"name":"Lean.MessageDataContext.mctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.env\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageDataContext.env","kind":"def","line":53,"name":"Lean.MessageDataContext.env","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageDataContext\">MessageDataContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageDataContext.mk","kind":"ctor","line":52,"name":"Lean.MessageDataContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageDataContext\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageDataContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageDataContext","kind":"structure","line":52,"name":"Lean.MessageDataContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L52-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToStringMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instToStringMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToStringMessageSeverity","kind":"instance","line":49,"name":"Lean.instToStringMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageSeverity.toString","kind":"def","line":44,"name":"Lean.MessageSeverity.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L44-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonMessageSeverity.fromJson\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonMessageSeverity</span>.<span class=\"name\">fromJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instFromJsonMessageSeverity.fromJson","kind":"def","line":42,"name":"Lean.instFromJsonMessageSeverity.fromJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instFromJsonMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instFromJsonMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">FromJson</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instFromJsonMessageSeverity","kind":"instance","line":42,"name":"Lean.instFromJsonMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonMessageSeverity.toJson\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonMessageSeverity</span>.<span class=\"name\">toJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a> → <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToJsonMessageSeverity.toJson","kind":"def","line":42,"name":"Lean.instToJsonMessageSeverity.toJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instToJsonMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instToJsonMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">ToJson</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instToJsonMessageSeverity","kind":"instance","line":42,"name":"Lean.instToJsonMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instBEqMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instBEqMessageSeverity","kind":"instance","line":42,"name":"Lean.instBEqMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instBEqMessageSeverity.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqMessageSeverity</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a> → <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instBEqMessageSeverity.beq","kind":"def","line":42,"name":"Lean.instBEqMessageSeverity.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageSeverity.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageSeverity</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instInhabitedMessageSeverity.default","kind":"def","line":42,"name":"Lean.instInhabitedMessageSeverity.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.instInhabitedMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.instInhabitedMessageSeverity","kind":"instance","line":42,"name":"Lean.instInhabitedMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.error\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageSeverity.error","kind":"ctor","line":41,"name":"Lean.MessageSeverity.error","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.warning\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageSeverity.warning","kind":"ctor","line":41,"name":"Lean.MessageSeverity.warning","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity.information\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span>.<span class=\"name\">information</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageSeverity.information","kind":"ctor","line":41,"name":"Lean.MessageSeverity.information","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.MessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Message.html#Lean.MessageSeverity","kind":"inductive","line":40,"name":"Lean.MessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L40-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Message.html#Lean.mkErrorStringWithPos\"><span class=\"name\">Lean</span>.<span class=\"name\">mkErrorStringWithPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">endPos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Position.html#Lean.Position\">Position</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Creates a string describing an error message `msg` produced at `pos`, optionally ending at `endPos`,\nin `fileName`.\n\nAdditional optional arguments can be used to prepend a label `kind` describing the severity of\nthe error (e.g., `\"warning\"` or `\"error\"`) and a bracketed `name` label displaying the name of the\nerror if it has one.\n","docLink":"./Lean/Message.html#Lean.mkErrorStringWithPos","kind":"def","line":19,"name":"Lean.mkErrorStringWithPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Message.lean#L19-L38"}}],"imports":["Init.Data.Slice.Array","Lean.Util.PPExt","Lean.Util.Sorry"],"instances":[{"className":"Inhabited","name":"Lean.instInhabitedMessageSeverity","typeNames":["Lean.MessageSeverity"]},{"className":"BEq","name":"Lean.instBEqMessageSeverity","typeNames":["Lean.MessageSeverity"]},{"className":"Lean.ToJson","name":"Lean.instToJsonMessageSeverity","typeNames":["Lean.MessageSeverity"]},{"className":"Lean.FromJson","name":"Lean.instFromJsonMessageSeverity","typeNames":["Lean.MessageSeverity"]},{"className":"ToString","name":"Lean.instToStringMessageSeverity","typeNames":["Lean.MessageSeverity"]},{"className":"Inhabited","name":"Lean.instInhabitedMessageData","typeNames":["Lean.MessageData"]},{"className":"TypeName","name":"Lean.instTypeNameMessageData","typeNames":["Lean.MessageData"]},{"className":"Append","name":"Lean.MessageData.instAppend","typeNames":["Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeString","typeNames":["String","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeFormat","typeNames":["Std.Format","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeLevel","typeNames":["Lean.Level","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeExpr","typeNames":["Lean.Expr","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeName","typeNames":["Lean.Name","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeSyntax","typeNames":["Lean.Syntax","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeMVarId","typeNames":["Lean.MVarId","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeOptionExpr","typeNames":["Option","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeArrayExpr","typeNames":["Array","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeList","typeNames":["List","Lean.MessageData"]},{"className":"Coe","name":"Lean.MessageData.instCoeListExpr","typeNames":["List","Lean.MessageData"]},{"className":"Inhabited","name":"Lean.instInhabitedBaseMessage","typeNames":["Lean.BaseMessage"]},{"className":"Lean.ToJson","name":"Lean.instToJsonBaseMessage","typeNames":["Lean.BaseMessage"]},{"className":"Lean.FromJson","name":"Lean.instFromJsonBaseMessage","typeNames":["Lean.BaseMessage"]},{"className":"Lean.ToJson","name":"Lean.instToJsonSerialMessage","typeNames":["Lean.SerialMessage"]},{"className":"Lean.FromJson","name":"Lean.instFromJsonSerialMessage","typeNames":["Lean.SerialMessage"]},{"className":"ToString","name":"Lean.SerialMessage.instToString","typeNames":["Lean.SerialMessage"]},{"className":"Inhabited","name":"Lean.instInhabitedMessageLog","typeNames":["Lean.MessageLog"]},{"className":"Append","name":"Lean.MessageLog.instAppend","typeNames":["Lean.MessageLog"]},{"className":"Lean.AddMessageContext","name":"Lean.instAddMessageContextOfMonadLift","typeNames":[]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataOfToFormat","typeNames":[]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataExpr","typeNames":["Lean.Expr"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataLevel","typeNames":["Lean.Level"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataName","typeNames":["Lean.Name"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataString","typeNames":["String"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataSyntax","typeNames":["Lean.Syntax"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataTSyntax","typeNames":["Lean.TSyntax"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataFormat","typeNames":["Std.Format"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataMVarId","typeNames":["Lean.MVarId"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataMessageData","typeNames":["Lean.MessageData"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataList","typeNames":["List"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataArray","typeNames":["Array"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataSubarray","typeNames":["Subarray"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataOption","typeNames":["Option"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataProd","typeNames":["Prod"]},{"className":"Lean.ToMessageData","name":"Lean.instToMessageDataOptionExpr","typeNames":["Option"]}],"name":"Lean.Message"}