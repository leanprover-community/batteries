{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.atIdx?\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">atIdx?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess\">IteratorAccess</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Returns the `n`-th value emitted by `it`, or `none` if `it` terminates earlier.\n\nFor monadic iterators, the monadic effects of this operation may differ from manually iterating\nto the `n`-th value because `atIdx?` can take shortcuts. By the signature, the return value\nis guaranteed to plausible in the sense of `IterM.IsPlausibleNthOutputStep`.\n\nThis function is only available for iterators that explicitly support it by implementing\nthe `IteratorAccess` typeclass.\n","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.atIdx?","kind":"def","line":90,"name":"Std.Iterators.IterM.atIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L90-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.nextAtIdx?\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">nextAtIdx?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess\">IteratorAccess</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IsPlausibleNthOutputStep</a> <span class=\"fn\">n</span> <span class=\"fn\">it</span>)</span>)</span></span></div></div>","info":{"doc":"Returns the step in which `it` yields its `n`-th element, or `.done` if it terminates earlier.\nIn contrast to `step`, this function will always return either `.yield` or `.done` but never a\n`.skip` step.\n\nFor monadic iterators, the monadic effects of this operation may differ from manually iterating\nto the `n`-th value because `nextAtIdx?` can take shortcuts. By the signature, the return value\nis guaranteed to plausible in the sense of `IterM.IsPlausibleNthOutputStep`.\n\nThis function is only available for iterators that explicitly support it by implementing\nthe `IteratorAccess` typeclass.\n","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.nextAtIdx?","kind":"def","line":73,"name":"Std.Iterators.IterM.nextAtIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L73-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess.nextAtIdx?\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IteratorAccess</span>.<span class=\"name\">nextAtIdx?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess\">IteratorAccess</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IterM.IsPlausibleNthOutputStep</a> <span class=\"fn\">n</span> <span class=\"fn\">it</span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess.nextAtIdx?","kind":"def","line":70,"name":"Std.Iterators.IteratorAccess.nextAtIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IteratorAccess</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextAtIdx?</span> : <span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>) → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep\">PlausibleIterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IterM.IsPlausibleNthOutputStep</a> <span class=\"fn\">n</span> <span class=\"fn\">it</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess\">IteratorAccess</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess.mk","kind":"ctor","line":69,"name":"Std.Iterators.IteratorAccess.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IteratorAccess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max w w')</div></div>","info":{"doc":"`IteratorAccess α m` provides efficient implementations for random access or iterators that support\nit. `it.nextAtIdx? n` either returns the step in which the `n`-th value of `it` is emitted\n(necessarily of the form `.yield _ _`) or `.done` if `it` terminates before emitting the `n`-th\nvalue.\n\nFor monadic iterators, the monadic effects of this operation may differ from manually iterating\nto the `n`-th value because `nextAtIdx?` can take shortcuts. By the signature, the return value\nis guaranteed to plausible in the sense of `IterM.IsPlausibleNthOutputStep`.\n\nThis class is experimental and users of the iterator API should not explicitly depend on it.\n","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess","kind":"class","line":57,"name":"Std.Iterators.IteratorAccess","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L57-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.not_isPlausibleNthOutputStep_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">not_isPlausibleNthOutputStep_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IsPlausibleNthOutputStep</a> <span class=\"fn\">n</span> <span class=\"fn\">it</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.not_isPlausibleNthOutputStep_yield","kind":"theorem","line":46,"name":"Std.Iterators.IterM.not_isPlausibleNthOutputStep_yield","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L46-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep.skip\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleNthOutputStep</span>.<span class=\"name\">skip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.skip\">IterStep.skip</a> <span class=\"fn\">it'</span>)</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IsPlausibleNthOutputStep</a> <span class=\"fn\">n</span> <span class=\"fn\">it'</span> <span class=\"fn\">step</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IsPlausibleNthOutputStep</a> <span class=\"fn\">n</span> <span class=\"fn\">it</span> <span class=\"fn\">step</span></span></span></span></div></div>","info":{"doc":"If `it` plausibly skips in its immediate next step, the successor iterator being `it'`, and\nif `step` is a plausible `n`-th output step of `it'`, then `step` is also a plausible `n`-th\noutput step of `it`.\n","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep.skip","kind":"ctor","line":38,"name":"Std.Iterators.IterM.IsPlausibleNthOutputStep.skip","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L38-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep.yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleNthOutputStep</span>.<span class=\"name\">yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it </span><span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IsPlausibleNthOutputStep</a> <span class=\"fn\">n</span> <span class=\"fn\">it'</span> <span class=\"fn\">step</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IsPlausibleNthOutputStep</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">it</span> <span class=\"fn\">step</span></span></span></span></div></div>","info":{"doc":"If `it` plausibly yields in its immediate next step, the successor iterator being `it'`, and\nif `step` is a plausible `n`-th output step of `it'`, then `step` is a plausible `n + 1`-th\noutput step of `it`.\n","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep.yield","kind":"ctor","line":31,"name":"Std.Iterators.IterM.IsPlausibleNthOutputStep.yield","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L31-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep.done\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleNthOutputStep</span>.<span class=\"name\">done</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IsPlausibleNthOutputStep</a> <span class=\"fn\">n</span> <span class=\"fn\">it</span> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span></span></div></div>","info":{"doc":"If `it` plausibly terminates in its immediate next step (`.done`), then `.done` is a plausible\n`n`-th output step for arbitrary `n`.\n","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep.done","kind":"ctor","line":25,"name":"Std.Iterators.IterM.IsPlausibleNthOutputStep.done","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L25-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep.zero_yield\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleNthOutputStep</span>.<span class=\"name\">zero_yield</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it'</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\">IsPlausibleNthOutputStep</a> <span class=\"fn\">0</span> <span class=\"fn\">it</span> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">it'</span> <span class=\"fn\">out</span>)</span></span></span></div></div>","info":{"doc":"If `it` plausibly yields in its immediate next step, this step is a plausible `0`-th output step. ","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep.zero_yield","kind":"ctor","line":22,"name":"Std.Iterators.IterM.IsPlausibleNthOutputStep.zero_yield","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L22-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">IsPlausibleNthOutputStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></div></div>","info":{"doc":"`it.IsPlausibleNthOutputStep n step` is the proposition that according to the\n`IsPlausibleStep` relation, it is plausible that `step` returns the step in which the `n`-th value\nof `it` is emitted, or `.done` if `it` can plausibly terminate before emitting `n` values.\n","docLink":"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IterM.IsPlausibleNthOutputStep","kind":"inductive","line":15,"name":"Std.Iterators.IterM.IsPlausibleNthOutputStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Consumers/Monadic/Access.lean#L15-L44"}}],"imports":["Init.Data.Iterators.Basic"],"instances":[],"name":"Init.Data.Iterators.Consumers.Monadic.Access"}