{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.propagateIneq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">propagateIneq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqTrue</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.propagateIneq","kind":"def","line":100,"name":"Lean.Meta.Grind.Arith.Linear.propagateIneq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.lean#L100-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.assert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">IneqCnstr</span>.<span class=\"name\">assert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr\">IneqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/LinearM.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.html#Lean.Meta.Grind.Arith.Linear.IneqCnstr.assert","kind":"def","line":25,"name":"Lean.Meta.Grind.Arith.Linear.IneqCnstr.assert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/IneqCnstr.lean#L25-L42"}}],"imports":["Lean.Meta.Tactic.Grind.Arith.Linear.LinearM","Lean.Meta.Tactic.Grind.Arith.CommRing.Reify","Lean.Meta.Tactic.Grind.Arith.CommRing.DenoteExpr","Lean.Meta.Tactic.Grind.Arith.Linear.Var","Lean.Meta.Tactic.Grind.Arith.Linear.StructId","Lean.Meta.Tactic.Grind.Arith.Linear.Reify","Lean.Meta.Tactic.Grind.Arith.Linear.DenoteExpr","Lean.Meta.Tactic.Grind.Arith.Linear.Proof","Lean.Meta.Tactic.Grind.Arith.Linear.OfNatModule"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Arith.Linear.IneqCnstr"}