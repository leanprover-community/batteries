{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.elabCalc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabCalc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"Elaborator for the `calc` term mode variant. ","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.elabCalc","kind":"def","line":167,"name":"Lean.Elab.Term.elabCalc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L167-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.throwCalcFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">throwCalcFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType </span><span class=\"fn\">result</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.throwCalcFailure","kind":"def","line":131,"name":"Lean.Elab.Term.throwCalcFailure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L131-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.elabCalcSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabCalcSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.elabCalcSteps","kind":"def","line":104,"name":"Lean.Elab.Term.elabCalcSteps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L104-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcStepViews\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkCalcStepViews</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.calcSteps</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcStepViews","kind":"def","line":92,"name":"Lean.Elab.Term.mkCalcStepViews","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L92-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcFirstStepView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkCalcFirstStepView</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step0</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.calcFirstStep</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcFirstStepView","kind":"def","line":85,"name":"Lean.Elab.Term.mkCalcFirstStepView","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L85-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.instInhabitedCalcStepView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedCalcStepView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.instInhabitedCalcStepView","kind":"instance","line":83,"name":"Lean.Elab.Term.instInhabitedCalcStepView","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.instInhabitedCalcStepView.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedCalcStepView</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.instInhabitedCalcStepView.default","kind":"def","line":83,"name":"Lean.Elab.Term.instInhabitedCalcStepView.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></div></div>","info":{"doc":"A proof of `term` ","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.proof","kind":"def","line":82,"name":"Lean.Elab.Term.CalcStepView.proof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></div></div>","info":{"doc":"A relation term like `a ≤ b` ","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.term","kind":"def","line":80,"name":"Lean.Elab.Term.CalcStepView.term","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.ref","kind":"def","line":78,"name":"Lean.Elab.Term.CalcStepView.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term </span><span class=\"fn\">proof</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.mk","kind":"ctor","line":77,"name":"Lean.Elab.Term.CalcStepView.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"View of a `calcStep`. ","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView","kind":"structure","line":76,"name":"Lean.Elab.Term.CalcStepView","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L76-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.annotateFirstHoleWithType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">annotateFirstHoleWithType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"Adds a type annotation to a hole that occurs immediately at the beginning of the term.\nThis is so that coercions can trigger when elaborating the term.\nSee https://github.com/leanprover/lean4/issues/2040 for further rationale.\n\n- `_ < 3` is annotated\n- `(_) < 3` is not, because it occurs after an atom\n- in `_ < _` only the first one is annotated\n- `_ + 2 < 3` is annotated (not the best heuristic, ideally we'd like to annotate `_ + 2`)\n- `lt _ 3` is not, because it occurs after an identifier\n","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.annotateFirstHoleWithType","kind":"def","line":52,"name":"Lean.Elab.Term.annotateFirstHoleWithType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L52-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcTrans\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkCalcTrans</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result </span><span class=\"fn\">resultType </span><span class=\"fn\">step </span><span class=\"fn\">stepType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcTrans","kind":"def","line":33,"name":"Lean.Elab.Term.mkCalcTrans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L33-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.getCalcRelation?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getCalcRelation?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>","info":{"doc":"Decompose `e` into `(r, a, b)`.\n\nRemark: it assumes the last two arguments are explicit.\n","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.getCalcRelation?","kind":"def","line":16,"name":"Lean.Elab.Term.getCalcRelation?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Calc.lean#L16-L25"}}],"imports":["Lean.Elab.App"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Term.instInhabitedCalcStepView","typeNames":["Lean.Elab.Term.CalcStepView"]}],"name":"Lean.Elab.Calc"}