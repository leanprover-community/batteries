{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Do/VCGen/SuggestInvariant.html#Lean.Elab.Tactic.Do.suggestInvariant\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Do</span>.<span class=\"name\">suggestInvariant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vcs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"Based on how a given metavariable `inv` binding a `Std.Do.Invariant` is used in the `vcs`, suggest\nan initial assignment for `inv` to fill in for the user.\n","docLink":"./Lean/Elab/Tactic/Do/VCGen/SuggestInvariant.html#Lean.Elab.Tactic.Do.suggestInvariant","kind":"def","line":363,"name":"Lean.Elab.Tactic.Do.suggestInvariant","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Do/VCGen/SuggestInvariant.lean#L363-L474"}}],"imports":["Lean.Elab.Tactic.Basic","Lean.Meta.Tactic.Simp.Types","Lean.Meta.Tactic.Simp.Main","Lean.Util.OccursCheck","Lean.PrettyPrinter.Delaborator","Lean.Elab.Tactic.Do.ProofMode.MGoal","Std.Tactic.Do"],"instances":[],"name":"Lean.Elab.Tactic.Do.VCGen.SuggestInvariant"}