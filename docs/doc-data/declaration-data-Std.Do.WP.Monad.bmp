{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.Reader.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Reader</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/Control/Reader.html#ReaderM\">ReaderM</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.Reader.instWPMonad","kind":"instance","line":105,"name":"Std.Do.Reader.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L105-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.State.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">State</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.State.instWPMonad","kind":"instance","line":103,"name":"Std.Do.State.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L103-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.Option.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Option</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.Option.instWPMonad","kind":"instance","line":99,"name":"Std.Do.Option.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L99-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.Except.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Except</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.Except.instWPMonad","kind":"instance","line":95,"name":"Std.Do.Except.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L95-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.EStateM.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">EStateM</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.EStateM.instWPMonad","kind":"instance","line":87,"name":"Std.Do.EStateM.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L87-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.OptionT.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">OptionT</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.OptionT.instWPMonad","kind":"instance","line":75,"name":"Std.Do.OptionT.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L75-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.ExceptT.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ExceptT</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.ExceptT.instWPMonad","kind":"instance","line":62,"name":"Std.Do.ExceptT.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L62-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.ReaderT.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">ReaderT</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.ReaderT.instWPMonad","kind":"instance","line":56,"name":"Std.Do.ReaderT.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L56-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.StateT.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">StateT</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.StateT.instWPMonad","kind":"instance","line":50,"name":"Std.Do.StateT.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L50-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.Id.instWPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Id</span>.<span class=\"name\">instWPMonad</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.Id.instWPMonad","kind":"instance","line":46,"name":"Std.Do.Id.instWPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L46-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad.wp_seq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WPMonad</span>.<span class=\"name\">wp_seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">(<span class=\"fn\">f</span> &lt;*&gt; <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">f</span></span> &lt;*&gt; <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"`WP.wp` preserves `seq`. ","docLink":"./Std/Do/WP/Monad.html#Std.Do.WPMonad.wp_seq","kind":"theorem","line":40,"name":"Std.Do.WPMonad.wp_seq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L40-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad.wp_map\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WPMonad</span>.<span class=\"name\">wp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"`WP.wp` preserves `map`. ","docLink":"./Std/Do/WP/Monad.html#Std.Do.WPMonad.wp_map","kind":"theorem","line":36,"name":"Std.Do.WPMonad.wp_map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L36-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad.wp_bind\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WPMonad</span>.<span class=\"name\">wp_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">do\n    let <span class=\"fn\">a</span> ← <span class=\"fn\">x</span>\n    <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">do\n  let <span class=\"fn\">a</span> ← <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">x</span></span>\n  <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span></div></div>","info":{"doc":"`WP.wp` preserves `bind`. ","docLink":"./Std/Do/WP/Monad.html#Std.Do.WPMonad.wp_bind","kind":"theorem","line":34,"name":"Std.Do.WPMonad.wp_bind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad.wp_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WPMonad</span>.<span class=\"name\">wp_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"`WP.wp` preserves `pure`. ","docLink":"./Std/Do/WP/Monad.html#Std.Do.WPMonad.wp_pure","kind":"theorem","line":32,"name":"Std.Do.WPMonad.wp_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WPMonad</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toLawfulMonad</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toWP</span> : <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wp_pure</span> : <span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wp_bind</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>),\n    <span class=\"fn\">(<a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">do\n        let <span class=\"fn\">a</span> ← <span class=\"fn\">x</span>\n        <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\">do\n      let <span class=\"fn\">a</span> ← <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">x</span></span>\n      <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP.wp\">wp</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.WPMonad.mk","kind":"ctor","line":29,"name":"Std.Do.WPMonad.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad.toWP\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WPMonad</span>.<span class=\"name\">toWP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.WPMonad.toWP","kind":"def","line":29,"name":"Std.Do.WPMonad.toWP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L29-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad.toLawfulMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WPMonad</span>.<span class=\"name\">toLawfulMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/Monad.html#Std.Do.WPMonad.toLawfulMonad","kind":"theorem","line":29,"name":"Std.Do.WPMonad.toLawfulMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L29-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WPMonad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>, <span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">Std.Do.WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) v)</div></div>","info":{"doc":"A `WP` that is also a monad morphism, preserving `pure` and `bind`. (They all are.)\n","docLink":"./Std/Do/WP/Monad.html#Std.Do.WPMonad","kind":"class","line":26,"name":"Std.Do.WPMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/WP/Monad.lean#L26-L34"}}],"imports":["Std.Do.WP.Basic","Std.Do.WP.Basic"],"instances":[{"className":"Std.Do.WPMonad","name":"Std.Do.Id.instWPMonad","typeNames":["Id","Std.Do.PostShape.pure"]},{"className":"Std.Do.WPMonad","name":"Std.Do.StateT.instWPMonad","typeNames":["StateT","Std.Do.PostShape.arg"]},{"className":"Std.Do.WPMonad","name":"Std.Do.ReaderT.instWPMonad","typeNames":["ReaderT","Std.Do.PostShape.arg"]},{"className":"Std.Do.WPMonad","name":"Std.Do.ExceptT.instWPMonad","typeNames":["ExceptT","Std.Do.PostShape.except"]},{"className":"Std.Do.WPMonad","name":"Std.Do.OptionT.instWPMonad","typeNames":["OptionT","Std.Do.PostShape.except"]},{"className":"Std.Do.WPMonad","name":"Std.Do.EStateM.instWPMonad","typeNames":["EStateM","Std.Do.PostShape.except"]},{"className":"Std.Do.WPMonad","name":"Std.Do.Except.instWPMonad","typeNames":["Except","Std.Do.PostShape.except"]},{"className":"Std.Do.WPMonad","name":"Std.Do.Option.instWPMonad","typeNames":["Option","Std.Do.PostShape.except"]},{"className":"Std.Do.WPMonad","name":"Std.Do.State.instWPMonad","typeNames":["StateM","Std.Do.PostShape.arg"]},{"className":"Std.Do.WPMonad","name":"Std.Do.Reader.instWPMonad","typeNames":["ReaderM","Std.Do.PostShape.arg"]}],"name":"Std.Do.WP.Monad"}