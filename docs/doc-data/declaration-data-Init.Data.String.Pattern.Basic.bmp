{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.defaultImplementation\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToBackwardSearcher</span>.<span class=\"name\">defaultImplementation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">BackwardPattern</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.defaultImplementation","kind":"def","line":221,"name":"String.Slice.Pattern.ToBackwardSearcher.defaultImplementation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L221-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.defaultDropSuffix?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToBackwardSearcher</span>.<span class=\"name\">defaultDropSuffix?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.defaultDropSuffix?","kind":"def","line":214,"name":"String.Slice.Pattern.ToBackwardSearcher.defaultDropSuffix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L214-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.defaultEndsWith\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToBackwardSearcher</span>.<span class=\"name\">defaultEndsWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.defaultEndsWith","kind":"def","line":207,"name":"String.Slice.Pattern.ToBackwardSearcher.defaultEndsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L207-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern.dropSuffix?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">BackwardPattern</span>.<span class=\"name\">dropSuffix?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">BackwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></span></div></div>","info":{"doc":"Checks whether the slice ends with the pattern\\. If it does, the slice is returned with the\n  suffix removed; otherwise the result is `none`\\.\n  ","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern.dropSuffix?","kind":"def","line":199,"name":"String.Slice.Pattern.BackwardPattern.dropSuffix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern.endsWith\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">BackwardPattern</span>.<span class=\"name\">endsWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">BackwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <span class=\"fn\"><span class=\"fn\">ρ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Checks whether the slice ends with the pattern\\.\n  ","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern.endsWith","kind":"def","line":194,"name":"String.Slice.Pattern.BackwardPattern.endsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L194-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">BackwardPattern</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">endsWith</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <span class=\"fn\"><span class=\"fn\">ρ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dropSuffix?</span> : <span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">BackwardPattern</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern.mk","kind":"ctor","line":190,"name":"String.Slice.Pattern.BackwardPattern.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L190-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">BackwardPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Provides simple pattern matching capabilities from the end of a `Slice`\\.\n\nWhile these operations can be implemented on top of `ToBackwardSearcher`, some patterns allow\nfor more efficient implementations\\. This class can be used to specialize for them\\. If there is no\nneed to specialize in this fashion, then\n`BackwardPattern.defaultImplementation` can be\nused to automatically derive an instance\\.\n","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern","kind":"class","line":181,"name":"String.Slice.Pattern.BackwardPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L181-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.toSearcher\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToBackwardSearcher</span>.<span class=\"name\">toSearcher</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"Build an iterator of `SearchStep` corresponding to matches of `pat` along the slice\n  `s`\\. The `SearchStep`s returned by this iterator must contain ranges that are\n  adjacent, non\\-overlapping and cover all of `s`\\.\n  ","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.toSearcher","kind":"def","line":179,"name":"String.Slice.Pattern.ToBackwardSearcher.toSearcher","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToBackwardSearcher</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSearcher</span> : <span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher.mk","kind":"ctor","line":173,"name":"String.Slice.Pattern.ToBackwardSearcher.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L173-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToBackwardSearcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Provides a conversion from a pattern to an iterator of `SearchStep` searching for matches of\nthe pattern from the end towards the start of a `Slice`\\.\n","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher","kind":"class","line":169,"name":"String.Slice.Pattern.ToBackwardSearcher","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L169-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.defaultImplementation\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ForwardPattern</span>.<span class=\"name\">defaultImplementation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">ForwardPattern</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.defaultImplementation","kind":"def","line":162,"name":"String.Slice.Pattern.ForwardPattern.defaultImplementation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L162-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.defaultDropPrefix?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ForwardPattern</span>.<span class=\"name\">defaultDropPrefix?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.defaultDropPrefix?","kind":"def","line":155,"name":"String.Slice.Pattern.ForwardPattern.defaultDropPrefix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L155-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.defaultStartsWith\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ForwardPattern</span>.<span class=\"name\">defaultStartsWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.defaultStartsWith","kind":"def","line":148,"name":"String.Slice.Pattern.ForwardPattern.defaultStartsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L148-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.Internal.nextReject\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">Internal</span>.<span class=\"name\">nextReject</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">searcher</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></div></div>","info":{"doc":"Tries to skip the `searcher` until the next `SearchStep.rejected` and return it\\. If no\nreject is found until the end returns `none`\\.\n","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.Internal.nextReject","kind":"def","line":123,"name":"String.Slice.Pattern.Internal.nextReject","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L123-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.Internal.nextMatch\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">Internal</span>.<span class=\"name\">nextMatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">searcher</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></div></div>","info":{"doc":"Tries to skip the `searcher` until the next `SearchStep.matched` and return it\\. If no\nmatch is found until the end returns `none`\\.\n","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.Internal.nextMatch","kind":"def","line":106,"name":"String.Slice.Pattern.Internal.nextMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L106-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.Internal.memcmp\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">Internal</span>.<span class=\"name\">memcmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lstart </span><span class=\"fn\">rstart </span><span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">len</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">lstart</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">len</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">rstart</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.Internal.memcmp","kind":"def","line":77,"name":"String.Slice.Pattern.Internal.memcmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L77-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.dropPrefix?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ForwardPattern</span>.<span class=\"name\">dropPrefix?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">ForwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></span></div></div>","info":{"doc":"Checks whether the slice starts with the pattern\\. If it does, the slice is returned with the\n  prefix removed; otherwise the result is `none`\\.\n  ","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.dropPrefix?","kind":"def","line":73,"name":"String.Slice.Pattern.ForwardPattern.dropPrefix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.startsWith\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ForwardPattern</span>.<span class=\"name\">startsWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">ForwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <span class=\"fn\"><span class=\"fn\">ρ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Checks whether the slice starts with the pattern\\.\n  ","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.startsWith","kind":"def","line":68,"name":"String.Slice.Pattern.ForwardPattern.startsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ForwardPattern</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startsWith</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <span class=\"fn\"><span class=\"fn\">ρ</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dropPrefix?</span> : <span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">ForwardPattern</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern.mk","kind":"ctor","line":64,"name":"String.Slice.Pattern.ForwardPattern.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ForwardPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Provides simple pattern matching capabilities from the start of a `Slice`\\.\n\nWhile these operations can be implemented on top of `ToForwardSearcher` some patterns allow\nfor more efficient implementations\\. This class can be used to specialize for them\\. If there is no\nneed to specialize in this fashion, then\n`ForwardPattern.defaultImplementation` can be used\nto automatically derive an instance\\.\n","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern","kind":"class","line":55,"name":"String.Slice.Pattern.ForwardPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L55-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher.toSearcher\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToForwardSearcher</span>.<span class=\"name\">toSearcher</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></div></div>","info":{"doc":"Builds an iterator of `SearchStep` corresponding to matches of `pat` along the slice\n  `s`\\. The `SearchStep`s returned by this iterator must contain ranges that are\n  adjacent, non\\-overlapping and cover all of `s`\\.\n  ","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher.toSearcher","kind":"def","line":53,"name":"String.Slice.Pattern.ToForwardSearcher.toSearcher","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToForwardSearcher</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSearcher</span> : <span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher.mk","kind":"ctor","line":47,"name":"String.Slice.Pattern.ToForwardSearcher.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ToForwardSearcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Provides a conversion from a pattern to an iterator of `SearchStep` that searches for matches\nof the pattern from the start towards the end of a `Slice`\\.\n","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher","kind":"class","line":43,"name":"String.Slice.Pattern.ToForwardSearcher","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L43-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.instInhabitedSearchStep.default\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">instInhabitedSearchStep</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.instInhabitedSearchStep.default","kind":"def","line":41,"name":"String.Slice.Pattern.instInhabitedSearchStep.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.instInhabitedSearchStep\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">instInhabitedSearchStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.instInhabitedSearchStep","kind":"instance","line":41,"name":"String.Slice.Pattern.instInhabitedSearchStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep.matched\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">SearchStep</span>.<span class=\"name\">matched</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos </span><span class=\"fn\">endPos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"The subslice starting at `startPos` and ending at `endPos` did not match the pattern\\.\n  ","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep.matched","kind":"ctor","line":37,"name":"String.Slice.Pattern.SearchStep.matched","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L37-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep.rejected\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">SearchStep</span>.<span class=\"name\">rejected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos </span><span class=\"fn\">endPos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">SearchStep</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"The subslice starting at `startPos` and ending at `endPos` did not match the pattern\\.\n  ","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep.rejected","kind":"ctor","line":33,"name":"String.Slice.Pattern.SearchStep.rejected","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L33-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">SearchStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A step taken during the traversal of a `Slice` by a forward or backward searcher\\.\n","docLink":"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep","kind":"inductive","line":29,"name":"String.Slice.Pattern.SearchStep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Pattern/Basic.lean#L29-L41"}}],"imports":["Init.Data.String.Basic","Init.Data.Iterators.Basic"],"instances":[{"className":"Inhabited","name":"String.Slice.Pattern.instInhabitedSearchStep","typeNames":["String.Slice.Pattern.SearchStep"]}],"name":"Init.Data.String.Pattern.Basic"}