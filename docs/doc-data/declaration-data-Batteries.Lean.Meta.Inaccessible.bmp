{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/Inaccessible.html#Lean.MVarId.renameInaccessibleFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">renameInaccessibleFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></div></div>","info":{"doc":"Rename all inaccessible fvars. An fvar is inaccessible if (a) its user name is\ninaccessible or (b) it is shadowed by a later fvar with the same user name. This\nfunction gives all inaccessible fvars a unique, accessible user name. It returns\nthe new goal and the fvars that were renamed.\n","docLink":"./Batteries/Lean/Meta/Inaccessible.html#Lean.MVarId.renameInaccessibleFVars","kind":"def","line":45,"name":"Lean.MVarId.renameInaccessibleFVars","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/Inaccessible.lean#L45-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/Inaccessible.html#Lean.Meta.getInaccessibleFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getInaccessibleFVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span></div></div>","info":{"doc":"Obtain the inaccessible fvars from the current local context. An fvar is\ninaccessible if (a) its user name is inaccessible or (b) it is shadowed by a\nlater fvar with the same user name.\n","docLink":"./Batteries/Lean/Meta/Inaccessible.html#Lean.Meta.getInaccessibleFVars","kind":"def","line":36,"name":"Lean.Meta.getInaccessibleFVars","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/Inaccessible.lean#L36-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/Inaccessible.html#Lean.LocalContext.inaccessibleFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">inaccessibleFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"Obtain the inaccessible fvars from the given local context. An fvar is\ninaccessible if (a) its user name is inaccessible or (b) it is shadowed by a\nlater fvar with the same user name.\n","docLink":"./Batteries/Lean/Meta/Inaccessible.html#Lean.LocalContext.inaccessibleFVars","kind":"def","line":14,"name":"Lean.LocalContext.inaccessibleFVars","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/Inaccessible.lean#L14-L34"}}],"imports":["Init","Lean.Meta.Basic"],"instances":[],"name":"Batteries.Lean.Meta.Inaccessible"}