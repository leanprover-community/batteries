{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.ite_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">ite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.ite_apply","kind":"def","line":187,"name":"Std.Do.PredTrans.ite_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L187-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.dite_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">dite_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">c</span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">c</span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(if h : <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">h</span></span> else <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">h</span></span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">e</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.dite_apply","kind":"def","line":184,"name":"Std.Do.PredTrans.dite_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L184-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushOption_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">pushOption_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushOption\">pushOption</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushOption_apply","kind":"def","line":180,"name":"Std.Do.PredTrans.pushOption_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L180-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushExcept_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">pushExcept_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushExcept\">pushExcept</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushExcept_apply","kind":"def","line":176,"name":"Std.Do.PredTrans.pushExcept_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L176-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushArg_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">pushArg_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushArg\">pushArg</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushArg_apply","kind":"def","line":172,"name":"Std.Do.PredTrans.pushArg_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L172-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushOption\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">pushOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushOption","kind":"def","line":161,"name":"Std.Do.PredTrans.pushOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L161-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">pushExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushExcept","kind":"def","line":150,"name":"Std.Do.PredTrans.pushExcept","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L150-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushArg\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">pushArg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.pushArg","kind":"def","line":140,"name":"Std.Do.PredTrans.pushArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L140-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.instLawfulMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">instLawfulMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.instLawfulMonad","kind":"instance","line":132,"name":"Std.Do.PredTrans.instLawfulMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L132-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.bind_mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">bind_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.bind_mono","kind":"theorem","line":129,"name":"Std.Do.PredTrans.bind_mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L129-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.const_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">const_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.const\">const</a> <span class=\"fn\">p</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.const_apply","kind":"theorem","line":125,"name":"Std.Do.PredTrans.const_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L125-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.seq_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">seq_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> &lt;*&gt; <span class=\"fn\">x</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.seq_apply","kind":"theorem","line":121,"name":"Std.Do.PredTrans.seq_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L121-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.bind_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">bind_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>).<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.bind_apply","kind":"theorem","line":117,"name":"Std.Do.PredTrans.bind_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L117-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.map_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>).<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.map_apply","kind":"theorem","line":113,"name":"Std.Do.PredTrans.map_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L113-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Pure_pure_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">Pure_pure_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.Pure_pure_apply","kind":"theorem","line":109,"name":"Std.Do.PredTrans.Pure_pure_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L109-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pure_apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">pure_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pure\">pure</a> <span class=\"fn\">a</span>)</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.pure_apply","kind":"theorem","line":105,"name":"Std.Do.PredTrans.pure_apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L105-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.instMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">instMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.instMonad","kind":"instance","line":101,"name":"Std.Do.PredTrans.instMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L101-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.const\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The predicate transformer that always returns the same precondition `P`; `(const P).apply Q = P`.\n","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.const","kind":"def","line":95,"name":"Std.Do.PredTrans.const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L95-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.bind\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.bind","kind":"def","line":85,"name":"Std.Do.PredTrans.bind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L85-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.pure","kind":"def","line":82,"name":"Std.Do.PredTrans.pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.instLE\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">instLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.instLE","kind":"instance","line":80,"name":"Std.Do.PredTrans.instLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.le\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Given a fixed postcondition, the *stronger* predicate transformer will yield a\n*weaker* precondition.\n","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.le","kind":"def","line":74,"name":"Std.Do.PredTrans.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L74-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Monotonic\">Monotonic</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.mono","kind":"theorem","line":71,"name":"Std.Do.PredTrans.mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.conjunctive\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">conjunctive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Conjunctive\">Conjunctive</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span></span></div></div>","info":{"doc":"The predicate transformer is conjunctive: `t (Q₁ ∧ₚ Q₂) ⊣⊢ₛ t Q₁ ∧ t Q₂`.\nSo the stronger the postcondition, the stronger the resulting precondition. ","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.conjunctive","kind":"theorem","line":67,"name":"Std.Do.PredTrans.conjunctive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span></div></div>","info":{"doc":"Apply the predicate transformer to a postcondition. ","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply","kind":"def","line":64,"name":"Std.Do.PredTrans.apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">apply</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">conjunctive</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Conjunctive\">Conjunctive</a> <span class=\"fn\">apply</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.mk","kind":"ctor","line":62,"name":"Std.Do.PredTrans.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.ext\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">apply</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.ext","kind":"theorem","line":61,"name":"Std.Do.PredTrans.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.ext_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\">PredTrans</a> <span class=\"fn\">ps</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">apply</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.ext_iff","kind":"theorem","line":61,"name":"Std.Do.PredTrans.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"The type of predicate transformers for a given `ps : PostShape` and return type `α : Type`.\nA predicate transformer `x : PredTrans ps α` is a function that takes a postcondition\n`Q : PostCond α ps` and returns a precondition `x.apply Q : Assertion ps`.\n","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans","kind":"structure","line":56,"name":"Std.Do.PredTrans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L56-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Conjunctive.mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">Conjunctive</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Conjunctive\">Conjunctive</a> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Monotonic\">Monotonic</a> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"Any predicate transformer that is conjunctive is also monotonic. ","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.Conjunctive.mono","kind":"def","line":49,"name":"Std.Do.PredTrans.Conjunctive.mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L49-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Conjunctive\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">Conjunctive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Transforming a conjunction of postconditions is the same as the conjunction of transformed\npostconditions.\n","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.Conjunctive","kind":"def","line":42,"name":"Std.Do.PredTrans.Conjunctive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L42-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.Monotonic\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">PredTrans</span>.<span class=\"name\">Monotonic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The stronger the postcondition, the stronger the transformed precondition. ","docLink":"./Std/Do/PredTrans.html#Std.Do.PredTrans.Monotonic","kind":"def","line":38,"name":"Std.Do.PredTrans.Monotonic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/PredTrans.lean#L38-L40"}}],"imports":["Init.Control.Lawful","Std.Do.PostCond"],"instances":[{"className":"LE","name":"Std.Do.PredTrans.instLE","typeNames":["Std.Do.PredTrans"]},{"className":"Monad","name":"Std.Do.PredTrans.instMonad","typeNames":["Std.Do.PredTrans"]},{"className":"LawfulMonad","name":"Std.Do.PredTrans.instLawfulMonad","typeNames":["Std.Do.PredTrans"]}],"name":"Std.Do.PredTrans"}