{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.constructorApp'?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">constructorApp'?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>","info":{"doc":"Similar to `constructorApp?`, but on failure it puts `e` in WHNF and tries again.\nIt also uses `isOffset?` for `Nat`.\n\nSee also `Lean.Meta.isConstructorApp'?`.\n","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.constructorApp'?","kind":"def","line":91,"name":"Lean.Meta.constructorApp'?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CtorRecognizer.lean#L91-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.constructorApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">constructorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>","info":{"doc":"If `e` is a constructor application, return a pair containing the corresponding `ConstructorVal` and the constructor\napplication arguments.\n","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.constructorApp?","kind":"def","line":78,"name":"Lean.Meta.constructorApp?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CtorRecognizer.lean#L78-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorApp'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `isConstructorApp e` or `isConstructorApp (← whnf e)`\n","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp'","kind":"def","line":71,"name":"Lean.Meta.isConstructorApp'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CtorRecognizer.lean#L71-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true`, if `e` is constructor application of builtin literal defeq to\na constructor application.\n","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp","kind":"def","line":64,"name":"Lean.Meta.isConstructorApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CtorRecognizer.lean#L64-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp'?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorApp'?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a>)</span></span></div></div>","info":{"doc":"Similar to `isConstructorApp?`, but uses `whnf`.\nIt also uses `isOffset?` for `Nat`.\n\nSee also `Lean.Meta.constructorApp'?`.\n","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp'?","kind":"def","line":40,"name":"Lean.Meta.isConstructorApp'?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CtorRecognizer.lean#L40-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a>)</span></span></div></div>","info":{"doc":"If `e` is a constructor application or a builtin literal defeq to a constructor application,\nthen return the corresponding `ConstructorVal`.\n","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorApp?","kind":"def","line":33,"name":"Lean.Meta.isConstructorApp?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CtorRecognizer.lean#L33-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorAppCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isConstructorAppCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a>)</span></span></div></div>","info":{"doc":"If `e` is a constructor application,\nthen return the corresponding `ConstructorVal`.\n","docLink":"./Lean/Meta/CtorRecognizer.html#Lean.Meta.isConstructorAppCore?","kind":"def","line":21,"name":"Lean.Meta.isConstructorAppCore?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CtorRecognizer.lean#L21-L31"}}],"imports":["Lean.Meta.LitValues","Lean.Meta.Offset"],"instances":[],"name":"Lean.Meta.CtorRecognizer"}