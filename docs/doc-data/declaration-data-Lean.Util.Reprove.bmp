{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Reprove.html#Lean.Elab.Command.elabReprove\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabReprove</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Util/Reprove.html#Lean.Elab.Command.elabReprove","kind":"def","line":60,"name":"Lean.Elab.Command.elabReprove","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Reprove.lean#L60-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Reprove.html#Lean.Elab.Command.reprove\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">reprove</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Reproves a list of declarations with a given tactic sequence.\n\n```lean\nreprove theorem1 theorem2 theorem3 by simp\n```\n","docLink":"./Lean/Util/Reprove.html#Lean.Elab.Command.reprove","kind":"def","line":51,"name":"Lean.Elab.Command.reprove","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Reprove.lean#L51-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Util/Reprove.html#Lean.Elab.Command.reproveDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">reproveDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticSeq</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Reproving a declaration with a given tactic sequence ","docLink":"./Lean/Util/Reprove.html#Lean.Elab.Command.reproveDecl","kind":"def","line":25,"name":"Lean.Elab.Command.reproveDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Util/Reprove.lean#L25-L49"}}],"imports":["Lean.Elab.Command","Lean.Elab.Tactic.Basic"],"instances":[],"name":"Lean.Util.Reprove"}