{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.versionTagPresets\"><span class=\"name\">Lake</span>.<span class=\"name\">versionTagPresets</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/TreeMap/Basic.html#Std.TreeMap\">Std.TreeMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span></div></div>","info":{"doc":"Builtin `StrPat` presets available to TOML for `versionTags`. ","docLink":"./Lake/Config/Pattern.html#Lake.versionTagPresets","kind":"def","line":244,"name":"Lake.versionTagPresets","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L244-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.defaultVersionTags\"><span class=\"name\">Lake</span>.<span class=\"name\">defaultVersionTags</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>","info":{"doc":"Default string pattern for a Package's `versionTags`. ","docLink":"./Lake/Config/Pattern.html#Lake.defaultVersionTags","kind":"def","line":241,"name":"Lake.defaultVersionTags","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L241-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.verLike\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">verLike</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>","info":{"doc":"Matches a \"version-like\" string: a `v` followed by a digit. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.verLike","kind":"def","line":238,"name":"Lake.StrPat.verLike","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L238-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.isVerLike\"><span class=\"name\">Lake</span>.<span class=\"name\">isVerLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether a string is \"version-like\".\nThat is, a `v` followed by a digit.\n","docLink":"./Lake/Config/Pattern.html#Lake.isVerLike","kind":"def","line":227,"name":"Lake.isVerLike","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L227-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPat.fileName\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPat</span>.<span class=\"name\">fileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPat\">PathPat</a></div></div>","info":{"doc":"Matches a file path whose name satisfies the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPat.fileName","kind":"def","line":221,"name":"Lake.PathPat.fileName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L221-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPat.extension\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPat</span>.<span class=\"name\">extension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPat\">PathPat</a></div></div>","info":{"doc":"Matches a file path whose extension satisfies the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPat.extension","kind":"def","line":217,"name":"Lake.PathPat.extension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L217-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPat.path\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPat</span>.<span class=\"name\">path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPat\">PathPat</a></div></div>","info":{"doc":"Matches a file path whose normalized string representation satisfies the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPat.path","kind":"def","line":213,"name":"Lake.PathPat.path","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L213-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPat\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `FilePath` pattern. Matches some subset of file paths. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPat","kind":"def","line":210,"name":"Lake.PathPat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L210-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instIsPatternPathPatDescrFilePath\"><span class=\"name\">Lake</span>.<span class=\"name\">instIsPatternPathPatDescrFilePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instIsPatternPathPatDescrFilePath","kind":"instance","line":208,"name":"Lake.instIsPatternPathPatDescrFilePath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.matches\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">matches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns whether the file path matches the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.matches","kind":"def","line":201,"name":"Lake.PathPatDescr.matches","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L201-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.eq\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>","info":{"doc":"Matches a file path that is equal to this one (when both are normalized). ","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.eq","kind":"def","line":197,"name":"Lake.PathPatDescr.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L197-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPathPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPathPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPathPatDescr","kind":"instance","line":195,"name":"Lake.instInhabitedPathPatDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L195-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPathPatDescr.default\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPathPatDescr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPathPatDescr.default","kind":"def","line":195,"name":"Lake.instInhabitedPathPatDescr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L195-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.fileName\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">fileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>","info":{"doc":"Matches a file path whose name satisfies the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.fileName","kind":"ctor","line":193,"name":"Lake.PathPatDescr.fileName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L193-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.extension\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">extension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>","info":{"doc":"Matches a file path whose extension satisfies the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.extension","kind":"ctor","line":191,"name":"Lake.PathPatDescr.extension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L191-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.path\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>","info":{"doc":"Matches a file path whose normalized string representation satisfies the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.path","kind":"ctor","line":189,"name":"Lake.PathPatDescr.path","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L189-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A declarative `FilePath` pattern. Matches some subset of file paths. ","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr","kind":"inductive","line":187,"name":"Lake.PathPatDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L187-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeStringStrPat\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeStringStrPat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instCoeStringStrPat","kind":"instance","line":183,"name":"Lake.instCoeStringStrPat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L183-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeStringStrPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeStringStrPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instCoeStringStrPatDescr","kind":"instance","line":182,"name":"Lake.instCoeStringStrPatDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.beq\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>","info":{"doc":"Matches a string that is equal to this one. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.beq","kind":"def","line":178,"name":"Lake.StrPat.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L178-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.beq\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>","info":{"doc":"Matches a string that is equal to this one. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.beq","kind":"def","line":175,"name":"Lake.StrPatDescr.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L175-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.endsWith\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">endsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">affix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>","info":{"doc":"Matches a string that ends with this suffix. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.endsWith","kind":"def","line":171,"name":"Lake.StrPat.endsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L171-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.startsWith\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">startsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">affix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>","info":{"doc":"Matches a string that starts with this prefix. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.startsWith","kind":"def","line":167,"name":"Lake.StrPat.startsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L167-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeArrayStringStrPat\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeArrayStringStrPat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span> <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instCoeArrayStringStrPat","kind":"instance","line":165,"name":"Lake.instCoeArrayStringStrPat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeArrayStringStrPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeArrayStringStrPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span> <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instCoeArrayStringStrPatDescr","kind":"instance","line":164,"name":"Lake.instCoeArrayStringStrPatDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L164-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.mem\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>","info":{"doc":"Matches a string that is a member of the array ","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.mem","kind":"def","line":160,"name":"Lake.StrPat.mem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L160-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.satisfies\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">satisfies</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>","info":{"doc":"Matches a value that satisfies an arbitrary predicate\n(optionally identified by a `Name`).\n","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.satisfies","kind":"def","line":156,"name":"Lake.StrPat.satisfies","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L156-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.none\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>","info":{"doc":"Matches nothing. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.none","kind":"def","line":153,"name":"Lake.StrPat.none","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L153-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `String` pattern. Matches some subset of strings. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPat","kind":"def","line":150,"name":"Lake.StrPat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L150-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instIsPatternStrPatDescrString\"><span class=\"name\">Lake</span>.<span class=\"name\">instIsPatternStrPatDescrString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instIsPatternStrPatDescrString","kind":"instance","line":148,"name":"Lake.instIsPatternStrPatDescrString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.matches\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">matches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns whether the string matches the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.matches","kind":"def","line":141,"name":"Lake.StrPatDescr.matches","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L141-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedStrPatDescr.default\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedStrPatDescr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedStrPatDescr.default","kind":"def","line":139,"name":"Lake.instInhabitedStrPatDescr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedStrPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedStrPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedStrPatDescr","kind":"instance","line":139,"name":"Lake.instInhabitedStrPatDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L139-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.endsWith\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">endsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">affix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>","info":{"doc":"Matches a string that ends with this suffix. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.endsWith","kind":"ctor","line":137,"name":"Lake.StrPatDescr.endsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L137-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.startsWith\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">startsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">affix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>","info":{"doc":"Matches a string that starts with this prefix. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.startsWith","kind":"ctor","line":135,"name":"Lake.StrPatDescr.startsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L135-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.mem\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>","info":{"doc":"Matches a string that is a member of the array ","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.mem","kind":"ctor","line":133,"name":"Lake.StrPatDescr.mem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A declarative `String` pattern. Matches some subset of strings. ","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr","kind":"inductive","line":131,"name":"Lake.StrPatDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L131-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.star\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches everything. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.star","kind":"def","line":125,"name":"Lake.Pattern.star","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L125-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.star\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches everything. ","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.star","kind":"def","line":122,"name":"Lake.PatternDescr.star","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L122-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instEmptyCollectionPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instEmptyCollectionPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instEmptyCollectionPattern","kind":"instance","line":120,"name":"Lake.instEmptyCollectionPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instEmptyCollectionPatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instEmptyCollectionPatternDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instEmptyCollectionPatternDescr","kind":"instance","line":119,"name":"Lake.instEmptyCollectionPatternDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L119-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches nothing. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.empty","kind":"def","line":115,"name":"Lake.Pattern.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L115-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches nothing. ","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.empty","kind":"def","line":112,"name":"Lake.PatternDescr.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L112-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.any\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a value that satisfies every pattern. Short-circuits. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.any","kind":"def","line":108,"name":"Lake.Pattern.any","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L108-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.all\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a value that satisfies every pattern. Short-circuits. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.all","kind":"def","line":104,"name":"Lake.Pattern.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L104-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.not\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a value that satisfies every pattern. Short-circuits. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.not","kind":"def","line":100,"name":"Lake.Pattern.not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L100-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoePatternDescrPatternOfIsPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoePatternDescrPatternOfIsPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instCoePatternDescrPatternOfIsPattern","kind":"instance","line":98,"name":"Lake.instCoePatternDescrPatternOfIsPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.ofDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ofDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a string that satisfies the declarative pattern.\n(optionally identified by a `Name`).\n","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.ofDescr","kind":"def","line":91,"name":"Lake.Pattern.ofDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L91-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeForallBoolPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeForallBoolPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instCoeForallBoolPattern","kind":"instance","line":89,"name":"Lake.instCoeForallBoolPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.ofFn\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a value that satisfies an arbitrary predicate\n(optionally identified by a `Name`).\n","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.ofFn","kind":"def","line":82,"name":"Lake.Pattern.ofFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L82-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instIsPatternPatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instIsPatternPatternDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instIsPatternPatternDescr","kind":"instance","line":80,"name":"Lake.instIsPatternPatternDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.matches\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">matches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns whether the value matches the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.matches","kind":"def","line":70,"name":"Lake.PatternDescr.matches","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L70-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instIsPatternPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instIsPatternPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instIsPatternPattern","kind":"instance","line":68,"name":"Lake.instIsPatternPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.matches\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">matches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns whether the value matches the pattern. Alias for `filter`. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.matches","kind":"def","line":64,"name":"Lake.Pattern.matches","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L64-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoePatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoePatternDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instCoePatternDescr","kind":"instance","line":62,"name":"Lake.instCoePatternDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.coe\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a value that satisfies the underlying pattern description. ","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.coe","kind":"ctor","line":55,"name":"Lake.PatternDescr.coe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.any\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a value that satisfies any one of the patterns. Short-circuits. ","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.any","kind":"ctor","line":53,"name":"Lake.PatternDescr.any","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.all\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a value that satisfies every pattern. Short-circuits. ","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.all","kind":"ctor","line":51,"name":"Lake.PatternDescr.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L51-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.not\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Matches a value that does not satisfy the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.not","kind":"ctor","line":49,"name":"Lake.PatternDescr.not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"An abstract declarative pattern.\nAugments another pattern description `β` with logical connectives.\n","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr","kind":"inductive","line":44,"name":"Lake.PatternDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L44-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPatternDescr.default_1\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPatternDescr</span>.<span class=\"name\">default_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPatternDescr.default_1","kind":"def","line":42,"name":"Lake.instInhabitedPatternDescr.default_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPatternDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPatternDescr","kind":"instance","line":42,"name":"Lake.instInhabitedPatternDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPattern.default_1\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPattern</span>.<span class=\"name\">default_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPattern.default_1","kind":"def","line":42,"name":"Lake.instInhabitedPattern.default_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPattern","kind":"instance","line":42,"name":"Lake.instInhabitedPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.descr?\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">descr?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"A optional declarative description of the filter. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.descr?","kind":"def","line":41,"name":"Lake.Pattern.descr?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.name\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">name</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"An optional name for the filter. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.name","kind":"def","line":39,"name":"Lake.Pattern.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.filter\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns whether the value matches the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.filter","kind":"def","line":37,"name":"Lake.Pattern.filter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">filter</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.mk","kind":"ctor","line":35,"name":"Lake.Pattern.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"A pattern. Matches some subset of the values of a type.\nMay also include a declarative description.\n","docLink":"./Lake/Config/Pattern.html#Lake.Pattern","kind":"structure","line":31,"name":"Lake.Pattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L31-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.«term_=~_»\"><span class=\"name\">Lake</span>.<span class=\"name\">«term_=~_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"Returns whether the value matches the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.«term_=~_»","kind":"def","line":24,"name":"Lake.«term_=~_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.IsPattern.satisfies\"><span class=\"name\">Lake</span>.<span class=\"name\">IsPattern</span>.<span class=\"name\">satisfies</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns whether the value matches the pattern. ","docLink":"./Lake/Config/Pattern.html#Lake.IsPattern.satisfies","kind":"def","line":22,"name":"Lake.IsPattern.satisfies","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.IsPattern.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">IsPattern</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">satisfies</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.IsPattern.mk","kind":"ctor","line":20,"name":"Lake.IsPattern.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.IsPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">IsPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"","docLink":"./Lake/Config/Pattern.html#Lake.IsPattern","kind":"class","line":20,"name":"Lake.IsPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Config/Pattern.lean#L20-L22"}}],"imports":["Init.System.FilePath","Std.Data.TreeMap.Basic","Lean.Data.Name","Lake.Util.Name"],"instances":[{"className":"Inhabited","name":"Lake.instInhabitedPattern","typeNames":["Lake.Pattern"]},{"className":"Inhabited","name":"Lake.instInhabitedPatternDescr","typeNames":["Lake.PatternDescr"]},{"className":"Coe","name":"Lake.instCoePatternDescr","typeNames":["Lake.PatternDescr"]},{"className":"Lake.IsPattern","name":"Lake.instIsPatternPattern","typeNames":["Lake.Pattern"]},{"className":"Lake.IsPattern","name":"Lake.instIsPatternPatternDescr","typeNames":["Lake.PatternDescr"]},{"className":"Coe","name":"Lake.instCoeForallBoolPattern","typeNames":["Lake.Pattern"]},{"className":"Coe","name":"Lake.instCoePatternDescrPatternOfIsPattern","typeNames":["Lake.PatternDescr","Lake.Pattern"]},{"className":"EmptyCollection","name":"Lake.instEmptyCollectionPatternDescr","typeNames":["Lake.PatternDescr"]},{"className":"EmptyCollection","name":"Lake.instEmptyCollectionPattern","typeNames":["Lake.Pattern"]},{"className":"Inhabited","name":"Lake.instInhabitedStrPatDescr","typeNames":["Lake.StrPatDescr"]},{"className":"Lake.IsPattern","name":"Lake.instIsPatternStrPatDescrString","typeNames":["Lake.StrPatDescr","String"]},{"className":"Coe","name":"Lake.instCoeArrayStringStrPatDescr","typeNames":["Array","Lake.StrPatDescr"]},{"className":"Coe","name":"Lake.instCoeArrayStringStrPat","typeNames":["Array","Lake.StrPat"]},{"className":"Coe","name":"Lake.instCoeStringStrPatDescr","typeNames":["String","Lake.StrPatDescr"]},{"className":"Coe","name":"Lake.instCoeStringStrPat","typeNames":["String","Lake.StrPat"]},{"className":"Inhabited","name":"Lake.instInhabitedPathPatDescr","typeNames":["Lake.PathPatDescr"]},{"className":"Lake.IsPattern","name":"Lake.instIsPatternPathPatDescrFilePath","typeNames":["Lake.PathPatDescr","System.FilePath"]}],"name":"Lake.Config.Pattern"}