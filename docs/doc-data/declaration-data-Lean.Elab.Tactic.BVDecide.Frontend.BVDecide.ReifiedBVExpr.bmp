{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkBVConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">mkBVConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a></span></div></div>","info":{"doc":"Build a reified version of the constant `val`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkBVConst","kind":"def","line":70,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkBVConst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.lean#L70-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.bitVecAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">bitVecAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthetic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span></div></div>","info":{"doc":"Construct an uninterpreted `BitVec` atom from `x`, potentially `synthetic`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.bitVecAtom","kind":"def","line":60,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.bitVecAtom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.lean#L60-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.getNatOrBvValue?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">getNatOrBvValue?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty </span><span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"Parse `expr` as a `Nat` or `BitVec` constant depending on `ty`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.getNatOrBvValue?","kind":"def","line":48,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.getNatOrBvValue?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.lean#L48-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">mkAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">width</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthetic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a></span></div></div>","info":{"doc":"Register `e` as an atom of `width` that might potentially be `synthetic`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkAtom","kind":"def","line":38,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkAtom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.lean#L38-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkBVRefl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">mkBVRefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkBVRefl","kind":"def","line":32,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkBVRefl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.lean#L32-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkEvalExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVExpr</span>.<span class=\"name\">mkEvalExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Build `BVExpr.eval atoms expr` where `atoms` is the assignment stored in the monad.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkEvalExpr","kind":"def","line":26,"name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr.mkEvalExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVExpr.lean#L26-L30"}}],"imports":["Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.Reflect","Std.Tactic.BVDecide.Reflect"],"instances":[],"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedBVExpr"}