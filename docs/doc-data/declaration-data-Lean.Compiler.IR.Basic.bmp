{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.getUnboxOpName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">getUnboxOpName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.getUnboxOpName","kind":"def","line":545,"name":"Lean.IR.getUnboxOpName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L545-L552"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIf\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkIf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIf","kind":"def","line":539,"name":"Lean.IR.mkIf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L539-L543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarIdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarIdSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarIdSet","kind":"def","line":537,"name":"Lean.IR.VarIdSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L537-L537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqFnBody","kind":"instance","line":535,"name":"Lean.IR.instBEqFnBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L535-L535"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.beq","kind":"def","line":532,"name":"Lean.IR.FnBody.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L532-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.alphaEqv","kind":"opaque","line":509,"name":"Lean.IR.FnBody.alphaEqv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L509-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamsRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addParamsRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps₁ </span><span class=\"fn\">ps₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamsRename","kind":"def","line":500,"name":"Lean.IR.addParamsRename","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L500-L507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addParamRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addParamRename","kind":"def","line":494,"name":"Lean.IR.addParamRename","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L494-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.addVarRename\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">addVarRename</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.addVarRename","kind":"def","line":491,"name":"Lean.IR.addVarRename","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L491-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvExpr","kind":"instance","line":489,"name":"Lean.IR.instAlphaEqvExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L489-L489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.alphaEqv","kind":"def","line":473,"name":"Lean.IR.Expr.alphaEqv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L473-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArrayArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvArrayArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArrayArg","kind":"instance","line":471,"name":"Lean.IR.instAlphaEqvArrayArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L471-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.args.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">args</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args₁ </span><span class=\"fn\">args₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.args.alphaEqv","kind":"def","line":468,"name":"Lean.IR.args.alphaEqv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L468-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvArg","kind":"instance","line":466,"name":"Lean.IR.instAlphaEqvArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L466-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.alphaEqv","kind":"def","line":461,"name":"Lean.IR.Arg.alphaEqv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L461-L464"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instAlphaEqvVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instAlphaEqvVarId","kind":"instance","line":459,"name":"Lean.IR.instAlphaEqvVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L459-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v₁ </span><span class=\"fn\">v₂</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.alphaEqv","kind":"def","line":454,"name":"Lean.IR.VarId.alphaEqv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L454-L457"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.aeqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">aeqv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.aeqv","kind":"def","line":450,"name":"Lean.IR.AlphaEqv.aeqv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L450-L450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aeqv</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\">IndexRenaming</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\">AlphaEqv</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv.mk","kind":"ctor","line":449,"name":"Lean.IR.AlphaEqv.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L449-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">AlphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.AlphaEqv","kind":"class","line":449,"name":"Lean.IR.AlphaEqv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L449-L450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IndexRenaming</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexRenaming","kind":"def","line":447,"name":"Lean.IR.IndexRenaming","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L447-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getValue\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getValue","kind":"def","line":442,"name":"Lean.IR.LocalContext.getValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L442-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getType","kind":"def","line":436,"name":"Lean.IR.LocalContext.getType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L436-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.eraseJoinPointDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">eraseJoinPointDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.eraseJoinPointDecl","kind":"def","line":433,"name":"Lean.IR.LocalContext.eraseJoinPointDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L433-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.contains","kind":"def","line":430,"name":"Lean.IR.LocalContext.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L430-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isLocalVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isLocalVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isLocalVar","kind":"def","line":425,"name":"Lean.IR.LocalContext.isLocalVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L425-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isParam","kind":"def","line":420,"name":"Lean.IR.LocalContext.isParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L420-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getJPParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPParams","kind":"def","line":415,"name":"Lean.IR.LocalContext.getJPParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L415-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getJPBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.getJPBody","kind":"def","line":410,"name":"Lean.IR.LocalContext.getJPBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L410-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.isJP","kind":"def","line":405,"name":"Lean.IR.LocalContext.isJP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L405-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParams","kind":"def","line":402,"name":"Lean.IR.LocalContext.addParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L402-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addParam","kind":"def","line":399,"name":"Lean.IR.LocalContext.addParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L399-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addJP","kind":"def","line":396,"name":"Lean.IR.LocalContext.addJP","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L396-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addLocal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext.addLocal","kind":"def","line":393,"name":"Lean.IR.LocalContext.addLocal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L393-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext","kind":"def","line":391,"name":"Lean.IR.LocalContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L391-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.joinPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">joinPoint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">LocalContextEntry</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.joinPoint","kind":"ctor","line":389,"name":"Lean.IR.LocalContextEntry.joinPoint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L389-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.localVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">localVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">LocalContextEntry</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.localVar","kind":"ctor","line":388,"name":"Lean.IR.LocalContextEntry.localVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L388-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.param\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span>.<span class=\"name\">param</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\">LocalContextEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry.param","kind":"ctor","line":387,"name":"Lean.IR.LocalContextEntry.param","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L387-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LocalContextEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContextEntry","kind":"inductive","line":386,"name":"Lean.IR.LocalContextEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L386-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIndexSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkIndexSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet\">IndexSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkIndexSet","kind":"def","line":383,"name":"Lean.IR.mkIndexSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L383-L384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IndexSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Set of variable and join point names ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IndexSet","kind":"def","line":380,"name":"Lean.IR.IndexSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L380-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDummyExternDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">mkDummyExternDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.mkDummyExternDecl","kind":"def","line":377,"name":"Lean.IR.mkDummyExternDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L377-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.updateBody!\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">updateBody!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bNew</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.updateBody!","kind":"def","line":369,"name":"Lean.IR.Decl.updateBody!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L369-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.getInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">getInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">DeclInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.getInfo","kind":"def","line":365,"name":"Lean.IR.Decl.getInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L365-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.isExtern\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">isExtern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.isExtern","kind":"def","line":361,"name":"Lean.IR.Decl.isExtern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L361-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">resultType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.resultType","kind":"def","line":357,"name":"Lean.IR.Decl.resultType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L357-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.params\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.params","kind":"def","line":353,"name":"Lean.IR.Decl.params","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L353-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.name\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.name","kind":"def","line":349,"name":"Lean.IR.Decl.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L349-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedDecl","kind":"instance","line":345,"name":"Lean.IR.instInhabitedDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L345-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedDecl.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedDecl</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedDecl.default","kind":"def","line":345,"name":"Lean.IR.instInhabitedDecl.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L345-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.extern\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">extern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Lean/Compiler/ExternAttr.html#Lean.ExternAttrData\">ExternAttrData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.extern","kind":"ctor","line":344,"name":"Lean.IR.Decl.extern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L344-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.fdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">fdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">DeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl.fdecl","kind":"ctor","line":343,"name":"Lean.IR.Decl.fdecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L343-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl","kind":"inductive","line":342,"name":"Lean.IR.Decl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L342-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.sorryDep?\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span>.<span class=\"name\">sorryDep?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">DeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"If `some <blame>`, then declaration depends on `<blame>` which uses a `sorry` axiom. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.sorryDep?","kind":"def","line":340,"name":"Lean.IR.DeclInfo.sorryDep?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L340-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sorryDep?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\">DeclInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo.mk","kind":"ctor","line":338,"name":"Lean.IR.DeclInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L338-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">DeclInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Extra information associated with a declaration. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.DeclInfo","kind":"structure","line":337,"name":"Lean.IR.DeclInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L337-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.modifyJPsM\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">modifyJPsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.modifyJPsM","kind":"def","line":332,"name":"Lean.IR.modifyJPsM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L332-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.modifyJPs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">modifyJPs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.modifyJPs","kind":"def","line":327,"name":"Lean.IR.modifyJPs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L327-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.reshape\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">reshape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.reshape","kind":"def","line":324,"name":"Lean.IR.reshape","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L324-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.reshapeAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">reshapeAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.reshapeAux","kind":"opaque","line":316,"name":"Lean.IR.reshapeAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L316-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.flatten\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">flatten</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.flatten","kind":"def","line":313,"name":"Lean.IR.FnBody.flatten","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L313-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.flattenAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">flattenAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.flattenAux","kind":"opaque","line":309,"name":"Lean.IR.flattenAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L309-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.push\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.push","kind":"def","line":305,"name":"Lean.IR.push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L305-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.isDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">isDefault</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.isDefault","kind":"def","line":301,"name":"Lean.IR.Alt.isDefault","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L301-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.modifyBodyM\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">modifyBodyM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.modifyBodyM","kind":"def","line":297,"name":"Lean.IR.Alt.modifyBodyM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L297-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.modifyBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">modifyBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.modifyBody","kind":"def","line":293,"name":"Lean.IR.Alt.modifyBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L293-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.setBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">setBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.setBody","kind":"def","line":289,"name":"Lean.IR.Alt.setBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L289-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.body\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.body","kind":"def","line":285,"name":"Lean.IR.Alt.body","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L285-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.split\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"If b is a non terminal, then return a pair `(c, b')` s.t. `b == c <;> b'`,\nand c.body == FnBody.nil ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.split","kind":"def","line":278,"name":"Lean.IR.FnBody.split","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L278-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.resetBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">resetBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.resetBody","kind":"def","line":275,"name":"Lean.IR.FnBody.resetBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L275-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">setBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setBody","kind":"def","line":263,"name":"Lean.IR.FnBody.setBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L263-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.body\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.body","kind":"def","line":251,"name":"Lean.IR.FnBody.body","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L251-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.isTerminal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">isTerminal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.isTerminal","kind":"def","line":244,"name":"Lean.IR.FnBody.isTerminal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L244-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.nil","kind":"def","line":242,"name":"Lean.IR.FnBody.nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L242-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedAlt.default_1\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedAlt</span>.<span class=\"name\">default_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedAlt.default_1","kind":"def","line":240,"name":"Lean.IR.instInhabitedAlt.default_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedAlt","kind":"instance","line":240,"name":"Lean.IR.instInhabitedAlt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedFnBody","kind":"instance","line":236,"name":"Lean.IR.instInhabitedFnBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L236-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedFnBody.default_1\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedFnBody</span>.<span class=\"name\">default_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedFnBody.default_1","kind":"def","line":236,"name":"Lean.IR.instInhabitedFnBody.default_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L236-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.unreachable\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">unreachable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.unreachable","kind":"ctor","line":235,"name":"Lean.IR.FnBody.unreachable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L235-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jmp\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">jmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"Jump to join point `j` ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jmp","kind":"ctor","line":233,"name":"Lean.IR.FnBody.jmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L233-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.ret\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">ret</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.ret","kind":"ctor","line":232,"name":"Lean.IR.FnBody.ret","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L232-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.case\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">case</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tid</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xType</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.case","kind":"ctor","line":231,"name":"Lean.IR.FnBody.case","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.del\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">del</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.del","kind":"ctor","line":230,"name":"Lean.IR.FnBody.del","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.dec\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">dec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">persistent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"RC decrement for `object`. If c == `true`, then `inc` must check whether `x` is a tagged pointer or not.\nIf `persistent == true` then `x` is statically known to be a persistent object. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.dec","kind":"ctor","line":227,"name":"Lean.IR.FnBody.dec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L227-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.inc\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">inc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">persistent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"RC increment for `object`. If c == `true`, then `inc` must check whether `x` is a tagged pointer or not.\nIf `persistent == true` then `x` is statically known to be a persistent object. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.inc","kind":"ctor","line":224,"name":"Lean.IR.FnBody.inc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L224-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.sset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">sset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"Store `y : ty` at Position `sizeof(void*)*i + offset` in `x`. `x` must be a Constructor object and `RC(x)` must be 1.\n`ty` must not be `object`, `tobject`, `erased` nor `Usize`. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.sset","kind":"ctor","line":221,"name":"Lean.IR.FnBody.sset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L221-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.uset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">uset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"Store `y : Usize` at Position `sizeof(void*)*i` in `x`. `x` must be a Constructor object and `RC(x)` must be 1. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.uset","kind":"ctor","line":219,"name":"Lean.IR.FnBody.uset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L219-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setTag\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">setTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cidx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.setTag","kind":"ctor","line":218,"name":"Lean.IR.FnBody.setTag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.set\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"Store `y` at Position `sizeof(void*)*i` in `x`. `x` must be a Constructor object and `RC(x)` must be 1.\nThis operation is not part of λPure is only used during optimization. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.set","kind":"ctor","line":215,"name":"Lean.IR.FnBody.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L215-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">jdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"Join point Declaration `block_j (xs) := e; b` ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.jdecl","kind":"ctor","line":213,"name":"Lean.IR.FnBody.jdecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L213-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.vdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">vdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"`let x : ty := e; b` ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody.vdecl","kind":"ctor","line":211,"name":"Lean.IR.FnBody.vdecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L211-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody","kind":"inductive","line":210,"name":"Lean.IR.FnBody","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L210-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.default","kind":"ctor","line":208,"name":"Lean.IR.Alt.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt.ctor","kind":"ctor","line":207,"name":"Lean.IR.Alt.ctor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L207-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt","kind":"inductive","line":206,"name":"Lean.IR.Alt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L206-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprParam","kind":"instance","line":202,"name":"Lean.IR.instReprParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprParam.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprParam</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprParam.repr","kind":"def","line":202,"name":"Lean.IR.instReprParam.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedParam\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedParam","kind":"instance","line":202,"name":"Lean.IR.instInhabitedParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedParam.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedParam</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedParam.default","kind":"def","line":202,"name":"Lean.IR.instInhabitedParam.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.ty\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">ty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.ty","kind":"def","line":201,"name":"Lean.IR.Param.ty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.borrow\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">borrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.borrow","kind":"def","line":200,"name":"Lean.IR.Param.borrow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.x\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">x</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.x","kind":"def","line":199,"name":"Lean.IR.Param.x","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">borrow</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param.mk","kind":"ctor","line":198,"name":"Lean.IR.Param.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Param</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Param","kind":"structure","line":198,"name":"Lean.IR.Param","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L198-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedExpr","kind":"instance","line":196,"name":"Lean.IR.instInhabitedExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedExpr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedExpr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedExpr.default","kind":"def","line":196,"name":"Lean.IR.instInhabitedExpr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.isShared\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">isShared</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Return `1 : uint8` Iff `RC(x) > 1` ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.isShared","kind":"ctor","line":194,"name":"Lean.IR.Expr.isShared","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L194-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.lit","kind":"ctor","line":193,"name":"Lean.IR.Expr.lit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.unbox\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">unbox</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Given `x : [t]object`, obtain the scalar value. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.unbox","kind":"ctor","line":191,"name":"Lean.IR.Expr.unbox","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L191-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.box\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">box</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Given `x : ty` where `ty` is a scalar type, this operation returns a value of Type `tobject`.\nFor small scalar values, the Result is a tagged pointer, and no memory allocation is performed. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.box","kind":"ctor","line":188,"name":"Lean.IR.Expr.box","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L188-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Application. `x` must be a `pap` value. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ap","kind":"ctor","line":186,"name":"Lean.IR.Expr.ap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L186-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.pap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">pap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Partial application that creates a `pap` value (aka closure in our nonstandard terminology). ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.pap","kind":"ctor","line":184,"name":"Lean.IR.Expr.pap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L184-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.fap\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">fap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Full application. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.fap","kind":"ctor","line":182,"name":"Lean.IR.Expr.fap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L182-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.sproj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sproj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Extract the scalar value at Position `sizeof(void*)*n + offset` from `x`. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.sproj","kind":"ctor","line":180,"name":"Lean.IR.Expr.sproj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L180-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.uproj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">uproj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Extract the `Usize` value at Position `sizeof(void*)*i` from `x`. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.uproj","kind":"ctor","line":178,"name":"Lean.IR.Expr.uproj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L178-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"Extract the `tobject` value at Position `sizeof(void*)*i` from `x`.\nWe also use `proj` for extracting fields from `struct` return values, and casting `union` return values. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.proj","kind":"ctor","line":175,"name":"Lean.IR.Expr.proj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L175-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reuse\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">reuse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">updtHeader</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"`reuse x in ctor_i ys` instruction in the paper. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reuse","kind":"ctor","line":173,"name":"Lean.IR.Expr.reuse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L173-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reset\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">reset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.reset","kind":"ctor","line":172,"name":"Lean.IR.Expr.reset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></div></div>","info":{"doc":"We use `ctor` mainly for constructing Lean object/tobject values `lean_ctor_object` in the runtime.\nThis instruction is also used to creat `struct` and `union` return values.\nFor `union`, only `i.cidx` is relevant. For `struct`, `i` is irrelevant. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr.ctor","kind":"ctor","line":168,"name":"Lean.IR.Expr.ctor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L168-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr","kind":"inductive","line":167,"name":"Lean.IR.Expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L167-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.type\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.type","kind":"def","line":164,"name":"Lean.IR.CtorInfo.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L164-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isScalar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">isScalar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isScalar","kind":"def","line":161,"name":"Lean.IR.CtorInfo.isScalar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L161-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isRef\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">isRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.isRef","kind":"def","line":158,"name":"Lean.IR.CtorInfo.isRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L158-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprCtorInfo.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprCtorInfo</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprCtorInfo.repr","kind":"def","line":156,"name":"Lean.IR.instReprCtorInfo.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprCtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprCtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprCtorInfo","kind":"instance","line":156,"name":"Lean.IR.instReprCtorInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqCtorInfo.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqCtorInfo</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqCtorInfo.beq","kind":"def","line":156,"name":"Lean.IR.instBEqCtorInfo.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqCtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqCtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqCtorInfo","kind":"instance","line":156,"name":"Lean.IR.instBEqCtorInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedCtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedCtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedCtorInfo","kind":"instance","line":156,"name":"Lean.IR.instInhabitedCtorInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedCtorInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedCtorInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedCtorInfo.default","kind":"def","line":156,"name":"Lean.IR.instInhabitedCtorInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.ssize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">ssize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.ssize","kind":"def","line":155,"name":"Lean.IR.CtorInfo.ssize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.usize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">usize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.usize","kind":"def","line":154,"name":"Lean.IR.CtorInfo.usize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.size\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.size","kind":"def","line":153,"name":"Lean.IR.CtorInfo.size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L153-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.cidx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">cidx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.cidx","kind":"def","line":152,"name":"Lean.IR.CtorInfo.cidx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.name\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.name","kind":"def","line":151,"name":"Lean.IR.CtorInfo.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cidx </span><span class=\"fn\">size </span><span class=\"fn\">usize </span><span class=\"fn\">ssize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\">CtorInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo.mk","kind":"ctor","line":150,"name":"Lean.IR.CtorInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L150-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">CtorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Constructor information.\n\n   - `name` is the Name of the Constructor in Lean.\n   - `cidx` is the Constructor index (aka tag).\n   - `size` is the number of arguments of type `object/tobject`.\n   - `usize` is the number of arguments of type `usize`.\n   - `ssize` is the number of bytes used to store scalar values.\n\nRecall that a Constructor object contains a header, then a sequence of\npointers to other Lean objects, a sequence of `USize` (i.e., `size_t`)\nscalar values, and a sequence of other scalar values. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.CtorInfo","kind":"structure","line":139,"name":"Lean.IR.CtorInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L139-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqLitVal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqLitVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqLitVal","kind":"instance","line":137,"name":"Lean.IR.instBEqLitVal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqLitVal.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqLitVal</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqLitVal.beq","kind":"def","line":137,"name":"Lean.IR.instBEqLitVal.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedLitVal.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedLitVal</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedLitVal.default","kind":"def","line":137,"name":"Lean.IR.instInhabitedLitVal.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedLitVal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedLitVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedLitVal","kind":"instance","line":137,"name":"Lean.IR.instInhabitedLitVal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.str\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.str","kind":"ctor","line":136,"name":"Lean.IR.LitVal.str","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.num\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\">LitVal</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal.num","kind":"ctor","line":135,"name":"Lean.IR.LitVal.num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L135-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">LitVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.LitVal","kind":"inductive","line":134,"name":"Lean.IR.LitVal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L134-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.beq","kind":"def","line":129,"name":"Lean.IR.Arg.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L129-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprArg","kind":"instance","line":127,"name":"Lean.IR.instReprArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprArg.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprArg</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprArg.repr","kind":"def","line":127,"name":"Lean.IR.instReprArg.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqArg","kind":"instance","line":127,"name":"Lean.IR.instBEqArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqArg.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqArg</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqArg.beq","kind":"def","line":127,"name":"Lean.IR.instBEqArg.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedArg","kind":"instance","line":127,"name":"Lean.IR.instInhabitedArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedArg.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedArg</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedArg.default","kind":"def","line":127,"name":"Lean.IR.instInhabitedArg.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.erased","kind":"ctor","line":126,"name":"Lean.IR.Arg.erased","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.var\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg.var","kind":"ctor","line":125,"name":"Lean.IR.Arg.var","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Arguments to applications, constructors, etc.\nWe use `erased` for Lean types, propositions and proofs that have been erased.\nRecall that for a Function `f`, we also generate `f._rarg` which does not take\n`erased` arguments. However, `f._rarg` is only safe to be used in full applications. ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg","kind":"inductive","line":120,"name":"Lean.IR.Arg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L120-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.boxed\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">boxed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.boxed","kind":"def","line":113,"name":"Lean.IR.IRType.boxed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L113-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isErased\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isErased</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isErased","kind":"def","line":109,"name":"Lean.IR.IRType.isErased","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L109-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isDefiniteRef\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isDefiniteRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isDefiniteRef","kind":"def","line":105,"name":"Lean.IR.IRType.isDefiniteRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L105-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isPossibleRef\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isPossibleRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isPossibleRef","kind":"def","line":101,"name":"Lean.IR.IRType.isPossibleRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L101-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isObj\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isObj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isObj","kind":"def","line":95,"name":"Lean.IR.IRType.isObj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L95-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isScalar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">isScalar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.isScalar","kind":"def","line":85,"name":"Lean.IR.IRType.isScalar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L85-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprIRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprIRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprIRType","kind":"instance","line":81,"name":"Lean.IR.instReprIRType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprIRType.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprIRType</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprIRType.repr","kind":"opaque","line":81,"name":"Lean.IR.instReprIRType.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqIRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqIRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqIRType","kind":"instance","line":81,"name":"Lean.IR.instBEqIRType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqIRType.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqIRType</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqIRType.beq","kind":"opaque","line":81,"name":"Lean.IR.instBEqIRType.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIRType.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedIRType</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIRType.default","kind":"def","line":81,"name":"Lean.IR.instInhabitedIRType.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedIRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedIRType","kind":"instance","line":81,"name":"Lean.IR.instInhabitedIRType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.tagged\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">tagged</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.tagged","kind":"ctor","line":80,"name":"Lean.IR.IRType.tagged","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.union\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">union</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leanTypeName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.union","kind":"ctor","line":78,"name":"Lean.IR.IRType.union","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.struct\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">struct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leanTypeName</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.struct","kind":"ctor","line":77,"name":"Lean.IR.IRType.struct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float32\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">float32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float32","kind":"ctor","line":76,"name":"Lean.IR.IRType.float32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.tobject\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">tobject</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.tobject","kind":"ctor","line":75,"name":"Lean.IR.IRType.tobject","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.object\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">object</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.object","kind":"ctor","line":75,"name":"Lean.IR.IRType.object","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.erased","kind":"ctor","line":75,"name":"Lean.IR.IRType.erased","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.usize\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">usize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.usize","kind":"ctor","line":74,"name":"Lean.IR.IRType.usize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint64\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint64","kind":"ctor","line":74,"name":"Lean.IR.IRType.uint64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint32\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint32","kind":"ctor","line":74,"name":"Lean.IR.IRType.uint32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint16\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint16","kind":"ctor","line":74,"name":"Lean.IR.IRType.uint16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint8\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">uint8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.uint8","kind":"ctor","line":74,"name":"Lean.IR.IRType.uint8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span>.<span class=\"name\">float</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType.float","kind":"ctor","line":74,"name":"Lean.IR.IRType.float","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">IRType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Low Level IR types. Most are self explanatory.\n\n   - `usize` represents the C++ `size_t` Type. We have it here\n      because it is 32-bit in 32-bit machines, and 64-bit in 64-bit machines,\n      and we want the C++ backend for our Compiler to generate platform independent code.\n\n   - `erased` for Lean types, propositions and proofs.\n\n   - `object` a pointer to a value in the heap.\n\n   - `tagged` a tagged pointer (i.e., the least significant bit is 1) storing a scalar value.\n\n   - `tobject` an `object` or a `tagged` pointer\n\n   - `struct` and `union` are used to return small values (e.g., `Option`, `Prod`, `Except`)\n      on the stack.\n\nRemark: the RC operations for `tobject` are slightly more expensive because we\nfirst need to test whether the `tobject` is really a pointer or not.\n\nRemark: the Lean runtime assumes that sizeof(void*) == sizeof(sizeT).\nLean cannot be compiled on old platforms where this is not True.\n\nSince values of type `struct` and `union` are only used to return values,\nWe assume they must be used/consumed \"linearly\". We use the term \"linear\" here\nto mean \"exactly once\" in each execution. That is, given `x : S`, where `S` is a struct,\nthen one of the following must hold in each (execution) branch.\n1- `x` occurs only at a single `ret x` instruction. That is, it is being consumed by being returned.\n2- `x` occurs only at a single `ctor`. That is, it is being \"consumed\" by being stored into another `struct/union`.\n3- We extract (aka project) every single field of `x` exactly once. That is, we are consuming `x` by consuming each\n   of one of its components. Minor refinement: we don't need to consume scalar fields or struct/union\n   fields that do not contain object fields.\n","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType","kind":"inductive","line":40,"name":"Lean.IR.IRType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L40-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToStringJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringJoinPointId","kind":"instance","line":38,"name":"Lean.IR.instToStringJoinPointId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instToStringVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instToStringVarId","kind":"instance","line":37,"name":"Lean.IR.instToStringVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Index</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Index.lt","kind":"def","line":35,"name":"Lean.IR.Index.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprJoinPointId.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprJoinPointId</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprJoinPointId.repr","kind":"def","line":33,"name":"Lean.IR.instReprJoinPointId.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprJoinPointId","kind":"instance","line":33,"name":"Lean.IR.instReprJoinPointId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableJoinPointId.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instHashableJoinPointId</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableJoinPointId.hash","kind":"def","line":33,"name":"Lean.IR.instHashableJoinPointId.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instHashableJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableJoinPointId","kind":"instance","line":33,"name":"Lean.IR.instHashableJoinPointId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqJoinPointId","kind":"instance","line":33,"name":"Lean.IR.instBEqJoinPointId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqJoinPointId.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqJoinPointId</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqJoinPointId.beq","kind":"def","line":33,"name":"Lean.IR.instBEqJoinPointId.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedJoinPointId.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedJoinPointId</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedJoinPointId.default","kind":"def","line":33,"name":"Lean.IR.instInhabitedJoinPointId.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedJoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedJoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedJoinPointId","kind":"instance","line":33,"name":"Lean.IR.instInhabitedJoinPointId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.idx","kind":"def","line":32,"name":"Lean.IR.JoinPointId.idx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId.mk","kind":"ctor","line":31,"name":"Lean.IR.JoinPointId.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">JoinPointId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Join point identifier ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId","kind":"structure","line":30,"name":"Lean.IR.JoinPointId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L30-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprVarId.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprVarId</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprVarId.repr","kind":"def","line":28,"name":"Lean.IR.instReprVarId.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instReprVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instReprVarId","kind":"instance","line":28,"name":"Lean.IR.instReprVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instHashableVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableVarId","kind":"instance","line":28,"name":"Lean.IR.instHashableVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableVarId.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instHashableVarId</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instHashableVarId.hash","kind":"def","line":28,"name":"Lean.IR.instHashableVarId.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqVarId.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqVarId</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqVarId.beq","kind":"def","line":28,"name":"Lean.IR.instBEqVarId.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instBEqVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instBEqVarId","kind":"instance","line":28,"name":"Lean.IR.instBEqVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarId.default\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedVarId</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarId.default","kind":"def","line":28,"name":"Lean.IR.instInhabitedVarId.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">instInhabitedVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.instInhabitedVarId","kind":"instance","line":28,"name":"Lean.IR.instInhabitedVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.idx","kind":"def","line":27,"name":"Lean.IR.VarId.idx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId.mk","kind":"ctor","line":26,"name":"Lean.IR.VarId.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">VarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Variable identifier ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId","kind":"structure","line":25,"name":"Lean.IR.VarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L25-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Index</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.Index","kind":"def","line":24,"name":"Lean.IR.Index","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FunId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Function identifier ","docLink":"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId","kind":"def","line":22,"name":"Lean.IR.FunId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/Basic.lean#L22-L23"}}],"imports":["Lean.Compiler.ExternAttr"],"instances":[{"className":"Inhabited","name":"Lean.IR.instInhabitedVarId","typeNames":["Lean.IR.VarId"]},{"className":"BEq","name":"Lean.IR.instBEqVarId","typeNames":["Lean.IR.VarId"]},{"className":"Hashable","name":"Lean.IR.instHashableVarId","typeNames":["Lean.IR.VarId"]},{"className":"Repr","name":"Lean.IR.instReprVarId","typeNames":["Lean.IR.VarId"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedJoinPointId","typeNames":["Lean.IR.JoinPointId"]},{"className":"BEq","name":"Lean.IR.instBEqJoinPointId","typeNames":["Lean.IR.JoinPointId"]},{"className":"Hashable","name":"Lean.IR.instHashableJoinPointId","typeNames":["Lean.IR.JoinPointId"]},{"className":"Repr","name":"Lean.IR.instReprJoinPointId","typeNames":["Lean.IR.JoinPointId"]},{"className":"ToString","name":"Lean.IR.instToStringVarId","typeNames":["Lean.IR.VarId"]},{"className":"ToString","name":"Lean.IR.instToStringJoinPointId","typeNames":["Lean.IR.JoinPointId"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedIRType","typeNames":["Lean.IR.IRType"]},{"className":"BEq","name":"Lean.IR.instBEqIRType","typeNames":["Lean.IR.IRType"]},{"className":"Repr","name":"Lean.IR.instReprIRType","typeNames":["Lean.IR.IRType"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedArg","typeNames":["Lean.IR.Arg"]},{"className":"BEq","name":"Lean.IR.instBEqArg","typeNames":["Lean.IR.Arg"]},{"className":"Repr","name":"Lean.IR.instReprArg","typeNames":["Lean.IR.Arg"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedLitVal","typeNames":["Lean.IR.LitVal"]},{"className":"BEq","name":"Lean.IR.instBEqLitVal","typeNames":["Lean.IR.LitVal"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedCtorInfo","typeNames":["Lean.IR.CtorInfo"]},{"className":"BEq","name":"Lean.IR.instBEqCtorInfo","typeNames":["Lean.IR.CtorInfo"]},{"className":"Repr","name":"Lean.IR.instReprCtorInfo","typeNames":["Lean.IR.CtorInfo"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedExpr","typeNames":["Lean.IR.Expr"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedParam","typeNames":["Lean.IR.Param"]},{"className":"Repr","name":"Lean.IR.instReprParam","typeNames":["Lean.IR.Param"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedFnBody","typeNames":["Lean.IR.FnBody"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedAlt","typeNames":["Lean.IR.Alt"]},{"className":"Inhabited","name":"Lean.IR.instInhabitedDecl","typeNames":["Lean.IR.Decl"]},{"className":"Lean.IR.AlphaEqv","name":"Lean.IR.instAlphaEqvVarId","typeNames":["Lean.IR.VarId"]},{"className":"Lean.IR.AlphaEqv","name":"Lean.IR.instAlphaEqvArg","typeNames":["Lean.IR.Arg"]},{"className":"Lean.IR.AlphaEqv","name":"Lean.IR.instAlphaEqvArrayArg","typeNames":["Array"]},{"className":"Lean.IR.AlphaEqv","name":"Lean.IR.instAlphaEqvExpr","typeNames":["Lean.IR.Expr"]},{"className":"BEq","name":"Lean.IR.instBEqFnBody","typeNames":["Lean.IR.FnBody"]}],"name":"Lean.Compiler.IR.Basic"}