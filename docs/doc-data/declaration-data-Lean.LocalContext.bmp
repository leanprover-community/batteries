{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.replaceFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">replaceFVarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.replaceFVarId","kind":"def","line":658,"name":"Lean.LocalContext.replaceFVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L658-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.replaceFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">replaceFVarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.replaceFVarId","kind":"def","line":652,"name":"Lean.LocalDecl.replaceFVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L652-L656"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.getLocalHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">getLocalHyps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Return local hypotheses which are not \"implementation detail\", as `Expr`s. ","docLink":"./Lean/LocalContext.html#Lean.getLocalHyps","kind":"def","line":645,"name":"Lean.getLocalHyps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L645-L650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instMonadLCtxOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadLCtxOfMonadLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instMonadLCtxOfMonadLift","kind":"instance","line":642,"name":"Lean.instMonadLCtxOfMonadLift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L642-L643"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.MonadLCtx.getLCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadLCtx</span>.<span class=\"name\">getLCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.MonadLCtx.getLCtx","kind":"def","line":638,"name":"Lean.MonadLCtx.getLCtx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L638-L638"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.MonadLCtx.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadLCtx</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getLCtx</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.MonadLCtx.mk","kind":"ctor","line":637,"name":"Lean.MonadLCtx.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L637-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.MonadLCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadLCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Class used to denote that `m` has a local context. ","docLink":"./Lean/LocalContext.html#Lean.MonadLCtx","kind":"class","line":636,"name":"Lean.MonadLCtx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L636-L638"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.sortFVarsByContextOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">sortFVarsByContextOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"Sort the given `FVarId`s by the order in which they appear in `lctx`. If any of\nthe `FVarId`s do not appear in `lctx`, the result is unspecified.\n","docLink":"./Lean/LocalContext.html#Lean.LocalContext.sortFVarsByContextOrder","kind":"def","line":623,"name":"Lean.LocalContext.sortFVarsByContextOrder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L623-L632"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.getRoundtrippingUserName?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getRoundtrippingUserName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Given an `FVarId`, this function returns the corresponding user name,\nbut only if the name can be used to recover the original FVarId.\n","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getRoundtrippingUserName?","kind":"def","line":613,"name":"Lean.LocalContext.getRoundtrippingUserName?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L613-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.sanitizeNames\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">sanitizeNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <a href=\"./Lean/Hygiene.html#Lean.NameSanitizerState\">NameSanitizerState</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span></div></div>","info":{"doc":"If option `pp.sanitizeNames` is set to `true`, add tombstone to shadowed local declaration names and ones contains macroscopes. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.sanitizeNames","kind":"def","line":596,"name":"Lean.LocalContext.sanitizeNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L596-L611"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.all\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if all declarations in `lctx` satisfy `p`. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.all","kind":"def","line":592,"name":"Lean.LocalContext.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L592-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.any\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if `lctx` contains a local declaration satisfying `p`. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.any","kind":"def","line":588,"name":"Lean.LocalContext.any","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L588-L590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.allM\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">allM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.allM","kind":"def","line":583,"name":"Lean.LocalContext.allM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L583-L586"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.anyM\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">anyM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.anyM","kind":"def","line":578,"name":"Lean.LocalContext.anyM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L578-L581"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.mkForall\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">mkForall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedLetOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Creates the expression `(x₁:α₁) → .. → (xₙ:αₙ) → b` for free variables `xs = #[x₁, .., xₙ]`,\nsuitably abstracting `b` and the types for each of the `xᵢ`, `αᵢ`. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkForall","kind":"def","line":573,"name":"Lean.LocalContext.mkForall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L573-L576"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.mkLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">mkLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedLetOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Creates the expression `fun x₁ .. xₙ => b` for free variables `xs = #[x₁, .., xₙ]`,\nsuitably abstracting `b` and the types for each of the `xᵢ`. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLambda","kind":"def","line":568,"name":"Lean.LocalContext.mkLambda","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L568-L571"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.mkBinding\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">mkBinding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLambda</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedLetOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalizeNondepLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkBinding","kind":"def","line":544,"name":"Lean.LocalContext.mkBinding","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L544-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOf\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isSubPrefixOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₁ </span><span class=\"fn\">lctx₂</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exceptFVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Given `lctx₁ - exceptFVars` of the form `(x_1 : A_1) ... (x_n : A_n)`, then return true\niff there is a local context `B_1* (x_1 : A_1) ... B_n* (x_n : A_n)` which is a prefix\nof `lctx₂` where `B_i`'s are (possibly empty) sequences of local declarations. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOf","kind":"def","line":538,"name":"Lean.LocalContext.isSubPrefixOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L538-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOfAux\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isSubPrefixOfAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exceptFVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOfAux","kind":"opaque","line":524,"name":"Lean.LocalContext.isSubPrefixOfAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L524-L536"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.findDeclRev?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">findDeclRev?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclRev?","kind":"def","line":521,"name":"Lean.LocalContext.findDeclRev?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L521-L522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.findDecl?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">findDecl?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDecl?","kind":"def","line":518,"name":"Lean.LocalContext.findDecl?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L518-L519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.size\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.size","kind":"def","line":515,"name":"Lean.LocalContext.size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L515-L516"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.foldr\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldr","kind":"def","line":512,"name":"Lean.LocalContext.foldr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L512-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.foldl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldl","kind":"def","line":509,"name":"Lean.LocalContext.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L509-L510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.instForInLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">instForInLocalDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.instForInLocalDecl","kind":"instance","line":504,"name":"Lean.LocalContext.instForInLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L504-L507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.findDeclRevM?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">findDeclRevM?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclRevM?","kind":"def","line":499,"name":"Lean.LocalContext.findDeclRevM?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L499-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.findDeclM?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">findDeclM?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclM?","kind":"def","line":494,"name":"Lean.LocalContext.findDeclM?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L494-L497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.forM\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.forM","kind":"def","line":489,"name":"Lean.LocalContext.forM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L489-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.foldrM\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">foldrM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldrM","kind":"def","line":484,"name":"Lean.LocalContext.foldrM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L484-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.foldlM\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldlM","kind":"def","line":479,"name":"Lean.LocalContext.foldlM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L479-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.getAt?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getAt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getAt?","kind":"def","line":476,"name":"Lean.LocalContext.getAt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L476-L477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.numIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">numIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.numIndices","kind":"def","line":472,"name":"Lean.LocalContext.numIndices","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L472-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.setBinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">setBinderInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bi</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setBinderInfo","kind":"def","line":469,"name":"Lean.LocalContext.setBinderInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L469-L470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.setKind\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">setKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"Set the kind of the given fvar.\n","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setKind","kind":"def","line":462,"name":"Lean.LocalContext.setKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L462-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.modifyLocalDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">modifyLocalDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"Low-level function for updating every declaration in the local context.\nAssumptions about `f`, the resulting nested expressions must be definitionally equal to their original values,\nand neither the `index` nor `fvarId` are modified.\n","docLink":"./Lean/LocalContext.html#Lean.LocalContext.modifyLocalDecls","kind":"def","line":448,"name":"Lean.LocalContext.modifyLocalDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L448-L460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.modifyLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">modifyLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"Low-level function for updating the local context.\nAssumptions about `f`, the resulting nested expressions must be definitionally equal to their original values,\nand neither the `index` nor `fvarId` are modified.\n","docLink":"./Lean/LocalContext.html#Lean.LocalContext.modifyLocalDecl","kind":"def","line":432,"name":"Lean.LocalContext.modifyLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L432-L446"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.renameUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">renameUserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fromName </span><span class=\"fn\">toName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.renameUserName","kind":"def","line":421,"name":"Lean.LocalContext.renameUserName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L421-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.setUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">setUserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setUserName","kind":"def","line":414,"name":"Lean.LocalContext.setUserName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L414-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.lastDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">lastDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.lastDecl","kind":"def","line":411,"name":"Lean.LocalContext.lastDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L411-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.getUnusedName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getUnusedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestion</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getUnusedName","kind":"def","line":406,"name":"Lean.LocalContext.getUnusedName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L406-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.usesUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">usesUserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.usesUserName","kind":"def","line":398,"name":"Lean.LocalContext.usesUserName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L398-L399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.findFromUserName?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">findFromUserName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findFromUserName?","kind":"def","line":392,"name":"Lean.LocalContext.findFromUserName?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L392-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.pop\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">pop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.pop","kind":"def","line":380,"name":"Lean.LocalContext.pop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L380-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">erase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.erase","kind":"def","line":368,"name":"Lean.LocalContext.erase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L368-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.getFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Return all of the free variables in the given context. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVars","kind":"def","line":358,"name":"Lean.LocalContext.getFVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L358-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.getFVarIds\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVarIds","kind":"def","line":353,"name":"Lean.LocalContext.getFVarIds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L353-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.containsFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">containsFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns true when the lctx contains the free variable `e`.\nPanics if `e` is not an fvar. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.containsFVar","kind":"def","line":348,"name":"Lean.LocalContext.containsFVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L348-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.contains","kind":"def","line":345,"name":"Lean.LocalContext.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L345-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.getFVar!\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">getFVar!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"Gets the declaration for expression `e` in the local context.\nIf `e` is not a free variable or not present then panics. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVar!","kind":"def","line":340,"name":"Lean.LocalContext.getFVar!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L340-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.get!\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">get!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.get!","kind":"def","line":335,"name":"Lean.LocalContext.get!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L335-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.findFVar?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">findFVar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findFVar?","kind":"def","line":332,"name":"Lean.LocalContext.findFVar?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L332-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.find?","kind":"def","line":328,"name":"Lean.LocalContext.find?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L328-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.addDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">addDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"Low level API for adding a local declaration.\nDo not use directly. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.addDecl","kind":"def","line":317,"name":"Lean.LocalContext.addDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L317-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.mkAuxDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">mkAuxDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fullName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"Low level API for auxiliary declarations. Do not use directly. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkAuxDecl","kind":"def","line":308,"name":"Lean.LocalContext.mkAuxDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L308-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.mkLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">mkLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nondep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a> := <a href=\"./Init/Prelude.html#Inhabited.default\">default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"Low level API for let declarations. Do not use directly.","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLetDecl","kind":"def","line":296,"name":"Lean.LocalContext.mkLetDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L296-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.mkLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">mkLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bi</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a> := <a href=\"./Lean/Expr.html#Lean.BinderInfo.default\">BinderInfo.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a> := <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind.default\">LocalDeclKind.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"Low level API for creating local declarations (`LocalDecl.cdecl`).\nIt is used to implement actions in the monads `Elab` and `Tactic`.\nIt should not be used directly since the argument `(fvarId : FVarId)` is\nassumed to be unique. You can create a unique fvarId with `mkFreshFVarId`. ","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLocalDecl","kind":"def","line":280,"name":"Lean.LocalContext.mkLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L280-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.isEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isEmpty","kind":"def","line":276,"name":"Lean.LocalContext.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L276-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.empty","kind":"def","line":274,"name":"Lean.LocalContext.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.mkEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">mkEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkEmpty","kind":"def","line":271,"name":"Lean.LocalContext.mkEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L271-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instInhabitedLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalContext","kind":"instance","line":267,"name":"Lean.instInhabitedLocalContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L267-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instInhabitedLocalContext.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLocalContext</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalContext.default","kind":"def","line":267,"name":"Lean.instInhabitedLocalContext.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L267-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.auxDeclToFullName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">auxDeclToFullName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.auxDeclToFullName","kind":"def","line":266,"name":"Lean.LocalContext.auxDeclToFullName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L266-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.decls","kind":"def","line":265,"name":"Lean.LocalContext.decls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L265-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.fvarIdToDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">fvarIdToDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.fvarIdToDecl","kind":"def","line":264,"name":"Lean.LocalContext.fvarIdToDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L264-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarIdToDecl</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">auxDeclToFullName</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mk","kind":"ctor","line":263,"name":"Lean.LocalContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L263-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A LocalContext is an ordered set of local variable declarations.\nIt is used to store the free variables (also known as local constants) that\nare in scope. It also maps free variables corresponding to auxiliary declarations\n(recursive references and `where` and `let rec` bindings) to their fully-qualified global names.\n\nWhen inspecting a goal or expected type in the infoview, the local\ncontext is all of the variables above the `⊢` symbol.\n ","docLink":"./Lean/LocalContext.html#Lean.LocalContext","kind":"structure","line":255,"name":"Lean.LocalContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L255-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.setKind\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">setKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></span></div></div>","info":{"doc":"Set the kind of a `LocalDecl`.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setKind","kind":"def","line":244,"name":"Lean.LocalDecl.setKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L244-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.hasExprMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">hasExprMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.hasExprMVar","kind":"def","line":240,"name":"Lean.LocalDecl.hasExprMVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L240-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.toExpr","kind":"def","line":237,"name":"Lean.LocalDecl.toExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L237-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.setBinderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">setBinderInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setBinderInfo","kind":"def","line":233,"name":"Lean.LocalDecl.setBinderInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L233-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.setUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">setUserName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setUserName","kind":"def","line":229,"name":"Lean.LocalDecl.setUserName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L229-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.isNondep\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">isNondep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if this is an `ldecl` with `nondep := true`. ","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isNondep","kind":"def","line":224,"name":"Lean.LocalDecl.isNondep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L224-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.setNondep\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">setNondep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></span></div></div>","info":{"doc":"Sets the `nondep` flag of an `ldecl`, otherwise returns `cdecl`s unchanged.\n\nThis is a low-level function, and it is the responsibility of the caller to ensure that\ntransitions of `nondep` are valid.\n\nRules:\n- If the declaration is not under the caller's control, then setting `nondep := false` must not be done.\n  General nondependent `ldecl`s should be treated like `cdecl`s.\n  See also the docstring for `LocalDecl.ldecl` about the `value` not necessarily being type correct.\n- Setting `nondep := true` is usually fine.\n  - Caution: be sure any relevant caches are cleared so that the value associated to this `FVarId` does not leak.\n  - Caution: be sure that metavariables dependent on this declaration created before and after the transition are not mixed,\n    since unification does not check \"`nondep`-compatibility\" of local contexts when assigning metavariables.\n\nFor example, setting `nondep := false` is fine from within a telescope combinator, to update the local context\nright before calling `mkLetFVars`:\n```lean\nlet lctx ← getLCtx\nletTelescope e fun xs b => do\n  let lctx' ← xs.foldlM (init := lctx) fun lctx' x => do\n    let decl ← x.fvarId!.getDecl\n    -- Clear the flag if it's not a prop.\n    let decl' := decl.setNondep <| ← pure decl.isNondep <&&> Meta.isProp decl.type\n    pure <| lctx'.addDecl decl'\n  withLCtx' lctx' do\n    mkLetFVars (usedLetOnly := false) (generalizeNondepLet := false) xs b\n```\n1. The declarations for `xs` are in the control of this metaprogram.\n2. `mkLetFVars` does make use of `MetaM` caches.\n3. Even if `e` has metavariables, these do not include `xs` in their contexts,\n   so the change of the `nondep` flag does not cause any issues in the `abstractM` system used by `mkLetFVars`.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setNondep","kind":"def","line":187,"name":"Lean.LocalDecl.setNondep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L187-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.setValue\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">setValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></span></div></div>","info":{"doc":"Sets the value of an `ldecl`, otherwise returns `cdecl`s unchanged. ","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setValue","kind":"def","line":182,"name":"Lean.LocalDecl.setValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L182-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.hasValue\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">hasValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\">(<span class=\"fn\">allowNondep</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>) → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Returns `true` if `LocalDecl.value?` is not `none`.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.hasValue","kind":"def","line":175,"name":"Lean.LocalDecl.hasValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L175-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.value\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\">(<span class=\"fn\">allowNondep</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>) → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></div></div>","info":{"doc":"Returns the value of the `ldecl` if it has a visible value.\n\nIf `allowNondep` is true, then allows nondependent `ldecl`s, whose values are normally hidden.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.value","kind":"def","line":164,"name":"Lean.LocalDecl.value","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L164-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.value?\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">value?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\">(<span class=\"fn\">allowNondep</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>","info":{"doc":"Returns the value of the `ldecl` if it has a visible value.\n\nIf `allowNondep` is true, then allows nondependent `ldecl`s, whose values are normally hidden.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.value?","kind":"def","line":154,"name":"Lean.LocalDecl.value?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L154-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.isImplementationDetail\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">isImplementationDetail</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Is the local declaration an implementation-detail hypothesis\n(including auxiliary declarations)?\n","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isImplementationDetail","kind":"def","line":147,"name":"Lean.LocalDecl.isImplementationDetail","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L147-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.isAuxDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">isAuxDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isAuxDecl","kind":"def","line":144,"name":"Lean.LocalDecl.isAuxDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L144-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.kind","kind":"def","line":141,"name":"Lean.LocalDecl.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.binderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">binderInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.binderInfo","kind":"def","line":137,"name":"Lean.LocalDecl.binderInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L137-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.setType\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">setType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setType","kind":"def","line":133,"name":"Lean.LocalDecl.setType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L133-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.type\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"The type of the variable. ","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.type","kind":"def","line":128,"name":"Lean.LocalDecl.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L128-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.userName\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">userName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"The pretty-printable name of the variable. ","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.userName","kind":"def","line":123,"name":"Lean.LocalDecl.userName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L123-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"The unique id of the free variable. ","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.fvarId","kind":"def","line":118,"name":"Lean.LocalDecl.fvarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L118-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.setIndex\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">setIndex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setIndex","kind":"def","line":114,"name":"Lean.LocalDecl.setIndex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L114-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.index\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The position of the decl in the local context. ","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.index","kind":"def","line":109,"name":"Lean.LocalDecl.index","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L109-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.isLet\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">isLet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\">(<span class=\"fn\">allowNondep</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>) → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Returns true if this is an `ldecl` with a visible value.\n\nIf `allowNondep` is true then includes `ldecl`s with `nondep := true`, whose values are normally hidden.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isLet","kind":"def","line":99,"name":"Lean.LocalDecl.isLet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L99-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.binderInfoEx\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">binderInfoEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.binderInfoEx","kind":"def","line":93,"name":"Lean.LocalDecl.binderInfoEx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L93-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.mkLetDeclEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLetDeclEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">index</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.mkLetDeclEx","kind":"def","line":90,"name":"Lean.mkLetDeclEx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L90-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.mkLocalDeclEx\"><span class=\"name\">Lean</span>.<span class=\"name\">mkLocalDeclEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">index</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bi</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.mkLocalDeclEx","kind":"def","line":87,"name":"Lean.mkLocalDeclEx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L87-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instInhabitedLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLocalDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalDecl","kind":"instance","line":85,"name":"Lean.instInhabitedLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instInhabitedLocalDecl.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLocalDecl</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalDecl.default","kind":"def","line":85,"name":"Lean.instInhabitedLocalDecl.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.ldecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">ldecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">index</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nondep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"A let-bound free variable, with a value `value : Expr`.\nIf `nondep := false`, then the variable is definitionally equal to its value.\nIf `nondep := true`, then the variable has an opaque value; we call these \"have-bound free variables.\"\n`Lean.LocalContext.mkBinding` creates let/have expressions from `ldecl`s.\n\n**Important:** The `nondep := true` case is subtle; it is not merely an opaque `ldecl`!\n- In most contexts, nondependent `ldecl`s should be treated like `cdecl`s.\n  For example, suppose we have a tactic goal `x : α := v (nondep) ⊢ b`.\n  It would be incorrect for `revert x` to produce the goal `⊢ have x : α := v; b`,\n  since this would be saying \"to prove `b` without knowledge of the value of `x`, it suffices to\n  prove `have x : α := v; b` for this particular value of `x`.\"\n  Instead, `revert x` *must* produce the goal `⊢ ∀ x : α, b`.\n  Furthermore, given a goal `⊢ have x : α := v; b`, the `intro x` tactic should yield a *dependent* `ldecl`,\n  since users expect to be able to make use of the value of `x`,\n  plus, as discussed, if `intro` yielded a nondep `ldecl` then `intro x; revert x` would convert the goal into a forall, not a `have`.\n- Also: `value` might not be type correct. Metaprograms may decide to pretend that all `nondep := true`\n  `ldecl`s are `cdecl`s (for example, when reverting variables). As a consequence, nondep `ldecl`s may\n  have type-incorrect values. This design decision allows metaprograms to not have to think about nondep `ldecl`s,\n  so long as `LocalDecl` values are consumed through `LocalDecl.isLet` and `LocalDecl.value?` with `(allowNondep := false)`.\n  **Rule:** never use `(generalizeNondepLet := false)` in `mkBinding`-family functions\n  on a local context entry you did not create.\n  See `LocalDecl.setNondep` for some additional discussion.\n- Where then do nondep ldecls come from? Common functions are `Meta.mapLetDecl`, `Meta.withLetDecl`, and `Meta.letTelescope`.\n  The `have` term syntax makes use of a nondep ldecl as well.\n\nTherefore, `nondep := true` should be used with consideration.\nIts primary use is in metaprograms that enter `let`/`have` telescopes and wish to reconstruct them. ","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.ldecl","kind":"ctor","line":57,"name":"Lean.LocalDecl.ldecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L57-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl.cdecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span>.<span class=\"name\">cdecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">index</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bi</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>","info":{"doc":"A local variable without any value.\n`Lean.LocalContext.mkBinding` creates lambdas or foralls from `cdecl`s. ","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.cdecl","kind":"ctor","line":54,"name":"Lean.LocalDecl.cdecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A declaration for a `LocalContext`. This is used to register which free variables are in scope.\n\nSee `LocalDecl.index`, `LocalDecl.fvarId`, `LocalDecl.userName`, `LocalDecl.type` for accessors for\narguments common to both constructors.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDecl","kind":"inductive","line":48,"name":"Lean.LocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L48-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instHashableLocalDeclKind.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">instHashableLocalDeclKind</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instHashableLocalDeclKind.hash","kind":"def","line":46,"name":"Lean.instHashableLocalDeclKind.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instHashableLocalDeclKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instHashableLocalDeclKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instHashableLocalDeclKind","kind":"instance","line":46,"name":"Lean.instHashableLocalDeclKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instDecidableEqLocalDeclKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instDecidableEqLocalDeclKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instDecidableEqLocalDeclKind","kind":"instance","line":46,"name":"Lean.instDecidableEqLocalDeclKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instReprLocalDeclKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprLocalDeclKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instReprLocalDeclKind","kind":"instance","line":46,"name":"Lean.instReprLocalDeclKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instReprLocalDeclKind.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprLocalDeclKind</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instReprLocalDeclKind.repr","kind":"def","line":46,"name":"Lean.instReprLocalDeclKind.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instInhabitedLocalDeclKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLocalDeclKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalDeclKind.default","kind":"def","line":46,"name":"Lean.instInhabitedLocalDeclKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.instInhabitedLocalDeclKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedLocalDeclKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalDeclKind","kind":"instance","line":46,"name":"Lean.instInhabitedLocalDeclKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDeclKind.auxDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDeclKind</span>.<span class=\"name\">auxDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></div></div>","info":{"doc":"Auxiliary local declaration for recursive calls.\nThe behavior is similar to `implDetail`.\n\nFor example: `def foo (n : Nat) : Nat := _` adds the local declaration\n`foo : Nat → Nat` to allow recursive calls.\nThis declaration has the `auxDecl` kind.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDeclKind.auxDecl","kind":"ctor","line":37,"name":"Lean.LocalDeclKind.auxDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L37-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDeclKind.implDetail\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDeclKind</span>.<span class=\"name\">implDetail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></div></div>","info":{"doc":"Invisible to type class search or tactics, and hidden in the goal display.\n\nThis kind is used for temporary variables in macros.\nFor example: `return (← foo) + bar` expands to\n`foo >>= fun __tmp => pure (__tmp + bar)`,\nwhere `__tmp` has the `implDetail` kind.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDeclKind.implDetail","kind":"ctor","line":28,"name":"Lean.LocalDeclKind.implDetail","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L28-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDeclKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDeclKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\">LocalDeclKind</a></div></div>","info":{"doc":"Participates fully in type class search, tactics, and is shown even if inaccessible.\n\nFor example: the `x` in `fun x => _` has the default kind.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDeclKind.default","kind":"ctor","line":22,"name":"Lean.LocalDeclKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L22-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/LocalContext.html#Lean.LocalDeclKind\"><span class=\"name\">Lean</span>.<span class=\"name\">LocalDeclKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Whether a local declaration should be found by type class search, tactics, etc.\nand shown in the goal display.\n","docLink":"./Lean/LocalContext.html#Lean.LocalDeclKind","kind":"inductive","line":17,"name":"Lean.LocalDeclKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/LocalContext.lean#L17-L46"}}],"imports":["Init.Data.Nat.Control","Lean.Data.PersistentArray","Lean.Expr"],"instances":[{"className":"Inhabited","name":"Lean.instInhabitedLocalDeclKind","typeNames":["Lean.LocalDeclKind"]},{"className":"Repr","name":"Lean.instReprLocalDeclKind","typeNames":["Lean.LocalDeclKind"]},{"className":"Decidable","name":"Lean.instDecidableEqLocalDeclKind","typeNames":["Eq"]},{"className":"Hashable","name":"Lean.instHashableLocalDeclKind","typeNames":["Lean.LocalDeclKind"]},{"className":"Inhabited","name":"Lean.instInhabitedLocalDecl","typeNames":["Lean.LocalDecl"]},{"className":"Inhabited","name":"Lean.instInhabitedLocalContext","typeNames":["Lean.LocalContext"]},{"className":"ForIn","name":"Lean.LocalContext.instForInLocalDecl","typeNames":["Lean.LocalContext","Lean.LocalDecl"]},{"className":"Lean.MonadLCtx","name":"Lean.instMonadLCtxOfMonadLift","typeNames":[]}],"name":"Lean.LocalContext"}