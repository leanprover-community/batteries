{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dvd_bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod\">bmod_dot_sub_dot_bmod</a> <span class=\"fn\">m</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod","kind":"theorem","line":444,"name":"Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L444-L462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"The difference between the balanced mod of a dot product,\nand the dot product with balanced mod applied to each entry of the left factor.\n","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod","kind":"def","line":437,"name":"Lean.Omega.IntList.bmod_dot_sub_dot_bmod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L437-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_length\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod\">bmod</a></span> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_length","kind":"theorem","line":434,"name":"Lean.Omega.IntList.bmod_length","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L434-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"Apply \"balanced mod\" to each entry in an `IntList`. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod","kind":"def","line":431,"name":"Lean.Omega.IntList.bmod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L431-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_sdiv_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_sdiv_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a></span> <span class=\"fn\">d</span>)</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_sdiv_left","kind":"theorem","line":418,"name":"Lean.Omega.IntList.dot_sdiv_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L418-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_dot\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">nil_dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_dot","kind":"theorem","line":416,"name":"Lean.Omega.IntList.nil_dot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L416-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_eq_zero_of_left_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero","kind":"theorem","line":406,"name":"Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L406-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd_dot_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd_dot_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd_dot_left","kind":"theorem","line":403,"name":"Lean.Omega.IntList.gcd_dvd_dot_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L403-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_mod_gcd_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_mod_gcd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_mod_gcd_left","kind":"theorem","line":391,"name":"Lean.Omega.IntList.dot_mod_gcd_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L391-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_zero","kind":"theorem","line":388,"name":"Lean.Omega.IntList.gcd_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L388-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span>)</span> → <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">g</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_iff","kind":"theorem","line":372,"name":"Lean.Omega.IntList.gcd_eq_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L372-L384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_gcd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dvd_gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_gcd","kind":"theorem","line":357,"name":"Lean.Omega.IntList.dvd_gcd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L357-L370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd","kind":"theorem","line":347,"name":"Lean.Omega.IntList.gcd_dvd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L347-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right'","kind":"theorem","line":343,"name":"Lean.Omega.IntList.gcd_cons_div_right'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L343-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right","kind":"theorem","line":339,"name":"Lean.Omega.IntList.gcd_cons_div_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L339-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_left","kind":"theorem","line":335,"name":"Lean.Omega.IntList.gcd_cons_div_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L335-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons","kind":"theorem","line":333,"name":"Lean.Omega.IntList.gcd_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L333-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_nil","kind":"theorem","line":332,"name":"Lean.Omega.IntList.gcd_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L332-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The gcd of the absolute values of the entries of an `IntList`. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd","kind":"def","line":329,"name":"Lean.Omega.IntList.gcd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L329-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">g</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_cons","kind":"theorem","line":327,"name":"Lean.Omega.IntList.sdiv_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L327-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_nil","kind":"theorem","line":326,"name":"Lean.Omega.IntList.sdiv_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L326-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"Division of an `IntList` by a integer. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv","kind":"def","line":323,"name":"Lean.Omega.IntList.sdiv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L323-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_of_left_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_of_left_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_of_left_zero","kind":"theorem","line":310,"name":"Lean.Omega.IntList.dot_of_left_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L310-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_smul_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_smul_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_smul_left","kind":"theorem","line":307,"name":"Lean.Omega.IntList.dot_smul_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L307-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_neg_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_neg_left","kind":"theorem","line":304,"name":"Lean.Omega.IntList.dot_neg_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L304-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_distrib_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys </span><span class=\"fn\">zs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_distrib_left","kind":"theorem","line":301,"name":"Lean.Omega.IntList.dot_distrib_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L301-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_set_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_set_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a></span> <span class=\"fn\">i</span> <span class=\"fn\">z</span>)</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_set_left","kind":"theorem","line":281,"name":"Lean.Omega.IntList.dot_set_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L281-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_cons₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_cons₂","kind":"theorem","line":276,"name":"Lean.Omega.IntList.dot_cons₂","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L276-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_right","kind":"theorem","line":275,"name":"Lean.Omega.IntList.dot_nil_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_left","kind":"theorem","line":274,"name":"Lean.Omega.IntList.dot_nil_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"The dot product of two `IntList`s. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot","kind":"def","line":268,"name":"Lean.Omega.IntList.dot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L268-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_smul","kind":"theorem","line":262,"name":"Lean.Omega.IntList.sum_smul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L262-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_neg","kind":"theorem","line":256,"name":"Lean.Omega.IntList.sum_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L256-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_add","kind":"theorem","line":248,"name":"Lean.Omega.IntList.sum_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L248-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> <span class=\"fn\">xs</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_cons","kind":"theorem","line":245,"name":"Lean.Omega.IntList.sum_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L245-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_nil","kind":"theorem","line":244,"name":"Lean.Omega.IntList.sum_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L244-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"The sum of the entries of an `IntList`. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum","kind":"def","line":241,"name":"Lean.Omega.IntList.sum","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L241-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_smul_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>)</div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_smul_left","kind":"theorem","line":233,"name":"Lean.Omega.IntList.mul_smul_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L233-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">ys</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_eq_add_neg","kind":"theorem","line":225,"name":"Lean.Omega.IntList.sub_eq_add_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L225-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_neg_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>)</div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_neg_left","kind":"theorem","line":216,"name":"Lean.Omega.IntList.mul_neg_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L216-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_distrib_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys </span><span class=\"fn\">zs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_distrib_left","kind":"theorem","line":199,"name":"Lean.Omega.IntList.mul_distrib_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L199-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo_eq_smul_add_smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">combo_eq_smul_add_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo\">combo</a> <span class=\"fn\">a</span> <span class=\"fn\">xs</span> <span class=\"fn\">b</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.combo_eq_smul_add_smul","kind":"theorem","line":188,"name":"Lean.Omega.IntList.combo_eq_smul_add_smul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L188-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">combo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"A linear combination of two `IntList`s. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.combo","kind":"def","line":184,"name":"Lean.Omega.IntList.combo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L184-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_cons","kind":"theorem","line":182,"name":"Lean.Omega.IntList.smul_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_nil","kind":"theorem","line":181,"name":"Lean.Omega.IntList.smul_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L181-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_get","kind":"theorem","line":177,"name":"Lean.Omega.IntList.smul_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L177-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">xs</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_def","kind":"theorem","line":175,"name":"Lean.Omega.IntList.smul_def","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L175-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instHMulInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instHMulInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMul\">HMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instHMulInt","kind":"instance","line":172,"name":"Lean.Omega.IntList.instHMulInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L172-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"Implementation of scalar multiplication by an integer on `IntList`. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul","kind":"def","line":168,"name":"Lean.Omega.IntList.smul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L168-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_def","kind":"theorem","line":164,"name":"Lean.Omega.IntList.sub_def","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L164-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instSub","kind":"instance","line":162,"name":"Lean.Omega.IntList.instSub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L162-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"Implementation of subtraction on `IntList`. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub","kind":"def","line":158,"name":"Lean.Omega.IntList.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L158-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_cons","kind":"theorem","line":156,"name":"Lean.Omega.IntList.neg_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_nil","kind":"theorem","line":155,"name":"Lean.Omega.IntList.neg_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_get","kind":"theorem","line":151,"name":"Lean.Omega.IntList.neg_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L151-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>)</span> <span class=\"fn\">xs</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_def","kind":"theorem","line":149,"name":"Lean.Omega.IntList.neg_def","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L149-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instNeg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instNeg","kind":"instance","line":147,"name":"Lean.Omega.IntList.instNeg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"Implementation of negation on `IntList`. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg","kind":"def","line":144,"name":"Lean.Omega.IntList.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L144-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_cons₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_cons₂","kind":"theorem","line":142,"name":"Lean.Omega.IntList.mul_cons₂","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_right","kind":"theorem","line":141,"name":"Lean.Omega.IntList.mul_nil_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L141-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_left","kind":"theorem","line":140,"name":"Lean.Omega.IntList.mul_nil_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L140-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_get","kind":"theorem","line":136,"name":"Lean.Omega.IntList.mul_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L136-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_def","kind":"theorem","line":133,"name":"Lean.Omega.IntList.mul_def","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instMul","kind":"instance","line":131,"name":"Lean.Omega.IntList.instMul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"Implementation of `*` on `IntList`. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul","kind":"def","line":128,"name":"Lean.Omega.IntList.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.cons_add_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">cons_add_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#List.cons\">::</a> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>)</div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.cons_add_cons","kind":"theorem","line":125,"name":"Lean.Omega.IntList.cons_add_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L125-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">nil_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_add","kind":"theorem","line":124,"name":"Lean.Omega.IntList.nil_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_nil","kind":"theorem","line":123,"name":"Lean.Omega.IntList.add_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_get","kind":"theorem","line":119,"name":"Lean.Omega.IntList.add_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L119-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_def","kind":"theorem","line":115,"name":"Lean.Omega.IntList.add_def","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L115-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instAdd","kind":"instance","line":113,"name":"Lean.Omega.IntList.instAdd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"Implementation of `+` on `IntList`. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add","kind":"def","line":109,"name":"Lean.Omega.IntList.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L109-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.leading\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">leading</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Returns the leading coefficient, i.e. the first non-zero entry. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.leading","kind":"def","line":106,"name":"Lean.Omega.IntList.leading","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L106-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_succ","kind":"theorem","line":104,"name":"Lean.Omega.IntList.set_cons_succ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_zero","kind":"theorem","line":103,"name":"Lean.Omega.IntList.set_cons_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_nil_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_succ","kind":"theorem","line":102,"name":"Lean.Omega.IntList.set_nil_succ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_nil_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">y</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_zero","kind":"theorem","line":101,"name":"Lean.Omega.IntList.set_nil_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>","info":{"doc":"Like `List.set`, but right-pad with zeroes as necessary first. ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set","kind":"def","line":93,"name":"Lean.Omega.IntList.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L93-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_of_length_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_of_length_le","kind":"theorem","line":89,"name":"Lean.Omega.IntList.get_of_length_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L89-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_map\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_map","kind":"theorem","line":85,"name":"Lean.Omega.IntList.get_map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L85-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_succ","kind":"theorem","line":83,"name":"Lean.Omega.IntList.get_cons_succ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_zero","kind":"theorem","line":82,"name":"Lean.Omega.IntList.get_cons_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_nil","kind":"theorem","line":81,"name":"Lean.Omega.IntList.get_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Get the `i`-th element (interpreted as `0` if the list is not long enough). ","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get","kind":"def","line":78,"name":"Lean.Omega.IntList.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L78-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A type synonym for `List Int`, used by `omega` for dense representation of coefficients.\n\nWe define algebraic operations,\ninterpreting `List Int` as a finitely supported function `Nat → Int`.\n","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList","kind":"def","line":68,"name":"Lean.Omega.IntList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Omega/IntList.lean#L68-L74"}}],"imports":["Init.Data.Int.DivMod.Bootstrap","Init.Data.Nat.Gcd"],"instances":[{"className":"Add","name":"Lean.Omega.IntList.instAdd","typeNames":["Lean.Omega.IntList"]},{"className":"Mul","name":"Lean.Omega.IntList.instMul","typeNames":["Lean.Omega.IntList"]},{"className":"Neg","name":"Lean.Omega.IntList.instNeg","typeNames":["Lean.Omega.IntList"]},{"className":"Sub","name":"Lean.Omega.IntList.instSub","typeNames":["Lean.Omega.IntList"]},{"className":"HMul","name":"Lean.Omega.IntList.instHMulInt","typeNames":["Int","Lean.Omega.IntList","Lean.Omega.IntList"]}],"name":"Init.Omega.IntList"}