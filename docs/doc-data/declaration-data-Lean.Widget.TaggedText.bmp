{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.stripTags\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">stripTags</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tt</span> : <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Remove tags, leaving just the pretty-printed string. ","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.stripTags","kind":"def","line":104,"name":"Lean.Widget.TaggedText.stripTags","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L104-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.prettyTagged\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">prettyTagged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <a href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\">Std.Format.defWidth</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"The output is tagged with `(tag, indent)` where `tag` is from the input `Format` and `indent`\nis the indentation level at this point. The latter is used to print sub-trees accurately by passing\nit again as the `indent` argument. ","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.prettyTagged","kind":"def","line":98,"name":"Lean.Widget.TaggedText.prettyTagged","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L98-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instRpcEncodable\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">instRpcEncodable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Server/Rpc/Basic.html#Lean.Server.RpcEncodable\">Server.RpcEncodable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/Rpc/Basic.html#Lean.Server.RpcEncodable\">Server.RpcEncodable</a> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.instRpcEncodable","kind":"instance","line":78,"name":"Lean.Widget.TaggedText.instRpcEncodable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L78-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewriteM\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">rewriteM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">β</span>)</span></span></span></div></div>","info":{"doc":"Like `mapM` but allows rewriting the whole subtree at `tag` nodes. ","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewriteM","kind":"opaque","line":72,"name":"Lean.Widget.TaggedText.rewriteM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L72-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">rewrite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.rewrite","kind":"opaque","line":66,"name":"Lean.Widget.TaggedText.rewrite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L66-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.forM\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.forM","kind":"opaque","line":58,"name":"Lean.Widget.TaggedText.forM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L58-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.mapM\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">mapM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">β</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.mapM","kind":"opaque","line":52,"name":"Lean.Widget.TaggedText.mapM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L52-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">β</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.map","kind":"opaque","line":46,"name":"Lean.Widget.TaggedText.map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L46-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendTag\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">appendTag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₀</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₀</span> : <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendTag","kind":"def","line":39,"name":"Lean.Widget.TaggedText.appendTag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L39-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">appendText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₀</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.appendText","kind":"def","line":32,"name":"Lean.Widget.TaggedText.appendText","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L32-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instToJsonTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instToJsonTaggedText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">ToJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">ToJson</a> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instToJsonTaggedText","kind":"instance","line":28,"name":"Lean.Widget.instToJsonTaggedText","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instToJsonTaggedText.toJson\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instToJsonTaggedText</span>.<span class=\"name\">toJson</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">ToJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span></span> → <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instToJsonTaggedText.toJson","kind":"opaque","line":28,"name":"Lean.Widget.instToJsonTaggedText.toJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instFromJsonTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instFromJsonTaggedText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">FromJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">FromJson</a> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instFromJsonTaggedText","kind":"instance","line":28,"name":"Lean.Widget.instFromJsonTaggedText","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instFromJsonTaggedText.fromJson\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instFromJsonTaggedText</span>.<span class=\"name\">fromJson</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">FromJson</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Json</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instFromJsonTaggedText.fromJson","kind":"opaque","line":28,"name":"Lean.Widget.instFromJsonTaggedText.fromJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instReprTaggedText.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instReprTaggedText</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instReprTaggedText.repr","kind":"opaque","line":28,"name":"Lean.Widget.instReprTaggedText.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instReprTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instReprTaggedText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instReprTaggedText","kind":"instance","line":28,"name":"Lean.Widget.instReprTaggedText","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instBEqTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instBEqTaggedText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instBEqTaggedText","kind":"instance","line":28,"name":"Lean.Widget.instBEqTaggedText","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instBEqTaggedText.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instBEqTaggedText</span>.<span class=\"name\">beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α✝</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instBEqTaggedText.beq","kind":"opaque","line":28,"name":"Lean.Widget.instBEqTaggedText.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instInhabitedTaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instInhabitedTaggedText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instInhabitedTaggedText","kind":"instance","line":28,"name":"Lean.Widget.instInhabitedTaggedText","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.instInhabitedTaggedText.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">instInhabitedTaggedText</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.instInhabitedTaggedText.default","kind":"def","line":28,"name":"Lean.Widget.instInhabitedTaggedText.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.tag\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">tag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.tag","kind":"ctor","line":27,"name":"Lean.Widget.TaggedText.tag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Invariants:\n- non-empty\n- no adjacent `text` elements (they should be collapsed)\n- no directly nested `append`s (but `append #[tag _ (append ..)]` is okay) ","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.append","kind":"ctor","line":22,"name":"Lean.Widget.TaggedText.append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L22-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.text\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span>.<span class=\"name\">text</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\">TaggedText</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText.text","kind":"ctor","line":21,"name":"Lean.Widget.TaggedText.text","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText\"><span class=\"name\">Lean</span>.<span class=\"name\">Widget</span>.<span class=\"name\">TaggedText</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"The minimal structure needed to represent \"string with interesting (tagged) substrings\".\nMuch like Lean 3 [`sf`](https://github.com/leanprover-community/mathlib/blob/bfa6bbbce69149792cc009ab7f9bc146181dc051/src/tactic/interactive_expr.lean#L38),\nbut with indentation already stringified. ","docLink":"./Lean/Widget/TaggedText.html#Lean.Widget.TaggedText","kind":"inductive","line":17,"name":"Lean.Widget.TaggedText","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Widget/TaggedText.lean#L17-L28"}}],"imports":["Lean.Server.Rpc.Basic"],"instances":[{"className":"Inhabited","name":"Lean.Widget.instInhabitedTaggedText","typeNames":["Lean.Widget.TaggedText"]},{"className":"BEq","name":"Lean.Widget.instBEqTaggedText","typeNames":["Lean.Widget.TaggedText"]},{"className":"Repr","name":"Lean.Widget.instReprTaggedText","typeNames":["Lean.Widget.TaggedText"]},{"className":"Lean.FromJson","name":"Lean.Widget.instFromJsonTaggedText","typeNames":["Lean.Widget.TaggedText"]},{"className":"Lean.ToJson","name":"Lean.Widget.instToJsonTaggedText","typeNames":["Lean.Widget.TaggedText"]},{"className":"Lean.Server.RpcEncodable","name":"Lean.Widget.TaggedText.instRpcEncodable","typeNames":["Lean.Widget.TaggedText"]}],"name":"Lean.Widget.TaggedText"}