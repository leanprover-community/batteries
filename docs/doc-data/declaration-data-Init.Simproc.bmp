{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.sevalprocBuiltinAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">sevalprocBuiltinAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Auxiliary attribute for builtin symbolic evaluation procedures.\n","docLink":"./Init/Simproc.html#Lean.Parser.Attr.sevalprocBuiltinAttr","kind":"def","line":103,"name":"Lean.Parser.Attr.sevalprocBuiltinAttr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L103-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.simprocBuiltinAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">simprocBuiltinAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Auxiliary attribute for builtin simplification procedures.\n","docLink":"./Init/Simproc.html#Lean.Parser.Attr.simprocBuiltinAttr","kind":"def","line":98,"name":"Lean.Parser.Attr.simprocBuiltinAttr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L98-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.sevalprocAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">sevalprocAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Auxiliary attribute for symbolic evaluation procedures.\n","docLink":"./Init/Simproc.html#Lean.Parser.Attr.sevalprocAttr","kind":"def","line":93,"name":"Lean.Parser.Attr.sevalprocAttr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L93-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.simprocAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">simprocAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Auxiliary attribute for simplification procedures.\n","docLink":"./Init/Simproc.html#Lean.Parser.Attr.simprocAttr","kind":"def","line":88,"name":"Lean.Parser.Attr.simprocAttr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L88-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.simprocPatternBuiltin\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">simprocPatternBuiltin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Auxiliary command for associating a pattern with a builtin simplification procedure.\n","docLink":"./Init/Simproc.html#Lean.Parser.simprocPatternBuiltin","kind":"def","line":82,"name":"Lean.Parser.simprocPatternBuiltin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L82-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.simprocPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">simprocPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Auxiliary command for associating a pattern with a simplification procedure.\n","docLink":"./Init/Simproc.html#Lean.Parser.simprocPattern","kind":"def","line":77,"name":"Lean.Parser.simprocPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L77-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Builtin_dsimproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Builtin_dsimproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A builtin defeq simplification procedure declaration.\n","docLink":"./Init/Simproc.html#Lean.Parser.«command_Builtin_dsimproc_decl_(_):=_»","kind":"def","line":72,"name":"Lean.Parser.«command_Builtin_dsimproc_decl_(_):=_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L72-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Builtin_simproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Builtin_simproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A builtin simplification procedure declaration.\n","docLink":"./Init/Simproc.html#Lean.Parser.«command_Builtin_simproc_decl_(_):=_»","kind":"def","line":67,"name":"Lean.Parser.«command_Builtin_simproc_decl_(_):=_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L67-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Builtin_dsimproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Builtin_dsimproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A builtin defeq simplification procedure.\n","docLink":"./Init/Simproc.html#Lean.Parser.«command__Builtin_dsimproc__[_]_(_):=_»","kind":"def","line":62,"name":"Lean.Parser.«command__Builtin_dsimproc__[_]_(_):=_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L62-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Builtin_simproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A builtin simplification procedure.\n","docLink":"./Init/Simproc.html#Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»","kind":"def","line":57,"name":"Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L57-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Dsimproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Dsimproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A user-defined defeq simplification procedure declaration. To activate this procedure in `simp` tactic,\nwe must provide it as an argument, or use the command `attribute` to set its `[simproc]` attribute.\n","docLink":"./Init/Simproc.html#Lean.Parser.«command_Dsimproc_decl_(_):=_»","kind":"def","line":51,"name":"Lean.Parser.«command_Dsimproc_decl_(_):=_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L51-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Simproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Simproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A user-defined simplification procedure declaration. To activate this procedure in `simp` tactic,\nwe must provide it as an argument, or use the command `attribute` to set its `[simproc]` attribute.\n","docLink":"./Init/Simproc.html#Lean.Parser.«command_Simproc_decl_(_):=_»","kind":"def","line":45,"name":"Lean.Parser.«command_Simproc_decl_(_):=_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L45-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Dsimproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Dsimproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Similar to `simproc`, but resulting expression must be definitionally equal to the input one.\n","docLink":"./Init/Simproc.html#Lean.Parser.«command__Dsimproc__[_]_(_):=_»","kind":"def","line":40,"name":"Lean.Parser.«command__Dsimproc__[_]_(_):=_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L40-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Simproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Simproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"A user-defined simplification procedure used by the `simp` tactic, and its variants.\nHere is an example.\n```lean\ntheorem and_false_eq {p : Prop} (q : Prop) (h : p = False) : (p ∧ q) = False := by simp [*]\n\nopen Lean Meta Simp\nsimproc ↓ shortCircuitAnd (And _ _) := fun e => do\n  let_expr And p q := e | return .continue\n  let r ← simp p\n  let_expr False := r.expr | return .continue\n  let proof ← mkAppM ``and_false_eq #[q, (← r.getProof)]\n  return .done { expr := r.expr, proof? := some proof }\n```\nThe `simp` tactic invokes `shortCircuitAnd` whenever it finds a term of the form `And _ _`.\nThe simplification procedures are stored in an (imperfect) discrimination tree.\nThe procedure should **not** assume the term `e` perfectly matches the given pattern.\nThe body of a simplification procedure must have type `Simproc`, which is an alias for\n`Expr → SimpM Step`\nYou can instruct the simplifier to apply the procedure before its sub-expressions\nhave been simplified by using the modifier `↓` before the procedure name.\nSimplification procedures can be also scoped or local.\n","docLink":"./Init/Simproc.html#Lean.Parser.«command__Simproc__[_]_(_):=_»","kind":"def","line":15,"name":"Lean.Parser.«command__Simproc__[_]_(_):=_»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Simproc.lean#L15-L38"}}],"imports":["Init.NotationExtra","Init.Data.ToString.Name"],"instances":[],"name":"Init.Simproc"}