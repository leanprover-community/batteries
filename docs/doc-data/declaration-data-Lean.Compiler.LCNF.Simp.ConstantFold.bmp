{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">foldConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span>)</span></span></div></div>","info":{"doc":"Apply a list of default folders to `decl`\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldConstants","kind":"def","line":480,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.foldConstants","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L480-L484"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getFolders","kind":"def","line":477,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.getFolders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L477-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.registerFolder\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">registerFolder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">folderDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.registerFolder","kind":"def","line":473,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.registerFolder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L473-L475"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.folderExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">folderExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.folderExt","kind":"opaque","line":454,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.folderExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L454-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.folder\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderEntry</span>.<span class=\"name\">folder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.folder","kind":"def","line":452,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.folder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L452-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toFolderOleanEntry</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folder</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.mk","kind":"ctor","line":451,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L451-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.toFolderOleanEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderEntry</span>.<span class=\"name\">toFolderOleanEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.toFolderOleanEntry","kind":"def","line":451,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.toFolderOleanEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L451-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderEntry</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry","kind":"structure","line":451,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L451-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.folderDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderOleanEntry</span>.<span class=\"name\">folderDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.folderDeclName","kind":"def","line":449,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.folderDeclName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L449-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderOleanEntry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.declName","kind":"def","line":448,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.declName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L448-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderOleanEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">folderDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.mk","kind":"ctor","line":447,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L447-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderOleanEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry","kind":"structure","line":447,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L447-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.builtinFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">builtinFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.builtinFolders","kind":"def","line":443,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.builtinFolders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L443-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.applyFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">applyFolders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folders</span> : <span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span>)</span></span></div></div>","info":{"doc":"Apply all known folders to `decl`.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.applyFolders","kind":"def","line":421,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.applyFolders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L421-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.stringFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">stringFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>","info":{"doc":"All string folders.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.stringFolders","kind":"def","line":412,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.stringFolders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L412-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.conversionFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">conversionFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.conversionFolders","kind":"def","line":398,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.conversionFolders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L398-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.relationFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">relationFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.relationFolders","kind":"def","line":378,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.relationFolders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L378-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.arithmeticFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">arithmeticFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>","info":{"doc":"All arithmetic folders.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.arithmeticFolders","kind":"def","line":348,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.arithmeticFolders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L348-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.toNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.toNat","kind":"def","line":341,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.toNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L341-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span></div></div>","info":{"doc":"Folder for ofNat operations on fixed-sized integer types.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.ofNat","kind":"def","line":333,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L333-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldNatPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">foldNatPow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldNatPow","kind":"def","line":324,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.foldNatPow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L324-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.natPowThreshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">natPowThreshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.natPowThreshold","kind":"def","line":322,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.natPowThreshold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L322-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulShift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mulShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftLeft</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pow2 </span><span class=\"fn\">log2</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulShift","kind":"def","line":318,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulShift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L318-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.higherOrderLiteralFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">higherOrderLiteralFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>","info":{"doc":"Literal folders for higher order datastructures.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.higherOrderLiteralFolders","kind":"def","line":311,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.higherOrderLiteralFolders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L311-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightAnnihilator\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">leftRightAnnihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">annihilator </span><span class=\"fn\">zero</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Provide a folder for an operation that has the same left and right annihilator.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightAnnihilator","kind":"def","line":305,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightAnnihilator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L305-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">leftRightNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Provide a folder for an operation that has the same left and right neutral element.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightNeutral","kind":"def","line":299,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightNeutral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L299-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.first\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">first</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folders</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Pick the first folder out of `folders` that succeeds.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.first","kind":"def","line":287,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.first","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L287-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulLhsShift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mulLhsShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftLeft</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pow2 </span><span class=\"fn\">log2</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulLhsShift","kind":"def","line":278,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulLhsShift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L278-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulRhsShift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mulRhsShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftLeft</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pow2 </span><span class=\"fn\">log2</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulRhsShift","kind":"def","line":269,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulRhsShift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L269-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.divShift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">divShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftRight</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pow2 </span><span class=\"fn\">log2</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.divShift","kind":"def","line":260,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.divShift","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L260-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightAnnihilator\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">rightAnnihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">annihilator </span><span class=\"fn\">zero</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Provide a folder for an operation with a right annihilator.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightAnnihilator","kind":"def","line":251,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightAnnihilator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L251-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftAnnihilator\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">leftAnnihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">annihilator </span><span class=\"fn\">zero</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Provide a folder for an operation with a left annihilator.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftAnnihilator","kind":"def","line":242,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftAnnihilator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L242-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">rightNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Provide a folder for an operation with a right neutral element.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightNeutral","kind":"def","line":233,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightNeutral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L233-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">leftNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Provide a folder for an operation with a left neutral element.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftNeutral","kind":"def","line":224,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftNeutral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L224-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinaryDecisionProcedure\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mkBinaryDecisionProcedure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î± </span><span class=\"fn\">Î²</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î²</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\"><span class=\"fn\">Î²</span> â†’ <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folder</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">Î±</span>) â†’ <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">Î²</span>) â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinaryDecisionProcedure","kind":"def","line":215,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinaryDecisionProcedure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L215-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mkBinary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î± </span><span class=\"fn\">Î² </span><span class=\"fn\">Î³</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î²</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î³</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folder</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\"><span class=\"fn\">Î²</span> â†’ <span class=\"fn\">Î³</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Turn a binary function such as `Nat.add` into a constant folder.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinary","kind":"def","line":206,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinary","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L206-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkUnary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mkUnary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î± </span><span class=\"fn\">Î²</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î²</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folder</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î²</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Turn a unary function such as `Nat.succ` into a constant folder.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkUnary","kind":"def","line":197,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkUnary","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L197-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldArrayLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">foldArrayLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>","info":{"doc":"Evaluate array literals at compile time, that is turn:\n```\nlet _x.1 := @List.nil _\nlet _x.2 := @List.cons _ z _x.1\nlet _x.3 := @List.cons _ y _x.2\nlet _x.4 := @List.cons _ x _x.3\nlet _x.5 := @List.toArray _ _x.4\n```\nTo its array form:\n```\nlet _x.12 := 3\nlet _x.8 := @Array.mkEmpty _ _x.12\nlet _x.22 := @Array.push _ _x.8 x\nlet _x.24 := @Array.push _ _x.22 y\nlet _x.26 := @Array.push _ _x.24 z\n```\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldArrayLiteral","kind":"def","line":172,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.foldArrayLiteral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L172-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkPseudoArrayLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkPseudoArrayLiteral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elements</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typLevel</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>","info":{"doc":"Turn an `#[a, b, c]` into:\n```\nlet _x.12 := 3\nlet _x.8 := @Array.mkEmpty _ _x.12\nlet _x.22 := @Array.push _ _x.8 x\nlet _x.24 := @Array.push _ _x.22 y\nlet _x.26 := @Array.push _ _x.24 z\n_x.26\n```\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkPseudoArrayLiteral","kind":"def","line":154,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkPseudoArrayLiteral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L154-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getPseudoListLiteral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a>))</span></span></div></div>","info":{"doc":"Turns an expression chain of the form\n```\nlet _x.1 := @List.nil _\nlet _x.2 := @List.cons _ a _x.1\nlet _x.3 := @List.cons _ b _x.2\nlet _x.4 := @List.cons _ c _x.3\nlet _x.5 := @List.cons _ d _x.4\nlet _x.6 := @List.cons _ e _x.5\n```\ninto: `[a, b, c, d ,e]` + The type contained in the list\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral","kind":"def","line":130,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L130-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt64\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt64","kind":"instance","line":126,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt32\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt32","kind":"instance","line":125,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt16\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt16","kind":"instance","line":124,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt8\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt8","kind":"instance","line":123,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkUIntInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkUIntInstance</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchLit</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Î±</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">litValueCtor</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkUIntInstance","kind":"def","line":116,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkUIntInstance","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L116-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralChar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralChar","kind":"instance","line":114,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkNatWrapperInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkNatWrapperInstance</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ofNat</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ofNatName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toNat</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkNatWrapperInstance","kind":"def","line":108,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkNatWrapperInstance","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L108-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralBool\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralBool","kind":"instance","line":98,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralBool","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkBoolLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkBoolLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkBoolLit","kind":"def","line":94,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkBoolLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L94-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getBoolLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getBoolLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getBoolLit","kind":"def","line":90,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.getBoolLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L90-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralString\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralString","kind":"instance","line":86,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L86-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkStringLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkStringLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkStringLit","kind":"def","line":83,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkStringLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L83-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getStringLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getStringLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getStringLit","kind":"def","line":79,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.getStringLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L79-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralNat","kind":"instance","line":75,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L75-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkNatLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkNatLit","kind":"def","line":72,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkNatLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L72-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getNatLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getNatLit","kind":"def","line":68,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.getNatLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L68-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkAuxLit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"A wrapper around `mkAuxLetDecl` that also calls `mkLit`.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLit","kind":"def","line":61,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L61-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkAuxLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"A wrapper around `LCNF.mkAuxLetDecl` that will automatically store the\n`LetDecl` in the state of `FolderM`.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLetDecl","kind":"def","line":50,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLetDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L50-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mkLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Literal</span>.<span class=\"name\">mkLit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></span></div></div>","info":{"doc":"Turn a value of type `Î±` into a series of auxiliary `LetDecl`s + a\nfinal `Expr` putting them all together into a literal of type `Î±`,\nwhere again the idea of what a literal is depends on `Î±`.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mkLit","kind":"def","line":46,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mkLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.getLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Literal</span>.<span class=\"name\">getLit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Î±</span>)</span></span></span></div></div>","info":{"doc":"Attempt to turn the provided `Expr` into a value of type `Î±` if\nit is whatever concept of a literal `Î±` has. Note that this function\ndoes assume that the provided `Expr` does indeed have type `Î±`.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.getLit","kind":"def","line":40,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal.getLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Literal</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getLit</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Î±</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkLit</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mk","kind":"ctor","line":34,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Literal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A typeclass for detecting and producing literals of arbitrary types\ninside of LCNF.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal","kind":"class","line":30,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L30-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A constant folder for a specific function, takes all the arguments of a\ncertain function and produces a new `Expr` + auxiliary declarations in\nthe `FolderM` monad on success. If the folding fails it returns `none`.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder","kind":"def","line":23,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L23-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A constant folding monad, the additional state stores auxiliary declarations\nrequired to build the new constant.\n","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM","kind":"def","line":17,"name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L17-L21"}}],"imports":["Init.Data.UInt.Log2","Lean.Compiler.LCNF.InferType"],"instances":[{"className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralNat","typeNames":["Nat"]},{"className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralString","typeNames":["String"]},{"className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralBool","typeNames":["Bool"]},{"className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralChar","typeNames":["Char"]},{"className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt8","typeNames":["UInt8"]},{"className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt16","typeNames":["UInt16"]},{"className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt32","typeNames":["UInt32"]},{"className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt64","typeNames":["UInt64"]}],"name":"Lean.Compiler.LCNF.Simp.ConstantFold"}