{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.evalRewriteSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalRewriteSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.evalRewriteSeq","kind":"def","line":107,"name":"Lean.Elab.Tactic.evalRewriteSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Rewrite.lean#L107-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.elabRewriteConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabRewriteConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Meta.Rewrite.Config</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.elabRewriteConfig","kind":"def","line":105,"name":"Lean.Elab.Tactic.elabRewriteConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Rewrite.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.withRWRulesSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">withRWRulesSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">token </span><span class=\"fn\">rwRulesSeqStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.withRWRulesSeq","kind":"def","line":69,"name":"Lean.Elab.Tactic.withRWRulesSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Rewrite.lean#L69-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.rewriteLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">rewriteLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Meta.Rewrite.Config</a> := <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.mk\">{</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.rewriteLocalDecl","kind":"def","line":58,"name":"Lean.Elab.Tactic.rewriteLocalDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Rewrite.lean#L58-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.rewriteTarget\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">rewriteTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Meta.Rewrite.Config</a> := <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.mk\">{</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.rewriteTarget","kind":"def","line":51,"name":"Lean.Elab.Tactic.rewriteTarget","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Rewrite.lean#L51-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.finishElabRewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">finishElabRewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Meta.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Meta.RewriteResult</a></span></div></div>","info":{"doc":"Makes new goals be synthetic opaque, to be done once elaboration of the rewrite theorem is complete.\n\nWorkaround note: we are only doing this for proof goals, not data goals,\nsince there are many downstream cases of tactic proofs that later assign data goals by unification.\n","docLink":"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.finishElabRewrite","kind":"def","line":38,"name":"Lean.Elab.Tactic.finishElabRewrite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Rewrite.lean#L38-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.elabRewrite\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabRewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Meta.Rewrite.Config</a> := <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.mk\">{</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Meta.RewriteResult</a></span></div></div>","info":{"doc":"Runs `Lean.MVarId.rewrite`, and also handles filtering out the old metavariables in the rewrite result.\nThis should be used from within `withSynthesize`.\nUse `finishElabRewrite` once elaboration is complete to make final updates to `RewriteResult`.\n","docLink":"./Lean/Elab/Tactic/Rewrite.html#Lean.Elab.Tactic.elabRewrite","kind":"def","line":19,"name":"Lean.Elab.Tactic.elabRewrite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Rewrite.lean#L19-L36"}}],"imports":["Lean.Meta.Tactic.Rewrite","Lean.Meta.Tactic.Replace","Lean.Elab.Tactic.Location","Lean.Meta.Eqns"],"instances":[],"name":"Lean.Elab.Tactic.Rewrite"}