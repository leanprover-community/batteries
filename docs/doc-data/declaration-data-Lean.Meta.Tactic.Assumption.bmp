{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Assumption.html#Lean.MVarId.assumption\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">assumption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Close goal `mvarId` using an assumption. Throw error message if failed. ","docLink":"./Lean/Meta/Tactic/Assumption.html#Lean.MVarId.assumption","kind":"def","line":33,"name":"Lean.MVarId.assumption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Assumption.lean#L33-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Assumption.html#Lean.MVarId.assumptionCore\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">assumptionCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if managed to close goal `mvarId` using an assumption. ","docLink":"./Lean/Meta/Tactic/Assumption.html#Lean.MVarId.assumptionCore","kind":"def","line":25,"name":"Lean.MVarId.assumptionCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Assumption.lean#L25-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Assumption.html#Lean.Meta.findLocalDeclWithType?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">findLocalDeclWithType?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>","info":{"doc":"Return a local declaration whose type is definitionally equal to `type`. ","docLink":"./Lean/Meta/Tactic/Assumption.html#Lean.Meta.findLocalDeclWithType?","kind":"def","line":15,"name":"Lean.Meta.findLocalDeclWithType?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Assumption.lean#L15-L23"}}],"imports":["Lean.Meta.Tactic.Util"],"instances":[],"name":"Lean.Meta.Tactic.Assumption"}