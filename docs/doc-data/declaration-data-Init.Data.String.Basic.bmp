{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prevn_zero\"><span class=\"name\">Substring</span>.<span class=\"name\">prevn_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prevn\">prevn</a></span> <span class=\"fn\">n</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.prevn_zero","kind":"theorem","line":4663,"name":"Substring.prevn_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4663-L4665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prev_zero\"><span class=\"name\">Substring</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.prev\">prev</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.prev_zero","kind":"theorem","line":4661,"name":"Substring.prev_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4661-L4661"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.length_toString\"><span class=\"name\">Char</span>.<span class=\"name\">length_toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/String/Bootstrap.html#Char.toString\">toString</a></span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Char.length_toString","kind":"theorem","line":4652,"name":"Char.length_toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4652-L4653"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.toString_eq_singleton\"><span class=\"name\">Char</span>.<span class=\"name\">toString_eq_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/String/Bootstrap.html#Char.toString\">toString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">String.singleton</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Char.toString_eq_singleton","kind":"theorem","line":4650,"name":"Char.toString_eq_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4650-L4650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.next'_eq\"><span class=\"name\">String</span>.<span class=\"name\">next'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">Pos.Raw.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next'\">Pos.Raw.next'</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">Pos.Raw.next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.next'_eq","kind":"theorem","line":4639,"name":"String.next'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4639-L4640"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get'_eq\"><span class=\"name\">String</span>.<span class=\"name\">get'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">Pos.Raw.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get'\">Pos.Raw.get'</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get\">Pos.Raw.get</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.get'_eq","kind":"theorem","line":4636,"name":"String.get'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4636-L4637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.prev_zero\"><span class=\"name\">String</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.prev\">Pos.Raw.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.prev_zero","kind":"theorem","line":4632,"name":"String.prev_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4632-L4634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.prev_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">prev_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.prev\">prev</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.prev_zero","kind":"theorem","line":4628,"name":"String.Pos.Raw.prev_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4628-L4630"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.lt_next'\"><span class=\"name\">String</span>.<span class=\"name\">lt_next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">Pos.Raw.next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.lt_next'","kind":"theorem","line":4624,"name":"String.lt_next'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4624-L4626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get!_eq_get\"><span class=\"name\">String</span>.<span class=\"name\">get!_eq_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get!\">Pos.Raw.get!</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get\">Pos.Raw.get</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.get!_eq_get","kind":"theorem","line":4621,"name":"String.get!_eq_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4621-L4622"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next'_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">next'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next'\">next'</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">next</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.next'_eq","kind":"theorem","line":4617,"name":"String.Pos.Raw.next'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4617-L4617"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get'_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get'\">get'</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get\">get</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.get'_eq","kind":"theorem","line":4615,"name":"String.Pos.Raw.get'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4615-L4615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get!_eq_get\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!_eq_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get!\">get!</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get\">get</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.get!_eq_get","kind":"theorem","line":4613,"name":"String.Pos.Raw.get!_eq_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4613-L4613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.mk_lt_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mk_lt_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₂</span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.mk_lt_mk","kind":"theorem","line":4611,"name":"String.Pos.Raw.mk_lt_mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4611-L4611"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.mk_le_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mk_le_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">i₂</span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.mk_le_mk","kind":"theorem","line":4609,"name":"String.Pos.Raw.mk_le_mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4609-L4609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.zero_addString_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">zero_addString_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.zero_addString_eq","kind":"theorem","line":4605,"name":"String.Pos.Raw.zero_addString_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4605-L4607"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.zero_add_string_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">zero_add_string_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.zero_add_string_eq","kind":"theorem","line":4602,"name":"String.Pos.Raw.zero_add_string_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4602-L4603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.zero_addString_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">zero_addString_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.zero_addString_byteIdx","kind":"def","line":4599,"name":"String.Pos.Raw.zero_addString_byteIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4599-L4600"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_zero_addString\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_zero_addString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_zero_addString","kind":"theorem","line":4595,"name":"String.Pos.Raw.byteIdx_zero_addString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4595-L4597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_zero_add_string\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_zero_add_string</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_zero_add_string","kind":"theorem","line":4592,"name":"String.Pos.Raw.byteIdx_zero_add_string","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4592-L4593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.addString_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">addString_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.addString_eq","kind":"theorem","line":4590,"name":"String.Pos.Raw.addString_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4590-L4590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.addString_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">addString_byteIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.addString_byteIdx","kind":"def","line":4587,"name":"String.Pos.Raw.addString_byteIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4587-L4588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_addString\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_addString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_addString","kind":"theorem","line":4583,"name":"String.Pos.Raw.byteIdx_addString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4583-L4585"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.ne_of_gt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ne_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i₂</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">i₁</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.ne_of_gt","kind":"theorem","line":4581,"name":"String.Pos.Raw.ne_of_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4581-L4581"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.addChar_right_comm\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">addChar_right_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.addChar_right_comm","kind":"theorem","line":4577,"name":"String.Pos.Raw.addChar_right_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4577-L4579"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.add_char_right_comm\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">add_char_right_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c₁</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.add_char_right_comm","kind":"theorem","line":4574,"name":"String.Pos.Raw.add_char_right_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4574-L4575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.zero_addChar_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">zero_addChar_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.zero_addChar_eq","kind":"theorem","line":4570,"name":"String.Pos.Raw.zero_addChar_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4570-L4572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.zero_add_char_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">zero_add_char_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.zero_add_char_eq","kind":"theorem","line":4568,"name":"String.Pos.Raw.zero_add_char_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4568-L4568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.zero_addChar_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">zero_addChar_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.zero_addChar_byteIdx","kind":"theorem","line":4564,"name":"String.Pos.Raw.zero_addChar_byteIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4564-L4566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_zero_add_char\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_zero_add_char</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_zero_add_char","kind":"theorem","line":4561,"name":"String.Pos.Raw.byteIdx_zero_add_char","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4561-L4562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.addChar_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">addChar_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.addChar_eq","kind":"theorem","line":4557,"name":"String.Pos.Raw.addChar_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4557-L4559"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.add_char_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">add_char_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.add_char_eq","kind":"theorem","line":4555,"name":"String.Pos.Raw.add_char_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4555-L4555"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.addChar_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">addChar_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.addChar_byteIdx","kind":"theorem","line":4551,"name":"String.Pos.Raw.addChar_byteIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4551-L4553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.sub_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">sub_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy\">unoffsetBy</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.sub_byteIdx","kind":"theorem","line":4548,"name":"String.Pos.Raw.sub_byteIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4548-L4549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.add_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">add_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.add_eq","kind":"theorem","line":4545,"name":"String.Pos.Raw.add_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4545-L4546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.add_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">add_byteIdx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">p₁</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.add_byteIdx","kind":"theorem","line":4541,"name":"String.Pos.Raw.add_byteIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4541-L4543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.mk_byteIdx\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mk_byteIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.mk_byteIdx","kind":"theorem","line":4539,"name":"String.Pos.Raw.mk_byteIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4539-L4539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.mk_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">mk_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.mk_zero","kind":"theorem","line":4537,"name":"String.Pos.Raw.mk_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4537-L4537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_mk","kind":"theorem","line":4535,"name":"String.Pos.Raw.byteIdx_mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4535-L4535"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.lt_iff","kind":"theorem","line":4531,"name":"String.lt_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4531-L4531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_append\"><span class=\"name\">String</span>.<span class=\"name\">length_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>).<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.length_append","kind":"theorem","line":4526,"name":"String.length_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4526-L4527"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_pushn\"><span class=\"name\">String</span>.<span class=\"name\">length_pushn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.pushn\">pushn</a></span> <span class=\"fn\">c</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.length_pushn","kind":"theorem","line":4523,"name":"String.length_pushn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4523-L4524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_push\"><span class=\"name\">String</span>.<span class=\"name\">length_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.length_push","kind":"theorem","line":4520,"name":"String.length_push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4520-L4521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_push\"><span class=\"name\">String</span>.<span class=\"name\">data_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.data_push","kind":"theorem","line":4517,"name":"String.data_push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4517-L4518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.push_eq_append\"><span class=\"name\">String</span>.<span class=\"name\">push_eq_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.push_eq_append","kind":"theorem","line":4514,"name":"String.push_eq_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4514-L4515"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_singleton\"><span class=\"name\">String</span>.<span class=\"name\">length_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.length_singleton","kind":"theorem","line":4510,"name":"String.length_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4510-L4512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_singleton\"><span class=\"name\">String</span>.<span class=\"name\">data_singleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.data_singleton","kind":"theorem","line":4507,"name":"String.data_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4507-L4508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.singleton_eq\"><span class=\"name\">String</span>.<span class=\"name\">singleton_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.singleton_eq","kind":"theorem","line":4504,"name":"String.singleton_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4504-L4505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_empty\"><span class=\"name\">String</span>.<span class=\"name\">length_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.length_empty","kind":"theorem","line":4502,"name":"String.length_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4502-L4502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mk_eq_asString\"><span class=\"name\">String</span>.<span class=\"name\">mk_eq_asString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.mk\">mk</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.mk_eq_asString","kind":"theorem","line":4499,"name":"String.mk_eq_asString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4499-L4500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.default_eq\"><span class=\"name\">String</span>.<span class=\"name\">default_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.default_eq","kind":"theorem","line":4497,"name":"String.default_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4497-L4497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ext_iff","kind":"theorem","line":4493,"name":"String.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4493-L4493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ext\"><span class=\"name\">String</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ext","kind":"theorem","line":4493,"name":"String.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4493-L4495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.stripSuffix\"><span class=\"name\">String</span>.<span class=\"name\">stripSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">suff</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"If `suff` is a suffix of `s`, returns the remainder. Returns `s` unmodified otherwise.\n\nThe string `suff` is a suffix of `s` if there exists a `t : String` such that `s = t ++ suff`. If so,\nthe result is `t`. Otherwise, it is `s`.\n\nUse `String.dropSuffix?` to return `none` when `suff` is not a suffix.\n\nExamples:\n * `\"red green blue\".stripSuffix \" blue\" = \"red green\"`\n * `\"red green blue\".stripSuffix \" blu \" = \"red green blue\"`\n * `\"red green blue\".stripSuffix \"\" = \"red green blue\"`\n","docLink":"./Init/Data/String/Basic.html#String.stripSuffix","kind":"def","line":4473,"name":"String.stripSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4473-L4487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.stripPrefix\"><span class=\"name\">String</span>.<span class=\"name\">stripPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"If `pre` is a prefix of `s`, returns the remainder. Returns `s` unmodified otherwise.\n\nThe string `pre` is a prefix of `s` if there exists a `t : String` such that `s = pre ++ t`. If so,\nthe result is `t`. Otherwise, it is `s`.\n\nUse `String.dropPrefix?` to return `none` when `pre` is not a prefix.\n\nExamples:\n * `\"red green blue\".stripPrefix \"red \" = \"green blue\"`\n * `\"red green blue\".stripPrefix \"reed \" = \"red green blue\"`\n * `\"red green blue\".stripPrefix \"\" = \"red green blue\"`\n","docLink":"./Init/Data/String/Basic.html#String.stripPrefix","kind":"def","line":4457,"name":"String.stripPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4457-L4471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropSuffix?\"><span class=\"name\">String</span>.<span class=\"name\">dropSuffix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">suff</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"If `suff` is a suffix of `s`, returns the remainder. Returns `none` otherwise.\n\nThe string `suff` is a suffix of `s` if there exists a `t : String` such that `s = t ++ suff`. If so,\nthe result is `some t`.\n\nUse `String.stripSuffix` to return the string unchanged when `suff` is not a suffix.\n\nExamples:\n * `\"red green blue\".dropSuffix? \" blue\" = some \"red green\"`\n * `\"red green blue\".dropSuffix? \" blu \" = none`\n * `\"red green blue\".dropSuffix? \"\" = some \"red green blue\"`\n","docLink":"./Init/Data/String/Basic.html#String.dropSuffix?","kind":"def","line":4441,"name":"String.dropSuffix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4441-L4455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropPrefix?\"><span class=\"name\">String</span>.<span class=\"name\">dropPrefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"If `pre` is a prefix of `s`, returns the remainder. Returns `none` otherwise.\n\nThe string `pre` is a prefix of `s` if there exists a `t : String` such that `s = pre ++ t`. If so,\nthe result is `some t`.\n\nUse `String.stripPrefix` to return the string unchanged when `pre` is not a prefix.\n\nExamples:\n * `\"red green blue\".dropPrefix? \"red \" = some \"green blue\"`\n * `\"red green blue\".dropPrefix? \"reed \" = none`\n * `\"red green blue\".dropPrefix? \"\" = some \"red green blue\"`\n","docLink":"./Init/Data/String/Basic.html#String.dropPrefix?","kind":"def","line":4425,"name":"String.dropPrefix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4425-L4439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decapitalize\"><span class=\"name\">String</span>.<span class=\"name\">decapitalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces the first character in `s` with the result of applying `Char.toLower` to it. Returns the\nempty string if the string is empty.\n\n`Char.toLower` has no effect on characters outside of the range `'A'`–`'Z'`.\n\nExamples:\n* `\"Orange\".decapitalize = \"orange\"`\n* `\"ORANGE\".decapitalize = \"oRANGE\"`\n* `\"\".decapitalize = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.decapitalize","kind":"def","line":4411,"name":"String.decapitalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4411-L4423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.capitalizeImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">capitalizeImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.capitalizeImpl","kind":"def","line":4407,"name":"String.Internal.capitalizeImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4407-L4409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.capitalize\"><span class=\"name\">String</span>.<span class=\"name\">capitalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces the first character in `s` with the result of applying `Char.toUpper` to it. Returns the\nempty string if the string is empty.\n\n`Char.toUpper` has no effect on characters outside of the range `'a'`–`'z'`.\n\nExamples:\n* `\"orange\".capitalize = \"Orange\"`\n* `\"ORANGE\".capitalize = \"ORANGE\"`\n* `\"\".capitalize = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.capitalize","kind":"def","line":4393,"name":"String.capitalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4393-L4405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toLower\"><span class=\"name\">String</span>.<span class=\"name\">toLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces each character in `s` with the result of applying `Char.toLower` to it.\n\n`Char.toLower` has no effect on characters outside of the range `'A'`–`'Z'`.\n\nExamples:\n* `\"ORANGE\".toLower = \"orange\"`\n* `\"Orange\".toLower = \"orange\"`\n* `\"ABc123\".toLower = \"abc123\"`\n","docLink":"./Init/Data/String/Basic.html#String.toLower","kind":"def","line":4380,"name":"String.toLower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4380-L4391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toUpper\"><span class=\"name\">String</span>.<span class=\"name\">toUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces each character in `s` with the result of applying `Char.toUpper` to it.\n\n`Char.toUpper` has no effect on characters outside of the range `'a'`–`'z'`.\n\nExamples:\n* `\"orange\".toUpper = \"ORANGE\"`\n* `\"abc123\".toUpper = \"ABC123\"`\n","docLink":"./Init/Data/String/Basic.html#String.toUpper","kind":"def","line":4368,"name":"String.toUpper","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4368-L4378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.nextUntil\"><span class=\"name\">String</span>.<span class=\"name\">nextUntil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.nextUntil","kind":"def","line":4364,"name":"String.nextUntil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4364-L4366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.nextUntil\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">nextUntil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Repeatedly increments a position in a string, as if by `String.next`, while the predicate `p`\nreturns `false` for the character at the position. Stops incrementing at the end of the string or\nwhen `p` returns `true` for the current character.\n\nExamples:\n* `let s := \"   a  \"; s.get (s.nextUntil Char.isWhitespace 0) = ' '`\n* `let s := \"   a  \"; s.get (s.nextUntil Char.isLetter 0) = 'a'`\n* `let s := \"a  \"; s.get (s.nextUntil Char.isWhitespace 0) = ' '`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.nextUntil","kind":"def","line":4351,"name":"String.Pos.Raw.nextUntil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4351-L4362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.nextWhileImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">nextWhileImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.nextWhileImpl","kind":"def","line":4347,"name":"String.Internal.nextWhileImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4347-L4349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.nextWhile\"><span class=\"name\">String</span>.<span class=\"name\">nextWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.nextWhile","kind":"def","line":4343,"name":"String.nextWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4343-L4345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.nextWhile\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">nextWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Repeatedly increments a position in a string, as if by `String.next`, while the predicate `p`\nreturns `true` for the character at the position. Stops incrementing at the end of the string or\nwhen `p` returns `false` for the current character.\n\nExamples:\n* `let s := \"   a  \"; s.get (s.nextWhile Char.isWhitespace 0) = 'a'`\n* `let s := \"a  \"; s.get (s.nextWhile Char.isWhitespace 0) = 'a'`\n* `let s := \"ba  \"; s.get (s.nextWhile Char.isWhitespace 0) = 'b'`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.nextWhile","kind":"def","line":4330,"name":"String.Pos.Raw.nextWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4330-L4341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.trimImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">trimImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.trimImpl","kind":"def","line":4326,"name":"String.Internal.trimImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4326-L4328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trim\"><span class=\"name\">String</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Removes leading and trailing whitespace from a string.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`.\n\nExamples:\n* `\"abc\".trim = \"abc\"`\n* `\"   abc\".trim = \"abc\"`\n* `\"abc \\t  \".trim = \"abc\"`\n* `\"  abc   \".trim = \"abc\"`\n* `\"abc\\ndef\\n\".trim = \"abc\\ndef\"`\n","docLink":"./Init/Data/String/Basic.html#String.trim","kind":"def","line":4311,"name":"String.trim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4311-L4324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trimLeft\"><span class=\"name\">String</span>.<span class=\"name\">trimLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Removes leading whitespace from a string.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`.\n\nExamples:\n* `\"abc\".trimLeft = \"abc\"`\n* `\"   abc\".trimLeft = \"   abc\"`\n* `\"abc \\t  \".trimLeft = \"abc \\t  \"`\n* `\"  abc   \".trimLeft = \"abc   \"`\n* `\"abc\\ndef\\n\".trimLeft = \"abc\\ndef\\n\"`\n","docLink":"./Init/Data/String/Basic.html#String.trimLeft","kind":"def","line":4296,"name":"String.trimLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4296-L4309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.trimRight\"><span class=\"name\">String</span>.<span class=\"name\">trimRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Removes trailing whitespace from a string.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`.\n\nExamples:\n* `\"abc\".trimRight = \"abc\"`\n* `\"   abc\".trimRight = \"   abc\"`\n* `\"abc \\t  \".trimRight = \"abc\"`\n* `\"  abc   \".trimRight = \"  abc\"`\n* `\"abc\\ndef\\n\".trimRight = \"abc\\ndef\"`\n","docLink":"./Init/Data/String/Basic.html#String.trimRight","kind":"def","line":4281,"name":"String.trimRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4281-L4294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endsWith\"><span class=\"name\">String</span>.<span class=\"name\">endsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">post</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the first string (`s`) ends with the second (`post`).\n\nExamples:\n* `\"red green blue\".endsWith \"blue\" = true`\n* `\"red green blue\".endsWith \"green\" = false`\n* `\"red green blue\".endsWith \"\" = true`\n* `\"red\".endsWith \"red\" = true`\n","docLink":"./Init/Data/String/Basic.html#String.endsWith","kind":"def","line":4269,"name":"String.endsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4269-L4279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startsWith\"><span class=\"name\">String</span>.<span class=\"name\">startsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the first string (`s`) begins with the second (`pre`).\n\n`String.isPrefix` is a version that takes the potential prefix before the string.\n\nExamples:\n* `\"red green blue\".startsWith \"red\" = true`\n* `\"red green blue\".startsWith \"green\" = false`\n* `\"red green blue\".startsWith \"\" = true`\n* `\"red\".startsWith \"red\" = true`\n","docLink":"./Init/Data/String/Basic.html#String.startsWith","kind":"def","line":4255,"name":"String.startsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4255-L4267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropRightWhile\"><span class=\"name\">String</span>.<span class=\"name\">dropRightWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Creates a new string by removing the longest suffix from `s` in which `p` returns `true` for all\ncharacters.\n\nExamples:\n* `\"red green blue\".dropRightWhile (·.isLetter) = \"red green \"`\n* `\"red green blue\".dropRightWhile (· == 'e') = \"red green blu\"`\n* `\"red green blue\".dropRightWhile (· != 'n') = \"red green\"`\n* `\"red green blue\".dropRightWhile (fun _ => true) = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.dropRightWhile","kind":"def","line":4242,"name":"String.dropRightWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4242-L4253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeRightWhile\"><span class=\"name\">String</span>.<span class=\"name\">takeRightWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Creates a new string that contains the longest suffix of `s` in which `p` returns `true` for all\ncharacters.\n\nExamples:\n* `\"red green blue\".takeRightWhile (·.isLetter) = \"blue\"`\n* `\"red green blue\".takeRightWhile (· == 'e') = \"e\"`\n* `\"red green blue\".takeRightWhile (· != 'n') = \" blue\"`\n* `\"red green blue\".takeRightWhile (fun _ => true) = \"red green blue\"`\n","docLink":"./Init/Data/String/Basic.html#String.takeRightWhile","kind":"def","line":4229,"name":"String.takeRightWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4229-L4240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Creates a new string by removing the longest prefix from `s` in which `p` returns `true` for all\ncharacters.\n\nExamples:\n* `\"red green blue\".dropWhile (·.isLetter) = \" green blue\"`\n* `\"red green blue\".dropWhile (· == 'r') = \"ed green blue\"`\n* `\"red green blue\".dropWhile (· != 'n') = \"n blue\"`\n* `\"red green blue\".dropWhile (fun _ => true) = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.dropWhile","kind":"def","line":4216,"name":"String.dropWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4216-L4227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Creates a new string that contains the longest prefix of `s` in which `p` returns `true` for all\ncharacters.\n\nExamples:\n* `\"red green blue\".takeWhile (·.isLetter) = \"red\"`\n* `\"red green blue\".takeWhile (· == 'r') = \"r\"`\n* `\"red green blue\".takeWhile (· != 'n') = \"red gree\"`\n* `\"red green blue\".takeWhile (fun _ => true) = \"red green blue\"`\n","docLink":"./Init/Data/String/Basic.html#String.takeWhile","kind":"def","line":4203,"name":"String.takeWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4203-L4214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.takeRight\"><span class=\"name\">String</span>.<span class=\"name\">takeRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Creates a new string that contains the last `n` characters (Unicode code points) of `s`.\n\nIf `n` is greater than `s.length`, returns `s`.\n\nExamples:\n* `\"red green blue\".takeRight 4 = \"blue\"`\n* `\"red green blue\".takeRight 1 = \"e\"`\n* `\"red green blue\".takeRight 0 = \"\"`\n* `\"red green blue\".takeRight 100 = \"red green blue\"`\n","docLink":"./Init/Data/String/Basic.html#String.takeRight","kind":"def","line":4189,"name":"String.takeRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4189-L4201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.take\"><span class=\"name\">String</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Creates a new string that contains the first `n` characters (Unicode code points) of `s`.\n\nIf `n` is greater than `s.length`, returns `s`.\n\nExamples:\n* `\"red green blue\".take 3 = \"red\"`\n* `\"red green blue\".take 1 = \"r\"`\n* `\"red green blue\".take 0 = \"\"`\n* `\"red green blue\".take 100 = \"red green blue\"`\n","docLink":"./Init/Data/String/Basic.html#String.take","kind":"def","line":4175,"name":"String.take","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4175-L4187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.dropRightImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">dropRightImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.dropRightImpl","kind":"def","line":4171,"name":"String.Internal.dropRightImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4171-L4173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.dropRight\"><span class=\"name\">String</span>.<span class=\"name\">dropRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Removes the specified number of characters (Unicode code points) from the end of the string.\n\nIf `n` is greater than `s.length`, returns `\"\"`.\n\nExamples:\n* `\"red green blue\".dropRight 5 = \"red green\"`\n* `\"red green blue\".dropRight 11 = \"red\"`\n* `\"red green blue\".dropRight 50 = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.dropRight","kind":"def","line":4158,"name":"String.dropRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4158-L4169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.dropImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">dropImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.dropImpl","kind":"def","line":4154,"name":"String.Internal.dropImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4154-L4156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.drop\"><span class=\"name\">String</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Removes the specified number of characters (Unicode code points) from the start of the string.\n\nIf `n` is greater than `s.length`, returns `\"\"`.\n\nExamples:\n* `\"red green blue\".drop 4 = \"green blue\"`\n* `\"red green blue\".drop 10 = \"blue\"`\n* `\"red green blue\".drop 50 = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.drop","kind":"def","line":4141,"name":"String.drop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4141-L4152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropSuffix?\"><span class=\"name\">Substring</span>.<span class=\"name\">dropSuffix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">suff</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"If `suff` is a suffix of `s`, returns the remainder. Returns `none` otherwise.\n\nThe substring `suff` is a suffix of `s` if there exists a `t : Substring` such that\n`s.toString = t.toString ++ suff.toString`. If so, the result the substring of `s` without the\nsuffix.\n","docLink":"./Init/Data/String/Basic.html#Substring.dropSuffix?","kind":"def","line":4123,"name":"Substring.dropSuffix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4123-L4135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropPrefix?\"><span class=\"name\">Substring</span>.<span class=\"name\">dropPrefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"If `pre` is a prefix of `s`, returns the remainder. Returns `none` otherwise.\n\nThe substring `pre` is a prefix of `s` if there exists a `t : Substring` such that\n`s.toString = pre.toString ++ t.toString`. If so, the result is the substring of `s` without the\nprefix.\n","docLink":"./Init/Data/String/Basic.html#Substring.dropPrefix?","kind":"def","line":4109,"name":"Substring.dropPrefix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4109-L4121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.commonSuffix\"><span class=\"name\">Substring</span>.<span class=\"name\">commonSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>","info":{"doc":"Returns the longest common suffix of two substrings.\n\nThe returned substring uses the same underlying string as `s`.\n","docLink":"./Init/Data/String/Basic.html#Substring.commonSuffix","kind":"def","line":4087,"name":"Substring.commonSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4087-L4107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.commonPrefix\"><span class=\"name\">Substring</span>.<span class=\"name\">commonPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>","info":{"doc":"Returns the longest common prefix of two substrings.\n\nThe returned substring uses the same underlying string as `s`.\n","docLink":"./Init/Data/String/Basic.html#Substring.commonPrefix","kind":"def","line":4067,"name":"Substring.commonPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4067-L4085"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.sameAs\"><span class=\"name\">Substring</span>.<span class=\"name\">sameAs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss1 </span><span class=\"fn\">ss2</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether two substrings have the same position and content.\n\nThe two substrings do not need to have the same underlying string for this check to succeed.\n","docLink":"./Init/Data/String/Basic.html#Substring.sameAs","kind":"def","line":4059,"name":"Substring.sameAs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4059-L4065"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.hasBeq\"><span class=\"name\">Substring</span>.<span class=\"name\">hasBeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.hasBeq","kind":"instance","line":4057,"name":"Substring.hasBeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4057-L4057"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.beqImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">beqImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss1 </span><span class=\"fn\">ss2</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.beqImpl","kind":"def","line":4053,"name":"Substring.Internal.beqImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4053-L4055"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.beq\"><span class=\"name\">Substring</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss1 </span><span class=\"fn\">ss2</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether two substrings represent equal strings. Usually accessed via the `==` operator.\n\nTwo substrings do not need to have the same underlying string or the same start and end positions;\ninstead, they are equal if they contain the same sequence of characters.\n","docLink":"./Init/Data/String/Basic.html#Substring.beq","kind":"def","line":4042,"name":"Substring.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4042-L4051"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.repair\"><span class=\"name\">Substring</span>.<span class=\"name\">repair</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"Given a `Substring`, returns another one which has valid endpoints\nand represents the same substring according to `Substring.toString`.\n(Note, the substring may still be inverted, i.e. beginning greater than end.)\n","docLink":"./Init/Data/String/Basic.html#Substring.repair","kind":"def","line":4034,"name":"Substring.repair","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4034-L4040"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toNat?\"><span class=\"name\">Substring</span>.<span class=\"name\">toNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Checks whether the substring can be interpreted as the decimal representation of a natural number,\nreturning the number if it can.\n\nA substring can be interpreted as a decimal natural number if it is not empty and all the characters\nin it are digits.\n\nUse `Substring.isNat` to check whether the substring is such a substring.\n","docLink":"./Init/Data/String/Basic.html#Substring.toNat?","kind":"def","line":4019,"name":"Substring.toNat?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4019-L4032"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.isNat\"><span class=\"name\">Substring</span>.<span class=\"name\">isNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the substring can be interpreted as the decimal representation of a natural number.\n\nA substring can be interpreted as a decimal natural number if it is not empty and all the characters\nin it are digits.\n\nUse `Substring.toNat?` to convert such a substring to a natural number.\n","docLink":"./Init/Data/String/Basic.html#Substring.isNat","kind":"def","line":4008,"name":"Substring.isNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L4008-L4017"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trim\"><span class=\"name\">Substring</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"Removes leading and trailing whitespace from a substring by first moving its start position to the\nfirst non-whitespace character, and then moving its end position to the last non-whitespace\ncharacter.\n\nIf the substring consists only of whitespace, then the resulting substring's start position is moved\nto its end position.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`.\n\nExamples:\n * `\" red green blue \".toSubstring.trim.toString = \"red green blue\"`\n * `\" red green blue \".toSubstring.trim.startPos = ⟨1⟩`\n * `\" red green blue \".toSubstring.trim.stopPos = ⟨15⟩`\n * `\"     \".toSubstring.trim.startPos = ⟨5⟩`\n","docLink":"./Init/Data/String/Basic.html#Substring.trim","kind":"def","line":3986,"name":"Substring.trim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3986-L4006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trimRight\"><span class=\"name\">Substring</span>.<span class=\"name\">trimRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>","info":{"doc":"Removes trailing whitespace from a substring by moving its end position to the last non-whitespace\ncharacter, or to its start position if there is no non-whitespace character.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`.\n","docLink":"./Init/Data/String/Basic.html#Substring.trimRight","kind":"def","line":3977,"name":"Substring.trimRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3977-L3984"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.trimLeft\"><span class=\"name\">Substring</span>.<span class=\"name\">trimLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>","info":{"doc":"Removes leading whitespace from a substring by moving its start position to the first non-whitespace\ncharacter, or to its end position if there is no non-whitespace character.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`.\n","docLink":"./Init/Data/String/Basic.html#Substring.trimLeft","kind":"def","line":3968,"name":"Substring.trimLeft","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3968-L3975"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropRightWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">dropRightWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Removes the longest suffix of a substring in which a Boolean predicate returns `true` for all\ncharacters by moving the substring's end position. The end position is moved just after the position\nof the last character for which the predicate returns `false`, or to the substring's start position\nif the predicate always returns `true`.\n","docLink":"./Init/Data/String/Basic.html#Substring.dropRightWhile","kind":"def","line":3957,"name":"Substring.dropRightWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3957-L3966"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRightWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRightWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Retains only the longest suffix of a substring in which a Boolean predicate returns `true` for all\ncharacters by moving the substring's start position towards its end position.\n","docLink":"./Init/Data/String/Basic.html#Substring.takeRightWhile","kind":"def","line":3948,"name":"Substring.takeRightWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3948-L3955"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRightWhileAux\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRightWhileAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">begPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.takeRightWhileAux","kind":"def","line":3937,"name":"Substring.takeRightWhileAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3937-L3946"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Removes the longest prefix of a substring in which a Boolean predicate returns `true` for all\ncharacters by moving the substring's start position. The start position is moved to the position of\nthe first character for which the predicate returns `false`, or to the substring's end position if\nthe predicate always returns `true`.\n","docLink":"./Init/Data/String/Basic.html#Substring.dropWhile","kind":"def","line":3926,"name":"Substring.dropWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3926-L3935"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.takeWhileImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">takeWhileImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.takeWhileImpl","kind":"def","line":3922,"name":"Substring.Internal.takeWhileImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3922-L3924"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeWhile\"><span class=\"name\">Substring</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Retains only the longest prefix of a substring in which a Boolean predicate returns `true` for all\ncharacters by moving the substring's end position towards its start position.\n","docLink":"./Init/Data/String/Basic.html#Substring.takeWhile","kind":"def","line":3913,"name":"Substring.takeWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3913-L3920"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeWhileAux\"><span class=\"name\">Substring</span>.<span class=\"name\">takeWhileAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.takeWhileAux","kind":"def","line":3904,"name":"Substring.takeWhileAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3904-L3911"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.contains\"><span class=\"name\">Substring</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether a substring contains the specified character.\n","docLink":"./Init/Data/String/Basic.html#Substring.contains","kind":"def","line":3898,"name":"Substring.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3898-L3902"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.allImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">allImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.allImpl","kind":"def","line":3894,"name":"Substring.Internal.allImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3894-L3896"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.all\"><span class=\"name\">Substring</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the Boolean predicate `p` returns `true` for every character in a substring.\n\nShort-circuits at the first character for which `p` returns `false`.\n","docLink":"./Init/Data/String/Basic.html#Substring.all","kind":"def","line":3886,"name":"Substring.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3886-L3892"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.any\"><span class=\"name\">Substring</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the Boolean predicate `p` returns `true` for any character in a substring.\n\nShort-circuits at the first character for which `p` returns `true`.\n","docLink":"./Init/Data/String/Basic.html#Substring.any","kind":"def","line":3877,"name":"Substring.any","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3877-L3884"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.foldr\"><span class=\"name\">Substring</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Folds a function over a substring from the right, accumulating a value starting with `init`. The\naccumulated value is combined with each character in reverse order, using `f`.\n","docLink":"./Init/Data/String/Basic.html#Substring.foldr","kind":"def","line":3869,"name":"Substring.foldr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3869-L3875"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.foldl\"><span class=\"name\">Substring</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Folds a function over a substring from the left, accumulating a value starting with `init`. The\naccumulated value is combined with each character in order, using `f`.\n","docLink":"./Init/Data/String/Basic.html#Substring.foldl","kind":"def","line":3861,"name":"Substring.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3861-L3867"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.splitOn\"><span class=\"name\">Substring</span>.<span class=\"name\">splitOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot; &quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"Splits a substring `s` on occurrences of the separator string `sep`. The default separator is `\" \"`.\n\nWhen `sep` is empty, the result is `[s]`. When `sep` occurs in overlapping patterns, the first match\nis taken. There will always be exactly `n+1` elements in the returned list if there were `n`\nnon-overlapping matches of `sep` in the string. The separators are not included in the returned\nsubstrings, which are all substrings of `s`'s string.\n","docLink":"./Init/Data/String/Basic.html#Substring.splitOn","kind":"def","line":3828,"name":"Substring.splitOn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3828-L3859"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.extractImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">extractImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.extractImpl","kind":"def","line":3824,"name":"Substring.Internal.extractImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3824-L3826"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.extract\"><span class=\"name\">Substring</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Returns the region of the substring delimited by the provided start and stop positions, as a\nsubstring. The positions are interpreted with respect to the substring's start position, rather than\nthe underlying string.\n\nIf the resulting substring is empty, then the resulting substring is a substring of the empty string\n`\"\"`. Otherwise, the underlying string is that of the input substring with the beginning and end\npositions adjusted.\n","docLink":"./Init/Data/String/Basic.html#Substring.extract","kind":"def","line":3812,"name":"Substring.extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3812-L3822"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.atEnd\"><span class=\"name\">Substring</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Checks whether a position in a substring is precisely equal to its ending position.\n\nThe position is understood relative to the substring's starting position, rather than the underlying\nstring's starting position.\n","docLink":"./Init/Data/String/Basic.html#Substring.atEnd","kind":"def","line":3803,"name":"Substring.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3803-L3810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.takeRight\"><span class=\"name\">Substring</span>.<span class=\"name\">takeRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Retains only the specified number of characters (Unicode code points) at the end of a substring, by\nmoving its start position towards its end position.\n\nIf the substring's end position is reached, the start position is not advanced past it.\n","docLink":"./Init/Data/String/Basic.html#Substring.takeRight","kind":"def","line":3794,"name":"Substring.takeRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3794-L3801"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.take\"><span class=\"name\">Substring</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Retains only the specified number of characters (Unicode code points) at the beginning of a\nsubstring, by moving its end position towards its start position.\n\nIf the substring's start position is reached, the end position is not retracted past it.\n","docLink":"./Init/Data/String/Basic.html#Substring.take","kind":"def","line":3785,"name":"Substring.take","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3785-L3792"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.dropRight\"><span class=\"name\">Substring</span>.<span class=\"name\">dropRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Removes the specified number of characters (Unicode code points) from the end of a substring\nby moving its end position towards its start position.\n\nIf the substring's start position is reached, the end position is not retracted past it.\n","docLink":"./Init/Data/String/Basic.html#Substring.dropRight","kind":"def","line":3776,"name":"Substring.dropRight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3776-L3783"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.dropImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">dropImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.dropImpl","kind":"def","line":3772,"name":"Substring.Internal.dropImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3772-L3774"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.drop\"><span class=\"name\">Substring</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></span></div></div>","info":{"doc":"Removes the specified number of characters (Unicode code points) from the beginning of a substring\nby advancing its start position.\n\nIf the substring's end position is reached, the start position is not advanced past it.\n","docLink":"./Init/Data/String/Basic.html#Substring.drop","kind":"def","line":3763,"name":"Substring.drop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3763-L3770"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.posOf\"><span class=\"name\">Substring</span>.<span class=\"name\">posOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></div></div>","info":{"doc":"Returns the substring-relative position of the first occurrence of `c` in `s`, or `s.bsize` if `c`\ndoesn't occur.\n","docLink":"./Init/Data/String/Basic.html#Substring.posOf","kind":"def","line":3755,"name":"Substring.posOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3755-L3761"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.frontImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">frontImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.frontImpl","kind":"def","line":3751,"name":"Substring.Internal.frontImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3751-L3753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.front\"><span class=\"name\">Substring</span>.<span class=\"name\">front</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the first character in the substring.\n\nIf the substring is empty, but the substring's start position is a valid position in the underlying\nstring, then the character at the start position is returned. If the substring's start position is\nnot a valid position in the string, the fallback value `(default : Char)`, which is `'A'`, is\nreturned.  Does not panic.\n","docLink":"./Init/Data/String/Basic.html#Substring.front","kind":"def","line":3740,"name":"Substring.front","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3740-L3749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prevn\"><span class=\"name\">Substring</span>.<span class=\"name\">prevn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></span></span></div></div>","info":{"doc":"Returns the position that's the specified number of characters prior to the given position in a\nsubstring. If the start position of the substring is reached, it is returned.\n\nBoth the input position and the returned position are interpreted relative to the substring's start\nposition, not the underlying string.\n","docLink":"./Init/Data/String/Basic.html#Substring.prevn","kind":"def","line":3729,"name":"Substring.prevn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3729-L3738"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.nextn\"><span class=\"name\">Substring</span>.<span class=\"name\">nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></span></span></div></div>","info":{"doc":"Returns the position that's the specified number of characters forward from the given position in a\nsubstring. If the end position of the substring is reached, it is returned.\n\nBoth the input position and the returned position are interpreted relative to the substring's start\nposition, not the underlying string.\n","docLink":"./Init/Data/String/Basic.html#Substring.nextn","kind":"def","line":3718,"name":"Substring.nextn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3718-L3727"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.prevImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">prevImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.prevImpl","kind":"def","line":3714,"name":"Substring.Internal.prevImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3714-L3716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.prev\"><span class=\"name\">Substring</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></span></div></div>","info":{"doc":"Returns the previous position in a substring, just prior to the given position. If the position is\nat the beginning of the substring, it is returned unmodified.\n\nBoth the input position and the returned position are interpreted relative to the substring's start\nposition, not the underlying string.\n","docLink":"./Init/Data/String/Basic.html#Substring.prev","kind":"def","line":3702,"name":"Substring.prev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3702-L3712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.lt_next\"><span class=\"name\">Substring</span>.<span class=\"name\">lt_next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#Substring.bsize\">bsize</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#Substring.next\">next</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.lt_next","kind":"theorem","line":3693,"name":"Substring.lt_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3693-L3700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.next\"><span class=\"name\">Substring</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a></span></span></div></div>","info":{"doc":"Returns the next position in a substring after the given position. If the position is at the end of\nthe substring, it is returned unmodified.\n\nBoth the input position and the returned position are interpreted relative to the substring's start\nposition, not the underlying string.\n","docLink":"./Init/Data/String/Basic.html#Substring.next","kind":"def","line":3681,"name":"Substring.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3681-L3691"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.getImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">getImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.getImpl","kind":"def","line":3677,"name":"Substring.Internal.getImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3677-L3679"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.get\"><span class=\"name\">Substring</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></div></div>","info":{"doc":"Returns the character at the given position in the substring.\n\nThe position is relative to the substring, rather than the underlying string, and no bounds checking\nis performed with respect to the substring's end position. If the relative position is not a valid\nposition in the underlying string, the fallback value `(default : Char)`, which is `'A'`, is\nreturned.  Does not panic.\n","docLink":"./Init/Data/String/Basic.html#Substring.get","kind":"def","line":3666,"name":"Substring.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3666-L3675"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toIterator\"><span class=\"name\">Substring</span>.<span class=\"name\">toIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>","info":{"doc":"Returns an iterator into the underlying string, at the substring's starting position. The ending\nposition is discarded, so the iterator alone cannot be used to determine whether its current\nposition is within the original substring.\n","docLink":"./Init/Data/String/Basic.html#Substring.toIterator","kind":"def","line":3658,"name":"Substring.toIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3658-L3664"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.toStringImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">toStringImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.toStringImpl","kind":"def","line":3654,"name":"Substring.Internal.toStringImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3654-L3656"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.toString\"><span class=\"name\">Substring</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Substring\">Substring</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Copies the region of the underlying string pointed to by a substring into a fresh string.\n","docLink":"./Init/Data/String/Basic.html#Substring.toString","kind":"def","line":3648,"name":"Substring.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3648-L3652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.Internal.isEmptyImpl\"><span class=\"name\">Substring</span>.<span class=\"name\">Internal</span>.<span class=\"name\">isEmptyImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Substring.Internal.isEmptyImpl","kind":"def","line":3644,"name":"Substring.Internal.isEmptyImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3644-L3646"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Substring.isEmpty\"><span class=\"name\">Substring</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether a substring is empty.\n\nA substring is empty if its start and end positions are the same.\n","docLink":"./Init/Data/String/Basic.html#Substring.isEmpty","kind":"def","line":3636,"name":"Substring.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3636-L3642"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.findLineStart\"><span class=\"name\">String</span>.<span class=\"name\">findLineStart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"Returns the position of the beginning of the line that contains the position `pos`.\n\nLines are ended by `'\\n'`, and the returned position is either `0 : String.Pos` or immediately after\na `'\\n'` character.\n","docLink":"./Init/Data/String/Basic.html#String.findLineStart","kind":"def","line":3621,"name":"String.findLineStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3621-L3630"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.replace\"><span class=\"name\">String</span>.<span class=\"name\">replace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">pattern </span><span class=\"fn\">replacement</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"In the string `s`, replaces all occurrences of `pattern` with `replacement`.\n\nExamples:\n* `\"red green blue\".replace \"e\" \"\" = \"rd grn blu\"`\n* `\"red green blue\".replace \"ee\" \"E\" = \"red grEn blue\"`\n* `\"red green blue\".replace \"e\" \"E\" = \"rEd grEEn bluE\"`\n","docLink":"./Init/Data/String/Basic.html#String.replace","kind":"def","line":3595,"name":"String.replace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3595-L3619"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.isPrefixOfImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">isPrefixOfImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.isPrefixOfImpl","kind":"def","line":3591,"name":"String.Internal.isPrefixOfImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3591-L3593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isPrefixOf\"><span class=\"name\">String</span>.<span class=\"name\">isPrefixOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the first string (`p`) is a prefix of the second (`s`).\n\n`String.startsWith` is a version that takes the potential prefix after the string.\n\nExamples:\n* `\"red\".isPrefixOf \"red green blue\" = true`\n* `\"green\".isPrefixOf \"red green blue\" = false`\n* `\"\".isPrefixOf \"red green blue\" = true`\n","docLink":"./Init/Data/String/Basic.html#String.isPrefixOf","kind":"def","line":3578,"name":"String.isPrefixOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3578-L3589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.substrEq\"><span class=\"name\">String</span>.<span class=\"name\">substrEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s1</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos1</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s2</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos2</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.substrEq","kind":"def","line":3574,"name":"String.substrEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3574-L3576"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.substrEq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">substrEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s1</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos1</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s2</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos2</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether substrings of two strings are equal. Substrings are indicated by their starting\npositions and a size in _UTF-8 bytes_. Returns `false` if the indicated substring does not exist in\neither string.\n\nThis is a legacy function. The recommended alternative is to construct slices representing the\nstrings to be compared and use the `BEq` instance of `String.Slice`.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.substrEq","kind":"def","line":3552,"name":"String.Pos.Raw.substrEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3552-L3572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toNat?\"><span class=\"name\">String</span>.<span class=\"name\">toNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Interprets a string as the decimal representation of a natural number, returning it. Returns `none`\nif the string does not contain a decimal natural number.\n\nA string can be interpreted as a decimal natural number if it is not empty and all the characters in\nit are digits.\n\nUse `String.isNat` to check whether `String.toNat?` would return `some`. `String.toNat!` is an\nalternative that panics instead of returning `none` when the string is not a natural number.\n\nExamples:\n * `\"\".toNat? = none`\n * `\"0\".toNat? = some 0`\n * `\"5\".toNat? = some 5`\n * `\"587\".toNat? = some 587`\n * `\"-587\".toNat? = none`\n * `\" 5\".toNat? = none`\n * `\"2+3\".toNat? = none`\n * `\"0xff\".toNat? = none`\n","docLink":"./Init/Data/String/Basic.html#String.toNat?","kind":"def","line":3526,"name":"String.toNat?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3526-L3550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isNat\"><span class=\"name\">String</span>.<span class=\"name\">isNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the string can be interpreted as the decimal representation of a natural number.\n\nA string can be interpreted as a decimal natural number if it is not empty and all the characters in\nit are digits.\n\nUse `String.toNat?` or `String.toNat!` to convert such a string to a natural number.\n\nExamples:\n * `\"\".isNat = false`\n * `\"0\".isNat = true`\n * `\"5\".isNat = true`\n * `\"05\".isNat = true`\n * `\"587\".isNat = true`\n * `\"-587\".isNat = false`\n * `\" 5\".isNat = false`\n * `\"2+3\".isNat = false`\n * `\"0xff\".isNat = false`\n","docLink":"./Init/Data/String/Basic.html#String.isNat","kind":"def","line":3504,"name":"String.isNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3504-L3524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.map\"><span class=\"name\">String</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Applies the function `f` to every character in a string, returning a string that contains the\nresulting characters.\n\nExamples:\n * `\"abc123\".map Char.toUpper = \"ABC123\"`\n * `\"\".map Char.toUpper = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.map","kind":"def","line":3493,"name":"String.map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3493-L3502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mapAux\"><span class=\"name\">String</span>.<span class=\"name\">mapAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.mapAux","kind":"def","line":3484,"name":"String.mapAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3484-L3491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mapAux_lemma\"><span class=\"name\">String</span>.<span class=\"name\">mapAux_lemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">Pos.Raw.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.set\">Pos.Raw.set</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">Pos.Raw.next</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.set\">Pos.Raw.set</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.mapAux_lemma","kind":"theorem","line":3475,"name":"String.mapAux_lemma","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3475-L3482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.set_next_add\"><span class=\"name\">String</span>.<span class=\"name\">set_next_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">Pos.Raw.next</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">Pos.Raw.next</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.set\">Pos.Raw.set</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.set\">Pos.Raw.set</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.set_next_add","kind":"theorem","line":3455,"name":"String.set_next_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3455-L3473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.utf8SetAux_of_gt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">utf8SetAux_of_gt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c'</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">p</span> → <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.utf8SetAux\">utf8SetAux</a> <span class=\"fn\">c'</span> <span class=\"fn\">cs</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">cs</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.utf8SetAux_of_gt","kind":"theorem","line":3449,"name":"String.Pos.Raw.utf8SetAux_of_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3449-L3453"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.containsImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">containsImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.containsImpl","kind":"def","line":3445,"name":"String.Internal.containsImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3445-L3447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.contains\"><span class=\"name\">String</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether a string contains the specified character.\n\nExamples:\n* `\"green\".contains 'e' = true`\n* `\"green\".contains 'x' = false`\n* `\"\".contains 'x' = false`\n","docLink":"./Init/Data/String/Basic.html#String.contains","kind":"def","line":3434,"name":"String.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3434-L3443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.all\"><span class=\"name\">String</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the Boolean predicate `p` returns `true` for every character in a string.\n\nShort-circuits at the first character for which `p` returns `false`.\n\nExamples:\n* `\"brown\".all (·.isLetter) = true`\n* `\"brown and orange\".all (·.isLetter) = false`\n* `\"\".all (fun _ => false) = true`\n","docLink":"./Init/Data/String/Basic.html#String.all","kind":"def","line":3421,"name":"String.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3421-L3432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.anyImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">anyImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.anyImpl","kind":"def","line":3417,"name":"String.Internal.anyImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3417-L3419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.any\"><span class=\"name\">String</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether there is a character in a string for which the Boolean predicate `p` returns `true`.\n\nShort-circuits at the first character for which `p` returns `true`.\n\nExamples:\n* `\"brown\".any (·.isLetter) = true`\n* `\"brown\".any (·.isWhitespace) = false`\n* `\"brown and orange\".any (·.isLetter) = true`\n* `\"\".any (fun _ => false) = false`\n","docLink":"./Init/Data/String/Basic.html#String.any","kind":"def","line":3403,"name":"String.any","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3403-L3415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.anyAux\"><span class=\"name\">String</span>.<span class=\"name\">anyAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.anyAux","kind":"def","line":3394,"name":"String.anyAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3394-L3401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldr\"><span class=\"name\">String</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Folds a function over a string from the right, accumulating a value starting with `init`. The\naccumulated value is combined with each character in reverse order, using `f`.\n\nExamples:\n * `\"coffee tea water\".foldr (fun c n => if c.isWhitespace then n + 1 else n) 0 = 2`\n * `\"coffee tea and water\".foldr (fun c n => if c.isWhitespace then n + 1 else n) 0 = 3`\n * `\"coffee tea water\".foldr (fun c s => c.push s) \"\" = \"retaw dna aet eeffoc\"`\n","docLink":"./Init/Data/String/Basic.html#String.foldr","kind":"def","line":3382,"name":"String.foldr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3382-L3392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldrAux\"><span class=\"name\">String</span>.<span class=\"name\">foldrAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">begPos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.foldrAux","kind":"def","line":3372,"name":"String.foldrAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3372-L3380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.foldlImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">foldlImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init </span><span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.foldlImpl","kind":"def","line":3368,"name":"String.Internal.foldlImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3368-L3370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldl\"><span class=\"name\">String</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Folds a function over a string from the left, accumulating a value starting with `init`. The\naccumulated value is combined with each character in order, using `f`.\n\nExamples:\n * `\"coffee tea water\".foldl (fun n c => if c.isWhitespace then n + 1 else n) 0 = 2`\n * `\"coffee tea and water\".foldl (fun n c => if c.isWhitespace then n + 1 else n) 0 = 3`\n * `\"coffee tea water\".foldl (·.push ·) \"\" = \"coffee tea water\"`\n","docLink":"./Init/Data/String/Basic.html#String.foldl","kind":"def","line":3356,"name":"String.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3356-L3366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.foldlAux\"><span class=\"name\">String</span>.<span class=\"name\">foldlAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopPos </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.foldlAux","kind":"def","line":3349,"name":"String.foldlAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3349-L3354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.offsetOfPosImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">offsetOfPosImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.offsetOfPosImpl","kind":"def","line":3345,"name":"String.Internal.offsetOfPosImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3345-L3347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.offsetOfPos\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Returns the character index that corresponds to the provided position (i.e. UTF-8 byte index) in a\nstring.\n\nIf the position is at the end of the string, then the string's length in characters is returned. If\nthe position is invalid due to pointing at the middle of a UTF-8 byte sequence, then the character\nindex of the next character after the position is returned.\n\nExamples:\n* `\"L∃∀N\".offsetOfPos ⟨0⟩ = 0`\n* `\"L∃∀N\".offsetOfPos ⟨1⟩ = 1`\n* `\"L∃∀N\".offsetOfPos ⟨2⟩ = 2`\n* `\"L∃∀N\".offsetOfPos ⟨4⟩ = 2`\n* `\"L∃∀N\".offsetOfPos ⟨5⟩ = 3`\n* `\"L∃∀N\".offsetOfPos ⟨50⟩ = 4`\n","docLink":"./Init/Data/String/Basic.html#String.offsetOfPos","kind":"def","line":3326,"name":"String.offsetOfPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3326-L3343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.offsetOfPosAux\"><span class=\"name\">String</span>.<span class=\"name\">offsetOfPosAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.offsetOfPosAux","kind":"def","line":3317,"name":"String.offsetOfPosAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3317-L3324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prevn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position back by the specified number of characters, stopping at the beginning\nof the string.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.prevn","kind":"def","line":3307,"name":"String.Iterator.prevn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3307-L3313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position forward by the specified number of characters.\n\nThe resulting iterator is only valid if the number of characters to skip is less than or equal\nto the number of characters left in the iterator.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.nextn","kind":"def","line":3302,"name":"String.Iterator.nextn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3302-L3305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.remainingToString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">remainingToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"The remaining characters in an iterator, as a string.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.remainingToString","kind":"def","line":3296,"name":"String.Iterator.remainingToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3296-L3300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.forward\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position forward by the specified number of characters.\n\nThe resulting iterator is only valid if the number of characters to skip is less than or equal\nto the number of characters left in the iterator.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.forward","kind":"def","line":3286,"name":"String.Iterator.forward","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3286-L3294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.extract\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Extracts the substring between the positions of two iterators. The first iterator's position is the\nstart of the substring, and the second iterator's position is the end.\n\nReturns the empty string if the iterators are for different strings, or if the position of the first\niterator is past the position of the second iterator.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.extract","kind":"def","line":3274,"name":"String.Iterator.extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3274-L3284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.toEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Moves the iterator's position to the end of the string, just past the last character.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.toEnd","kind":"def","line":3268,"name":"String.Iterator.toEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3268-L3272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.setCurr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">setCurr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Replaces the current character in the string.\n\nDoes nothing if the iterator is at the end of the string. If both the replacement character and the\nreplaced character are 7-bit ASCII characters and the string is not shared, then it is updated\nin-place and not copied.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.setCurr","kind":"def","line":3258,"name":"String.Iterator.setCurr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3258-L3266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.next'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></div></div>","info":{"doc":"Moves the iterator's position forward by one character, unconditionally.\n\nThe proof of `it.hasNext` ensures that there is, in fact, a position that's one character forwards.\nThis function is faster that `String.Iterator.next` due to avoiding a run-time bounds check.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.next'","kind":"def","line":3248,"name":"String.Iterator.next'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3248-L3256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.curr'\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Gets the character at the iterator's current position.\n\nThe proof of `it.hasNext` ensures that there is, in fact, a character at the current position. This\nfunction is faster that `String.Iterator.curr` due to avoiding a run-time bounds check.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.curr'","kind":"def","line":3238,"name":"String.Iterator.curr'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3238-L3246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.hasPrev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the iterator is after the beginning of the string.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.hasPrev","kind":"def","line":3232,"name":"String.Iterator.hasPrev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3232-L3236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the iterator is at or before the string's last character.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.hasNext","kind":"def","line":3226,"name":"String.Iterator.hasNext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3226-L3230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the iterator is past its string's last character.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.atEnd","kind":"def","line":3220,"name":"String.Iterator.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3220-L3224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.prev\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Moves the iterator's position backward by one character, unconditionally.\n\nThe position is not changed if the iterator is at the beginning of the string.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.prev","kind":"def","line":3212,"name":"String.Iterator.prev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3212-L3218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.next\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Moves the iterator's position forward by one character, unconditionally.\n\nIt is only valid to call this function if the iterator is not at the end of the string (i.e.\nif `Iterator.atEnd` is `false`); otherwise, the resulting iterator will be invalid.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.next","kind":"def","line":3203,"name":"String.Iterator.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3203-L3210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.curr\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Gets the character at the iterator's current position.\n\nA run-time bounds check is performed. Use `String.Iterator.curr'` to avoid redundant bounds checks.\n\nIf the position is invalid, returns `(default : Char)`.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.curr","kind":"def","line":3193,"name":"String.Iterator.curr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3193-L3201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.pos\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"The current UTF-8 byte position in the string `s`.\n\nThis position is not guaranteed to be valid for the string. If the position is not valid, then the\ncurrent character is `(default : Char)`, similar to `String.get` on an invalid position.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.pos","kind":"def","line":3190,"name":"String.Iterator.pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3190-L3191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.remainingBytes\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The number of UTF-8 bytes remaining in the iterator.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.remainingBytes","kind":"def","line":3184,"name":"String.Iterator.remainingBytes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3184-L3188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.toString\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The string being iterated over. ","docLink":"./Init/Data/String/Basic.html#String.Iterator.toString","kind":"def","line":3181,"name":"String.Iterator.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3181-L3182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.sizeOf_eq\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.s\">s</a></span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.i\">i</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Iterator.sizeOf_eq","kind":"theorem","line":3177,"name":"String.Iterator.sizeOf_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3177-L3178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instSizeOfIterator\"><span class=\"name\">String</span>.<span class=\"name\">instSizeOfIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></div></div>","info":{"doc":"The size of a string iterator is the number of bytes remaining.\n\nRecursive functions that iterate towards the end of a string will typically decrease this measure.\n","docLink":"./Init/Data/String/Basic.html#String.instSizeOfIterator","kind":"instance","line":3169,"name":"String.instSizeOfIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3169-L3175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.iter\"><span class=\"name\">String</span>.<span class=\"name\">iter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></div></div>","info":{"doc":"Creates an iterator at the beginning of the string. ","docLink":"./Init/Data/String/Basic.html#String.iter","kind":"def","line":3166,"name":"String.iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3166-L3167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.mkIterator\"><span class=\"name\">String</span>.<span class=\"name\">mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></div></div>","info":{"doc":"Creates an iterator at the beginning of the string. ","docLink":"./Init/Data/String/Basic.html#String.mkIterator","kind":"def","line":3162,"name":"String.mkIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3162-L3164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabitedIterator\"><span class=\"name\">String</span>.<span class=\"name\">instInhabitedIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instInhabitedIterator","kind":"instance","line":3160,"name":"String.instInhabitedIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3160-L3160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabitedIterator.default\"><span class=\"name\">String</span>.<span class=\"name\">instInhabitedIterator</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instInhabitedIterator.default","kind":"def","line":3160,"name":"String.instInhabitedIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3160-L3160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableEqIterator\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableEqIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableEqIterator","kind":"instance","line":3160,"name":"String.instDecidableEqIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3160-L3160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableEqIterator.decEq\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableEqIterator</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableEqIterator.decEq","kind":"def","line":3160,"name":"String.instDecidableEqIterator.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3160-L3160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.i\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">i</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"The current UTF-8 byte position in the string `s`.\n\nThis position is not guaranteed to be valid for the string. If the position is not valid, then the\ncurrent character is `(default : Char)`, similar to `String.get` on an invalid position.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator.i","kind":"def","line":3159,"name":"String.Iterator.i","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3159-L3159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.s\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">s</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The string being iterated over. ","docLink":"./Init/Data/String/Basic.html#String.Iterator.s","kind":"def","line":3153,"name":"String.Iterator.s","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3153-L3153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator.mk\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Iterator.mk","kind":"ctor","line":3151,"name":"String.Iterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3151-L3151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Iterator\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An iterator over the characters (Unicode code points) in a `String`. Typically created by\n`String.iter`.\n\nString iterators pair a string with a valid byte index. This allows efficient character-by-character\nprocessing of strings while avoiding the need to manually ensure that byte indices are used with the\ncorrect strings.\n\nAn iterator is *valid* if the position `i` is *valid* for the string `s`, meaning `0 ≤ i ≤ s.endPos`\nand `i` lies on a UTF8 byte boundary. If `i = s.endPos`, the iterator is at the end of the string.\n\nMost operations on iterators return unspecified values if the iterator is not valid. The functions\nin the `String.Iterator` API rule out the creation of invalid iterators, with two exceptions:\n- `Iterator.next iter` is invalid if `iter` is already at the end of the string (`iter.atEnd` is\n  `true`), and\n- `Iterator.forward iter n`/`Iterator.nextn iter n` is invalid if `n` is strictly greater than the\n  number of remaining characters.\n","docLink":"./Init/Data/String/Basic.html#String.Iterator","kind":"structure","line":3133,"name":"String.Iterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3133-L3160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.intercalateImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">intercalateImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.intercalateImpl","kind":"def","line":3129,"name":"String.Internal.intercalateImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3129-L3131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.intercalate\"><span class=\"name\">String</span>.<span class=\"name\">intercalate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Appends the strings in a list of strings, placing the separator `s` between each pair.\n\nExamples:\n* `\", \".intercalate [\"red\", \"green\", \"blue\"] = \"red, green, blue\"`\n* `\" and \".intercalate [\"tea\", \"coffee\"] = \"tea and coffee\"`\n* `\" | \".intercalate [\"M\", \"\", \"N\"] = \"M |  | N\"`\n","docLink":"./Init/Data/String/Basic.html#String.intercalate","kind":"def","line":3114,"name":"String.intercalate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3114-L3127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.join\"><span class=\"name\">String</span>.<span class=\"name\">join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Appends all the strings in a list of strings, in order.\n\nUse `String.intercalate` to place a separator string between the strings in a list.\n\nExamples:\n* `String.join [\"gr\", \"ee\", \"n\"] = \"green\"`\n* `String.join [\"b\", \"\", \"l\", \"\", \"ue\"] = \"blue\"`\n* `String.join [] = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.join","kind":"def","line":3101,"name":"String.join","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3101-L3112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.isEmptyImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">isEmptyImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.isEmptyImpl","kind":"def","line":3097,"name":"String.Internal.isEmptyImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3097-L3099"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isEmpty\"><span class=\"name\">String</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether a string is empty.\n\nEmpty strings are equal to `\"\"` and have length and end position `0`.\n\nExamples:\n* `\"\".isEmpty = true`\n* `\"empty\".isEmpty = false`\n* `\" \".isEmpty = false`\n","docLink":"./Init/Data/String/Basic.html#String.isEmpty","kind":"def","line":3084,"name":"String.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3084-L3095"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.pushnImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">pushnImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.pushnImpl","kind":"def","line":3080,"name":"String.Internal.pushnImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3080-L3082"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pushn\"><span class=\"name\">String</span>.<span class=\"name\">pushn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Adds multiple repetitions of a character to the end of a string.\n\nReturns `s`, with `n` repetitions of `c` at the end. Internally, the implementation repeatedly calls\n`String.push`, so the string is modified in-place if there is a unique reference to it.\n\nExamples:\n * `\"indeed\".pushn '!' 2 = \"indeed!!\"`\n * `\"indeed\".pushn '!' 0 = \"indeed\"`\n * `\"\".pushn ' ' 4 = \"    \"`\n","docLink":"./Init/Data/String/Basic.html#String.pushn","kind":"def","line":3066,"name":"String.pushn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3066-L3078"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instAppend\"><span class=\"name\">String</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instAppend","kind":"instance","line":3064,"name":"String.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3064-L3064"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabited_1\"><span class=\"name\">String</span>.<span class=\"name\">instInhabited_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instInhabited_1","kind":"instance","line":3062,"name":"String.instInhabited_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3062-L3062"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitOn\"><span class=\"name\">String</span>.<span class=\"name\">splitOn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot; &quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Splits a string `s` on occurrences of the separator string `sep`. The default separator is `\" \"`.\n\nWhen `sep` is empty, the result is `[s]`. When `sep` occurs in overlapping patterns, the first match\nis taken. There will always be exactly `n+1` elements in the returned list if there were `n`\nnon-overlapping matches of `sep` in the string. The separators are not included in the returned\nsubstrings.\n\nExamples:\n* `\"here is some text \".splitOn = [\"here\", \"is\", \"some\", \"text\", \"\"]`\n* `\"here is some text \".splitOn \"some\" = [\"here is \", \" text \"]`\n* `\"here is some text \".splitOn \"\" = [\"here is some text \"]`\n* `\"ababacabac\".splitOn \"aba\" = [\"\", \"bac\", \"c\"]`\n","docLink":"./Init/Data/String/Basic.html#String.splitOn","kind":"def","line":3045,"name":"String.splitOn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3045-L3060"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitOnAux\"><span class=\"name\">String</span>.<span class=\"name\">splitOnAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Auxiliary for `splitOn`. Preconditions:\n* `sep` is not empty\n* `b <= i` are indexes into `s`\n* `j` is an index into `sep`, and not at the end\n\nIt represents the state where we have currently parsed some split parts into `r` (in reverse order),\n`b` is the beginning of the string / the end of the previous match of `sep`, and the first `j` bytes\nof `sep` match the bytes `i-j .. i` of `s`.\n","docLink":"./Init/Data/String/Basic.html#String.splitOnAux","kind":"def","line":3000,"name":"String.splitOnAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L3000-L3043"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.split\"><span class=\"name\">String</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.split","kind":"def","line":2996,"name":"String.split","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2996-L2998"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitToList\"><span class=\"name\">String</span>.<span class=\"name\">splitToList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Splits a string at each character for which `p` returns `true`.\n\nThe characters that satisfy `p` are not included in any of the resulting strings. If multiple\ncharacters in a row satisfy `p`, then the resulting list will contain empty strings.\n\nExamples:\n* `\"coffee tea water\".split (·.isWhitespace) = [\"coffee\", \"tea\", \"water\"]`\n* `\"coffee  tea  water\".split (·.isWhitespace) = [\"coffee\", \"\", \"tea\", \"\", \"water\"]`\n* `\"fun x =>\\n  x + 1\\n\".split (· == '\\n') = [\"fun x =>\", \"  x + 1\", \"\"]`\n","docLink":"./Init/Data/String/Basic.html#String.splitToList","kind":"def","line":2982,"name":"String.splitToList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2982-L2994"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.splitAux\"><span class=\"name\">String</span>.<span class=\"name\">splitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.splitAux","kind":"def","line":2969,"name":"String.splitAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2969-L2980"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.extract\"><span class=\"name\">String</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.extract","kind":"def","line":2965,"name":"String.extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2965-L2967"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.extract.go₂\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.extract.go₂","kind":"def","line":2961,"name":"String.Pos.Raw.extract.go₂","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2961-L2963"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.extract.go₁\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">extract</span>.<span class=\"name\">go₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.extract.go₁","kind":"def","line":2957,"name":"String.Pos.Raw.extract.go₁","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2957-L2959"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.extract\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>","info":{"doc":"Creates a new string that consists of the region of the input string delimited by the two positions.\n\nThe result is `\"\"` if the start position is greater than or equal to the end position or if the\nstart position is at the end of the string. If either position is invalid (that is, if either points\nat the middle of a multi-byte UTF-8 character) then the result is unspecified.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.extract`, but usually\nit is even better to operate on `String.Slice` instead and call `String.Slice.copy` (only) if\nrequired.\n\nExamples:\n* `\"red green blue\".extract ⟨0⟩ ⟨3⟩ = \"red\"`\n* `\"red green blue\".extract ⟨3⟩ ⟨0⟩ = \"\"`\n* `\"red green blue\".extract ⟨0⟩ ⟨100⟩ = \"red green blue\"`\n* `\"red green blue\".extract ⟨4⟩ ⟨100⟩ = \"green blue\"`\n* `\"L∃∀N\".extract ⟨1⟩ ⟨2⟩ = \"∃∀N\"`\n* `\"L∃∀N\".extract ⟨2⟩ ⟨100⟩ = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.extract","kind":"def","line":2934,"name":"String.Pos.Raw.extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2934-L2963"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.firstDiffPos.loop\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopPos </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.firstDiffPos.loop","kind":"def","line":2924,"name":"String.firstDiffPos.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2924-L2930"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.firstDiffPos\"><span class=\"name\">String</span>.<span class=\"name\">firstDiffPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"Returns the first position where the two strings differ.\n\nIf one string is a prefix of the other, then the returned position is the end position of the\nshorter string. If the strings are identical, then their end position is returned.\n\nExamples:\n* `\"tea\".firstDiffPos \"ten\" = ⟨2⟩`\n* `\"tea\".firstDiffPos \"tea\" = ⟨3⟩`\n* `\"tea\".firstDiffPos \"teas\" = ⟨3⟩`\n* `\"teas\".firstDiffPos \"tea\" = ⟨3⟩`\n","docLink":"./Init/Data/String/Basic.html#String.firstDiffPos","kind":"def","line":2909,"name":"String.firstDiffPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2909-L2932"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.Internal.minImpl\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Internal</span>.<span class=\"name\">minImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.Internal.minImpl","kind":"def","line":2905,"name":"String.Pos.Raw.Internal.minImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2905-L2907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.min\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">min</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Returns either `p₁` or `p₂`, whichever has the least byte index.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.min","kind":"def","line":2899,"name":"String.Pos.Raw.min","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2899-L2903"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revFind\"><span class=\"name\">String</span>.<span class=\"name\">revFind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"Finds the position of the last character in a string for which the Boolean predicate `p` returns\n`true`. If there is no such character in the string, then `none` is returned.\n\nExamples:\n * `\"coffee tea water\".revFind (·.isWhitespace) = some ⟨10⟩`\n * `\"tea\".revFind (· == 'X') = none`\n * `\"\".revFind (· == 'X') = none`\n","docLink":"./Init/Data/String/Basic.html#String.revFind","kind":"def","line":2887,"name":"String.revFind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2887-L2897"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revFindAux\"><span class=\"name\">String</span>.<span class=\"name\">revFindAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.revFindAux","kind":"def","line":2878,"name":"String.revFindAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2878-L2885"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.find\"><span class=\"name\">String</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"Finds the position of the first character in a string for which the Boolean predicate `p` returns\n`true`. If there is no such character in the string, then the end position of the string is\nreturned.\n\nExamples:\n * `\"coffee tea water\".find (·.isWhitespace) = ⟨6⟩`\n * `\"tea\".find (· == 'X') = ⟨3⟩`\n * `\"\".find (· == 'X') = ⟨0⟩`\n","docLink":"./Init/Data/String/Basic.html#String.find","kind":"def","line":2865,"name":"String.find","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2865-L2876"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.findAux\"><span class=\"name\">String</span>.<span class=\"name\">findAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopPos </span><span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.findAux","kind":"def","line":2856,"name":"String.findAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2856-L2863"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revPosOf\"><span class=\"name\">String</span>.<span class=\"name\">revPosOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"Returns the position of the last occurrence of a character, `c`, in a string `s`. If `s` does not\ncontain `c`, returns `none`.\n\nExamples:\n* `\"abcabc\".revPosOf 'a' = some ⟨3⟩`\n* `\"abcabc\".revPosOf 'z' = none`\n* `\"L∃∀N\".revPosOf '∀' = some ⟨4⟩`\n","docLink":"./Init/Data/String/Basic.html#String.revPosOf","kind":"def","line":2844,"name":"String.revPosOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2844-L2854"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.revPosOfAux\"><span class=\"name\">String</span>.<span class=\"name\">revPosOfAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.revPosOfAux","kind":"def","line":2835,"name":"String.revPosOfAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2835-L2842"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.posOfImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">posOfImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.posOfImpl","kind":"def","line":2831,"name":"String.Internal.posOfImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2831-L2833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.posOf\"><span class=\"name\">String</span>.<span class=\"name\">posOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"Returns the position of the first occurrence of a character, `c`, in a string `s`. If `s` does not\ncontain `c`, returns `s.endPos`.\n\nExamples:\n* `\"abcba\".posOf 'a' = ⟨0⟩`\n* `\"abcba\".posOf 'z' = ⟨5⟩`\n* `\"L∃∀N\".posOf '∀' = ⟨4⟩`\n","docLink":"./Init/Data/String/Basic.html#String.posOf","kind":"def","line":2819,"name":"String.posOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2819-L2829"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.posOfAux\"><span class=\"name\">String</span>.<span class=\"name\">posOfAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopPos </span><span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.posOfAux","kind":"def","line":2810,"name":"String.posOfAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2810-L2817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.prev_lt_of_pos\"><span class=\"name\">String</span>.<span class=\"name\">prev_lt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.prev\">Pos.Raw.prev</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.prev_lt_of_pos","kind":"theorem","line":2806,"name":"String.prev_lt_of_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2806-L2808"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.prev_lt_of_pos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">prev_lt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.prev\">prev</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.prev_lt_of_pos","kind":"theorem","line":2803,"name":"String.Pos.Raw.prev_lt_of_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2803-L2804"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.utf8PrevAux_lt_of_pos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">utf8PrevAux_lt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.utf8PrevAux\">utf8PrevAux</a> <span class=\"fn\">cs</span> <span class=\"fn\">i</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.utf8PrevAux_lt_of_pos","kind":"theorem","line":2794,"name":"String.Pos.Raw.utf8PrevAux_lt_of_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2794-L2801"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.lt_next\"><span class=\"name\">String</span>.<span class=\"name\">lt_next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">Pos.Raw.next</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.lt_next","kind":"theorem","line":2790,"name":"String.lt_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2790-L2792"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_lt_byteIdx_next\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_lt_byteIdx_next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">next</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_lt_byteIdx_next","kind":"theorem","line":2787,"name":"String.Pos.Raw.byteIdx_lt_byteIdx_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2787-L2788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.lt_next\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">lt_next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\">next</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.lt_next","kind":"theorem","line":2784,"name":"String.Pos.Raw.lt_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2784-L2785"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.ne_zero_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ne_zero_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.ne_zero_of_lt","kind":"theorem","line":2781,"name":"String.Pos.Raw.ne_zero_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2781-L2782"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos_add_char\"><span class=\"name\">String</span>.<span class=\"name\">pos_add_char</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.pos_add_char","kind":"theorem","line":2777,"name":"String.pos_add_char","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2777-L2779"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos_lt_eq\"><span class=\"name\">String</span>.<span class=\"name\">pos_lt_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.pos_lt_eq","kind":"theorem","line":2773,"name":"String.pos_lt_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2773-L2775"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.next'\"><span class=\"name\">String</span>.<span class=\"name\">next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">Pos.Raw.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.next'","kind":"def","line":2768,"name":"String.next'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2768-L2771"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next'\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Returns the next position in a string after position `p`. The result is unspecified if `p` is not a\nvalid position.\n\nRequires evidence, `h`, that `p` is within bounds. No run-time bounds check is performed, as in\n`String.next`.\n\nA typical pattern combines `String.next'` with a dependent `if`-expression to avoid the overhead of\nan additional bounds check. For example:\n```\ndef next? (s : String) (p : String.Pos) : Option Char :=\n  if h : s.atEnd p then none else s.get (s.next' p h)\n```\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.next`, combined with\n`String.pos` or another means of obtaining a `String.ValidPos`.\n\nExample:\n* `let abc := \"abc\"; abc.get (abc.next' 0 (by decide)) = 'b'`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.next'","kind":"def","line":2743,"name":"String.Pos.Raw.next'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2743-L2766"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get'\"><span class=\"name\">String</span>.<span class=\"name\">get'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">Pos.Raw.atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.get'","kind":"def","line":2738,"name":"String.get'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2738-L2741"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get'\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\">atEnd</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the character at position `p` of a string. Returns `(default : Char)`, which is `'A'`, if\n`p` is not a valid position.\n\nRequires evidence, `h`, that `p` is within bounds instead of performing a run-time bounds check as\nin `String.get`.\n\nA typical pattern combines `get'` with a dependent `if`-expression to avoid the overhead of an\nadditional bounds check. For example:\n```\ndef getInBounds? (s : String) (p : String.Pos) : Option Char :=\n  if h : s.atEnd p then none else some (s.get' p h)\n```\nEven with evidence of `¬ s.atEnd p`, `p` may be invalid if a byte index points into the middle of a\nmulti-byte UTF-8 character. For example, `\"L∃∀N\".get' ⟨2⟩ (by decide) = (default : Char)`.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.get`, combined with\n`String.pos` or another means of obtaining a `String.ValidPos`.\n\nExamples:\n* `\"abc\".get' 0 (by decide) = 'a'`\n* `let lean := \"L∃∀N\"; lean.get' (0 |> lean.next |> lean.next) (by decide) = '∀'`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.get'","kind":"def","line":2710,"name":"String.Pos.Raw.get'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2710-L2736"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.atEnd","kind":"def","line":2706,"name":"String.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2706-L2708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Returns `true` if a specified byte position is greater than or equal to the position which points to\nthe end of a string. Otherwise, returns `false`.\n\nExamples:\n* `(0 |> \"abc\".next |> \"abc\".next |> \"abc\".atEnd) = false`\n* `(0 |> \"abc\".next |> \"abc\".next |> \"abc\".next |> \"abc\".next |> \"abc\".atEnd) = true`\n* `(0 |> \"L∃∀N\".next |> \"L∃∀N\".next |> \"L∃∀N\".next |> \"L∃∀N\".atEnd) = false`\n* `(0 |> \"L∃∀N\".next |> \"L∃∀N\".next |> \"L∃∀N\".next |> \"L∃∀N\".next |> \"L∃∀N\".atEnd) = true`\n* `\"abc\".atEnd ⟨4⟩ = true`\n* `\"L∃∀N\".atEnd ⟨7⟩ = false`\n* `\"L∃∀N\".atEnd ⟨8⟩ = true`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.atEnd","kind":"def","line":2689,"name":"String.Pos.Raw.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2689-L2704"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.back_eq_get_prev_endPos\"><span class=\"name\">String</span>.<span class=\"name\">back_eq_get_prev_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.back\">back</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get\">Pos.Raw.get</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.prev\">Pos.Raw.prev</a> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.back_eq_get_prev_endPos","kind":"theorem","line":2687,"name":"String.back_eq_get_prev_endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2687-L2687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.back\"><span class=\"name\">String</span>.<span class=\"name\">back</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the last character in `s`. If `s = \"\"`, returns `(default : Char)`.\n\nExamples:\n* `\"abc\".back = 'c'`\n* `\"\".back = (default : Char)`\n","docLink":"./Init/Data/String/Basic.html#String.back","kind":"def","line":2677,"name":"String.back","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2677-L2685"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.front_eq_get\"><span class=\"name\">String</span>.<span class=\"name\">front_eq_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.front\">front</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get\">Pos.Raw.get</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.front_eq_get","kind":"theorem","line":2675,"name":"String.front_eq_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2675-L2675"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.frontImpl\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">frontImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.frontImpl","kind":"def","line":2671,"name":"String.Internal.frontImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2671-L2673"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.front\"><span class=\"name\">String</span>.<span class=\"name\">front</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the first character in `s`. If `s = \"\"`, returns `(default : Char)`.\n\nExamples:\n* `\"abc\".front = 'a'`\n* `\"\".front = (default : Char)`\n","docLink":"./Init/Data/String/Basic.html#String.front","kind":"def","line":2661,"name":"String.front","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2661-L2669"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.prev\"><span class=\"name\">String</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.prev","kind":"def","line":2657,"name":"String.prev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2657-L2659"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.prev\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></span></span></div></div>","info":{"doc":"Returns the position in a string before a specified position, `p`. If `p = ⟨0⟩`, returns `0`. If `p`\nis greater than `endPos`, returns the position one byte before `p`. Otherwise, if `p` occurs in the\nmiddle of a multi-byte character, returns the beginning position of that character.\n\nFor example, `\"L∃∀N\".prev ⟨3⟩` is `⟨1⟩`, since byte 3 occurs in the middle of the multi-byte\ncharacter `'∃'` that starts at byte 1.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.prev` or one of its\nvariants like `String.ValidPos.prev?`, combined with `String.pos` or another means of obtaining\na `String.ValidPos`.\n\nExamples:\n* `\"abc\".get (\"abc\".endPos |> \"abc\".prev) = 'c'`\n* `\"L∃∀N\".get (\"L∃∀N\".endPos |> \"L∃∀N\".prev |> \"L∃∀N\".prev |> \"L∃∀N\".prev) = '∃'`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.prev","kind":"def","line":2637,"name":"String.Pos.Raw.prev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2637-L2655"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8PrevAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8PrevAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8PrevAux","kind":"def","line":2633,"name":"String.utf8PrevAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2633-L2635"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.utf8PrevAux\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">utf8PrevAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.utf8PrevAux","kind":"def","line":2626,"name":"String.Pos.Raw.utf8PrevAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2626-L2631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.next\"><span class=\"name\">String</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.next","kind":"def","line":2621,"name":"String.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2621-L2624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.next\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Returns the next position in a string after position `p`. If `p` is not a valid position or\n`p = s.endPos`, returns the position one byte after `p`.\n\nA run-time bounds check is performed to determine whether `p` is at the end of the string. If a\nbounds check has already been performed, use `String.next'` to avoid a repeated check.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.next` or one of its\nvariants like `String.ValidPos.next?`, combined with `String.pos` or another means of obtaining\na `String.ValisPos`.\n\nSome examples of edge cases:\n* `\"abc\".next ⟨3⟩ = ⟨4⟩`, since `3 = \"abc\".endPos`\n* `\"L∃∀N\".next ⟨2⟩ = ⟨3⟩`, since `2` points into the middle of a multi-byte UTF-8 character\n\nExamples:\n* `\"abc\".get (\"abc\".next 0) = 'b'`\n* `\"L∃∀N\".get (0 |> \"L∃∀N\".next |> \"L∃∀N\".next) = '∀'`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.next","kind":"def","line":2597,"name":"String.Pos.Raw.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2597-L2619"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.modify\"><span class=\"name\">String</span>.<span class=\"name\">modify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces the character at position `p` in the string `s` with the result of applying `f` to that\ncharacter. If `p` is an invalid position, the string is returned unchanged.\n\nIf both the replacement character and the replaced character are 7-bit ASCII characters and the\nstring is not shared, then it is updated in-place and not copied.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.set`, combined with\n`String.pos` or another means of obtaining a `String.ValidPos`.\n\nExamples:\n* `\"abc\".modify ⟨1⟩ Char.toUpper = \"aBc\"`\n* `\"abc\".modify ⟨3⟩ Char.toUpper = \"abc\"`\n","docLink":"./Init/Data/String/Basic.html#String.modify","kind":"def","line":2593,"name":"String.modify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2593-L2595"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.modify\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">modify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces the character at position `p` in the string `s` with the result of applying `f` to that\ncharacter. If `p` is an invalid position, the string is returned unchanged.\n\nIf both the replacement character and the replaced character are 7-bit ASCII characters and the\nstring is not shared, then it is updated in-place and not copied.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.set`, combined with\n`String.pos` or another means of obtaining a `String.ValidPos`.\n\nExamples:\n* `\"abc\".modify ⟨1⟩ Char.toUpper = \"aBc\"`\n* `\"abc\".modify ⟨3⟩ Char.toUpper = \"abc\"`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.modify","kind":"def","line":2575,"name":"String.Pos.Raw.modify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2575-L2591"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.set\"><span class=\"name\">String</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.set","kind":"def","line":2571,"name":"String.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2571-L2573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.set\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></span></div></div>","info":{"doc":"Replaces the character at a specified position in a string with a new character. If the position is\ninvalid, the string is returned unchanged.\n\nIf both the replacement character and the replaced character are 7-bit ASCII characters and the\nstring is not shared, then it is updated in-place and not copied.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.set`, combined with\n`String.pos` or another means of obtaining a `String.ValidPos`.\n\nExamples:\n* `\"abc\".set ⟨1⟩ 'B' = \"aBc\"`\n* `\"abc\".set ⟨3⟩ 'D' = \"abc\"`\n* `\"L∃∀N\".set ⟨4⟩ 'X' = \"L∃XN\"`\n* `\"L∃∀N\".set ⟨2⟩ 'X' = \"L∃∀N\"` because `'∃'` is a multi-byte character, so the byte index `2` is an\n  invalid position.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.set","kind":"def","line":2550,"name":"String.Pos.Raw.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2550-L2569"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.offset_modifyOfLE\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">offset_modifyOfLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q </span><span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hpq</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.modifyOfLE\">modifyOfLE</a></span> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">hp</span> <span class=\"fn\">hpq</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.offset_modifyOfLE","kind":"theorem","line":2546,"name":"String.ValidPos.offset_modifyOfLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2546-L2548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.modifyOfLE\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">modifyOfLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q </span><span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpq</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.modify\">modify</a></span> <span class=\"fn\">f</span> <span class=\"fn\">hp</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Given a valid position in a string, obtain the corresponding position after modifying a character\nin that string, provided that the position was before the changed position. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.modifyOfLE","kind":"def","line":2539,"name":"String.ValidPos.modifyOfLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2539-L2544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.modify_of_le\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">modify_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpq</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.modify\">modify</a></span> <span class=\"fn\">f</span> <span class=\"fn\">hp</span>)</span> <span class=\"fn\">q</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.modify_of_le","kind":"theorem","line":2534,"name":"String.Pos.Raw.IsValid.modify_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2534-L2537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.modify\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces the character at position `p` in the string `s` with the result of applying `f` to that\ncharacter.\n\nIf both the replacement character and the replaced character are 7-bit ASCII characters and the\nstring is not shared, then it is updated in-place and not copied.\n\nExamples:\n* `(\"abc\".pos ⟨1⟩ (by decide)).modify Char.toUpper (by decide) = \"aBc\"`\n","docLink":"./Init/Data/String/Basic.html#String.ValidPos.modify","kind":"def","line":2520,"name":"String.ValidPos.modify","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2520-L2532"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.offset_setOfLE\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">offset_setOfLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q </span><span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hpq</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.setOfLE\">setOfLE</a></span> <span class=\"fn\">p</span> <span class=\"fn\">c</span> <span class=\"fn\">hp</span> <span class=\"fn\">hpq</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.offset_setOfLE","kind":"theorem","line":2516,"name":"String.ValidPos.offset_setOfLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2516-L2518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.setOfLE\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">setOfLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q </span><span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpq</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.set\">set</a></span> <span class=\"fn\">c</span> <span class=\"fn\">hp</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Given a valid position in a string, obtain the corresponding position after setting a character on\nthat string, provided that the position was before the changed position. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.setOfLE","kind":"def","line":2508,"name":"String.ValidPos.setOfLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2508-L2514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.set_of_le\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">set_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpq</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.set\">set</a></span> <span class=\"fn\">c</span> <span class=\"fn\">hp</span>)</span> <span class=\"fn\">q</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.set_of_le","kind":"theorem","line":2501,"name":"String.Pos.Raw.IsValid.set_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2501-L2506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.set_eq_append\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">set_eq_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.set\">set</a></span> <span class=\"fn\">c</span> <span class=\"fn\">hp</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceStart\">replaceStart</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.next\">next</a></span> <span class=\"fn\">hp</span>)</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.set_eq_append","kind":"theorem","line":2492,"name":"String.ValidPos.set_eq_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2492-L2499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.set\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces the character at a specified position in a string with a new character.\n\nIf both the replacement character and the replaced character are 7-bit ASCII characters and the\nstring is not shared, then it is updated in-place and not copied.\n\nExamples:\n* `(\"abc\".pos ⟨1⟩ (by decide)).set 'B' (by decide) = \"aBc\"`\n* `(\"L∃∀N\".pos ⟨4⟩ (by decide)).set 'X' (by decide) = \"L∃XN\"`\n","docLink":"./Init/Data/String/Basic.html#String.ValidPos.set","kind":"def","line":2471,"name":"String.ValidPos.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2471-L2490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_stringReplaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_stringReplaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceStart\">replaceStart</a></span> <span class=\"fn\">p</span>)</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_stringReplaceStart","kind":"theorem","line":2466,"name":"String.Pos.Raw.isValidForSlice_stringReplaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2466-L2469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endExclusive_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">endExclusive_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceStart\">replaceStart</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.endExclusive_replaceStart","kind":"theorem","line":2461,"name":"String.endExclusive_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2461-L2464"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startInclusive_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">startInclusive_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceStart\">replaceStart</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.startInclusive_replaceStart","kind":"theorem","line":2456,"name":"String.startInclusive_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2456-L2459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.str_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">str_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceStart\">replaceStart</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.str_replaceStart","kind":"theorem","line":2453,"name":"String.str_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2453-L2454"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">replaceStart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"The slice from `p` (inclusive) up to the end of `s`. ","docLink":"./Init/Data/String/Basic.html#String.replaceStart","kind":"def","line":2448,"name":"String.replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2448-L2451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_stringReplaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_stringReplaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p</span>)</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">q</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_stringReplaceEnd","kind":"theorem","line":2444,"name":"String.Pos.Raw.isValidForSlice_stringReplaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2444-L2446"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endExclusive_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">endExclusive_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.endExclusive_replaceEnd","kind":"theorem","line":2439,"name":"String.endExclusive_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2439-L2442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startInclusive_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">startInclusive_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.startInclusive_replaceEnd","kind":"theorem","line":2434,"name":"String.startInclusive_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2434-L2437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.str_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">str_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.str_replaceEnd","kind":"theorem","line":2431,"name":"String.str_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2431-L2432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">replaceEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"The slice from the beginning of `s` up to `p` (exclusive). ","docLink":"./Init/Data/String/Basic.html#String.replaceEnd","kind":"def","line":2426,"name":"String.replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2426-L2429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.str_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">str_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.str_toSlice","kind":"theorem","line":2421,"name":"String.ValidPos.str_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2421-L2424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.byteIdx_lt_utf8ByteSize\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">byteIdx_lt_utf8ByteSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.byteIdx_lt_utf8ByteSize","kind":"theorem","line":2415,"name":"String.ValidPos.byteIdx_lt_utf8ByteSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2415-L2419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.byteIdx_offset_next\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">byteIdx_offset_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.next\">next</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.get\">get</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.byteIdx_offset_next","kind":"theorem","line":2411,"name":"String.ValidPos.byteIdx_offset_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2411-L2413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.offset_next\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">offset_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.next\">next</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.get\">get</a></span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.offset_next","kind":"theorem","line":2406,"name":"String.ValidPos.offset_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2406-L2409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice_get\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">toSlice_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\">toSlice</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.toSlice_get","kind":"theorem","line":2401,"name":"String.ValidPos.toSlice_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2401-L2404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8SetAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8SetAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c'</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8SetAux","kind":"def","line":2397,"name":"String.utf8SetAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2397-L2399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.utf8SetAux\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">utf8SetAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c'</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.utf8SetAux","kind":"def","line":2391,"name":"String.Pos.Raw.utf8SetAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2391-L2395"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get!\"><span class=\"name\">String</span>.<span class=\"name\">get!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.get!","kind":"def","line":2386,"name":"String.get!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2386-L2389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get!\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the character at position `p` of a string. Panics if `p` is not a valid position.\n\nSee `String.pos?` and `String.ValidPos.get` for a safer alternative.\n\nThis function is overridden with an efficient implementation in runtime code. See\n`String.utf8GetAux` for the reference implementation.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.get`, combined with\n`String.pos!` or another means of obtaining a `String.ValidPos`.\n\nExamples\n* `\"abc\".get! ⟨1⟩ = 'b'`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.get!","kind":"def","line":2367,"name":"String.Pos.Raw.get!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2367-L2384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get?\"><span class=\"name\">String</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.get?","kind":"def","line":2363,"name":"String.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2363-L2365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get?\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>","info":{"doc":"Returns the character at position `p` of a string. If `p` is not a valid position, returns `none`.\n\nThis function is overridden with an efficient implementation in runtime code. See\n`String.utf8GetAux?` for the reference implementation.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.get`, combined with\n`String.pos?` or another means of obtaining a `String.ValidPos`.\n\nExamples:\n* `\"abc\".get? ⟨1⟩ = some 'b'`\n* `\"abc\".get? ⟨3⟩ = none`\n* `\"L∃∀N\".get? ⟨1⟩ = some '∃'`\n* `\"L∃∀N\".get? ⟨2⟩ = none`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.get?","kind":"def","line":2344,"name":"String.Pos.Raw.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2344-L2361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8GetAux?\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8GetAux?","kind":"def","line":2340,"name":"String.utf8GetAux?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2340-L2342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.utf8GetAux?\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">utf8GetAux?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.utf8GetAux?","kind":"def","line":2335,"name":"String.Pos.Raw.utf8GetAux?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2335-L2338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get\"><span class=\"name\">String</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.get","kind":"def","line":2331,"name":"String.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2331-L2333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.get\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the character at position `p` of a string. If `p` is not a valid position, returns the\nfallback value `(default : Char)`, which is `'A'`, but does not panic.\n\nThis function is overridden with an efficient implementation in runtime code. See\n`String.Pos.Raw.utf8GetAux` for the reference implementation.\n\nThis is a legacy function. The recommended alternative is `String.ValidPos.get`, combined with\n`String.pos` or another means of obtaining a `String.ValidPos`.\n\nExamples:\n* `\"abc\".get ⟨1⟩ = 'b'`\n* `\"abc\".get ⟨3⟩ = (default : Char)` because byte `3` is at the end of the string.\n* `\"L∃∀N\".get ⟨2⟩ = (default : Char)` because byte `2` is in the middle of `'∃'`.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.get","kind":"def","line":2312,"name":"String.Pos.Raw.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2312-L2329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8GetAux\"><span class=\"name\">String</span>.<span class=\"name\">utf8GetAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8GetAux","kind":"def","line":2308,"name":"String.utf8GetAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2308-L2310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.utf8GetAux\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">utf8GetAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.utf8GetAux","kind":"def","line":2303,"name":"String.Pos.Raw.utf8GetAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2303-L2306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevn\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prevn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Iterates `p.prev` `n` times, saturating at `s.startPos` if necessary. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prevn","kind":"def","line":2293,"name":"String.Slice.Pos.prevn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2293-L2301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.nextn\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">nextn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Advances the position `p` `n` times, saturating at `s.endPos` if necessary. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.nextn","kind":"def","line":2283,"name":"String.Slice.Pos.nextn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2283-L2291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prev_lt\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prev_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prev\">prev</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prev_lt","kind":"theorem","line":2279,"name":"String.Slice.Pos.prev_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2279-L2281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_prev_lt_offset\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_prev_lt_offset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prev\">prev</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_prev_lt_offset","kind":"theorem","line":2276,"name":"String.Slice.Pos.offset_prev_lt_offset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2276-L2277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prev_ne_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prev_ne_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prev\">prev</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prev_ne_endPos","kind":"theorem","line":2273,"name":"String.Slice.Pos.prev_ne_endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2273-L2274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.ne_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ne_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.ne_of_lt","kind":"theorem","line":2270,"name":"String.Pos.Raw.ne_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2270-L2271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux_lt_rawEndPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prevAux_lt_rawEndPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux\">prevAux</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux_lt_rawEndPos","kind":"theorem","line":2267,"name":"String.Slice.Pos.prevAux_lt_rawEndPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2267-L2268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux_lt_self\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prevAux_lt_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux\">prevAux</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux_lt_self","kind":"theorem","line":2261,"name":"String.Slice.Pos.prevAux_lt_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2261-L2265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.lt_of_le_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">lt_of_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.lt_of_le_of_lt","kind":"theorem","line":2258,"name":"String.Pos.Raw.lt_of_le_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2258-L2259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAuxGo_le_self\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prevAuxGo_le_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux.go\">prevAux.go</a> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">{</a> <span class=\"fn\">byteIdx</span> := <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#String.Pos.Raw.mk\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prevAuxGo_le_self","kind":"theorem","line":2242,"name":"String.Slice.Pos.prevAuxGo_le_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2242-L2256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.lt_offset_findNextPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">lt_offset_findNextPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice.findNextPos\">findNextPos</a> <span class=\"fn\">o</span> <span class=\"fn\">s</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.lt_offset_findNextPos","kind":"theorem","line":2239,"name":"String.Slice.lt_offset_findNextPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2239-L2240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.inc_le\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">inc_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.inc\">inc</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.inc_le","kind":"theorem","line":2227,"name":"String.Pos.Raw.inc_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2227-L2227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.le_of_lt\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">q</span> → <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.le_of_lt","kind":"theorem","line":2225,"name":"String.Pos.Raw.le_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2225-L2225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.lt_inc\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">lt_inc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.inc\">inc</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.lt_inc","kind":"theorem","line":2223,"name":"String.Pos.Raw.lt_inc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2223-L2223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.le_refl\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">le_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.le_refl","kind":"theorem","line":2220,"name":"String.Pos.Raw.le_refl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2220-L2221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.findNextPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">findNextPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_h</span> : <span class=\"fn\">offset</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Given a byte position within a string slice, obtains the smallest valid position that is\nstrictly greater than the given byte position. ","docLink":"./Init/Data/String/Basic.html#String.Slice.findNextPos","kind":"def","line":2201,"name":"String.Slice.findNextPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2201-L2218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.cast_rfl\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">cast_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.cast\">cast</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.cast_rfl","kind":"theorem","line":2197,"name":"String.ValidPos.cast_rfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2197-L2199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.offset_cast\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">offset_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.cast\">cast</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.offset_cast","kind":"theorem","line":2193,"name":"String.ValidPos.offset_cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2193-L2195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.cast\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Constructs a valid position on `t` from a valid position on `s` and a proof that `s = t`. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.cast","kind":"def","line":2187,"name":"String.ValidPos.cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2187-L2191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.cast_rfl\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">cast_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.cast\">cast</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.cast_rfl","kind":"theorem","line":2183,"name":"String.Slice.Pos.cast_rfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2183-L2185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_cast\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.cast\">cast</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_cast","kind":"theorem","line":2179,"name":"String.Slice.Pos.offset_cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2179-L2181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.cast\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Constructs a valid position on `t` from a valid position on `s` and a proof that `s = t`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.cast","kind":"def","line":2173,"name":"String.Slice.Pos.cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2173-L2177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos!\"><span class=\"name\">String</span>.<span class=\"name\">pos!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Constructs a valid position `s` from a position, panicking if the position is not valid. ","docLink":"./Init/Data/String/Basic.html#String.pos!","kind":"def","line":2168,"name":"String.pos!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2168-L2171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos?\"><span class=\"name\">String</span>.<span class=\"name\">pos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></span></div></div>","info":{"doc":"Constructs a valid position on `s` from a position, returning `none` if the position is not valid. ","docLink":"./Init/Data/String/Basic.html#String.pos?","kind":"def","line":2163,"name":"String.pos?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2163-L2166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.pos\"><span class=\"name\">String</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">Pos.Raw.IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">off</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Constructs a valid position on `s` from a position and a proof that it is valid. ","docLink":"./Init/Data/String/Basic.html#String.pos","kind":"def","line":2158,"name":"String.pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2158-L2161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.prev!\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">prev!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Returns the previous valid position before the given position, or panics if the position is\nthe start position. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.prev!","kind":"def","line":2152,"name":"String.ValidPos.prev!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2152-L2156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.prev?\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">prev?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></span></div></div>","info":{"doc":"Returns the previous valid position before the given position, or `none` if the position is\nthe start position. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.prev?","kind":"def","line":2146,"name":"String.ValidPos.prev?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2146-L2150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.prev\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Returns the previous valid position before the given position, given a proof that the position\nis not the start position, which guarantees that such a position exists. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.prev","kind":"def","line":2140,"name":"String.ValidPos.prev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2140-L2144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.next!\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">next!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Advances a valid position on a string to the next valid position, or panics if the given\nposition is the past-the-end position. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.next!","kind":"def","line":2134,"name":"String.ValidPos.next!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2134-L2138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.next?\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></span></div></div>","info":{"doc":"Advances a valid position on a string to the next valid position, or returns `none` if the\ngiven position is the past-the-end position. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.next?","kind":"def","line":2128,"name":"String.ValidPos.next?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2128-L2132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.next\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Advances a valid position on a string to the next valid position, given a proof that the\nposition is not the past-the-end position, which guarantees that such a position exists. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.next","kind":"def","line":2122,"name":"String.ValidPos.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2122-L2126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.pos!\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">pos!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Constructs a valid position `s` from a position, panicking if the position is not valid. ","docLink":"./Init/Data/String/Basic.html#String.Slice.pos!","kind":"def","line":2114,"name":"String.Slice.pos!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2114-L2120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.pos?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">pos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"Constructs a valid position on `s` from a position, returning `none` if the position is not valid. ","docLink":"./Init/Data/String/Basic.html#String.Slice.pos?","kind":"def","line":2106,"name":"String.Slice.pos?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2106-L2112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.offset_pos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">offset_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">Pos.Raw.IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">off</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.pos\">pos</a></span> <span class=\"fn\">off</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">off</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.offset_pos","kind":"theorem","line":2103,"name":"String.Slice.offset_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2103-L2104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.pos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">Pos.Raw.IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">off</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Constructs a valid position on `s` from a position and a proof that it is valid. ","docLink":"./Init/Data/String/Basic.html#String.Slice.pos","kind":"def","line":2097,"name":"String.Slice.pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2097-L2101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prev!\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prev!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Returns the previous valid position before the given position, or panics if the position is\nthe start position. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prev!","kind":"def","line":2091,"name":"String.Slice.Pos.prev!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2091-L2095"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prev?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prev?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"Returns the previous valid position before the given position, or `none` if the position is\nthe start position. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prev?","kind":"def","line":2085,"name":"String.Slice.Pos.prev?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2085-L2089"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prev\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Returns the previous valid position before the given position, given a proof that the position\nis not the start position, which guarantees that such a position exists. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prev","kind":"def","line":2078,"name":"String.Slice.Pos.prev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2078-L2083"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_prevAux\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_prevAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux\">prevAux</a></span> <span class=\"fn\">h</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_prevAux","kind":"theorem","line":2074,"name":"String.Pos.Raw.isValidForSlice_prevAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2074-L2076"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_prevAuxGo\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_prevAuxGo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">off</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux.go\">Slice.Pos.prevAux.go</a> <span class=\"fn\">off</span> <span class=\"fn\">h₁</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_prevAuxGo","kind":"theorem","line":2058,"name":"String.Pos.Raw.isValidForSlice_prevAuxGo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2058-L2072"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux.go\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prevAux</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">off</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux.go","kind":"def","line":2045,"name":"String.Slice.Pos.prevAux.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2045-L2055"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">prevAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.prevAux","kind":"def","line":2038,"name":"String.Slice.Pos.prevAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2038-L2056"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_dec\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_dec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.dec\">dec</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_dec","kind":"theorem","line":2035,"name":"String.Pos.Raw.byteIdx_dec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2035-L2036"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.dec\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">dec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Decreases the byte offset of the position by `1`. Not to be confused with `ValidPos.prev`. ","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.dec","kind":"def","line":2030,"name":"String.Pos.Raw.dec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2030-L2033"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_inc\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_inc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.inc\">inc</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_inc","kind":"theorem","line":2027,"name":"String.Pos.Raw.byteIdx_inc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2027-L2028"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.inc\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">inc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Increases the byte offset of the position by `1`. Not to be confused with `ValidPos.next`. ","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.inc","kind":"def","line":2022,"name":"String.Pos.Raw.inc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2022-L2025"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.lt_next\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.next\">next</a></span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.lt_next","kind":"theorem","line":2017,"name":"String.Slice.Pos.lt_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2017-L2020"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.byteIdx_offset_next\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byteIdx_offset_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.next\">next</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.byteIdx_offset_next","kind":"theorem","line":2013,"name":"String.Slice.Pos.byteIdx_offset_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2013-L2015"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_next\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.next\">next</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">h</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_next","kind":"theorem","line":2007,"name":"String.Slice.Pos.offset_next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2007-L2011"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.next!\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">next!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Advances a valid position on a slice to the next valid position, or panics if the given\nposition is the past-the-end position. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.next!","kind":"def","line":2001,"name":"String.Slice.Pos.next!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L2001-L2005"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.next?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">next?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"Advances a valid position on a slice to the next valid position, or returns `none` if the\ngiven position is the past-the-end position. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.next?","kind":"def","line":1995,"name":"String.Slice.Pos.next?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1995-L1999"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.next\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Advances a valid position on a slice to the next valid position, given a proof that the\nposition is not the past-the-end position, which guarantees that such a position exists. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.next","kind":"def","line":1981,"name":"String.Slice.Pos.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1981-L1993"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.increaseBy_charUtf8Size\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">increaseBy_charUtf8Size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.increaseBy\">increaseBy</a></span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.increaseBy_charUtf8Size","kind":"theorem","line":1977,"name":"String.Pos.Raw.increaseBy_charUtf8Size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1977-L1979"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_decreaseBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_decreaseBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.decreaseBy\">decreaseBy</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_decreaseBy","kind":"theorem","line":1973,"name":"String.Pos.Raw.byteIdx_decreaseBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1973-L1975"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.decreaseBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">decreaseBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Move the position `p` back by `n` bytes. This is not an `HSub` instance because it should be a\nrelatively rare operation, so we use a name to make accidental use less likely. To remove the size\nof a character `c` or string `s` from a raw position `p`, you can use `p - c` resp. `p - s`.\n\nThis should be seen as the inverse of an \"advance\" or \"skip\".\n\nSee also `Pos.Raw.unoffsetBy`, which turns absolute positions into relative positions.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.decreaseBy","kind":"def","line":1960,"name":"String.Pos.Raw.decreaseBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1960-L1971"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_increaseBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_increaseBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.increaseBy\">increaseBy</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_increaseBy","kind":"theorem","line":1956,"name":"String.Pos.Raw.byteIdx_increaseBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1956-L1958"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.increaseBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">increaseBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Advances `p` by `n` bytes. This is not an `HAdd` instance because it should be a relatively\nrare operation, so we use a name to make accidental use less likely. To add the size of a\ncharacter `c` or string `s` to a raw position `p`, you can use `p + c` resp. `p + s`.\n\nThis should be seen as an \"advance\" or \"skip\".\n\nSee also `Pos.Raw.offsetBy`, which turns relative positions into absolute positions.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.increaseBy","kind":"def","line":1943,"name":"String.Pos.Raw.increaseBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1943-L1954"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.utf8ByteSize_byte\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">utf8ByteSize_byte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.byte\">byte</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.utf8ByteSize\">utf8ByteSize</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.get\">get</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.utf8ByteSize_byte","kind":"theorem","line":1939,"name":"String.ValidPos.utf8ByteSize_byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1939-L1941"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.utf8ByteSize_byte\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">utf8ByteSize_byte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.byte\">byte</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.utf8ByteSize\">utf8ByteSize</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.utf8ByteSize_byte","kind":"theorem","line":1935,"name":"String.Slice.Pos.utf8ByteSize_byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1935-L1937"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.copy_eq_append_get\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">copy_eq_append_get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">t₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#String\">String</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">t₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#String\">String</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.copy_eq_append_get","kind":"theorem","line":1928,"name":"String.Slice.Pos.copy_eq_append_get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1928-L1933"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_toReplaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_toReplaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₀ </span><span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p₀</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₀</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toReplaceEnd\">toReplaceEnd</a></span> <span class=\"fn\">pos</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_toReplaceEnd","kind":"theorem","line":1924,"name":"String.Slice.Pos.offset_toReplaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1924-L1926"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toReplaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">toReplaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₀ </span><span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p₀</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Given a position in `s` that is at most `p₀`, obtain the corresponding position in `s.replaceEnd p₀`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.toReplaceEnd","kind":"def","line":1917,"name":"String.Slice.Pos.toReplaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1917-L1922"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_ofReplaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_ofReplaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₀</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceEnd\">ofReplaceEnd</a> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_ofReplaceEnd","kind":"theorem","line":1913,"name":"String.Slice.Pos.offset_ofReplaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1913-L1915"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ofReplaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₀</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Given a position in `s.replaceEnd p₀`, obtain the corresponding position in `s`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceEnd","kind":"def","line":1907,"name":"String.Slice.Pos.ofReplaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1907-L1911"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get_eq_get_ofReplaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">get_eq_get_ofReplaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₀</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart\">ofReplaceStart</a> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.get_eq_get_ofReplaceStart","kind":"theorem","line":1903,"name":"String.Slice.Pos.get_eq_get_ofReplaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1903-L1905"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart_inj\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ofReplaceStart_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₀</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos </span><span class=\"fn\">pos'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart\">ofReplaceStart</a> <span class=\"fn\">pos</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart\">ofReplaceStart</a> <span class=\"fn\">pos'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos'</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart_inj","kind":"theorem","line":1899,"name":"String.Slice.Pos.ofReplaceStart_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1899-L1901"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ofReplaceStart_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart\">ofReplaceStart</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart_endPos","kind":"theorem","line":1893,"name":"String.Slice.Pos.ofReplaceStart_endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1893-L1897"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart_startPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ofReplaceStart_startPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart\">ofReplaceStart</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart_startPos","kind":"theorem","line":1888,"name":"String.Slice.Pos.ofReplaceStart_startPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1888-L1891"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_zero_left\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">offsetBy_zero_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a> <span class=\"fn\">0</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_zero_left","kind":"theorem","line":1883,"name":"String.Pos.Raw.offsetBy_zero_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1883-L1886"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_toReplaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_toReplaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₀ </span><span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p₀</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">pos</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₀</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toReplaceStart\">toReplaceStart</a></span> <span class=\"fn\">pos</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy\">unoffsetBy</a></span> <span class=\"fn\"><span class=\"fn\">p₀</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_toReplaceStart","kind":"theorem","line":1879,"name":"String.Slice.Pos.offset_toReplaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1879-L1881"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toReplaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">toReplaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₀ </span><span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p₀</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">pos</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Given a position in `s` that is at least `p₀`, obtain the corresponding position in\n`s.replaceStart p₀`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.toReplaceStart","kind":"def","line":1870,"name":"String.Slice.Pos.toReplaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1870-L1877"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy_offsetBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">unoffsetBy_offsetBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">q</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy\">unoffsetBy</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy_offsetBy","kind":"theorem","line":1865,"name":"String.Pos.Raw.unoffsetBy_offsetBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1865-L1868"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_unoffsetBy_of_le\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">offsetBy_unoffsetBy_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy\">unoffsetBy</a></span> <span class=\"fn\">q</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_unoffsetBy_of_le","kind":"theorem","line":1860,"name":"String.Pos.Raw.offsetBy_unoffsetBy_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1860-L1863"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_ofReplaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_ofReplaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₀</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart\">ofReplaceStart</a> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\"><span class=\"fn\">p₀</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_ofReplaceStart","kind":"theorem","line":1856,"name":"String.Slice.Pos.offset_ofReplaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1856-L1858"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ofReplaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₀</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">p₀</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Given a position in `s.replaceStart p₀`, obtain the corresponding position in `s`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ofReplaceStart","kind":"def","line":1850,"name":"String.Slice.Pos.ofReplaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1850-L1854"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.byte_eq_byte_toCopy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byte_eq_byte_toCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.byte\">byte</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.byte\">byte</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.byte_eq_byte_toCopy","kind":"theorem","line":1846,"name":"String.Slice.Pos.byte_eq_byte_toCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1846-L1848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.byte_toCopy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byte_toCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.byte\">byte</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.byte\">byte</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.byte_toCopy","kind":"theorem","line":1841,"name":"String.Slice.Pos.byte_toCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1841-L1844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get_eq_get_toCopy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">get_eq_get_toCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.get_eq_get_toCopy","kind":"theorem","line":1837,"name":"String.Slice.Pos.get_eq_get_toCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1837-L1839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get_toCopy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">get_toCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.get\">get</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.get_toCopy","kind":"theorem","line":1827,"name":"String.Slice.Pos.get_toCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1827-L1835"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.endValidPos_copy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">endValidPos_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.endValidPos_copy","kind":"theorem","line":1823,"name":"String.Slice.endValidPos_copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1823-L1825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.startValidPos_copy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">startValidPos_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.startValidPos_copy","kind":"theorem","line":1819,"name":"String.Slice.startValidPos_copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1819-L1821"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.ofCopy_inj\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">ofCopy_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos </span><span class=\"fn\">pos'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.ofCopy\">ofCopy</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos'</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.ofCopy\">ofCopy</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos'</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.ofCopy_inj","kind":"theorem","line":1816,"name":"String.ValidPos.ofCopy_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1816-L1817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.toCopy_ofCopy\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">toCopy_ofCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.ofCopy\">ofCopy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.toCopy_ofCopy","kind":"theorem","line":1812,"name":"String.ValidPos.toCopy_ofCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1812-L1814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofCopy_toCopy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ofCopy_toCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.ofCopy\">ofCopy</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ofCopy_toCopy","kind":"theorem","line":1808,"name":"String.Slice.Pos.ofCopy_toCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1808-L1810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_toCopy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_toCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\">toCopy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_toCopy","kind":"theorem","line":1805,"name":"String.Slice.Pos.offset_toCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1805-L1806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">toCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Given a slice `s` and a position on `s`, obtain the corresponding position on `s.copy.` ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.toCopy","kind":"def","line":1799,"name":"String.Slice.Pos.toCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1799-L1803"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.offset_ofCopy\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">offset_ofCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.ofCopy\">ofCopy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.offset_ofCopy","kind":"theorem","line":1796,"name":"String.ValidPos.offset_ofCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1796-L1797"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.ofCopy\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">ofCopy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Given a slice `s` and a position on `s.copy`, obtain the corresponding position on `s`. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.ofCopy","kind":"def","line":1790,"name":"String.ValidPos.ofCopy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1790-L1794"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.copy_eq_copy_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">copy_eq_copy_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.copy_eq_copy_replaceEnd","kind":"theorem","line":1781,"name":"String.Slice.copy_eq_copy_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1781-L1788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.eq_singleton_append\"><span class=\"name\">String</span>.<span class=\"name\">eq_singleton_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">t</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#String\">String</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.get\">get</a></span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.eq_singleton_append","kind":"theorem","line":1770,"name":"String.eq_singleton_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1770-L1779"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.get_startValidPos\"><span class=\"name\">String</span>.<span class=\"name\">get_startValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.get\">get</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.head\">head</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.get_startValidPos","kind":"theorem","line":1766,"name":"String.get_startValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1766-L1768"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.head_data\"><span class=\"name\">String</span>.<span class=\"name\">head_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/Basic.html#List.head\">head</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.head_data","kind":"theorem","line":1759,"name":"String.head_data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1759-L1764"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isSome_utf8DecodeChar?_zero\"><span class=\"name\">String</span>.<span class=\"name\">isSome_utf8DecodeChar?_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">&quot;&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.isSome_utf8DecodeChar?_zero","kind":"theorem","line":1754,"name":"String.isSome_utf8DecodeChar?_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1754-L1757"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.length_asString\"><span class=\"name\">List</span>.<span class=\"name\">length_asString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.length_asString","kind":"theorem","line":1750,"name":"List.length_asString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1750-L1752"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.asString_eq_empty_iff\"><span class=\"name\">List</span>.<span class=\"name\">asString_eq_empty_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.asString_eq_empty_iff","kind":"theorem","line":1746,"name":"List.asString_eq_empty_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1746-L1748"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_eq_nil_iff\"><span class=\"name\">String</span>.<span class=\"name\">data_eq_nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.data_eq_nil_iff","kind":"theorem","line":1742,"name":"String.data_eq_nil_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1742-L1744"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startValidPos_eq_endValidPos_iff\"><span class=\"name\">String</span>.<span class=\"name\">startValidPos_eq_endValidPos_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.startValidPos_eq_endValidPos_iff","kind":"theorem","line":1738,"name":"String.startValidPos_eq_endValidPos_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1738-L1740"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endPos_eq_zero_iff\"><span class=\"name\">String</span>.<span class=\"name\">endPos_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.endPos_eq_zero_iff","kind":"theorem","line":1735,"name":"String.endPos_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1735-L1736"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.eq_zero_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.eq_zero_iff","kind":"theorem","line":1731,"name":"String.Pos.Raw.eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1731-L1733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8ByteSize_eq_zero_iff\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8ByteSize_eq_zero_iff","kind":"theorem","line":1726,"name":"String.utf8ByteSize_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1726-L1729"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append_assoc\"><span class=\"name\">String</span>.<span class=\"name\">append_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂ </span><span class=\"fn\">s₃</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₃</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> (<span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₃</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.append_assoc","kind":"theorem","line":1723,"name":"String.append_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1723-L1724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append_left_inj\"><span class=\"name\">String</span>.<span class=\"name\">append_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.append_left_inj","kind":"theorem","line":1718,"name":"String.append_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1718-L1721"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.isUTF8FirstByte_byte\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">isUTF8FirstByte_byte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.byte\">byte</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.isUTF8FirstByte_byte","kind":"theorem","line":1714,"name":"String.ValidPos.isUTF8FirstByte_byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1714-L1716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.byte\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">byte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Returns the byte at the position `pos` of a string.\n","docLink":"./Init/Data/String/Basic.html#String.ValidPos.byte","kind":"def","line":1707,"name":"String.ValidPos.byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1707-L1712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.get!\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the character at the position `pos` of a string, or panics if the position is the\npast-the-end position.\n\nThis function is overridden with an efficient implementation in runtime code.\n","docLink":"./Init/Data/String/Basic.html#String.ValidPos.get!","kind":"def","line":1697,"name":"String.ValidPos.get!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1697-L1705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.get?\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Returns the character at the position `pos` of a string, or `none` if the position is the\npast-the-end position.\n\nThis function is overridden with an efficient implementation in runtime code.\n","docLink":"./Init/Data/String/Basic.html#String.ValidPos.get?","kind":"def","line":1687,"name":"String.ValidPos.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1687-L1695"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.get\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the character at the position `pos` of a string, taking a proof that `p` is not the\npast-the-end position.\n\nThis function is overridden with an efficient implementation in runtime code.\n\nExamples:\n* `(\"abc\".pos ⟨1⟩ (by decide)).get (by decide) = 'b'`\n* `(\"L∃∀N\".pos ⟨1⟩ (by decide)).get (by decide) = '∃'`\n","docLink":"./Init/Data/String/Basic.html#String.ValidPos.get","kind":"def","line":1673,"name":"String.ValidPos.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1673-L1685"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.toSlice_ofSlice\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">toSlice_ofSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofSlice\">ofSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\">toSlice</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.toSlice_ofSlice","kind":"theorem","line":1669,"name":"String.Slice.Pos.toSlice_ofSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1669-L1671"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.ofSlice_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">ofSlice_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofSlice\">ofSlice</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pos</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.ofSlice_toSlice","kind":"theorem","line":1665,"name":"String.ValidPos.ofSlice_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1665-L1667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startPos_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">startPos_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\">toSlice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.startPos_toSlice","kind":"theorem","line":1661,"name":"String.startPos_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1661-L1663"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endPos_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">endPos_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\">toSlice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.endPos_toSlice","kind":"theorem","line":1657,"name":"String.endPos_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1657-L1659"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.rawEndPos_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">rawEndPos_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.rawEndPos_toSlice","kind":"theorem","line":1653,"name":"String.rawEndPos_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1653-L1655"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofset_ofSlice\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ofset_ofSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofSlice\">ofSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ofset_ofSlice","kind":"theorem","line":1650,"name":"String.Slice.Pos.ofset_ofSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1650-L1651"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ofSlice\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ofSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Given a string `s`, turns a valid position on the slice `s.toSlice` into a valid position on the\nstring `s`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ofSlice","kind":"def","line":1643,"name":"String.Slice.Pos.ofSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1643-L1648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.offset_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">offset_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.offset_toSlice","kind":"theorem","line":1640,"name":"String.ValidPos.offset_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1640-L1641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.toSlice\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"Turns a valid position on the string `s` into a valid position on the slice `s.toSlice`. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.toSlice","kind":"def","line":1634,"name":"String.ValidPos.toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1634-L1638"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice.ofSlice\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValidForSlice</span>.<span class=\"name\">ofSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice.ofSlice","kind":"theorem","line":1630,"name":"String.Pos.Raw.IsValidForSlice.ofSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1630-L1632"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.toSlice\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.toSlice","kind":"theorem","line":1626,"name":"String.Pos.Raw.IsValid.toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1626-L1628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_toSlice_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_toSlice_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_toSlice_iff","kind":"theorem","line":1621,"name":"String.Pos.Raw.isValidForSlice_toSlice_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1621-L1624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.copy_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">copy_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.copy_toSlice","kind":"theorem","line":1617,"name":"String.copy_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1617-L1619"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.offset_endValidPos\"><span class=\"name\">String</span>.<span class=\"name\">offset_endValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.offset_endValidPos","kind":"theorem","line":1614,"name":"String.offset_endValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1614-L1615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.str_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">str_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.str_toSlice","kind":"theorem","line":1611,"name":"String.str_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1611-L1612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endExclusive_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">endExclusive_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.endValidPos\">endValidPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.endExclusive_toSlice","kind":"theorem","line":1608,"name":"String.endExclusive_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1608-L1609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startInclusive_toSlice\"><span class=\"name\">String</span>.<span class=\"name\">startInclusive_toSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toSlice\">toSlice</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.startInclusive_toSlice","kind":"theorem","line":1605,"name":"String.startInclusive_toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1605-L1606"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get!\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the byte at the given position in the string, or panicks if the position is the end\nposition. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.get!","kind":"def","line":1599,"name":"String.Slice.Pos.get!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1599-L1603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Returns the byte at the given position in the string, or `none` if the position is the end\nposition. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.get?","kind":"def","line":1593,"name":"String.Slice.Pos.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1593-L1597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get_eq_utf8DecodeChar\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">get_eq_utf8DecodeChar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\">get</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>) <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.get_eq_utf8DecodeChar","kind":"theorem","line":1589,"name":"String.Slice.Pos.get_eq_utf8DecodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1589-L1591"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.get\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Obtains the character at the given position in the string. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.get","kind":"def","line":1583,"name":"String.Slice.Pos.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1583-L1587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decodeChar\"><span class=\"name\">String</span>.<span class=\"name\">decodeChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">byteIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">byteIdx</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.decodeChar","kind":"def","line":1579,"name":"String.decodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1579-L1581"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">p</span>)</span> <span class=\"fn\">off</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">off</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">off</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_replaceEnd","kind":"theorem","line":1569,"name":"String.Pos.Raw.isValidForSlice_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1569-L1577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">p</span>)</span> <span class=\"fn\">off</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">off</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_replaceStart","kind":"theorem","line":1558,"name":"String.Pos.Raw.isValidForSlice_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1558-L1567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_assoc\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">offsetBy_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">q</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">r</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_assoc","kind":"theorem","line":1553,"name":"String.Pos.Raw.offsetBy_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1553-L1556"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_replaceStartEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">utf8ByteSize_replaceStartEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">newStart </span><span class=\"fn\">newEnd</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">newStart</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">newEnd</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStartEnd\">replaceStartEnd</a></span> <span class=\"fn\">newStart</span> <span class=\"fn\">newEnd</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">newStart</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteDistance\">byteDistance</a></span> <span class=\"fn\"><span class=\"fn\">newEnd</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_replaceStartEnd","kind":"theorem","line":1547,"name":"String.Slice.utf8ByteSize_replaceStartEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1547-L1551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">rawEndPos_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.rawEndPos_replaceEnd","kind":"theorem","line":1541,"name":"String.Slice.rawEndPos_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1541-L1545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">utf8ByteSize_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_replaceEnd","kind":"theorem","line":1536,"name":"String.Slice.utf8ByteSize_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1536-L1539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">rawEndPos_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy\">unoffsetBy</a></span> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.rawEndPos_replaceStart","kind":"theorem","line":1531,"name":"String.Slice.rawEndPos_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1531-L1534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">utf8ByteSize_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_replaceStart","kind":"theorem","line":1524,"name":"String.Slice.utf8ByteSize_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1524-L1529"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.replaceStartEnd!\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">replaceStartEnd!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newStart </span><span class=\"fn\">newEnd</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Given a slice and two valid positions within the slice, obtain a new slice on the same underlying\nstring formed by the new bounds, or panic if the given end is strictly less than the given start. ","docLink":"./Init/Data/String/Basic.html#String.Slice.replaceStartEnd!","kind":"def","line":1516,"name":"String.Slice.replaceStartEnd!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1516-L1522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive_replaceStartEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">endExclusive_replaceStartEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">newStart </span><span class=\"fn\">newEnd</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">newStart</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">newEnd</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStartEnd\">replaceStartEnd</a></span> <span class=\"fn\">newStart</span> <span class=\"fn\">newEnd</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">newEnd</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\">str</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.endExclusive_replaceStartEnd","kind":"theorem","line":1512,"name":"String.Slice.endExclusive_replaceStartEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1512-L1514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive_replaceStartEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">startInclusive_replaceStartEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">newStart </span><span class=\"fn\">newEnd</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">newStart</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">newEnd</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStartEnd\">replaceStartEnd</a></span> <span class=\"fn\">newStart</span> <span class=\"fn\">newEnd</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">newStart</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\">str</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.startInclusive_replaceStartEnd","kind":"theorem","line":1508,"name":"String.Slice.startInclusive_replaceStartEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1508-L1510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.str_replaceStartEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">str_replaceStartEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">newStart </span><span class=\"fn\">newEnd</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">newStart</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">newEnd</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStartEnd\">replaceStartEnd</a></span> <span class=\"fn\">newStart</span> <span class=\"fn\">newEnd</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.str_replaceStartEnd","kind":"theorem","line":1504,"name":"String.Slice.str_replaceStartEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1504-L1506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.replaceStartEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">replaceStartEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newStart </span><span class=\"fn\">newEnd</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">newStart</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">newEnd</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Given a slice and two valid positions within the slice, obtain a new slice on the same underlying\nstring formed by the new bounds. ","docLink":"./Init/Data/String/Basic.html#String.Slice.replaceStartEnd","kind":"def","line":1494,"name":"String.Slice.replaceStartEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1494-L1502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">endExclusive_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\">str</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.endExclusive_replaceEnd","kind":"theorem","line":1490,"name":"String.Slice.endExclusive_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1490-L1492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">startInclusive_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.startInclusive_replaceEnd","kind":"theorem","line":1486,"name":"String.Slice.startInclusive_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1486-L1488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.str_replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">str_replaceEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\">replaceEnd</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.str_replaceEnd","kind":"theorem","line":1482,"name":"String.Slice.str_replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1482-L1484"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.replaceEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">replaceEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Given a slice and a valid position within the slice, obtain a new slice on the same underlying\nstring by replacing the end of the slice with the given position. ","docLink":"./Init/Data/String/Basic.html#String.Slice.replaceEnd","kind":"def","line":1473,"name":"String.Slice.replaceEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1473-L1480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">endExclusive_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.endExclusive_replaceStart","kind":"theorem","line":1469,"name":"String.Slice.endExclusive_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1469-L1471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">startInclusive_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\">str</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.startInclusive_replaceStart","kind":"theorem","line":1465,"name":"String.Slice.startInclusive_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1465-L1467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.str_replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">str_replaceStart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\">replaceStart</a></span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.str_replaceStart","kind":"theorem","line":1461,"name":"String.Slice.str_replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1461-L1463"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.replaceStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">replaceStart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Given a slice and a valid position within the slice, obtain a new slice on the same underlying\nstring by replacing the start of the slice with the given position. ","docLink":"./Init/Data/String/Basic.html#String.Slice.replaceStart","kind":"def","line":1452,"name":"String.Slice.replaceStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1452-L1459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_le_offset_endExclusive\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_le_offset_endExclusive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_le_offset_endExclusive","kind":"theorem","line":1447,"name":"String.Slice.Pos.offset_le_offset_endExclusive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1447-L1450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_le_offset_str\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_le_offset_str</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\">str</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_le_offset_str","kind":"theorem","line":1443,"name":"String.Slice.Pos.offset_le_offset_str","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1443-L1445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_str_le_offset_endExclusive\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_str_le_offset_endExclusive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\">str</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_str_le_offset_endExclusive","kind":"theorem","line":1434,"name":"String.Slice.Pos.offset_str_le_offset_endExclusive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1434-L1441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset_str\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset_str</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\">str</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset_str","kind":"theorem","line":1430,"name":"String.Slice.Pos.offset_str","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1430-L1432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.str\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">str</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"Given a valid position on a slice `s`, obtains the corresponding valid position on the\nunderlying string `s.str`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.str","kind":"def","line":1423,"name":"String.Slice.Pos.str","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1423-L1428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.isUTF8FirstByte_byte\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">isUTF8FirstByte_byte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">pos</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.byte\">byte</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.isUTF8FirstByte_byte","kind":"theorem","line":1419,"name":"String.Slice.Pos.isUTF8FirstByte_byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1419-L1421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.byte\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">byte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">pos</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Returns the byte at a position in a slice that is not the end position. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.byte","kind":"def","line":1411,"name":"String.Slice.Pos.byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1411-L1417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_iff_isSome_utf8DecodeChar?\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_iff_isSome_utf8DecodeChar?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a>     <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>))</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_iff_isSome_utf8DecodeChar?","kind":"theorem","line":1380,"name":"String.Pos.Raw.isValidForSlice_iff_isSome_utf8DecodeChar?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1380-L1409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.bytes_str_eq\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">bytes_str_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.bytes_str_eq","kind":"theorem","line":1370,"name":"String.Slice.bytes_str_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1370-L1378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_iff_isSome_utf8DecodeChar?_copy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_iff_isSome_utf8DecodeChar?_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_iff_isSome_utf8DecodeChar?_copy","kind":"theorem","line":1366,"name":"String.Pos.Raw.isValidForSlice_iff_isSome_utf8DecodeChar?_copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1366-L1368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableIsValidForSlice\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableIsValidForSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">Pos.Raw.IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableIsValidForSlice","kind":"instance","line":1363,"name":"String.instDecidableIsValidForSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1363-L1364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_eq_false_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_eq_false_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice\">isValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_eq_false_iff","kind":"theorem","line":1358,"name":"String.Pos.Raw.isValidForSlice_eq_false_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1358-L1361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_eq_true_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_eq_true_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice\">isValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_eq_true_iff","kind":"theorem","line":1347,"name":"String.Pos.Raw.isValidForSlice_eq_true_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1347-L1356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Efficiently checks whether a position is at a UTF-8 character boundary of the slice `s`. ","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice","kind":"def","line":1339,"name":"String.Pos.Raw.isValidForSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1339-L1345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_iff_isUTF8FirstByte\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidForSlice_iff_isUTF8FirstByte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte\">getUTF8Byte</a></span> <span class=\"fn\">p</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidForSlice_iff_isUTF8FirstByte","kind":"theorem","line":1335,"name":"String.Pos.Raw.isValidForSlice_iff_isUTF8FirstByte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1335-L1337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableLtPos\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableLtPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableLtPos","kind":"instance","line":1332,"name":"String.instDecidableLtPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1332-L1333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableLePos\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableLePos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableLePos","kind":"instance","line":1329,"name":"String.instDecidableLePos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1329-L1330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.lt_iff","kind":"theorem","line":1326,"name":"String.Slice.Pos.lt_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1326-L1327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.le_iff\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.le_iff","kind":"theorem","line":1323,"name":"String.Slice.Pos.le_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1323-L1324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLTPos\"><span class=\"name\">String</span>.<span class=\"name\">instLTPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instLTPos","kind":"instance","line":1320,"name":"String.instLTPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1320-L1321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLEPos\"><span class=\"name\">String</span>.<span class=\"name\">instLEPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instLEPos","kind":"instance","line":1317,"name":"String.instLEPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1317-L1318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ByteString.Slice.offset_endPos\"><span class=\"name\">String</span>.<span class=\"name\">ByteString</span>.<span class=\"name\">Slice</span>.<span class=\"name\">offset_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ByteString.Slice.offset_endPos","kind":"theorem","line":1314,"name":"String.ByteString.Slice.offset_endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1314-L1315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.endPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"The past-the-end position of `s`, as an `s.Pos`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.endPos","kind":"def","line":1308,"name":"String.Slice.endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1308-L1312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_sliceRawEndPos_right\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">offsetBy_sliceRawEndPos_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_sliceRawEndPos_right","kind":"theorem","line":1303,"name":"String.Pos.Raw.offsetBy_sliceRawEndPos_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1303-L1306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_sliceRawEndPos_left\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">offsetBy_sliceRawEndPos_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_sliceRawEndPos_left","kind":"theorem","line":1298,"name":"String.Pos.Raw.offsetBy_sliceRawEndPos_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1298-L1301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_endPos_right\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">offsetBy_endPos_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_endPos_right","kind":"theorem","line":1293,"name":"String.Pos.Raw.offsetBy_endPos_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1293-L1296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_endPos_left\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">offsetBy_endPos_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy_endPos_left","kind":"theorem","line":1288,"name":"String.Pos.Raw.offsetBy_endPos_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1288-L1291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.offset_startInclusive_add_self\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">offset_startInclusive_add_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.offset_startInclusive_add_self","kind":"theorem","line":1282,"name":"String.Slice.offset_startInclusive_add_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1282-L1286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabitedPos\"><span class=\"name\">String</span>.<span class=\"name\">instInhabitedPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instInhabitedPos","kind":"instance","line":1279,"name":"String.instInhabitedPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1279-L1280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ByteString.Slice.offset_startPos\"><span class=\"name\">String</span>.<span class=\"name\">ByteString</span>.<span class=\"name\">Slice</span>.<span class=\"name\">offset_startPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startPos\">startPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ByteString.Slice.offset_startPos","kind":"theorem","line":1276,"name":"String.ByteString.Slice.offset_startPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1276-L1277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.startPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">startPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"The start position of `s`, as an `s.Pos`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.startPos","kind":"def","line":1270,"name":"String.Slice.startPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1270-L1274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.instDecidableEqPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instDecidableEqPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s✝</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">s✝</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.instDecidableEqPos","kind":"instance","line":1268,"name":"String.Slice.instDecidableEqPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1268-L1268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.instDecidableEqPos.decEq\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instDecidableEqPos</span>.<span class=\"name\">decEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s✝</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <span class=\"fn\"><span class=\"fn\">s✝</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.instDecidableEqPos.decEq","kind":"def","line":1268,"name":"String.Slice.instDecidableEqPos.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1268-L1268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.isValidForSlice\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">isValidForSlice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">Pos.Raw.IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></span></div></div>","info":{"doc":"The proof that `offset` is valid for the string slice `s`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.isValidForSlice","kind":"theorem","line":1267,"name":"String.Slice.Pos.isValidForSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1267-L1267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">offset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"The underlying byte offset of the `Slice.Pos`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.offset","kind":"def","line":1265,"name":"String.Slice.Pos.offset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1265-L1265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isValidForSlice</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">Pos.Raw.IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">offset</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.mk","kind":"ctor","line":1263,"name":"String.Slice.Pos.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1263-L1263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ext_iff","kind":"theorem","line":1262,"name":"String.Slice.Pos.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1262-L1262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos.ext\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos.offset\">offset</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos.ext","kind":"theorem","line":1262,"name":"String.Slice.Pos.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1262-L1262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.Pos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Slice.Pos s` is a byte offset in `s` together with a proof that this position is at a UTF-8\ncharacter boundary.\n","docLink":"./Init/Data/String/Basic.html#String.Slice.Pos","kind":"structure","line":1258,"name":"String.Slice.Pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1258-L1268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_copy_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_copy_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_copy_iff","kind":"theorem","line":1229,"name":"String.Pos.Raw.isValid_copy_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1229-L1256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.isUTF8FirstByte_utf8ByteAt_zero\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">isUTF8FirstByte_utf8ByteAt_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte\">getUTF8Byte</a></span> <span class=\"fn\">0</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.isUTF8FirstByte_utf8ByteAt_zero","kind":"theorem","line":1225,"name":"String.Slice.isUTF8FirstByte_utf8ByteAt_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1225-L1227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte_copy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">getUTF8Byte_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.getUTF8Byte\">getUTF8Byte</a></span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte\">getUTF8Byte</a></span> <span class=\"fn\">p</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte_copy","kind":"theorem","line":1221,"name":"String.Slice.getUTF8Byte_copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1221-L1223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte_eq_getUTF8Byte_copy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">getUTF8Byte_eq_getUTF8Byte_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte\">getUTF8Byte</a></span> <span class=\"fn\">p</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Data/String/Basic.html#String.getUTF8Byte\">getUTF8Byte</a></span> <span class=\"fn\">p</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte_eq_getUTF8Byte_copy","kind":"theorem","line":1217,"name":"String.Slice.getUTF8Byte_eq_getUTF8Byte_copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1217-L1219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.endPos_copy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">endPos_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.endPos_copy","kind":"theorem","line":1213,"name":"String.Slice.endPos_copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1213-L1215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_copy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">utf8ByteSize_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_copy","kind":"theorem","line":1207,"name":"String.Slice.utf8ByteSize_copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1207-L1211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.bytes_copy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">bytes_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.copy\">copy</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.bytes_copy","kind":"theorem","line":1204,"name":"String.Slice.bytes_copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1204-L1205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.copy\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">copy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Creates a `String` from a `String.Slice` by copying the bytes. ","docLink":"./Init/Data/String/Basic.html#String.Slice.copy","kind":"def","line":1199,"name":"String.Slice.copy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1199-L1202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.extract\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.extract","kind":"def","line":1194,"name":"String.ValidPos.extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1194-L1197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte!\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">getUTF8Byte!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Accesses the indicated byte in the UTF-8 encoding of the string slice, or panics if the position\nis out-of-bounds.\n","docLink":"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte!","kind":"def","line":1183,"name":"String.Slice.getUTF8Byte!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1183-L1192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">getUTF8Byte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Accesses the indicated byte in the UTF-8 encoding of a string slice.\n\nAt runtime, this function is implemented by efficient, constant-time code.\n","docLink":"./Init/Data/String/Basic.html#String.Slice.getUTF8Byte","kind":"def","line":1170,"name":"String.Slice.getUTF8Byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1170-L1181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice.isValid_offsetBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValidForSlice</span>.<span class=\"name\">isValid_offsetBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice.isValid_offsetBy","kind":"theorem","line":1168,"name":"String.Pos.Raw.IsValidForSlice.isValid_offsetBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1168-L1168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice.le_utf8ByteSize\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValidForSlice</span>.<span class=\"name\">le_utf8ByteSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice.le_utf8ByteSize","kind":"theorem","line":1167,"name":"String.Pos.Raw.IsValidForSlice.le_utf8ByteSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1167-L1167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice.mk\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValidForSlice</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le_utf8ByteSize</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isValid_offsetBy</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\">IsValidForSlice</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice.mk","kind":"ctor","line":1166,"name":"String.Pos.Raw.IsValidForSlice.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1166-L1166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValidForSlice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Criterion for validity of positions in string slices. ","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValidForSlice","kind":"structure","line":1165,"name":"String.Pos.Raw.IsValidForSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1165-L1168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_unoffsetBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_unoffsetBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy\">unoffsetBy</a></span> <span class=\"fn\">offset</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">offset</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_unoffsetBy","kind":"theorem","line":1161,"name":"String.Pos.Raw.byteIdx_unoffsetBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1161-L1163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">unoffsetBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Decreases `p` by `offset`. This is not an `HSub` instance because it should be a relatively\nrare operation, so we use a name to make accidental use less likely. To unoffset a position\nby the size of a character `c` or string `s`, you can use `p - c` resp. `p - s`.\n\nThis should be seen as an operation that converts absolute positions into relative positions.\n\nSee also `Pos.Raw.decreaseBy`, which is an \"unadvancing\" operation.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.unoffsetBy","kind":"def","line":1148,"name":"String.Pos.Raw.unoffsetBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1148-L1159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_offsetBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_offsetBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\">offsetBy</a></span> <span class=\"fn\">offset</span>)</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">offset</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_offsetBy","kind":"theorem","line":1144,"name":"String.Pos.Raw.byteIdx_offsetBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1144-L1146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">offsetBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></div></div>","info":{"doc":"Offsets `p` by `offset` on the left. This is not an `HAdd` instance because it should be a\nrelatively rare operation, so we use a name to make accidental use less likely. To offset a position\nby the size of a character character `c` or string `s`, you can use `c + p` resp. `s + p`.\n\nThis should be seen as an operation that converts relative positions into absolute positions.\n\nSee also `Pos.Raw.increaseBy`, which is an \"advancing\" operation.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.offsetBy","kind":"def","line":1131,"name":"String.Pos.Raw.offsetBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1131-L1142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.byteIdx_rawEndPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">byteIdx_rawEndPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.byteIdx_rawEndPos","kind":"theorem","line":1128,"name":"String.Slice.byteIdx_rawEndPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1128-L1129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">rawEndPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"The end position of a slice, as a `Pos.Raw`. ","docLink":"./Init/Data/String/Basic.html#String.Slice.rawEndPos","kind":"def","line":1123,"name":"String.Slice.rawEndPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1123-L1126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_sub_slice\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_sub_slice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_sub_slice","kind":"theorem","line":1119,"name":"String.Pos.Raw.byteIdx_sub_slice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1119-L1121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_slice_add\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_slice_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_slice_add","kind":"theorem","line":1115,"name":"String.Pos.Raw.byteIdx_slice_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1115-L1117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_add_slide\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_add_slide</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_add_slide","kind":"theorem","line":1111,"name":"String.Pos.Raw.byteIdx_add_slide","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1111-L1113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHSubRawSlice\"><span class=\"name\">String</span>.<span class=\"name\">instHSubRawSlice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HSub\">HSub</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHSubRawSlice","kind":"instance","line":1108,"name":"String.instHSubRawSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1108-L1109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHAddSliceRaw\"><span class=\"name\">String</span>.<span class=\"name\">instHAddSliceRaw</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAdd\">HAdd</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHAddSliceRaw","kind":"instance","line":1105,"name":"String.instHAddSliceRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1105-L1106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHAddRawSlice\"><span class=\"name\">String</span>.<span class=\"name\">instHAddRawSlice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAdd\">HAdd</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHAddRawSlice","kind":"instance","line":1102,"name":"String.instHAddRawSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1102-L1103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_eq\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">utf8ByteSize_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize_eq","kind":"theorem","line":1099,"name":"String.Slice.utf8ByteSize_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1099-L1100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">utf8ByteSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of bytes of the UTF-8 encoding of the string slice. ","docLink":"./Init/Data/String/Basic.html#String.Slice.utf8ByteSize","kind":"def","line":1094,"name":"String.Slice.utf8ByteSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1094-L1097"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toSlice\"><span class=\"name\">String</span>.<span class=\"name\">toSlice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Returns a slice that contains the entire string.\n","docLink":"./Init/Data/String/Basic.html#String.toSlice","kind":"def","line":1084,"name":"String.toSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1084-L1092"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabitedSlice\"><span class=\"name\">String</span>.<span class=\"name\">instInhabitedSlice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instInhabitedSlice","kind":"instance","line":1081,"name":"String.instInhabitedSlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1081-L1082"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive_le_endExclusive\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">startInclusive_le_endExclusive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\">startInclusive</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\">endExclusive</a></span></div></div>","info":{"doc":"The slice is not degenerate (but it may be empty). ","docLink":"./Init/Data/String/Basic.html#String.Slice.startInclusive_le_endExclusive","kind":"theorem","line":1079,"name":"String.Slice.startInclusive_le_endExclusive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1079-L1079"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.endExclusive\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">endExclusive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"The byte position of the end of the string slice. ","docLink":"./Init/Data/String/Basic.html#String.Slice.endExclusive","kind":"def","line":1077,"name":"String.Slice.endExclusive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1077-L1077"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.startInclusive\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">startInclusive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.str\">str</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"The byte position of the start of the string slice. ","docLink":"./Init/Data/String/Basic.html#String.Slice.startInclusive","kind":"def","line":1075,"name":"String.Slice.startInclusive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1075-L1075"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.str\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The underlying strings. ","docLink":"./Init/Data/String/Basic.html#String.Slice.str","kind":"def","line":1073,"name":"String.Slice.str","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1073-L1073"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startInclusive </span><span class=\"fn\">endExclusive</span> : <span class=\"fn\"><span class=\"fn\">str</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startInclusive_le_endExclusive</span> : <span class=\"fn\">startInclusive</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">endExclusive</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Slice.mk","kind":"ctor","line":1071,"name":"String.Slice.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1071-L1071"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Slice\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A region or slice of some underlying string.\n\nA slice consists of a string together with the start and end byte positions of a region of\ninterest. Actually extracting a substring requires copying and memory allocation, while many\nslices of the same underlying string may exist with very little overhead. While this could be achieved by tracking the bounds by hand, the slice API is much more convenient.\n\n`String.Slice` bundles proofs to ensure that the start and end positions always delineate a valid\nstring. For this reason, it should be preferred over `Substring`.\n","docLink":"./Init/Data/String/Basic.html#String.Slice","kind":"structure","line":1061,"name":"String.Slice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1061-L1079"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.isValidUTF8_extract\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">isValidUTF8_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos₁ </span><span class=\"fn\">pos₂</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos₁</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">pos₂</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>)</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.isValidUTF8_extract","kind":"theorem","line":1049,"name":"String.ValidPos.isValidUTF8_extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1049-L1059"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableLtValidPos\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableLtValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableLtValidPos","kind":"instance","line":1046,"name":"String.instDecidableLtValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1046-L1047"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableLeValidPos\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableLeValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableLeValidPos","kind":"instance","line":1043,"name":"String.instDecidableLeValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1043-L1044"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.lt_iff","kind":"theorem","line":1040,"name":"String.ValidPos.lt_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1040-L1041"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.le_iff\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.le_iff","kind":"theorem","line":1037,"name":"String.ValidPos.le_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1037-L1038"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLTValidPos\"><span class=\"name\">String</span>.<span class=\"name\">instLTValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instLTValidPos","kind":"instance","line":1034,"name":"String.instLTValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1034-L1035"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLEValidPos\"><span class=\"name\">String</span>.<span class=\"name\">instLEValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instLEValidPos","kind":"instance","line":1031,"name":"String.instLEValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1031-L1032"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endValidPos\"><span class=\"name\">String</span>.<span class=\"name\">endValidPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"The past-the-end position of `s`, as an `s.ValidPos`. ","docLink":"./Init/Data/String/Basic.html#String.endValidPos","kind":"def","line":1025,"name":"String.endValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1025-L1029"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.offset_startValidPos\"><span class=\"name\">String</span>.<span class=\"name\">offset_startValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.startValidPos\">startValidPos</a></span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.offset_startValidPos","kind":"theorem","line":1022,"name":"String.offset_startValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1022-L1023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instInhabitedValidPos\"><span class=\"name\">String</span>.<span class=\"name\">instInhabitedValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instInhabitedValidPos","kind":"instance","line":1019,"name":"String.instInhabitedValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1019-L1020"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.startValidPos\"><span class=\"name\">String</span>.<span class=\"name\">startValidPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"The start position of `s`, as an `s.ValidPos`. ","docLink":"./Init/Data/String/Basic.html#String.startValidPos","kind":"def","line":1013,"name":"String.startValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1013-L1017"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableEqValidPos\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableEqValidPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s✝</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">s✝</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableEqValidPos","kind":"instance","line":1011,"name":"String.instDecidableEqValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1011-L1011"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableEqValidPos.decEq\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableEqValidPos</span>.<span class=\"name\">decEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s✝</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <span class=\"fn\"><span class=\"fn\">s✝</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableEqValidPos.decEq","kind":"def","line":1011,"name":"String.instDecidableEqValidPos.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1011-L1011"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.isValid\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">isValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">Pos.Raw.IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></span></div></div>","info":{"doc":"The proof that `offset` is valid for the string `s`. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.isValid","kind":"theorem","line":1010,"name":"String.ValidPos.isValid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1010-L1010"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">offset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"The underlying byte offset of the `ValidPos`. ","docLink":"./Init/Data/String/Basic.html#String.ValidPos.offset","kind":"def","line":1008,"name":"String.ValidPos.offset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1008-L1008"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.mk\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isValid</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">Pos.Raw.IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">offset</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.mk","kind":"ctor","line":1006,"name":"String.ValidPos.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1006-L1006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.ext\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.ext","kind":"theorem","line":1005,"name":"String.ValidPos.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1005-L1005"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos\">ValidPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/String/Basic.html#String.ValidPos.offset\">offset</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.ValidPos.ext_iff","kind":"theorem","line":1005,"name":"String.ValidPos.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1005-L1005"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.ValidPos\"><span class=\"name\">String</span>.<span class=\"name\">ValidPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `ValidPos s` is a byte offset in `s` together with a proof that this position is at a UTF-8\ncharacter boundary.\n","docLink":"./Init/Data/String/Basic.html#String.ValidPos","kind":"structure","line":1001,"name":"String.ValidPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L1001-L1011"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_isValidUTF8_extract_utf8ByteSize\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_iff_isValidUTF8_extract_utf8ByteSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span>)</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_isValidUTF8_extract_utf8ByteSize","kind":"theorem","line":993,"name":"String.Pos.Raw.isValid_iff_isValidUTF8_extract_utf8ByteSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L993-L999"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_isValidUTF8_extract_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_iff_isValidUTF8_extract_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>)</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_isValidUTF8_extract_zero","kind":"theorem","line":989,"name":"String.Pos.Raw.isValid_iff_isValidUTF8_extract_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L989-L991"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValidUTF8_extract_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValidUTF8_extract_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle'</span> : <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>)</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValidUTF8_extract_iff","kind":"theorem","line":960,"name":"String.Pos.Raw.isValidUTF8_extract_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L960-L987"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.lt_of_lt_of_le\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">lt_of_lt_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.lt_of_lt_of_le","kind":"theorem","line":957,"name":"String.Pos.Raw.lt_of_lt_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L957-L958"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.le_trans\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">le_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.le_trans","kind":"theorem","line":954,"name":"String.Pos.Raw.le_trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L954-L955"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.isUTF8FirstByte_getUTF8Byte_zero\"><span class=\"name\">String</span>.<span class=\"name\">isUTF8FirstByte_getUTF8Byte_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.getUTF8Byte\">getUTF8Byte</a></span> <span class=\"fn\">0</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.isUTF8FirstByte_getUTF8Byte_zero","kind":"theorem","line":951,"name":"String.isUTF8FirstByte_getUTF8Byte_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L951-L952"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.IsValidUTF8.isUTF8FirstByte_getElem_zero\"><span class=\"name\">ByteArray</span>.<span class=\"name\">IsValidUTF8</span>.<span class=\"name\">isUTF8FirstByte_getElem_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">0</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.IsValidUTF8.isUTF8FirstByte_getElem_zero","kind":"theorem","line":940,"name":"ByteArray.IsValidUTF8.isUTF8FirstByte_getElem_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L940-L949"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_isSome_utf8DecodeChar?\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_iff_isSome_utf8DecodeChar?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_isSome_utf8DecodeChar?","kind":"theorem","line":917,"name":"String.Pos.Raw.isValid_iff_isSome_utf8DecodeChar?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L917-L938"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableIsValid\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableIsValid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">Pos.Raw.IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableIsValid","kind":"instance","line":914,"name":"String.instDecidableIsValid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L914-L915"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_eq_false_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_eq_false_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid\">isValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_eq_false_iff","kind":"theorem","line":910,"name":"String.Pos.Raw.isValid_eq_false_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L910-L912"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_eq_true_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_eq_true_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid\">isValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_eq_true_iff","kind":"theorem","line":900,"name":"String.Pos.Raw.isValid_eq_true_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L900-L908"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `p` is a valid UTF-8 position in the string `s`.\n\nThis means that `p ≤ s.endPos` and `p` lies on a UTF-8 character boundary. At runtime, this\noperation takes constant time.\n\nExamples:\n * `String.Pos.isValid \"abc\" ⟨0⟩ = true`\n * `String.Pos.isValid \"abc\" ⟨1⟩ = true`\n * `String.Pos.isValid \"abc\" ⟨3⟩ = true`\n * `String.Pos.isValid \"abc\" ⟨4⟩ = false`\n * `String.Pos.isValid \"𝒫(A)\" ⟨0⟩ = true`\n * `String.Pos.isValid \"𝒫(A)\" ⟨1⟩ = false`\n * `String.Pos.isValid \"𝒫(A)\" ⟨2⟩ = false`\n * `String.Pos.isValid \"𝒫(A)\" ⟨3⟩ = false`\n * `String.Pos.isValid \"𝒫(A)\" ⟨4⟩ = true`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid","kind":"def","line":876,"name":"String.Pos.Raw.isValid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L876-L898"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_isUTF8FirstByte\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_iff_isUTF8FirstByte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.getUTF8Byte\">getUTF8Byte</a></span> <span class=\"fn\">p</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_isUTF8FirstByte","kind":"theorem","line":847,"name":"String.Pos.Raw.isValid_iff_isUTF8FirstByte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L847-L874"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endPos_empty\"><span class=\"name\">String</span>.<span class=\"name\">endPos_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.endPos_empty","kind":"theorem","line":844,"name":"String.endPos_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L844-L845"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.getUtf8Byte\"><span class=\"name\">String</span>.<span class=\"name\">getUtf8Byte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.getUtf8Byte","kind":"def","line":840,"name":"String.getUtf8Byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L840-L842"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.getUTF8Byte\"><span class=\"name\">String</span>.<span class=\"name\">getUTF8Byte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Accesses the indicated byte in the UTF-8 encoding of a string.\n\nAt runtime, this function is implemented by efficient, constant-time code.\n","docLink":"./Init/Data/String/Basic.html#String.getUTF8Byte","kind":"def","line":831,"name":"String.getUTF8Byte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L831-L838"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.push_induction\"><span class=\"name\">String</span>.<span class=\"name\">push_induction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">empty</span> : <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">&quot;&quot;</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">push</span> : <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.push_induction","kind":"theorem","line":812,"name":"String.push_induction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L812-L829"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.endPos_push\"><span class=\"name\">String</span>.<span class=\"name\">endPos_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.endPos_push","kind":"theorem","line":809,"name":"String.endPos_push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L809-L810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8ByteSize_push\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8ByteSize_push","kind":"theorem","line":804,"name":"String.utf8ByteSize_push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L804-L807"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_push\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_push","kind":"theorem","line":789,"name":"String.Pos.Raw.isValid_push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L789-L802"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append_singleton\"><span class=\"name\">String</span>.<span class=\"name\">append_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.append_singleton","kind":"theorem","line":785,"name":"String.append_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L785-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.append_right\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">append_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>) <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.append_right","kind":"theorem","line":781,"name":"String.Pos.Raw.IsValid.append_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L781-L783"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.append_left\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">append_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">t</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>) (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.append_left","kind":"theorem","line":775,"name":"String.Pos.Raw.IsValid.append_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L775-L779"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_append\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>) <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">t</span> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">s</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_append","kind":"theorem","line":754,"name":"String.Pos.Raw.isValid_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L754-L773"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_char_add\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_char_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_char_add","kind":"theorem","line":751,"name":"String.Pos.Raw.byteIdx_char_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L751-L752"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_add_char\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_add_char</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_add_char","kind":"theorem","line":748,"name":"String.Pos.Raw.byteIdx_add_char","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L748-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_string_add\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_string_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">p</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_string_add","kind":"theorem","line":745,"name":"String.Pos.Raw.byteIdx_string_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L745-L746"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_add_string\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_add_string</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_add_string","kind":"theorem","line":742,"name":"String.Pos.Raw.byteIdx_add_string","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L742-L743"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_sub_string\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_sub_string</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">s</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_sub_string","kind":"theorem","line":739,"name":"String.Pos.Raw.byteIdx_sub_string","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L739-L740"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_sub_char\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_sub_char</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span>).<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_sub_char","kind":"theorem","line":736,"name":"String.Pos.Raw.byteIdx_sub_char","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L736-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteDistance_eq\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteDistance_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">lo</span>.<a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteDistance\">byteDistance</a></span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">lo</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteDistance_eq","kind":"theorem","line":733,"name":"String.Pos.Raw.byteDistance_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L733-L734"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteDistance\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteDistance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Returns the size of the byte slice delineated by the positions `lo` and `hi`.\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteDistance","kind":"def","line":726,"name":"String.Pos.Raw.byteDistance","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L726-L731"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_singleton\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_singleton","kind":"theorem","line":712,"name":"String.Pos.Raw.isValid_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L712-L724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8ByteSize_singleton\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8ByteSize_singleton","kind":"theorem","line":708,"name":"String.utf8ByteSize_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L708-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.singleton_eq_asString\"><span class=\"name\">String</span>.<span class=\"name\">singleton_eq_asString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.singleton_eq_asString","kind":"theorem","line":705,"name":"String.singleton_eq_asString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L705-L706"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.bytes_singleton\"><span class=\"name\">String</span>.<span class=\"name\">bytes_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Bootstrap.html#String.singleton\">singleton</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.bytes_singleton","kind":"theorem","line":701,"name":"String.bytes_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L701-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_exists_take_data\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_iff_exists_take_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span>)</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_exists_take_data","kind":"theorem","line":696,"name":"String.Pos.Raw.isValid_iff_exists_take_data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L696-L699"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_asString\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_asString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_asString","kind":"theorem","line":682,"name":"String.Pos.Raw.isValid_asString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L682-L694"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_empty_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_empty_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">&quot;&quot;</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_empty_iff","kind":"theorem","line":672,"name":"String.Pos.Raw.isValid_empty_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L672-L680"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_endPos","kind":"theorem","line":667,"name":"String.Pos.Raw.isValid_endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L667-L670"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_zero","kind":"theorem","line":662,"name":"String.Pos.Raw.isValid_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L662-L665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">byteIdx_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.byteIdx_zero","kind":"theorem","line":659,"name":"String.Pos.Raw.byteIdx_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L659-L660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_exists_append\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isValid_iff_exists_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">s₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#String\">String</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">s₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#String\">String</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.isValid_iff_exists_append","kind":"theorem","line":646,"name":"String.Pos.Raw.isValid_iff_exists_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L646-L657"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.isValidUTF8_extract_utf8ByteSize\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">isValidUTF8_extract_utf8ByteSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span>)</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.isValidUTF8_extract_utf8ByteSize","kind":"theorem","line":633,"name":"String.Pos.Raw.IsValid.isValidUTF8_extract_utf8ByteSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L633-L644"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.exists\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">m₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">m₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">(<span class=\"fn\">m₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m₂</span>).<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.exists","kind":"theorem","line":619,"name":"String.Pos.Raw.IsValid.exists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L619-L631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.isPrefix_of_utf8Encode_append_eq_utf8Encode\"><span class=\"name\">List</span>.<span class=\"name\">isPrefix_of_utf8Encode_append_eq_utf8Encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">m</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.isPrefix_of_utf8Encode_append_eq_utf8Encode","kind":"theorem","line":601,"name":"List.isPrefix_of_utf8Encode_append_eq_utf8Encode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L601-L616"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.isValidUTF8_extract_zero\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">isValidUTF8_extract_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">off</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">off</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>)</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.isValidUTF8_extract_zero","kind":"theorem","line":599,"name":"String.Pos.Raw.IsValid.isValidUTF8_extract_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L599-L599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.le_endPos\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span>.<span class=\"name\">le_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\">IsValid</a> <span class=\"fn\">s</span> <span class=\"fn\">off</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">off</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid.le_endPos","kind":"theorem","line":598,"name":"String.Pos.Raw.IsValid.le_endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L598-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">IsValid</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">off</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Predicate for validity of positions inside a `String`.\n\nThere are multiple equivalent definitions for validity.\n\nWe say that a position is valid if the string obtained by taking all of the bytes up to, but\nexcluding, the given position, is valid UTF-8; see `Pos.isValid_iff_isValidUTF8_extract_zero`.\n\nSimilarly, a position is valid if the string obtained by taking all of the bytes starting at the\ngiven position is valid UTF-8; see `Pos.isValid_iff_isValidUTF8_extract_utf8ByteSize`.\n\nAn equivalent condition is that the position is the length of the UTF-8 encoding of\nsome prefix of the characters of the string; see `Pos.isValid_iff_exists_append` and\n`Pos.isValid_iff_exists_take_data`.\n\nAnother equivalent condition that can be checked efficiently is that the position is either the\nend position or strictly smaller than the end position and the byte at the position satisfies\n`UInt8.IsUTF8FirstByte`; see `Pos.isValid_iff_isUTF8FirstByte`.\n\nExamples:\n * `String.Pos.IsValid \"abc\" ⟨0⟩`\n * `String.Pos.IsValid \"abc\" ⟨1⟩`\n * `String.Pos.IsValid \"abc\" ⟨3⟩`\n * `¬ String.Pos.IsValid \"abc\" ⟨4⟩`\n * `String.Pos.IsValid \"𝒫(A)\" ⟨0⟩`\n * `¬ String.Pos.IsValid \"𝒫(A)\" ⟨1⟩`\n * `¬ String.Pos.IsValid \"𝒫(A)\" ⟨2⟩`\n * `¬ String.Pos.IsValid \"𝒫(A)\" ⟨3⟩`\n * `String.Pos.IsValid \"𝒫(A)\" ⟨4⟩`\n","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.IsValid","kind":"structure","line":567,"name":"String.Pos.Raw.IsValid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L567-L599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toList\"><span class=\"name\">String</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Converts a string to a list of characters.\n\nSince strings are represented as dynamic arrays of bytes containing the string encoded using\nUTF-8, this operation takes time and space linear in the length of the string.\n\nExamples:\n * `\"abc\".toList = ['a', 'b', 'c']`\n * `\"\".toList = []`\n * `\"\\n\".toList = ['\\n']`\n","docLink":"./Init/Data/String/Basic.html#String.toList","kind":"def","line":552,"name":"String.toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L552-L565"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decLE\"><span class=\"name\">String</span>.<span class=\"name\">decLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.decLE","kind":"instance","line":549,"name":"String.decLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L549-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLE\"><span class=\"name\">String</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instLE","kind":"instance","line":546,"name":"String.instLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L546-L547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.le\"><span class=\"name\">String</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Non-strict inequality on strings, typically used via the `≤` operator.\n\n`a ≤ b` is defined to mean `¬ b < a`.\n","docLink":"./Init/Data/String/Basic.html#String.le","kind":"def","line":539,"name":"String.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L539-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.decidableLT\"><span class=\"name\">String</span>.<span class=\"name\">decidableLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.decidableLT","kind":"instance","line":535,"name":"String.decidableLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L535-L537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLT\"><span class=\"name\">String</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instLT","kind":"instance","line":532,"name":"String.instLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L532-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.ext\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">byteIdx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.ext","kind":"theorem","line":530,"name":"String.Pos.Raw.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L530-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.ext_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.ext_iff","kind":"theorem","line":530,"name":"String.Pos.Raw.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L530-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8ByteSize_ofByteArray\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_ofByteArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.ofByteArray\">{</a> <span class=\"fn\">bytes</span> := <span class=\"fn\">b</span>, <span class=\"fn\">isValidUTF8</span> := <span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#String.ofByteArray\">}</a>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8ByteSize_ofByteArray","kind":"theorem","line":526,"name":"String.utf8ByteSize_ofByteArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L526-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.byteIdx_endPos\"><span class=\"name\">String</span>.<span class=\"name\">byteIdx_endPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.byteIdx_endPos","kind":"theorem","line":523,"name":"String.byteIdx_endPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L523-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.lt_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i₁</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.lt_iff","kind":"theorem","line":521,"name":"String.Pos.Raw.lt_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L521-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Raw.le_iff\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Raw</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">i₁</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">i₂</span>.<a href=\"./Init/Prelude.html#String.Pos.Raw.byteIdx\">byteIdx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Raw.le_iff","kind":"theorem","line":519,"name":"String.Pos.Raw.le_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L519-L519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instMaxRaw\"><span class=\"name\">String</span>.<span class=\"name\">instMaxRaw</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instMaxRaw","kind":"instance","line":517,"name":"String.instMaxRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L517-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instMinRaw\"><span class=\"name\">String</span>.<span class=\"name\">instMinRaw</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instMinRaw","kind":"instance","line":516,"name":"String.instMinRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L516-L516"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableLtRaw\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableLtRaw</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableLtRaw","kind":"instance","line":513,"name":"String.instDecidableLtRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L513-L514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instDecidableLeRaw\"><span class=\"name\">String</span>.<span class=\"name\">instDecidableLeRaw</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instDecidableLeRaw","kind":"instance","line":510,"name":"String.instDecidableLeRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L510-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLTRaw\"><span class=\"name\">String</span>.<span class=\"name\">instLTRaw</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instLTRaw","kind":"instance","line":507,"name":"String.instLTRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L507-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instLERaw\"><span class=\"name\">String</span>.<span class=\"name\">instLERaw</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instLERaw","kind":"instance","line":504,"name":"String.instLERaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L504-L505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHAddRaw_1\"><span class=\"name\">String</span>.<span class=\"name\">instHAddRaw_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAdd\">HAdd</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHAddRaw_1","kind":"instance","line":501,"name":"String.instHAddRaw_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L501-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHAddRaw\"><span class=\"name\">String</span>.<span class=\"name\">instHAddRaw</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAdd\">HAdd</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHAddRaw","kind":"instance","line":498,"name":"String.instHAddRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L498-L499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHAddCharRaw\"><span class=\"name\">String</span>.<span class=\"name\">instHAddCharRaw</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAdd\">HAdd</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHAddCharRaw","kind":"instance","line":495,"name":"String.instHAddCharRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L495-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHAddRawChar\"><span class=\"name\">String</span>.<span class=\"name\">instHAddRawChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAdd\">HAdd</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHAddRawChar","kind":"instance","line":492,"name":"String.instHAddRawChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L492-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Pos.Internal.subImpl\"><span class=\"name\">String</span>.<span class=\"name\">Pos</span>.<span class=\"name\">Internal</span>.<span class=\"name\">subImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a> → <a href=\"./Init/Prelude.html#String.Pos.Raw\">Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Pos.Internal.subImpl","kind":"def","line":488,"name":"String.Pos.Internal.subImpl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L488-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHSubRawChar\"><span class=\"name\">String</span>.<span class=\"name\">instHSubRawChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HSub\">HSub</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHSubRawChar","kind":"instance","line":485,"name":"String.instHSubRawChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L485-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.instHSubRaw\"><span class=\"name\">String</span>.<span class=\"name\">instHSubRaw</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HSub\">HSub</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.instHSubRaw","kind":"instance","line":482,"name":"String.instHSubRaw","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L482-L483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.bytes_push\"><span class=\"name\">String</span>.<span class=\"name\">bytes_push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Bootstrap.html#String.push\">push</a></span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.bytes_push","kind":"theorem","line":451,"name":"String.bytes_push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L451-L453"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.size_bytes\"><span class=\"name\">String</span>.<span class=\"name\">size_bytes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.size_bytes","kind":"theorem","line":448,"name":"String.size_bytes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L448-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8ByteSize_append\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>).<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8ByteSize_append","kind":"theorem","line":443,"name":"String.utf8ByteSize_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L443-L446"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8ByteSize_empty\"><span class=\"name\">String</span>.<span class=\"name\">utf8ByteSize_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8ByteSize_empty","kind":"theorem","line":440,"name":"String.utf8ByteSize_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L440-L441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8encode_data\"><span class=\"name\">String</span>.<span class=\"name\">utf8encode_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8encode_data","kind":"theorem","line":435,"name":"String.utf8encode_data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L435-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_append\"><span class=\"name\">String</span>.<span class=\"name\">data_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.data_append","kind":"theorem","line":430,"name":"String.data_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L430-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_inj\"><span class=\"name\">String</span>.<span class=\"name\">data_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.data_inj","kind":"theorem","line":427,"name":"String.data_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L427-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_injective\"><span class=\"name\">String</span>.<span class=\"name\">data_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.data_injective","kind":"theorem","line":424,"name":"String.data_injective","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L424-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.asString_inj\"><span class=\"name\">List</span>.<span class=\"name\">asString_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.asString_inj","kind":"theorem","line":421,"name":"List.asString_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L421-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.asString_injective\"><span class=\"name\">List</span>.<span class=\"name\">asString_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.asString_injective","kind":"theorem","line":418,"name":"List.asString_injective","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L418-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.asString_data\"><span class=\"name\">String</span>.<span class=\"name\">asString_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.asString_data","kind":"theorem","line":413,"name":"String.asString_data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L413-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.data_asString\"><span class=\"name\">List</span>.<span class=\"name\">data_asString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.data_asString","kind":"theorem","line":409,"name":"List.data_asString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L409-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.utf8Encode_get_utf8Decode?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8Encode_get_utf8Decode?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\">utf8Decode?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\">utf8Decode?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.utf8Encode_get_utf8Decode?","kind":"theorem","line":403,"name":"ByteArray.utf8Encode_get_utf8Decode?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L403-L407"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.utf8Decode?_utf8Encode\"><span class=\"name\">List</span>.<span class=\"name\">utf8Decode?_utf8Encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\">utf8Decode?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.utf8Decode?_utf8Encode","kind":"theorem","line":392,"name":"List.utf8Decode?_utf8Encode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L392-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?_utf8Encode_singleton_append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8Decode?_utf8Encode_singleton_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span>).<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\">utf8Decode?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>) =&gt; <a href=\"./Init/Prelude.html#List.toArray\">#[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.toArray\">]</a> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\">utf8Decode?</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.utf8Decode?_utf8Encode_singleton_append","kind":"theorem","line":377,"name":"ByteArray.utf8Decode?_utf8Encode_singleton_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L377-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.exists_eq_asString\"><span class=\"name\">String</span>.<span class=\"name\">exists_eq_asString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.exists_eq_asString","kind":"theorem","line":338,"name":"String.exists_eq_asString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L338-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length_data\"><span class=\"name\">String</span>.<span class=\"name\">length_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.length_data","kind":"theorem","line":335,"name":"String.length_data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L335-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.size_toArray\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">size_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#String.Internal.toArray\">toArray</a> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.size_toArray","kind":"theorem","line":331,"name":"String.Internal.size_toArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L331-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.length\"><span class=\"name\">String</span>.<span class=\"name\">length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Returns the length of a string in Unicode code points.\n\nExamples:\n* `\"\".length = 0`\n* `\"abc\".length = 3`\n* `\"L∃∀N\".length = 4`\n","docLink":"./Init/Data/String/Basic.html#String.length","kind":"def","line":319,"name":"String.length","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L319-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data_empty\"><span class=\"name\">String</span>.<span class=\"name\">data_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Data/String/Basic.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.data_empty","kind":"theorem","line":315,"name":"String.data_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L315-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.data\"><span class=\"name\">String</span>.<span class=\"name\">data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.data","kind":"def","line":311,"name":"String.data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L311-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.toArray_empty\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">toArray_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Internal.toArray\">toArray</a> <span class=\"fn\">&quot;&quot;</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.toArray_empty","kind":"theorem","line":307,"name":"String.Internal.toArray_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L307-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.Internal.toArray\"><span class=\"name\">String</span>.<span class=\"name\">Internal</span>.<span class=\"name\">toArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.Internal.toArray","kind":"def","line":303,"name":"String.Internal.toArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L303-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.asString_append\"><span class=\"name\">List</span>.<span class=\"name\">asString_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>).<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.asString_append","kind":"theorem","line":299,"name":"List.asString_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L299-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.asString_nil\"><span class=\"name\">List</span>.<span class=\"name\">asString_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.asString_nil","kind":"theorem","line":295,"name":"List.asString_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L295-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.bytes_asString\"><span class=\"name\">List</span>.<span class=\"name\">bytes_asString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Bootstrap.html#List.asString\">asString</a></span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.bytes_asString","kind":"theorem","line":292,"name":"List.bytes_asString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L292-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append_empty\"><span class=\"name\">String</span>.<span class=\"name\">append_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">&quot;&quot;</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.append_empty","kind":"theorem","line":288,"name":"String.append_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L288-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.empty_append\"><span class=\"name\">String</span>.<span class=\"name\">empty_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">&quot;&quot;</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.empty_append","kind":"theorem","line":284,"name":"String.empty_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L284-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.bytes_inj\"><span class=\"name\">String</span>.<span class=\"name\">bytes_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.bytes_inj","kind":"theorem","line":277,"name":"String.bytes_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L277-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.bytes_append\"><span class=\"name\">String</span>.<span class=\"name\">bytes_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">t</span>).<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.bytes_append","kind":"theorem","line":274,"name":"String.bytes_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L274-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#instAppendString\"><span class=\"name\">instAppendString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#instAppendString","kind":"instance","line":271,"name":"instAppendString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L271-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.append\"><span class=\"name\">String</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Appends two strings. Usually accessed via the `++` operator.\n\nThe internal implementation will perform destructive updates if the string is not shared.\n\nExamples:\n* `\"abc\".append \"def\" = \"abcdef\"`\n* `\"abc\" ++ \"def\" = \"abcdef\"`\n* `\"\" ++ \"\" = \"\"`\n","docLink":"./Init/Data/String/Basic.html#String.append","kind":"def","line":256,"name":"String.append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L256-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.bytes_empty\"><span class=\"name\">String</span>.<span class=\"name\">bytes_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ByteArray.empty\">ByteArray.empty</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.bytes_empty","kind":"theorem","line":254,"name":"String.bytes_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L254-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toUTF8_eq_bytes\"><span class=\"name\">String</span>.<span class=\"name\">toUTF8_eq_bytes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toUTF8\">toUTF8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.bytes\">bytes</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.toUTF8_eq_bytes","kind":"theorem","line":252,"name":"String.toUTF8_eq_bytes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L252-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.toUTF8\"><span class=\"name\">String</span>.<span class=\"name\">toUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"Encodes a string in UTF-8 as an array of bytes.\n","docLink":"./Init/Data/String/Basic.html#String.toUTF8","kind":"def","line":245,"name":"String.toUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L245-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.fromUTF8!\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Decodes an array of bytes that encode a string as [UTF-8](https://en.wikipedia.org/wiki/UTF-8) into\nthe corresponding string, or panics if the array is not a valid UTF-8 encoding of a string.\n","docLink":"./Init/Data/String/Basic.html#String.fromUTF8!","kind":"def","line":238,"name":"String.fromUTF8!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L238-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.fromUTF8?\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Decodes an array of bytes that encode a string as [UTF-8](https://en.wikipedia.org/wiki/UTF-8) into\nthe corresponding string, or returns `none` if the array is not a valid UTF-8 encoding of a string.\n","docLink":"./Init/Data/String/Basic.html#String.fromUTF8?","kind":"def","line":231,"name":"String.fromUTF8?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L231-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.fromUTF8\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Decodes an array of bytes that encode a string as [UTF-8](https://en.wikipedia.org/wiki/UTF-8) into\nthe corresponding string.\n","docLink":"./Init/Data/String/Basic.html#String.fromUTF8","kind":"def","line":223,"name":"String.fromUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L223-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#instDecidableIsValidUTF8\"><span class=\"name\">instDecidableIsValidUTF8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#instDecidableIsValidUTF8","kind":"instance","line":220,"name":"instDecidableIsValidUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L220-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.validateUTF8_eq_false_iff\"><span class=\"name\">ByteArray</span>.<span class=\"name\">validateUTF8_eq_false_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.validateUTF8\">validateUTF8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.validateUTF8_eq_false_iff","kind":"theorem","line":215,"name":"ByteArray.validateUTF8_eq_false_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L215-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.validateUTF8_eq_true_iff\"><span class=\"name\">ByteArray</span>.<span class=\"name\">validateUTF8_eq_true_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.validateUTF8\">validateUTF8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.validateUTF8_eq_true_iff","kind":"theorem","line":210,"name":"ByteArray.validateUTF8_eq_true_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L210-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.isSome_utf8Decode?_iff\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isSome_utf8Decode?_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\">utf8Decode?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.isSome_utf8Decode?_iff","kind":"theorem","line":206,"name":"ByteArray.isSome_utf8Decode?_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L206-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?_empty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8Decode?_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ByteArray.empty\">empty</a>.<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\">utf8Decode?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.utf8Decode?_empty","kind":"theorem","line":178,"name":"ByteArray.utf8Decode?_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L178-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?.go.congr\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8Decode?</span>.<span class=\"name\">go</span>.<span class=\"name\">congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fuel </span><span class=\"fn\">fuel' </span><span class=\"fn\">i </span><span class=\"fn\">i'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">acc </span><span class=\"fn\">acc'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi'</span> : <span class=\"fn\">i'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b'</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">fuel</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hf'</span> : <span class=\"fn\"><span class=\"fn\">b'</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">fuel'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbb'</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hii'</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hacc</span> : <span class=\"fn\">acc</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">acc'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?.go\">go</a> <span class=\"fn\">b</span> <span class=\"fn\">fuel</span> <span class=\"fn\">i</span> <span class=\"fn\">acc</span> <span class=\"fn\">hi</span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?.go\">go</a> <span class=\"fn\">b'</span> <span class=\"fn\">fuel'</span> <span class=\"fn\">i'</span> <span class=\"fn\">acc'</span> <span class=\"fn\">hi'</span> <span class=\"fn\">hf'</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.utf8Decode?.go.congr","kind":"theorem","line":154,"name":"ByteArray.utf8Decode?.go.congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L154-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.isSome_utf8Decode?_eq_validateUTF8\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isSome_utf8Decode?_eq_validateUTF8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\">utf8Decode?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Basic.html#ByteArray.validateUTF8\">validateUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.isSome_utf8Decode?_eq_validateUTF8","kind":"theorem","line":150,"name":"ByteArray.isSome_utf8Decode?_eq_validateUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L150-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.isSome_utf8Decode?Go_eq_validateUTF8Go\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isSome_utf8Decode?Go_eq_validateUTF8Go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fuel </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">fuel</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?.go\">utf8Decode?.go</a> <span class=\"fn\">b</span> <span class=\"fn\">fuel</span> <span class=\"fn\">i</span> <span class=\"fn\">acc</span> <span class=\"fn\">hi</span> <span class=\"fn\">hf</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#ByteArray.validateUTF8.go\">validateUTF8.go</a> <span class=\"fn\">b</span> <span class=\"fn\">fuel</span> <span class=\"fn\">i</span> <span class=\"fn\">hi</span> <span class=\"fn\">hf</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.isSome_utf8Decode?Go_eq_validateUTF8Go","kind":"theorem","line":129,"name":"ByteArray.isSome_utf8Decode?Go_eq_validateUTF8Go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L129-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.validateUTF8.go\"><span class=\"name\">ByteArray</span>.<span class=\"name\">validateUTF8</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">fuel</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.validateUTF8.go","kind":"def","line":109,"name":"ByteArray.validateUTF8.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L109-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.validateUTF8\"><span class=\"name\">ByteArray</span>.<span class=\"name\">validateUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.validateUTF8","kind":"def","line":105,"name":"ByteArray.validateUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L105-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?.go\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8Decode?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">fuel</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.utf8Decode?.go","kind":"def","line":92,"name":"ByteArray.utf8Decode?.go","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L92-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.utf8Decode?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8Decode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span></div></div>","info":{"doc":"Decodes a sequence of characters from their UTF-8 representation. Returns `none` if the bytes are\nnot a sequence of Unicode scalar values.\n","docLink":"./Init/Data/String/Basic.html#ByteArray.utf8Decode?","kind":"def","line":84,"name":"ByteArray.utf8Decode?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L84-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.isValidUTF8_utf8Encode_singleton_append_iff\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isValidUTF8_utf8Encode_singleton_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.isValidUTF8_utf8Encode_singleton_append_iff","kind":"theorem","line":69,"name":"ByteArray.isValidUTF8_utf8Encode_singleton_append_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L69-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.IsValidUTF8.push\"><span class=\"name\">ByteArray</span>.<span class=\"name\">IsValidUTF8</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.push\">push</a></span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUInt8\">toUInt8</a></span>)</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.IsValidUTF8.push","kind":"theorem","line":64,"name":"ByteArray.IsValidUTF8.push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L64-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.toUInt8_val\"><span class=\"name\">Char</span>.<span class=\"name\">toUInt8_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Char/Basic.html#Char.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Char.toUInt8_val","kind":"theorem","line":61,"name":"Char.toUInt8_val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L61-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.IsValidUTF8.append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">IsValidUTF8</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">b'</span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b'</span>).<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.IsValidUTF8.append","kind":"theorem","line":55,"name":"ByteArray.IsValidUTF8.append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L55-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#Char.isValidUTF8_toByteArray_utf8EncodeChar\"><span class=\"name\">Char</span>.<span class=\"name\">isValidUTF8_toByteArray_utf8EncodeChar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.toByteArray\">toByteArray</a></span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#Char.isValidUTF8_toByteArray_utf8EncodeChar","kind":"theorem","line":51,"name":"Char.isValidUTF8_toByteArray_utf8EncodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L51-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.isValidUTF8_empty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isValidUTF8_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ByteArray.empty\">empty</a>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.isValidUTF8_empty","kind":"theorem","line":47,"name":"ByteArray.isValidUTF8_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L47-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#ByteArray.isValidUTF8_utf8Encode\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isValidUTF8_utf8Encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span>.<a href=\"./Init/Prelude.html#ByteArray.IsValidUTF8\">IsValidUTF8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#ByteArray.isValidUTF8_utf8Encode","kind":"theorem","line":44,"name":"ByteArray.isValidUTF8_utf8Encode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L44-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.utf8Encode_eq_empty\"><span class=\"name\">List</span>.<span class=\"name\">utf8Encode_eq_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ByteArray.empty\">ByteArray.empty</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.utf8Encode_eq_empty","kind":"theorem","line":40,"name":"List.utf8Encode_eq_empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L40-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#String.utf8EncodeChar_ne_nil\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeChar_ne_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#String.utf8EncodeChar_ne_nil","kind":"theorem","line":36,"name":"String.utf8EncodeChar_ne_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L36-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.isUTF8FirstByte_getElem_utf8Encode_singleton\"><span class=\"name\">List</span>.<span class=\"name\">isUTF8FirstByte_getElem_utf8Encode_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.isUTF8FirstByte_getElem_utf8Encode_singleton","kind":"theorem","line":32,"name":"List.isUTF8FirstByte_getElem_utf8Encode_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L32-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.utf8Encode_cons\"><span class=\"name\">List</span>.<span class=\"name\">utf8Encode_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>).<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.utf8Encode_cons","kind":"theorem","line":29,"name":"List.utf8Encode_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L29-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.utf8Encode_append\"><span class=\"name\">List</span>.<span class=\"name\">utf8Encode_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l'</span>).<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.utf8Encode_append","kind":"theorem","line":24,"name":"List.utf8Encode_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L24-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.utf8Encode_singleton\"><span class=\"name\">List</span>.<span class=\"name\">utf8Encode_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.toByteArray\">toByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.utf8Encode_singleton","kind":"theorem","line":21,"name":"List.utf8Encode_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L21-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Basic.html#List.utf8Encode_nil\"><span class=\"name\">List</span>.<span class=\"name\">utf8Encode_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ByteArray.empty\">ByteArray.empty</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Basic.html#List.utf8Encode_nil","kind":"theorem","line":18,"name":"List.utf8Encode_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Basic.lean#L18-L19"}}],"imports":["Init.Data.String.Decode","Init.Data.ByteArray.Lemmas"],"instances":[{"className":"Decidable","name":"instDecidableIsValidUTF8","typeNames":["ByteArray.IsValidUTF8"]},{"className":"Append","name":"instAppendString","typeNames":["String"]},{"className":"HSub","name":"String.instHSubRaw","typeNames":["String.Pos.Raw","String","String.Pos.Raw"]},{"className":"HSub","name":"String.instHSubRawChar","typeNames":["String.Pos.Raw","Char","String.Pos.Raw"]},{"className":"HAdd","name":"String.instHAddRawChar","typeNames":["String.Pos.Raw","Char","String.Pos.Raw"]},{"className":"HAdd","name":"String.instHAddCharRaw","typeNames":["Char","String.Pos.Raw","String.Pos.Raw"]},{"className":"HAdd","name":"String.instHAddRaw","typeNames":["String","String.Pos.Raw","String.Pos.Raw"]},{"className":"HAdd","name":"String.instHAddRaw_1","typeNames":["String.Pos.Raw","String","String.Pos.Raw"]},{"className":"LE","name":"String.instLERaw","typeNames":["String.Pos.Raw"]},{"className":"LT","name":"String.instLTRaw","typeNames":["String.Pos.Raw"]},{"className":"Decidable","name":"String.instDecidableLeRaw","typeNames":["LE.le"]},{"className":"Decidable","name":"String.instDecidableLtRaw","typeNames":["LT.lt"]},{"className":"Min","name":"String.instMinRaw","typeNames":["String.Pos.Raw"]},{"className":"Max","name":"String.instMaxRaw","typeNames":["String.Pos.Raw"]},{"className":"LT","name":"String.instLT","typeNames":["String"]},{"className":"Decidable","name":"String.decidableLT","typeNames":["LT.lt"]},{"className":"LE","name":"String.instLE","typeNames":["String"]},{"className":"Decidable","name":"String.decLE","typeNames":["LE.le"]},{"className":"Decidable","name":"String.instDecidableIsValid","typeNames":["String.Pos.Raw.IsValid"]},{"className":"Decidable","name":"String.instDecidableEqValidPos","typeNames":["Eq"]},{"className":"Inhabited","name":"String.instInhabitedValidPos","typeNames":["String.ValidPos"]},{"className":"LE","name":"String.instLEValidPos","typeNames":["String.ValidPos"]},{"className":"LT","name":"String.instLTValidPos","typeNames":["String.ValidPos"]},{"className":"Decidable","name":"String.instDecidableLeValidPos","typeNames":["LE.le"]},{"className":"Decidable","name":"String.instDecidableLtValidPos","typeNames":["LT.lt"]},{"className":"Inhabited","name":"String.instInhabitedSlice","typeNames":["String.Slice"]},{"className":"HAdd","name":"String.instHAddRawSlice","typeNames":["String.Pos.Raw","String.Slice","String.Pos.Raw"]},{"className":"HAdd","name":"String.instHAddSliceRaw","typeNames":["String.Slice","String.Pos.Raw","String.Pos.Raw"]},{"className":"HSub","name":"String.instHSubRawSlice","typeNames":["String.Pos.Raw","String.Slice","String.Pos.Raw"]},{"className":"Decidable","name":"String.Slice.instDecidableEqPos","typeNames":["Eq"]},{"className":"Inhabited","name":"String.instInhabitedPos","typeNames":["String.Slice.Pos"]},{"className":"LE","name":"String.instLEPos","typeNames":["String.Slice.Pos"]},{"className":"LT","name":"String.instLTPos","typeNames":["String.Slice.Pos"]},{"className":"Decidable","name":"String.instDecidableLePos","typeNames":["LE.le"]},{"className":"Decidable","name":"String.instDecidableLtPos","typeNames":["LT.lt"]},{"className":"Decidable","name":"String.instDecidableIsValidForSlice","typeNames":["String.Pos.Raw.IsValidForSlice"]},{"className":"Inhabited","name":"String.instInhabited_1","typeNames":["String"]},{"className":"Append","name":"String.instAppend","typeNames":["String"]},{"className":"Decidable","name":"String.instDecidableEqIterator","typeNames":["Eq"]},{"className":"Inhabited","name":"String.instInhabitedIterator","typeNames":["String.Iterator"]},{"className":"SizeOf","name":"String.instSizeOfIterator","typeNames":["String.Iterator"]},{"className":"BEq","name":"Substring.hasBeq","typeNames":["Substring"]}],"name":"Init.Data.String.Basic"}