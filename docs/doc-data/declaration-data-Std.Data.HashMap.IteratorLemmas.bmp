{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toArray_valuesIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toArray_valuesIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.valuesIter\">valuesIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.toList\">toList</a></span>)</span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toArray_valuesIter","kind":"theorem","line":167,"name":"Std.HashMap.toArray_valuesIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L167-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toListRev_valuesIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toListRev_valuesIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.valuesIter\">valuesIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.toList\">toList</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toListRev_valuesIter","kind":"theorem","line":162,"name":"Std.HashMap.toListRev_valuesIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L162-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toList_valuesIter_eq_toList_map_snd\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toList_valuesIter_eq_toList_map_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.valuesIter\">valuesIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toList_valuesIter_eq_toList_map_snd","kind":"theorem","line":157,"name":"Std.HashMap.toList_valuesIter_eq_toList_map_snd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L157-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toArray_keysIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toArray_keysIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/LawfulHashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.keysIter\">keysIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.keysArray\">keysArray</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toArray_keysIter","kind":"theorem","line":146,"name":"Std.HashMap.toArray_keysIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L146-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toListRev_keysIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toListRev_keysIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/LawfulHashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.keysIter\">keysIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.keys\">keys</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toListRev_keysIter","kind":"theorem","line":141,"name":"Std.HashMap.toListRev_keysIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L141-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toList_keysIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toList_keysIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/LawfulHashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.keysIter\">keysIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.keys\">keys</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toList_keysIter","kind":"theorem","line":136,"name":"Std.HashMap.toList_keysIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L136-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toArray_iter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toArray_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.toArray\">toArray</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toArray_iter","kind":"theorem","line":121,"name":"Std.HashMap.toArray_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L121-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toListRev_iter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toListRev_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toListRev_iter","kind":"theorem","line":116,"name":"Std.HashMap.toListRev_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L116-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toList_iter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">toList_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">HashMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.toList_iter","kind":"theorem","line":111,"name":"Std.HashMap.toList_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L111-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toArray_valuesIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toArray_valuesIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.valuesIter\">valuesIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.toList\">toList</a></span>)</span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toArray_valuesIter","kind":"theorem","line":90,"name":"Std.HashMap.Raw.toArray_valuesIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L90-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toListRev_valuesIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toListRev_valuesIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.valuesIter\">valuesIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.toList\">toList</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toListRev_valuesIter","kind":"theorem","line":85,"name":"Std.HashMap.Raw.toListRev_valuesIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L85-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toList_valuesIter_eq_toList_map_snd\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toList_valuesIter_eq_toList_map_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.valuesIter\">valuesIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.map\">List.map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toList_valuesIter_eq_toList_map_snd","kind":"theorem","line":78,"name":"Std.HashMap.Raw.toList_valuesIter_eq_toList_map_snd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L78-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toArray_keysIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toArray_keysIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/LawfulHashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.keysIter\">keysIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.keysArray\">keysArray</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toArray_keysIter","kind":"theorem","line":67,"name":"Std.HashMap.Raw.toArray_keysIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L67-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toListRev_keysIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toListRev_keysIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/LawfulHashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.keysIter\">keysIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.keys\">keys</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toListRev_keysIter","kind":"theorem","line":62,"name":"Std.HashMap.Raw.toListRev_keysIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L62-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toList_keysIter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toList_keysIter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/LawfulHashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.keysIter\">keysIter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.keys\">keys</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toList_keysIter","kind":"theorem","line":56,"name":"Std.HashMap.Raw.toList_keysIter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L56-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toArray_iter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toArray_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.toArray\">toArray</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toArray_iter","kind":"theorem","line":41,"name":"Std.HashMap.Raw.toArray_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L41-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toListRev_iter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toListRev_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.toList\">toList</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toListRev_iter","kind":"theorem","line":36,"name":"Std.HashMap.Raw.toListRev_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L36-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toList_iter\"><span class=\"name\">Std</span>.<span class=\"name\">HashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toList_iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Iterator.html#Std.HashMap.Raw.iter\">iter</a></span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/HashMap/Raw.html#Std.HashMap.Raw.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/HashMap/IteratorLemmas.html#Std.HashMap.Raw.toList_iter","kind":"theorem","line":30,"name":"Std.HashMap.Raw.toList_iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/HashMap/IteratorLemmas.lean#L30-L34"}}],"imports":["Init.Data.Iterators.Lemmas.Combinators","Std.Data.DHashMap.IteratorLemmas","Std.Data.HashMap.Iterator","Std.Data.HashMap.Iterator","Std.Data.HashMap.RawLemmas","Std.Data.HashMap.Lemmas","Std.Data.DHashMap.Basic"],"instances":[],"name":"Std.Data.HashMap.IteratorLemmas"}