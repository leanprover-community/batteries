{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Beta.html#Lean.Meta.Grind.propagateBetaForNewApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateBetaForNewApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Applies beta-reduction for lambdas in `f`s equivalence class.\nWe use this function while internalizing new applications.\n","docLink":"./Lean/Meta/Tactic/Grind/Beta.html#Lean.Meta.Grind.propagateBetaForNewApp","kind":"def","line":61,"name":"Lean.Meta.Grind.propagateBetaForNewApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Beta.lean#L61-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Beta.html#Lean.Meta.Grind.propagateBetaEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateBetaEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"For each `lam` in `lams` s.t. `lam` and `f` are in the same equivalence class,\npropagate `f args = lam args`.\n","docLink":"./Lean/Meta/Tactic/Grind/Beta.html#Lean.Meta.Grind.propagateBetaEqs","kind":"def","line":31,"name":"Lean.Meta.Grind.propagateBetaEqs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Beta.lean#L31-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Beta.html#Lean.Meta.Grind.getFnRoots\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getFnRoots</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Returns the root of the functions in the equivalence class containing `e`.\nThat is, if `f a` is in `root`s equivalence class, results contains the root of `f`.\n","docLink":"./Lean/Meta/Tactic/Grind/Beta.html#Lean.Meta.Grind.getFnRoots","kind":"def","line":18,"name":"Lean.Meta.Grind.getFnRoots","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Beta.lean#L18-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Beta.html#Lean.Meta.Grind.getEqcLambdas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getEqcLambdas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Returns all lambda expressions in the equivalence class with root `root`. ","docLink":"./Lean/Meta/Tactic/Grind/Beta.html#Lean.Meta.Grind.getEqcLambdas","kind":"def","line":12,"name":"Lean.Meta.Grind.getEqcLambdas","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Beta.lean#L12-L16"}}],"imports":["Lean.Meta.Tactic.Grind.Types"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Beta"}