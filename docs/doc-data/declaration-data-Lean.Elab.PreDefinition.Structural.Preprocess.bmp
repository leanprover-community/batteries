{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Preprocess.html#Lean.Elab.Structural.preprocess\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">preprocess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recFnNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numFixedParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Preprocesses the expressions to improve the effectiveness of `elimRecursion`.\n\n* Beta reduce terms where the recursive function occurs in the lambda term.\nExample:\n```\ndef f : Nat → Nat\n  | 0 => 1\n  | i+1 => (fun x => f x) i\n```\n\n* Floats out the RecApp markers.\nExample:\n```\ndef f : Nat → Nat\n  | 0 => 1\n  | i+1 => (f x) i\n```\n\n* Unfold auxiliary definitions abstracting over the function call\n(typically abstracted) proofs.\n\n","docLink":"./Lean/Elab/PreDefinition/Structural/Preprocess.html#Lean.Elab.Structural.preprocess","kind":"def","line":23,"name":"Lean.Elab.Structural.preprocess","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Structural/Preprocess.lean#L23-L59"}}],"imports":["Lean.Elab.RecAppSyntax","Lean.Meta.WHNF"],"instances":[],"name":"Lean.Elab.PreDefinition.Structural.Preprocess"}