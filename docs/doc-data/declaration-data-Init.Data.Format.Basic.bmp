{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.joinSuffix\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">joinSuffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"Concatenates the given list after appending the given suffix to each element.\n\nThe list items are formatting using `ToFormat.format`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSuffix","kind":"def","line":462,"name":"Std.Format.joinSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L462-L470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.prefixJoin\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">prefixJoin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"Concatenates the given list after prepending `pre` to each element.\n\nThe list items are formatting using `ToFormat.format`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.prefixJoin","kind":"def","line":453,"name":"Std.Format.prefixJoin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L453-L460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.joinSep\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">joinSep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"Intercalates the given list with the given `sep` format.\n\nThe list items are formatting using `ToFormat.format`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSep","kind":"def","line":443,"name":"Std.Format.joinSep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L443-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instToFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">instToFormatString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatString","kind":"instance","line":440,"name":"Std.instToFormatString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L440-L441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instToFormatFormat\"><span class=\"name\">Std</span>.<span class=\"name\">instToFormatFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatFormat","kind":"instance","line":437,"name":"Std.instToFormatFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L437-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat.format\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span>.<span class=\"name\">format</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"Converts a value to a `Format` object, with no expectation that the resulting string is valid\ncode.\n","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.format","kind":"def","line":432,"name":"Std.ToFormat.format","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L432-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.mk","kind":"ctor","line":427,"name":"Std.ToFormat.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L427-L427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"Specifies a “user-facing” way to convert from the type `α` to a `Format` object. There is no\nexpectation that the resulting string is valid code.\n\nThe `Repr` class is similar, but the expectation is that instances produce valid Lean code.\n","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat","kind":"class","line":421,"name":"Std.ToFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L421-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.pretty\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">pretty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">width</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <a href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\">defWidth</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent </span><span class=\"fn\">column</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Renders a `Format` to a string.\n* `width`: the total width\n* `indent`: the initial indentation to use for wrapped lines\n  (subsequent wrapping may increase the indentation)\n* `column`: begin the first line wrap `column` characters earlier than usual\n  (this is useful when the output String will be printed starting at `column`)\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.pretty","kind":"def","line":406,"name":"Std.Format.pretty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L406-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.indentD\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">indentD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"Insert a newline and then `f`, all nested by the default indent amount. ","docLink":"./Init/Data/Format/Basic.html#Std.Format.indentD","kind":"def","line":389,"name":"Std.Format.indentD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L389-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nestD\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nestD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"Increases the indentation level by the default amount.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.nestD","kind":"def","line":383,"name":"Std.Format.nestD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L383-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The default width of the targeted output, which is 120 columns. ","docLink":"./Init/Data/Format/Basic.html#Std.Format.defWidth","kind":"def","line":380,"name":"Std.Format.defWidth","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L380-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defUnicode\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defUnicode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.defUnicode","kind":"def","line":379,"name":"Std.Format.defUnicode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L379-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defIndent\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defIndent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The default indentation level, which is two spaces. ","docLink":"./Init/Data/Format/Basic.html#Std.Format.defIndent","kind":"def","line":377,"name":"Std.Format.defIndent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L377-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.bracketFill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">bracketFill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"Creates a format `l ++ f ++ r` with a flattening group, nesting the contents by the length of `l`.\n\nThe group's `FlattenBehavior` is `fill`; for `allOrNone` use `Std.Format.bracketFill`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracketFill","kind":"def","line":369,"name":"Std.Format.bracketFill","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L369-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.sbracket\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">sbracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"Creates the format `\"[\" ++ f ++ \"]\"` with a flattening group, nesting by one space.\n\n`sbracket` is short for “square bracket”.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.sbracket","kind":"def","line":361,"name":"Std.Format.sbracket","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L361-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.paren\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"Creates the format `\"(\" ++ f ++ \")\"` with a flattening group, nesting by one space.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.paren","kind":"def","line":355,"name":"Std.Format.paren","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L355-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.bracket\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"Creates a format `l ++ f ++ r` with a flattening group, nesting the contents by the length of `l`.\n\nThe group's `FlattenBehavior` is `allOrNone`; for `fill` use `Std.Format.bracketFill`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracket","kind":"def","line":347,"name":"Std.Format.bracket","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L347-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.prettyM\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">prettyM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Renders a `Format` using effects in the monad `m`, using the methods of `MonadPrettyFormat`.\n\nEach line is emitted as soon as it is rendered, rather than waiting for the entire document to be\nrendered.\n* `w`: the total width\n* `indent`: the initial indentation to use for wrapped lines (subsequent wrapping may increase the\n  indentation)\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.prettyM","kind":"def","line":335,"name":"Std.Format.prettyM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L335-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">endTags</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">count</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Exits the scope of `count` opened tags.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags","kind":"def","line":239,"name":"Std.Format.MonadPrettyFormat.endTags","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L239-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">startTag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Starts a region tagged with `tag`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag","kind":"def","line":235,"name":"Std.Format.MonadPrettyFormat.startTag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L235-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">currColumn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Gets the current column at which the next string will be emitted.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn","kind":"def","line":231,"name":"Std.Format.MonadPrettyFormat.currColumn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">pushNewline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Emits a newline followed by `indent` columns of indentation.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline","kind":"def","line":227,"name":"Std.Format.MonadPrettyFormat.pushNewline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">pushOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Emits the string `s`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput","kind":"def","line":223,"name":"Std.Format.MonadPrettyFormat.pushOutput","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pushOutput</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pushNewline</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currColumn</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startTag </span><span class=\"fn\">endTags</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk","kind":"ctor","line":219,"name":"Std.Format.MonadPrettyFormat.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L219-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A monad that can be used to incrementally render `Format` objects.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat","kind":"class","line":216,"name":"Std.Format.MonadPrettyFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L216-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.shouldFlatten\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenAllowability</span>.<span class=\"name\">shouldFlatten</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Whether the given directive indicates that flattening should occur. ","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.shouldFlatten","kind":"def","line":198,"name":"Std.Format.FlattenAllowability.shouldFlatten","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L198-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenAllowability\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instBEqFlattenAllowability</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenAllowability","kind":"instance","line":196,"name":"Std.Format.instBEqFlattenAllowability","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenAllowability.beq\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instBEqFlattenAllowability</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenAllowability.beq","kind":"def","line":196,"name":"Std.Format.instBEqFlattenAllowability.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.disallow\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenAllowability</span>.<span class=\"name\">disallow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.disallow","kind":"ctor","line":195,"name":"Std.Format.FlattenAllowability.disallow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L195-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.allow\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenAllowability</span>.<span class=\"name\">allow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fits</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\">FlattenAllowability</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability.allow","kind":"ctor","line":194,"name":"Std.Format.FlattenAllowability.allow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L194-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenAllowability</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A directive indicating whether a given work group is able to be flattened.\n\n- `allow` indicates that the group is allowed to be flattened; its argument is `true` if\n  there is sufficient space for it to be flattened (and so it should be), or `false` if not.\n- `disallow` means that this group should not be flattened irrespective of space concerns.\n  This is used at levels of a `Format` outside of any flattening groups. It is necessary to track\n  this so that, after a hard line break, we know whether to try to flatten the next line.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenAllowability","kind":"inductive","line":184,"name":"Std.Format.FlattenAllowability","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L184-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.isNil\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">isNil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether a `Format` is the constructor `Format.nil`.\n\nThis does not check whether the resulting rendered strings are always empty. To do that, use\n`Format.isEmpty`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.isNil","kind":"def","line":138,"name":"Std.Format.isNil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L138-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.join\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"Concatenates a list of `Format`s with `++`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.join","kind":"def","line":132,"name":"Std.Format.join","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L132-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instCoeString\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instCoeString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.instCoeString","kind":"instance","line":130,"name":"Std.Format.instCoeString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instAppend\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.instAppend","kind":"instance","line":129,"name":"Std.Format.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.fill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"Creates a group in which as few `Format.line`s as possible are rendered as newlines.\n\nThis is an alias for `Format.group`, with `FlattenBehavior` set to `fill`.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.fill","kind":"def","line":121,"name":"Std.Format.fill","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L121-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the given format contains no characters. ","docLink":"./Init/Data/Format/Basic.html#Std.Format.isEmpty","kind":"def","line":110,"name":"Std.Format.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L110-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instInhabitedFormat.default\"><span class=\"name\">Std</span>.<span class=\"name\">instInhabitedFormat</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.instInhabitedFormat.default","kind":"def","line":106,"name":"Std.instInhabitedFormat.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instInhabitedFormat\"><span class=\"name\">Std</span>.<span class=\"name\">instInhabitedFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.instInhabitedFormat","kind":"instance","line":106,"name":"Std.instInhabitedFormat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.tag\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">tag</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"Used for associating auxiliary information (e.g. `Expr`s) with `Format` objects. ","docLink":"./Init/Data/Format/Basic.html#Std.Format.tag","kind":"ctor","line":104,"name":"Std.Format.tag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L104-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.group\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <span class=\"fn\">(<span class=\"fn\">behavior</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone\">FlattenBehavior.allOrNone</a></span>) → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"Creates a new flattening group for the given inner `Format`.  ","docLink":"./Init/Data/Format/Basic.html#Std.Format.group","kind":"ctor","line":102,"name":"Std.Format.group","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.append\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"Concatenation of two `Format`s. ","docLink":"./Init/Data/Format/Basic.html#Std.Format.append","kind":"ctor","line":100,"name":"Std.Format.append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L100-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nest\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"`nest indent f` increases the current indentation level by `indent` while rendering `f`.\n\nExample:\n```lean example\nopen Std Format in\ndef fmtList (l : List Format) : Format :=\n  let f := joinSep l  (\", \" ++ Format.line)\n  group (nest 1 <| \"[\" ++ f ++ \"]\")\n```\n\nThis will be written all on one line, but if the text is too large, the formatter will put in\nlinebreaks after the commas and indent later lines by 1.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.nest","kind":"ctor","line":85,"name":"Std.Format.nest","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L85-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.text\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">text</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"A node containing a plain string.\n\nIf the string contains newlines, the formatter emits them and then indents to the current level.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.text","kind":"ctor","line":79,"name":"Std.Format.text","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L79-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.align\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">align</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">force</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"`align` tells the formatter to pad with spaces to the current indentation level, or else add a\nnewline if we are already at or past the indent.\n\nIf `force` is true, then it will pad to the indent even if it is in a flattened group.\n\nExample:\n```lean example\nopen Std Format in\n#eval IO.println (nest 2 <| \".\" ++ align ++ \"a\" ++ line ++ \"b\")\n```\n```lean output\n. a\n  b\n```\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.align","kind":"ctor","line":62,"name":"Std.Format.align","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L62-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.line\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">line</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"A position where a newline may be inserted if the current group does not fit within the allotted\ncolumn width.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.line","kind":"ctor","line":57,"name":"Std.Format.line","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L57-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nil\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>","info":{"doc":"The empty format. ","docLink":"./Init/Data/Format/Basic.html#Std.Format.nil","kind":"ctor","line":55,"name":"Std.Format.nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A representation of a set of strings, in which the placement of newlines and indentation differ.\n\nGiven a specific line width, specified in columns, the string that uses the fewest lines can be\nselected.\n\nThe pretty-printing algorithm is based on Wadler's paper\n[_A Prettier Printer_](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf).\n","docLink":"./Init/Data/Format/Basic.html#Std.Format","kind":"inductive","line":45,"name":"Std.Format","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L45-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instBEqFlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior","kind":"instance","line":42,"name":"Std.Format.instBEqFlattenBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior.beq\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instBEqFlattenBehavior</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior.beq","kind":"def","line":42,"name":"Std.Format.instBEqFlattenBehavior.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior.default\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instInhabitedFlattenBehavior</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior.default","kind":"def","line":42,"name":"Std.Format.instInhabitedFlattenBehavior.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instInhabitedFlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior","kind":"instance","line":42,"name":"Std.Format.instInhabitedFlattenBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></div></div>","info":{"doc":"As few `Format.line`s in the group as possible will be newlines.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill","kind":"ctor","line":38,"name":"Std.Format.FlattenBehavior.fill","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L38-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span>.<span class=\"name\">allOrNone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></div></div>","info":{"doc":"Either all `Format.line`s in the group will be newlines, or all of them will be spaces.\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone","kind":"ctor","line":34,"name":"Std.Format.FlattenBehavior.allOrNone","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Determines how groups should have linebreaks inserted when the text would overfill its remaining\nspace.\n\n- `allOrNone` will make a linebreak on every `Format.line` in the group or none of them.\n  ```\n  [1,\n   2,\n   3]\n  ```\n- `fill` will only make linebreaks on as few `Format.line`s as possible:\n  ```\n  [1, 2,\n   3]\n  ```\n","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior","kind":"inductive","line":17,"name":"Std.Format.FlattenBehavior","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Format/Basic.lean#L17-L42"}}],"imports":["Init.Control.State","Init.Data.Int.Basic","Init.Data.String.Bootstrap"],"instances":[{"className":"Inhabited","name":"Std.Format.instInhabitedFlattenBehavior","typeNames":["Std.Format.FlattenBehavior"]},{"className":"BEq","name":"Std.Format.instBEqFlattenBehavior","typeNames":["Std.Format.FlattenBehavior"]},{"className":"Inhabited","name":"Std.instInhabitedFormat","typeNames":["Std.Format"]},{"className":"Append","name":"Std.Format.instAppend","typeNames":["Std.Format"]},{"className":"Coe","name":"Std.Format.instCoeString","typeNames":["String","Std.Format"]},{"className":"BEq","name":"Std.Format.instBEqFlattenAllowability","typeNames":["Std.Format.FlattenAllowability"]},{"className":"Std.ToFormat","name":"Std.instToFormatFormat","typeNames":["Std.Format"]},{"className":"Std.ToFormat","name":"Std.instToFormatString","typeNames":["String"]}],"name":"Init.Data.Format.Basic"}