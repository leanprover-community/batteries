{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quoteFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quoteFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonical</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Lean.Term</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.quoteFrom","kind":"def","line":100,"name":"Lake.Name.quoteFrom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L100-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.instLawfulEqCmpNameQuickCmp_lake\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulEqCmpNameQuickCmp_lake</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">Std.LawfulEqCmp</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.instLawfulEqCmpNameQuickCmp_lake","kind":"instance","line":95,"name":"Lake.Name.instLawfulEqCmpNameQuickCmp_lake","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L95-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quickCmp_rfl\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickCmp_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">quickCmp</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.quickCmp_rfl","kind":"theorem","line":91,"name":"Lake.Name.quickCmp_rfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L91-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.eq_of_quickCmp\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">eq_of_quickCmp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">quickCmp</a></span> <span class=\"fn\">n'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> → <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.eq_of_quickCmp","kind":"theorem","line":85,"name":"Lake.Name.eq_of_quickCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L85-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.instLawfulEqCmpNameQuickCmpAux_lake\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulEqCmpNameQuickCmpAux_lake</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqCmp\">Std.LawfulEqCmp</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmpAux\">Lean.Name.quickCmpAux</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.instLawfulEqCmpNameQuickCmpAux_lake","kind":"instance","line":81,"name":"Lake.Name.instLawfulEqCmpNameQuickCmpAux_lake","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L81-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.quickCmpAux_iff_eq\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickCmpAux_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.quickCmpAux\">quickCmpAux</a></span> <span class=\"fn\">n'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n'</span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.quickCmpAux_iff_eq","kind":"theorem","line":69,"name":"Lake.Name.quickCmpAux_iff_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L69-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.isPrefixOf_append\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Lean.Name.hasMacroScopes\">hasMacroScopes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Prelude.html#Lean.Name.hasMacroScopes\">hasMacroScopes</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isPrefixOf\">isPrefixOf</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">m</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.isPrefixOf_append","kind":"theorem","line":61,"name":"Lake.Name.isPrefixOf_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L61-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.isPrefixOf_self\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isPrefixOf\">isPrefixOf</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.isPrefixOf_self","kind":"theorem","line":58,"name":"Lake.Name.isPrefixOf_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.beq_false\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">beq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.beq_false","kind":"theorem","line":55,"name":"Lake.Name.beq_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.eq_anonymous_of_isAnonymous\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">eq_anonymous_of_isAnonymous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.eq_anonymous_of_isAnonymous","kind":"theorem","line":52,"name":"Lake.Name.eq_anonymous_of_isAnonymous","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L52-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.isAnonymous_iff_eq_anonymous\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">isAnonymous_iff_eq_anonymous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.isAnonymous_iff_eq_anonymous","kind":"theorem","line":49,"name":"Lake.Name.isAnonymous_iff_eq_anonymous","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.Name.eraseHead\"><span class=\"name\">Lake</span>.<span class=\"name\">Name</span>.<span class=\"name\">eraseHead</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.Name.eraseHead","kind":"def","line":44,"name":"Lake.Name.eraseHead","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L44-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.DNameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">DNameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.DNameMap\">DNameMap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.DNameMap.empty","kind":"def","line":37,"name":"Lake.DNameMap.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.DNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">DNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.DNameMap","kind":"def","line":36,"name":"Lake.DNameMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.mkOrdNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">mkOrdNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.OrdNameMap\">OrdNameMap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.mkOrdNameMap","kind":"def","line":34,"name":"Lake.mkOrdNameMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.OrdNameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">OrdNameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Name.html#Lake.OrdNameMap\">OrdNameMap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.OrdNameMap.empty","kind":"def","line":33,"name":"Lake.OrdNameMap.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.OrdNameMap\"><span class=\"name\">Lake</span>.<span class=\"name\">OrdNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.OrdNameMap","kind":"def","line":32,"name":"Lake.OrdNameMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.NameMap.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">NameMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Name.html#Lake.NameMap.empty","kind":"def","line":28,"name":"Lake.NameMap.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Name.html#Lake.stringToLegalOrSimpleName\"><span class=\"name\">Lake</span>.<span class=\"name\">stringToLegalOrSimpleName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"First tries to convert a string into a legal name.\nIf that fails, defaults to making it a simple name (e.g., `Lean.Name.mkSimple`).\n","docLink":"./Lake/Util/Name.html#Lake.stringToLegalOrSimpleName","kind":"def","line":21,"name":"Lake.stringToLegalOrSimpleName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Util/Name.lean#L21-L26"}}],"imports":["Lean.Data.Json","Lake.Util.RBArray","Init.Data.Ord.String","Init.Data.Ord.UInt","Init.Prelude","Lean.Data.Name"],"instances":[{"className":"Std.LawfulEqCmp","name":"Lake.Name.instLawfulEqCmpNameQuickCmpAux_lake","typeNames":["Lean.Name.quickCmpAux"]},{"className":"Std.LawfulEqCmp","name":"Lake.Name.instLawfulEqCmpNameQuickCmp_lake","typeNames":["Lean.Name.quickCmp"]}],"name":"Lake.Util.Name"}