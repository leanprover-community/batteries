{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.isParentProj\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">isParentProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is an application that is a projection to a parent structure.\nIf `explicit` is `true`, then requires that the structure have no parameters.\n","docLink":"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.isParentProj","kind":"def","line":153,"name":"Lean.PrettyPrinter.Delaborator.isParentProj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/PrettyPrinter/Delaborator/FieldNotation.lean#L153-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.parentProj?\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">parentProj?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Returns the field name of the projection if `e` is an application that is a projection to a parent structure.\nIf `explicit` is `true`, then requires that the structure have no parameters.\n","docLink":"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.parentProj?","kind":"def","line":140,"name":"Lean.PrettyPrinter.Delaborator.parentProj?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/PrettyPrinter/Delaborator/FieldNotation.lean#L140-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.fieldNotationCandidate?\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">fieldNotationCandidate?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useGeneralizedFieldNotation</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>))</span></span></div></div>","info":{"doc":"If `f` is a function that can be used for field notation,\nreturns the field name to use and the argument index for the object of the field notation.\n","docLink":"./Lean/PrettyPrinter/Delaborator/FieldNotation.html#Lean.PrettyPrinter.Delaborator.fieldNotationCandidate?","kind":"def","line":110,"name":"Lean.PrettyPrinter.Delaborator.fieldNotationCandidate?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/PrettyPrinter/Delaborator/FieldNotation.lean#L110-L138"}}],"imports":["Lean.Meta.WHNF","Lean.PrettyPrinter.Delaborator.Attributes","Lean.PrettyPrinter.Delaborator.Options"],"instances":[],"name":"Lean.PrettyPrinter.Delaborator.FieldNotation"}