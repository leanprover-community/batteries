{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.preprocess\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">preprocess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Meta.Simp.Result</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.preprocess","kind":"def","line":180,"name":"Lean.Elab.WF.preprocess","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L180-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.paramLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">paramLet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Meta.Simp.DSimproc</a></div></div>","info":{"doc":"`let x : T := (wfParam e); body[x] ==> let x : T := e; body[wfParam y]` if `T` is not a proposition,\notherwise `... ==> let x : T := e; body[x]`. (Applies to `have`s too.)\n\nNote: simprocs are provided the head of a let telescope, but not intermediate lets.\n","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.paramLet","kind":"def","line":145,"name":"Lean.Elab.WF.paramLet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L145-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.paramMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">paramMatcher</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Meta.Simp.DSimproc</a></div></div>","info":{"doc":"`match (wfParam x) with con y => alt[y] ==> match x with con y => alt[wfParam y] ","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.paramMatcher","kind":"def","line":103,"name":"Lean.Elab.WF.paramMatcher","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L103-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.paramProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">paramProj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Meta.Simp.DSimproc</a></div></div>","info":{"doc":"`f (wfParam x) ==> wfParam (f x)` if `f` is a projection ","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.paramProj","kind":"def","line":91,"name":"Lean.Elab.WF.paramProj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L91-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.mkWfParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">mkWfParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.mkWfParam","kind":"def","line":88,"name":"Lean.Elab.WF.mkWfParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L88-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.isWfParam?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">isWfParam?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.isWfParam?","kind":"def","line":82,"name":"Lean.Elab.WF.isWfParam?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L82-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.wfPreprocessSimpExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">WF</span>.<span class=\"name\">wfPreprocessSimpExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#Lean.Elab.WF.wfPreprocessSimpExtension","kind":"opaque","line":68,"name":"Lean.Elab.WF.wfPreprocessSimpExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L68-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/WF/Preprocess.html#wf.preprocess\"><span class=\"name\">wf</span>.<span class=\"name\">preprocess</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/WF/Preprocess.html#wf.preprocess","kind":"opaque","line":61,"name":"wf.preprocess","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/WF/Preprocess.lean#L61-L64"}}],"imports":["Lean.Elab.Tactic.Simp"],"instances":[],"name":"Lean.Elab.PreDefinition.WF.Preprocess"}