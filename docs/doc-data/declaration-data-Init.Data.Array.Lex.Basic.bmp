{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Array/Lex/Basic.html#Array.lex\"><span class=\"name\">Array</span>.<span class=\"name\">lex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as </span><span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := by exact (· &lt; ·))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Compares arrays lexicographically with respect to a comparison `lt` on their elements.\n\nSpecifically, `Array.lex as bs lt` is true if\n* `bs` is larger than `as` and `as` is pairwise equivalent via `==` to the initial segment of `bs`,\n  or\n* there is an index `i` such that `lt as[i] bs[i]`, and for all `j < i`, `as[j] == bs[j]`.\n","docLink":"./Init/Data/Array/Lex/Basic.html#Array.lex","kind":"def","line":20,"name":"Array.lex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Array/Lex/Basic.lean#L20-L36"}}],"imports":["Init.Data.Range.Polymorphic.Iterators","Init.Data.Range.Polymorphic.Nat","Init.Data.Iterators.Consumers"],"instances":[],"name":"Init.Data.Array.Lex.Basic"}