{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Frame.frame\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Frame</span>.<span class=\"name\">frame</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">φ</span> → <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Frame.frame","kind":"theorem","line":301,"name":"Std.Do.SPred.Tactic.Frame.frame","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L301-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFramePureTrueDown\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFramePureTrueDown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFramePureTrueDown","kind":"instance","line":299,"name":"Std.Do.SPred.Tactic.instHasFramePureTrueDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L299-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFramePureTrue\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFramePureTrue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFramePureTrue","kind":"instance","line":298,"name":"Std.Do.SPred.Tactic.instHasFramePureTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L298-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndPureAnd_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFrameAndPureAnd_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">ψ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">Q</span> (<span class=\"fn\">ψ</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">φ</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndPureAnd_1","kind":"instance","line":291,"name":"Std.Do.SPred.Tactic.instHasFrameAndPureAnd_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L291-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndPureAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFrameAndPureAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">ψ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">Q</span> (<span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">ψ</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndPureAnd","kind":"instance","line":285,"name":"Std.Do.SPred.Tactic.instHasFrameAndPureAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L285-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndAndOfSimpAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFrameAndAndOfSimpAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">Q' </span><span class=\"fn\">QQ</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P'</span> <span class=\"fn\">Q'</span> <span class=\"fn\">ψ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\">SimpAnd</a> <span class=\"fn\">Q</span> <span class=\"fn\">Q'</span> <span class=\"fn\">QQ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P'</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">QQ</span> (<span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">ψ</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndAndOfSimpAnd","kind":"instance","line":275,"name":"Std.Do.SPred.Tactic.instHasFrameAndAndOfSimpAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L275-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndPure_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFrameAndPure_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">P</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndPure_1","kind":"instance","line":274,"name":"Std.Do.SPred.Tactic.instHasFrameAndPure_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndPure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFrameAndPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">P</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndPure","kind":"instance","line":273,"name":"Std.Do.SPred.Tactic.instHasFrameAndPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameCurryULiftPropUpAndOfAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFrameCurryULiftPropUpAndOfAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">P'</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a>\n    <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a>         <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P'</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a>\n    <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">SVal.curry</a> <span class=\"fn\">fun (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">SVal.StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P'</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a></span>)</span> <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameCurryULiftPropUpAndOfAnd","kind":"instance","line":272,"name":"Std.Do.SPred.Tactic.instHasFrameCurryULiftPropUpAndOfAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L272-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFramePureAndOfAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFramePureAndOfAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">P'</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P'</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">P'</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFramePureAndOfAnd","kind":"instance","line":271,"name":"Std.Do.SPred.Tactic.instHasFramePureAndOfAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L271-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndOfSimpAnd_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFrameAndOfSimpAnd_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q' </span><span class=\"fn\">PQ</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P'</span> <span class=\"fn\">Q'</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\">SimpAnd</a> <span class=\"fn\">P</span> <span class=\"fn\">Q'</span> <span class=\"fn\">PQ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P'</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">PQ</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndOfSimpAnd_1","kind":"instance","line":270,"name":"Std.Do.SPred.Tactic.instHasFrameAndOfSimpAnd_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L270-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndOfSimpAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHasFrameAndOfSimpAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">QP</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\">SimpAnd</a> <span class=\"fn\">Q</span> <span class=\"fn\">P'</span> <span class=\"fn\">QP</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P'</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">QP</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instHasFrameAndOfSimpAnd","kind":"instance","line":269,"name":"Std.Do.SPred.Tactic.instHasFrameAndOfSimpAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L269-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame.reassoc\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">HasFrame</span>.<span class=\"name\">reassoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P</span> <span class=\"fn\">P'</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame.reassoc","kind":"theorem","line":268,"name":"Std.Do.SPred.Tactic.HasFrame.reassoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L268-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">HasFrame</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reassoc</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\">HasFrame</a> <span class=\"fn\">P</span> <span class=\"fn\">P'</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame.mk","kind":"ctor","line":267,"name":"Std.Do.SPred.Tactic.HasFrame.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L267-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">HasFrame</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.HasFrame","kind":"class","line":267,"name":"Std.Do.SPred.Tactic.HasFrame","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L267-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instSimpAndPureTrue_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instSimpAndPureTrue_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\">SimpAnd</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <span class=\"fn\">P</span> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instSimpAndPureTrue_1","kind":"instance","line":265,"name":"Std.Do.SPred.Tactic.instSimpAndPureTrue_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L265-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instSimpAndPureTrue\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instSimpAndPureTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\">SimpAnd</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instSimpAndPureTrue","kind":"instance","line":264,"name":"Std.Do.SPred.Tactic.instSimpAndPureTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L264-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instSimpAndAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instSimpAndAnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\">SimpAnd</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instSimpAndAnd","kind":"instance","line":263,"name":"Std.Do.SPred.Tactic.instSimpAndAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L263-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd.simp_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpAnd</span>.<span class=\"name\">simp_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">PQ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\">SimpAnd</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">PQ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">PQ</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd.simp_and","kind":"theorem","line":262,"name":"Std.Do.SPred.Tactic.SimpAnd.simp_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L262-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpAnd</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">PQ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simp_and</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">PQ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\">SimpAnd</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span> <span class=\"fn\">PQ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd.mk","kind":"ctor","line":261,"name":"Std.Do.SPred.Tactic.SimpAnd.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L261-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">PQ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.SimpAnd","kind":"class","line":261,"name":"Std.Do.SPred.Tactic.SimpAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L261-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.focus\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Specialize</span>.<span class=\"name\">focus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfocus</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnew</span> : <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.focus","kind":"theorem","line":259,"name":"Std.Do.SPred.Tactic.Specialize.focus","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L259-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.pure_taut\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Specialize</span>.<span class=\"name\">pure_taut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">P</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">φ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.pure_taut","kind":"theorem","line":258,"name":"Std.Do.SPred.Tactic.Specialize.pure_taut","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L258-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.pure_start\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Specialize</span>.<span class=\"name\">pure_start</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">P </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> <span class=\"fn\">φ</span> <span class=\"fn\">H</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpure</span> : <span class=\"fn\">φ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.pure_start","kind":"theorem","line":257,"name":"Std.Do.SPred.Tactic.Specialize.pure_start","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.forall\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Specialize</span>.<span class=\"name\">forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_2)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">SPred.forall</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">x</span></span></span></span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.forall","kind":"theorem","line":256,"name":"Std.Do.SPred.Tactic.Specialize.forall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L256-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.imp_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Specialize</span>.<span class=\"name\">imp_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> <span class=\"fn\">φ</span> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">φ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.imp_pure","kind":"theorem","line":250,"name":"Std.Do.SPred.Tactic.Specialize.imp_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L250-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.imp_stateful\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Specialize</span>.<span class=\"name\">imp_stateful</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrefocus</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Specialize.imp_stateful","kind":"theorem","line":241,"name":"Std.Do.SPred.Tactic.Specialize.imp_stateful","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L241-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Revert.revert\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Revert</span>.<span class=\"name\">revert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">H </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfoc</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Revert.revert","kind":"theorem","line":240,"name":"Std.Do.SPred.Tactic.Revert.revert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Pure.intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Pure</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">φ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"A generalization of `pure_intro` exploiting `IsPure`. ","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Pure.intro","kind":"theorem","line":238,"name":"Std.Do.SPred.Tactic.Pure.intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L238-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Pure.thm\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Pure</span>.<span class=\"name\">thm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">Q</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">φ</span> → <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Pure.thm","kind":"theorem","line":233,"name":"Std.Do.SPred.Tactic.Pure.thm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L233-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Revert.and_pure_intro_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Revert</span>.<span class=\"name\">and_pure_intro_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">φ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hand</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Revert.and_pure_intro_r","kind":"theorem","line":232,"name":"Std.Do.SPred.Tactic.Revert.and_pure_intro_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L232-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Intro.intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Intro</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">H </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hand</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Intro.intro","kind":"theorem","line":231,"name":"Std.Do.SPred.Tactic.Intro.intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Have.replace\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Have</span>.<span class=\"name\">replace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">H </span><span class=\"fn\">H' </span><span class=\"fn\">PH </span><span class=\"fn\">PH' </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfoc</span> : <span class=\"fn\">PH</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hand</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">PH'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hhave</span> : <span class=\"fn\">PH</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">H'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">PH'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">PH</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Have.replace","kind":"theorem","line":230,"name":"Std.Do.SPred.Tactic.Have.replace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Have.have\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Have</span>.<span class=\"name\">have</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">H </span><span class=\"fn\">PH </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hand</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">PH</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hhave</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">PH</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Have.have","kind":"theorem","line":229,"name":"Std.Do.SPred.Tactic.Have.have","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L229-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Have.dup\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Have</span>.<span class=\"name\">dup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">H </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfoc</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Have.dup","kind":"theorem","line":228,"name":"Std.Do.SPred.Tactic.Have.dup","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Focus.rewrite_hyps\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Focus</span>.<span class=\"name\">rewrite_hyps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrw</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Focus.rewrite_hyps","kind":"theorem","line":227,"name":"Std.Do.SPred.Tactic.Focus.rewrite_hyps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Focus.right\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Focus</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">Q' </span><span class=\"fn\">C </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">C</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Focus.right","kind":"theorem","line":226,"name":"Std.Do.SPred.Tactic.Focus.right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L226-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Focus.left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Focus</span>.<span class=\"name\">left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">C </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">C</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Focus.left","kind":"theorem","line":225,"name":"Std.Do.SPred.Tactic.Focus.left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L225-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Focus.this\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Focus</span>.<span class=\"name\">this</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Focus.this","kind":"theorem","line":224,"name":"Std.Do.SPred.Tactic.Focus.this","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L224-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Exact.from_tautology\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Exact</span>.<span class=\"name\">from_tautology</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> <span class=\"fn\">φ</span> <span class=\"fn\">T</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">φ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Exact.from_tautology","kind":"theorem","line":223,"name":"Std.Do.SPred.Tactic.Exact.from_tautology","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Exact.assumption\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Exact</span>.<span class=\"name\">assumption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">A</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">A</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Exact.assumption","kind":"theorem","line":222,"name":"Std.Do.SPred.Tactic.Exact.assumption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L222-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Clear.clear\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Clear</span>.<span class=\"name\">clear</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">A </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfocus</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">A</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Clear.clear","kind":"theorem","line":221,"name":"Std.Do.SPred.Tactic.Clear.clear","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.exists\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cases</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">SPred.exists</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">ψ</span> <span class=\"fn\">a</span></span></span></span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.exists","kind":"theorem","line":220,"name":"Std.Do.SPred.Tactic.Cases.exists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L220-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.and_3\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cases</span>.<span class=\"name\">and_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q </span><span class=\"fn\">H₁ </span><span class=\"fn\">H₂ </span><span class=\"fn\">H </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hand</span> : <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">H₁</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₂</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₁</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.and_3","kind":"theorem","line":219,"name":"Std.Do.SPred.Tactic.Cases.and_3","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L219-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.and_2\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cases</span>.<span class=\"name\">and_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q </span><span class=\"fn\">H₁' </span><span class=\"fn\">H₂ </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₁'</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₂</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₂</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₁'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.and_2","kind":"theorem","line":218,"name":"Std.Do.SPred.Tactic.Cases.and_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.and_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cases</span>.<span class=\"name\">and_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q </span><span class=\"fn\">H₁' </span><span class=\"fn\">H₂' </span><span class=\"fn\">H₁₂' </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hand</span> : <span class=\"fn\">H₁'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₂'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">H₁₂'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₁₂'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₁'</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H₂'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.and_1","kind":"theorem","line":217,"name":"Std.Do.SPred.Tactic.Cases.and_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L217-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cases</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.pure","kind":"theorem","line":216,"name":"Std.Do.SPred.Tactic.Cases.pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L216-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.clear\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cases</span>.<span class=\"name\">clear</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q </span><span class=\"fn\">H </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.clear","kind":"theorem","line":215,"name":"Std.Do.SPred.Tactic.Cases.clear","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L215-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.add_goal\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cases</span>.<span class=\"name\">add_goal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">H </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hand</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgoal</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">H</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Cases.add_goal","kind":"theorem","line":214,"name":"Std.Do.SPred.Tactic.Cases.add_goal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L214-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Assumption.right\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Assumption</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Assumption.right","kind":"theorem","line":213,"name":"Std.Do.SPred.Tactic.Assumption.right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L213-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Assumption.left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Assumption</span>.<span class=\"name\">left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.Assumption.left","kind":"theorem","line":212,"name":"Std.Do.SPred.Tactic.Assumption.left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L212-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.ProofMode.elim_entails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">elim_entails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> <span class=\"fn\">φ</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">φ</span> → <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.ProofMode.elim_entails","kind":"theorem","line":210,"name":"Std.Do.SPred.Tactic.ProofMode.elim_entails","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L210-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.ProofMode.start_entails\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ProofMode</span>.<span class=\"name\">start_entails</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> <span class=\"fn\">φ</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span>) → <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.ProofMode.start_entails","kind":"theorem","line":209,"name":"Std.Do.SPred.Tactic.ProofMode.start_entails","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L209-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q₁ </span><span class=\"fn\">Q₂</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">base</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd\">IsAnd</a> <span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<span class=\"fn\">Q₁</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<span class=\"fn\">Q₂</span> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd\">IsAnd</a> <span class=\"fn\">P</span> <span class=\"fn\">Q₁</span> <span class=\"fn\">Q₂</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsAnd","kind":"instance","line":207,"name":"Std.Do.SPred.Tactic.instIsAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L207-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsAndPureAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsAndPureAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd\">IsAnd</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">p</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsAndPureAnd","kind":"instance","line":206,"name":"Std.Do.SPred.Tactic.instIsAndPureAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L206-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsAndAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsAndAnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q₁ </span><span class=\"fn\">Q₂</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd\">IsAnd</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><span class=\"fn\">Q₁</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> <span class=\"fn\">Q₁</span> <span class=\"fn\">Q₂</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsAndAnd","kind":"instance","line":205,"name":"Std.Do.SPred.Tactic.instIsAndAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L205-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd.to_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IsAnd</span>.<span class=\"name\">to_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q₁ </span><span class=\"fn\">Q₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd\">IsAnd</a> <span class=\"fn\">P</span> <span class=\"fn\">Q₁</span> <span class=\"fn\">Q₂</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q₁</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q₂</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd.to_and","kind":"theorem","line":204,"name":"Std.Do.SPred.Tactic.IsAnd.to_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L204-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IsAnd</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q₁ </span><span class=\"fn\">Q₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">to_and</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q₁</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd\">IsAnd</a> <span class=\"fn\">P</span> <span class=\"fn\">Q₁</span> <span class=\"fn\">Q₂</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd.mk","kind":"ctor","line":203,"name":"Std.Do.SPred.Tactic.IsAnd.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L203-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IsAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q₁ </span><span class=\"fn\">Q₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsAnd","kind":"class","line":203,"name":"Std.Do.SPred.Tactic.IsAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L203-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureDown\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPureDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureDown","kind":"instance","line":201,"name":"Std.Do.SPred.Tactic.instIsPureDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPurePure_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPurePure_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPurePure_1","kind":"instance","line":200,"name":"Std.Do.SPred.Tactic.instIsPurePure_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPure_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPure_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">P</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\">P</span>)</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPure_1","kind":"instance","line":199,"name":"Std.Do.SPred.Tactic.instIsPure_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">P</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPure","kind":"instance","line":198,"name":"Std.Do.SPred.Tactic.instIsPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureForallPureForall\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPureForallPureForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_2)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span>)</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureForallPureForall","kind":"instance","line":197,"name":"Std.Do.SPred.Tactic.instIsPureForallPureForall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L197-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureExistsPureExists\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPureExistsPureExists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_2)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span>)</span> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureExistsPureExists","kind":"instance","line":196,"name":"Std.Do.SPred.Tactic.instIsPureExistsPureExists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureOrPureOr\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPureOrPureOr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">ψ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">)</a> (<span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">ψ</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureOrPureOr","kind":"instance","line":195,"name":"Std.Do.SPred.Tactic.instIsPureOrPureOr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L195-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureAndPureAnd\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPureAndPureAnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">ψ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">)</a> (<span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">ψ</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureAndPureAnd","kind":"instance","line":194,"name":"Std.Do.SPred.Tactic.instIsPureAndPureAnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L194-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureImpPureForall\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPureImpPureForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">spred(</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">ψ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">)</a> <span class=\"fn\">(<span class=\"fn\">φ</span> → <span class=\"fn\">ψ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPureImpPureForall","kind":"instance","line":193,"name":"Std.Do.SPred.Tactic.instIsPureImpPureForall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPurePure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instIsPurePure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instIsPurePure","kind":"instance","line":192,"name":"Std.Do.SPred.Tactic.instIsPurePure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L192-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure.to_pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IsPure</span>.<span class=\"name\">to_pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">P</span> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure.to_pure","kind":"theorem","line":191,"name":"Std.Do.SPred.Tactic.IsPure.to_pure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IsPure</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">to_pure</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\">IsPure</a> <span class=\"fn\">P</span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure.mk","kind":"ctor","line":191,"name":"Std.Do.SPred.Tactic.IsPure.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">IsPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.IsPure","kind":"class","line":191,"name":"Std.Do.SPred.Tactic.IsPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instPropAsSPredTautologyEntailsPureTrue\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instPropAsSPredTautologyEntailsPureTrue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> (<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span>) <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instPropAsSPredTautologyEntailsPureTrue","kind":"instance","line":189,"name":"Std.Do.SPred.Tactic.instPropAsSPredTautologyEntailsPureTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L189-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instPropAsSPredTautologyEntailsImp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instPropAsSPredTautologyEntailsImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> (<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">spred(</a><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instPropAsSPredTautologyEntailsImp","kind":"instance","line":188,"name":"Std.Do.SPred.Tactic.instPropAsSPredTautologyEntailsImp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instPropAsSPredTautologyDown\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instPropAsSPredTautologyDown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> <span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> <span class=\"fn\">φ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.instPropAsSPredTautologyDown","kind":"instance","line":187,"name":"Std.Do.SPred.Tactic.instPropAsSPredTautologyDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L187-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology.iff\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PropAsSPredTautology</span>.<span class=\"name\">iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u))</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> <span class=\"fn\">φ</span> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology.iff","kind":"theorem","line":186,"name":"Std.Do.SPred.Tactic.PropAsSPredTautology.iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PropAsSPredTautology</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u))</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iff</span> : <span class=\"fn\">φ</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\">PropAsSPredTautology</a> <span class=\"fn\">φ</span> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology.mk","kind":"ctor","line":185,"name":"Std.Do.SPred.Tactic.PropAsSPredTautology.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L185-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PropAsSPredTautology</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u))</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.PropAsSPredTautology","kind":"class","line":185,"name":"Std.Do.SPred.Tactic.PropAsSPredTautology","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L185-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.tautological\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tautological</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Tautology in `SPred` as a quotable definition. ","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.Tactic.tautological","kind":"def","line":182,"name":"Std.Do.SPred.Tactic.tautological","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L182-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_5\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_5</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ₁ </span><span class=\"fn\">σ₂ </span><span class=\"fn\">σ₃ </span><span class=\"fn\">σ₄ </span><span class=\"fn\">σ₅</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">σ₁</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₂</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₃</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₄</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₅</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">s₁</span> : <span class=\"fn\">σ₁</span>) (<span class=\"fn\">s₂</span> : <span class=\"fn\">σ₂</span>) (<span class=\"fn\">s₃</span> : <span class=\"fn\">σ₃</span>) (<span class=\"fn\">s₄</span> : <span class=\"fn\">σ₄</span>) (<span class=\"fn\">s₅</span> : <span class=\"fn\">σ₅</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span> <span class=\"fn\">s₃</span> <span class=\"fn\">s₄</span> <span class=\"fn\">s₅</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Q</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span> <span class=\"fn\">s₃</span> <span class=\"fn\">s₄</span> <span class=\"fn\">s₅</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_5","kind":"theorem","line":176,"name":"Std.Do.SPred.entails_5","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_4\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_4</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ₁ </span><span class=\"fn\">σ₂ </span><span class=\"fn\">σ₃ </span><span class=\"fn\">σ₄</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">σ₁</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₂</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₃</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₄</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">s₁</span> : <span class=\"fn\">σ₁</span>) (<span class=\"fn\">s₂</span> : <span class=\"fn\">σ₂</span>) (<span class=\"fn\">s₃</span> : <span class=\"fn\">σ₃</span>) (<span class=\"fn\">s₄</span> : <span class=\"fn\">σ₄</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span> <span class=\"fn\">s₃</span> <span class=\"fn\">s₄</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Q</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span> <span class=\"fn\">s₃</span> <span class=\"fn\">s₄</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_4","kind":"theorem","line":175,"name":"Std.Do.SPred.entails_4","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L175-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_3\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_3</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ₁ </span><span class=\"fn\">σ₂ </span><span class=\"fn\">σ₃</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">σ₁</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₂</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₃</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">s₁</span> : <span class=\"fn\">σ₁</span>) (<span class=\"fn\">s₂</span> : <span class=\"fn\">σ₂</span>) (<span class=\"fn\">s₃</span> : <span class=\"fn\">σ₃</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span> <span class=\"fn\">s₃</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Q</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span> <span class=\"fn\">s₃</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_3","kind":"theorem","line":174,"name":"Std.Do.SPred.entails_3","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_2\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ₁ </span><span class=\"fn\">σ₂</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">σ₁</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">σ₂</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">s₁</span> : <span class=\"fn\">σ₁</span>) (<span class=\"fn\">s₂</span> : <span class=\"fn\">σ₂</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Q</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_2","kind":"theorem","line":173,"name":"Std.Do.SPred.entails_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L173-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">σ</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">Q</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_1","kind":"theorem","line":172,"name":"Std.Do.SPred.entails_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_true_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_true_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_true_intro","kind":"theorem","line":170,"name":"Std.Do.SPred.entails_true_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L170-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_pure_elim_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_pure_elim_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_pure_elim_cons","kind":"theorem","line":169,"name":"Std.Do.SPred.entails_pure_elim_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L169-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_pure_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails_pure_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <span class=\"fn\">Q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">P</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">Q</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails_pure_intro","kind":"theorem","line":166,"name":"Std.Do.SPred.entails_pure_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L166-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_right_comm\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_right_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> (<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_right_comm","kind":"theorem","line":162,"name":"Std.Do.SPred.and_right_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L162-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_left_comm\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_left_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_left_comm","kind":"theorem","line":161,"name":"Std.Do.SPred.and_left_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#ULift.down_ite\"><span class=\"name\">ULift</span>.<span class=\"name\">down_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ULift.up\">}</a> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#ULift.up\">}</a>).<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#ULift.down_ite","kind":"theorem","line":157,"name":"ULift.down_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#ULift.down_dite\"><span class=\"name\">ULift</span>.<span class=\"name\">down_dite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">φ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">φ</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">φ</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(if h : <span class=\"fn\">φ</span> then <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a> else <a href=\"./Init/Prelude.html#ULift.up\">{</a> <span class=\"fn\">down</span> := <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#ULift.up\">}</a>)</span>.<a href=\"./Init/Prelude.html#ULift.down\">down</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if h : <span class=\"fn\">φ</span> then <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">h</span></span> else <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">h</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#ULift.down_dite","kind":"theorem","line":156,"name":"ULift.down_dite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_intro_simp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">true_intro_simp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_intro_simp","kind":"theorem","line":154,"name":"Std.Do.SPred.true_intro_simp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_exists\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_exists","kind":"theorem","line":152,"name":"Std.Do.SPred.pure_exists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_forall\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">x</span></span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_forall","kind":"theorem","line":145,"name":"Std.Do.SPred.pure_forall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L145-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_forall_2\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_forall_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">x</span></span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">φ</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_forall_2","kind":"theorem","line":144,"name":"Std.Do.SPred.pure_forall_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ₁ </span><span class=\"fn\">φ₂</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₁</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">φ₁</span> → <span class=\"fn\">φ₂</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_imp","kind":"theorem","line":138,"name":"Std.Do.SPred.pure_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L138-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_imp_2\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_imp_2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ₁ </span><span class=\"fn\">φ₂</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\"><span class=\"fn\">φ₁</span> → <span class=\"fn\">φ₂</span></span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₁</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_imp_2","kind":"theorem","line":137,"name":"Std.Do.SPred.pure_imp_2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_or\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ₁ </span><span class=\"fn\">φ₂</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₁</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₁</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">φ₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_or","kind":"theorem","line":136,"name":"Std.Do.SPred.pure_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ₁ </span><span class=\"fn\">φ₂</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₁</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">φ₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_and","kind":"theorem","line":135,"name":"Std.Do.SPred.pure_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L135-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">φ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_true","kind":"theorem","line":134,"name":"Std.Do.SPred.pure_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_elim_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_elim_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">φ</span> → <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_elim_r","kind":"theorem","line":133,"name":"Std.Do.SPred.pure_elim_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_elim_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_elim_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">φ</span> → <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_elim_l","kind":"theorem","line":132,"name":"Std.Do.SPred.pure_elim_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ₁ </span><span class=\"fn\">φ₂</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">φ₁</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">φ₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₁</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_congr","kind":"theorem","line":130,"name":"Std.Do.SPred.pure_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ₁ </span><span class=\"fn\">φ₂</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">φ₁</span> → <span class=\"fn\">φ₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₁</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ₂</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_mono","kind":"theorem","line":129,"name":"Std.Do.SPred.pure_mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">pure_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><span class=\"fn\">φ</span><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\"><span class=\"fn\">φ</span> → <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.pure_elim","kind":"theorem","line":125,"name":"Std.Do.SPred.pure_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L125-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.of_and_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">of_and_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.of_and_imp","kind":"theorem","line":121,"name":"Std.Do.SPred.of_and_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P' </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q'</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_imp","kind":"theorem","line":120,"name":"Std.Do.SPred.and_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.false_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">false_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">P</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.false_imp","kind":"theorem","line":117,"name":"Std.Do.SPred.false_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_trans","kind":"theorem","line":116,"name":"Std.Do.SPred.imp_trans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L116-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_self_simp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_self_simp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">P</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_self_simp","kind":"theorem","line":115,"name":"Std.Do.SPred.imp_self_simp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_self\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_self","kind":"theorem","line":114,"name":"Std.Do.SPred.imp_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_imp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">true_imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">P</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_imp","kind":"theorem","line":113,"name":"Std.Do.SPred.true_imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_false","kind":"theorem","line":111,"name":"Std.Do.SPred.or_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.false_or\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">false_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.false_or","kind":"theorem","line":110,"name":"Std.Do.SPred.false_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_true","kind":"theorem","line":109,"name":"Std.Do.SPred.or_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_or\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">true_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_or","kind":"theorem","line":108,"name":"Std.Do.SPred.true_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_false\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_false","kind":"theorem","line":107,"name":"Std.Do.SPred.and_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.false_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">false_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.false_and","kind":"theorem","line":106,"name":"Std.Do.SPred.false_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_true\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_true","kind":"theorem","line":105,"name":"Std.Do.SPred.and_true","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_and\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">true_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_and","kind":"theorem","line":104,"name":"Std.Do.SPred.true_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_or_right\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_or_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> (<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span>)</div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_or_right","kind":"theorem","line":102,"name":"Std.Do.SPred.and_or_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_and_right\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_and_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_and_right","kind":"theorem","line":101,"name":"Std.Do.SPred.or_and_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_and_left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_and_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> (<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span>)</div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_and_left","kind":"theorem","line":98,"name":"Std.Do.SPred.or_and_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_or_left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_or_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_or_left","kind":"theorem","line":95,"name":"Std.Do.SPred.and_or_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L95-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_eq_right\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_eq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_eq_right","kind":"theorem","line":93,"name":"Std.Do.SPred.or_eq_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_eq_left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_eq_left","kind":"theorem","line":92,"name":"Std.Do.SPred.or_eq_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_eq_left\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_eq_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_eq_left","kind":"theorem","line":91,"name":"Std.Do.SPred.and_eq_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_eq_right\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_eq_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_eq_right","kind":"theorem","line":90,"name":"Std.Do.SPred.and_eq_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_assoc\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_assoc","kind":"theorem","line":89,"name":"Std.Do.SPred.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_assoc\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_assoc","kind":"theorem","line":88,"name":"Std.Do.SPred.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_comm\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_comm","kind":"theorem","line":87,"name":"Std.Do.SPred.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_comm\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_comm","kind":"theorem","line":86,"name":"Std.Do.SPred.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_self\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_self","kind":"theorem","line":85,"name":"Std.Do.SPred.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_self\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_self","kind":"theorem","line":84,"name":"Std.Do.SPred.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.exists_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exists_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Φ </span><span class=\"fn\">Ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.exists_congr","kind":"theorem","line":80,"name":"Std.Do.SPred.exists_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.exists_mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exists_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Φ </span><span class=\"fn\">Ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.exists_mono","kind":"theorem","line":79,"name":"Std.Do.SPred.exists_mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.forall_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">forall_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Φ </span><span class=\"fn\">Ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.forall_congr","kind":"theorem","line":78,"name":"Std.Do.SPred.forall_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.forall_mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">forall_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Φ </span><span class=\"fn\">Ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Φ</span> <span class=\"fn\">a</span></span></span>)</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.forall\">«forall»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.forall_mono","kind":"theorem","line":77,"name":"Std.Do.SPred.forall_mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_congr_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_congr_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_congr_r","kind":"theorem","line":76,"name":"Std.Do.SPred.imp_congr_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_congr_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_congr_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_congr_l","kind":"theorem","line":75,"name":"Std.Do.SPred.imp_congr_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">P'</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_congr","kind":"theorem","line":74,"name":"Std.Do.SPred.imp_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_mono_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_mono_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_mono_r","kind":"theorem","line":73,"name":"Std.Do.SPred.imp_mono_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_mono_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_mono_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_mono_l","kind":"theorem","line":72,"name":"Std.Do.SPred.imp_mono_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">P'</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_mono","kind":"theorem","line":71,"name":"Std.Do.SPred.imp_mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_congr_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_congr_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_congr_r","kind":"theorem","line":70,"name":"Std.Do.SPred.or_congr_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_congr_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_congr_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_congr_l","kind":"theorem","line":69,"name":"Std.Do.SPred.or_congr_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_congr","kind":"theorem","line":68,"name":"Std.Do.SPred.or_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_mono_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_mono_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_mono_r","kind":"theorem","line":67,"name":"Std.Do.SPred.or_mono_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_mono_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_mono_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_mono_l","kind":"theorem","line":66,"name":"Std.Do.SPred.or_mono_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_mono","kind":"theorem","line":65,"name":"Std.Do.SPred.or_mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_congr_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_congr_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_congr_r","kind":"theorem","line":64,"name":"Std.Do.SPred.and_congr_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_congr_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_congr_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_congr_l","kind":"theorem","line":63,"name":"Std.Do.SPred.and_congr_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_congr","kind":"theorem","line":62,"name":"Std.Do.SPred.and_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_mono_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_mono_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_mono_r","kind":"theorem","line":61,"name":"Std.Do.SPred.and_mono_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_mono_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_mono_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_mono_l","kind":"theorem","line":60,"name":"Std.Do.SPred.and_mono_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_mono\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">P' </span><span class=\"fn\">Q </span><span class=\"fn\">Q'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P'</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q'</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_mono","kind":"theorem","line":59,"name":"Std.Do.SPred.and_mono","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.exfalso\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exfalso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.exfalso","kind":"theorem","line":55,"name":"Std.Do.SPred.exfalso","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_or_elim_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_or_elim_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hleft</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hright</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_or_elim_r","kind":"theorem","line":54,"name":"Std.Do.SPred.and_or_elim_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_or_elim_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_or_elim_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hleft</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hright</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">R</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">T</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_or_elim_l","kind":"theorem","line":53,"name":"Std.Do.SPred.and_or_elim_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.exists_intro'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">exists_intro'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_2)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Ψ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.exists\">«exists»</a> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">Ψ</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.exists_intro'","kind":"theorem","line":52,"name":"Std.Do.SPred.exists_intro'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_intro\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">true_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#True\">True</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.true_intro","kind":"theorem","line":51,"name":"Std.Do.SPred.true_intro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.false_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">false_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌜</a><a href=\"./Init/Prelude.html#False\">False</a><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.pure\">⌝</a> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.false_elim","kind":"theorem","line":50,"name":"Std.Do.SPred.false_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_elim_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_elim_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> (<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_elim_r","kind":"theorem","line":49,"name":"Std.Do.SPred.imp_elim_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_elim_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_elim_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">Q</span>) <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_elim_l","kind":"theorem","line":48,"name":"Std.Do.SPred.imp_elim_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_elim'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_elim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_elim'","kind":"theorem","line":47,"name":"Std.Do.SPred.imp_elim'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.mp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">mp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.mp","kind":"theorem","line":46,"name":"Std.Do.SPred.mp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails.trans'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails</span>.<span class=\"name\">trans'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails.trans'","kind":"theorem","line":45,"name":"Std.Do.SPred.entails.trans'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_intro'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">imp_intro'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.imp\">→</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.imp_intro'","kind":"theorem","line":44,"name":"Std.Do.SPred.imp_intro'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_symm\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_symm","kind":"theorem","line":43,"name":"Std.Do.SPred.or_symm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_symm\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_symm","kind":"theorem","line":42,"name":"Std.Do.SPred.and_symm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_intro_r'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_intro_r'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_intro_r'","kind":"theorem","line":41,"name":"Std.Do.SPred.or_intro_r'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_intro_l'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">or_intro_l'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.or\">∨</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.or_intro_l'","kind":"theorem","line":40,"name":"Std.Do.SPred.or_intro_l'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_elim_r'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_elim_r'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_elim_r'","kind":"theorem","line":39,"name":"Std.Do.SPred.and_elim_r'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_elim_l'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_elim_l'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">R</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_elim_l'","kind":"theorem","line":38,"name":"Std.Do.SPred.and_elim_l'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_intro_r\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_intro_r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_intro_r","kind":"theorem","line":37,"name":"Std.Do.SPred.and_intro_r","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_intro_l\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">and_intro_l</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.and\">∧</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.and_intro_l","kind":"theorem","line":36,"name":"Std.Do.SPred.and_intro_l","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.bientails.mpr\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">mpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>) → <span class=\"fn\">Q</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.bientails.mpr","kind":"theorem","line":32,"name":"Std.Do.SPred.bientails.mpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.bientails.mp\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">mp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span>) → <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.bientails.mp","kind":"theorem","line":31,"name":"Std.Do.SPred.bientails.mp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.bientails.of_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">Q</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.bientails.of_eq","kind":"theorem","line":29,"name":"Std.Do.SPred.bientails.of_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.bientails.rfl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">bientails</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.bientails\">⊣⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.bientails.rfl","kind":"theorem","line":28,"name":"Std.Do.SPred.bientails.rfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails.rfl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SPred</span>.<span class=\"name\">entails</span>.<span class=\"name\">rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred\">SPred</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\">P</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/DerivedLaws.html#Std.Do.SPred.entails.rfl","kind":"theorem","line":26,"name":"Std.Do.SPred.entails.rfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/DerivedLaws.lean#L26-L26"}}],"imports":["Init.ByCases","Std.Do.SPred.Laws"],"instances":[{"className":"Std.Do.SPred.Tactic.PropAsSPredTautology","name":"Std.Do.SPred.Tactic.instPropAsSPredTautologyDown","typeNames":["ULift.down"]},{"className":"Std.Do.SPred.Tactic.PropAsSPredTautology","name":"Std.Do.SPred.Tactic.instPropAsSPredTautologyEntailsImp","typeNames":["Std.Do.SPred.entails","Std.Do.SPred.imp"]},{"className":"Std.Do.SPred.Tactic.PropAsSPredTautology","name":"Std.Do.SPred.Tactic.instPropAsSPredTautologyEntailsPureTrue","typeNames":["Std.Do.SPred.entails"]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPurePure","typeNames":["Std.Do.SPred.pure"]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPureImpPureForall","typeNames":["Std.Do.SPred.imp"]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPureAndPureAnd","typeNames":["Std.Do.SPred.and","And"]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPureOrPureOr","typeNames":["Std.Do.SPred.or","Or"]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPureExistsPureExists","typeNames":["Std.Do.SPred.exists","Exists"]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPureForallPureForall","typeNames":["Std.Do.SPred.forall"]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPure","typeNames":[]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPure_1","typeNames":[]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPurePure_1","typeNames":["Std.Do.SPred.pure"]},{"className":"Std.Do.SPred.Tactic.IsPure","name":"Std.Do.SPred.Tactic.instIsPureDown","typeNames":["ULift.down"]},{"className":"Std.Do.SPred.Tactic.IsAnd","name":"Std.Do.SPred.Tactic.instIsAndAnd","typeNames":["Std.Do.SPred.and"]},{"className":"Std.Do.SPred.Tactic.IsAnd","name":"Std.Do.SPred.Tactic.instIsAndPureAnd","typeNames":["Std.Do.SPred.pure","Std.Do.SPred.pure","Std.Do.SPred.pure"]},{"className":"Std.Do.SPred.Tactic.IsAnd","name":"Std.Do.SPred.Tactic.instIsAnd","typeNames":[]},{"className":"Std.Do.SPred.Tactic.SimpAnd","name":"Std.Do.SPred.Tactic.instSimpAndAnd","typeNames":["Std.Do.SPred.and"]},{"className":"Std.Do.SPred.Tactic.SimpAnd","name":"Std.Do.SPred.Tactic.instSimpAndPureTrue","typeNames":["Std.Do.SPred.pure"]},{"className":"Std.Do.SPred.Tactic.SimpAnd","name":"Std.Do.SPred.Tactic.instSimpAndPureTrue_1","typeNames":["Std.Do.SPred.pure"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFrameAndOfSimpAnd","typeNames":["Std.Do.SPred.and"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFrameAndOfSimpAnd_1","typeNames":["Std.Do.SPred.and"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFramePureAndOfAnd","typeNames":["Std.Do.SPred.pure"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFrameCurryULiftPropUpAndOfAnd","typeNames":["Std.Do.SVal.curry"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFrameAndPure","typeNames":["Std.Do.SPred.and"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFrameAndPure_1","typeNames":["Std.Do.SPred.and"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFrameAndAndOfSimpAnd","typeNames":["Std.Do.SPred.and","And"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFrameAndPureAnd","typeNames":["Std.Do.SPred.and","And"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFrameAndPureAnd_1","typeNames":["Std.Do.SPred.and","And"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFramePureTrue","typeNames":["Std.Do.SPred.pure","Std.Do.SPred.pure"]},{"className":"Std.Do.SPred.Tactic.HasFrame","name":"Std.Do.SPred.Tactic.instHasFramePureTrueDown","typeNames":["Std.Do.SPred.pure","ULift.down"]}],"name":"Std.Do.SPred.DerivedLaws"}