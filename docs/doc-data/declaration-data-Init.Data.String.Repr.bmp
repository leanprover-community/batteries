{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Repr.html#String.toInt!\"><span class=\"name\">String</span>.<span class=\"name\">toInt!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Interprets a string as the decimal representation of an integer, returning it. Panics if the string\ndoes not contain a decimal integer.\n\nA string can be interpreted as a decimal integer if it only consists of at least one decimal digit\nand optionally `-` in front. Leading `+` characters are not allowed.\n\nUse `String.isInt` to check whether `String.toInt!` would return a value. `String.toInt?` is a safer\nalternative that returns `none` instead of panicking when the string is not an integer.\n\nExamples:\n * `\"0\".toInt! = 0`\n * `\"5\".toInt! = 5`\n * `\"587\".toInt! = 587`\n * `\"-587\".toInt! = -587`\n","docLink":"./Init/Data/String/Repr.html#String.toInt!","kind":"def","line":75,"name":"String.toInt!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Repr.lean#L75-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Repr.html#String.isInt\"><span class=\"name\">String</span>.<span class=\"name\">isInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the string can be interpreted as the decimal representation of an integer.\n\nA string can be interpreted as a decimal integer if it only consists of at least one decimal digit\nand optionally `-` in front. Leading `+` characters are not allowed.\n\nUse `String.toInt?` or `String.toInt!` to convert such a string to an integer.\n\nExamples:\n * `\"\".isInt = false`\n * `\"-\".isInt = false`\n * `\"0\".isInt = true`\n * `\"-0\".isInt = true`\n * `\"5\".isInt = true`\n * `\"587\".isInt = true`\n * `\"-587\".isInt = true`\n * `\"+587\".isInt = false`\n * `\" 5\".isInt = false`\n * `\"2-3\".isInt = false`\n * `\"0xff\".isInt = false`\n","docLink":"./Init/Data/String/Repr.html#String.isInt","kind":"def","line":48,"name":"String.isInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Repr.lean#L48-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Repr.html#String.toInt?\"><span class=\"name\">String</span>.<span class=\"name\">toInt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"Interprets a string as the decimal representation of an integer, returning it. Returns `none` if\nthe string does not contain a decimal integer.\n\nA string can be interpreted as a decimal integer if it only consists of at least one decimal digit\nand optionally `-` in front. Leading `+` characters are not allowed.\n\nUse `String.isInt` to check whether `String.toInt?` would return `some`. `String.toInt!` is an\nalternative that panics instead of returning `none` when the string is not an integer.\n\nExamples:\n * `\"\".toInt? = none`\n * `\"-\".toInt? = none`\n * `\"0\".toInt? = some 0`\n * `\"5\".toInt? = some 5`\n * `\"-5\".toInt? = some (-5)`\n * `\"587\".toInt? = some 587`\n * `\"-587\".toInt? = some (-587)`\n * `\" 5\".toInt? = none`\n * `\"2-3\".toInt? = none`\n * `\"0xff\".toInt? = none`\n","docLink":"./Init/Data/String/Repr.html#String.toInt?","kind":"def","line":19,"name":"String.toInt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Repr.lean#L19-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Repr.html#instToStringIterator\"><span class=\"name\">instToStringIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Repr.html#instToStringIterator","kind":"instance","line":16,"name":"instToStringIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Repr.lean#L16-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Repr.html#instReprIterator\"><span class=\"name\">instReprIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Repr.html#instReprIterator","kind":"instance","line":13,"name":"instReprIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Repr.lean#L13-L14"}}],"imports":["Init.Data.String.Basic"],"instances":[{"className":"Repr","name":"instReprIterator","typeNames":["String.Iterator"]},{"className":"ToString","name":"instToStringIterator","typeNames":["String.Iterator"]}],"name":"Init.Data.String.Repr"}