{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.instToString","kind":"instance","line":204,"name":"Lean.Data.Trie.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L204-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.matchPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">matchPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">String.Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">endByte</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">endByte_valid</span> : <span class=\"fn\">endByte</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span> := by simp)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Find the longest _key_ in the trie that is contained in the given string `s` at position `i`,\nand return the associated value. ","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.matchPrefix","kind":"def","line":167,"name":"Lean.Data.Trie.matchPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L167-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.findPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">findPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns all values whose key have the given string `pre` as a prefix, in no particular order. ","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.findPrefix","kind":"def","line":148,"name":"Lean.Data.Trie.findPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L148-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.values\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns an `Array` of all values in the trie, in no particular order. ","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.values","kind":"def","line":132,"name":"Lean.Data.Trie.values","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L132-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Looks up a value at the given key `s`.  ","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.find?","kind":"def","line":106,"name":"Lean.Data.Trie.find?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L106-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Inserts a value at a the given key `s`, overriding an existing value if present. ","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.insert","kind":"def","line":102,"name":"Lean.Data.Trie.insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L102-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.upsert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">upsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Insert or update the value at a the given key `s`.  ","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.upsert","kind":"def","line":62,"name":"Lean.Data.Trie.upsert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L62-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.instInhabited","kind":"instance","line":59,"name":"Lean.Data.Trie.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.instEmptyCollection\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.instEmptyCollection","kind":"instance","line":56,"name":"Lean.Data.Trie.instEmptyCollection","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L56-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The empty `Trie` ","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.empty","kind":"def","line":53,"name":"Lean.Data.Trie.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.node\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.node","kind":"ctor","line":48,"name":"Lean.Data.Trie.node","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.node1\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">node1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.node1","kind":"ctor","line":47,"name":"Lean.Data.Trie.node1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.leaf\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">leaf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.leaf","kind":"ctor","line":46,"name":"Lean.Data.Trie.leaf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A Trie is a key-value store where the keys are of type `String`,\nand the internal structure is a tree that branches on the bytes of the string.  ","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie","kind":"inductive","line":43,"name":"Lean.Data.Trie","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Trie.lean#L43-L48"}}],"imports":["Lean.Data.Format","Init.Data.Option.Coe"],"instances":[{"className":"EmptyCollection","name":"Lean.Data.Trie.instEmptyCollection","typeNames":["Lean.Data.Trie"]},{"className":"Inhabited","name":"Lean.Data.Trie.instInhabited","typeNames":["Lean.Data.Trie"]},{"className":"ToString","name":"Lean.Data.Trie.instToString","typeNames":["Lean.Data.Trie"]}],"name":"Lean.Data.Trie"}