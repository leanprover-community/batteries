{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.reify?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">reify?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skipVar</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/LinearM.html#Lean.Meta.Grind.Arith.Linear.LinearM\">LinearM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.LinExpr\">LinExpr</a>)</span></span></div></div>","info":{"doc":"Converts a Lean `IntModule` expression `e` into a `LinExpr`\n\nIf `skipVar` is `true`, then the result is `none` if `e` is not an interpreted `IntModule` term.\nWe use `skipVar := false` when processing inequalities, and `skipVar := true` for equalities and disequalities\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.reify?","kind":"def","line":36,"name":"Lean.Meta.Grind.Arith.Linear.reify?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L36-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.reportInstIssue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">reportInstIssue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.reportInstIssue","kind":"def","line":33,"name":"Lean.Meta.Grind.Arith.Linear.reportInstIssue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L33-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isNegInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isNegInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isNegInst","kind":"def","line":30,"name":"Lean.Meta.Grind.Arith.Linear.isNegInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isSubInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isSubInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isSubInst","kind":"def","line":28,"name":"Lean.Meta.Grind.Arith.Linear.isSubInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isHSMulNatInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isHSMulNatInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isHSMulNatInst","kind":"def","line":26,"name":"Lean.Meta.Grind.Arith.Linear.isHSMulNatInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isHSMulIntInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isHSMulIntInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isHSMulIntInst","kind":"def","line":24,"name":"Lean.Meta.Grind.Arith.Linear.isHSMulIntInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L24-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isHomoMulInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isHomoMulInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isHomoMulInst","kind":"def","line":22,"name":"Lean.Meta.Grind.Arith.Linear.isHomoMulInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L22-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isSMulNatInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isSMulNatInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isSMulNatInst","kind":"def","line":20,"name":"Lean.Meta.Grind.Arith.Linear.isSMulNatInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L20-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isSMulIntInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isSMulIntInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isSMulIntInst","kind":"def","line":18,"name":"Lean.Meta.Grind.Arith.Linear.isSMulIntInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L18-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isZeroInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isZeroInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isZeroInst","kind":"def","line":16,"name":"Lean.Meta.Grind.Arith.Linear.isZeroInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L16-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isAddInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Linear</span>.<span class=\"name\">isAddInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Linear/Types.html#Lean.Meta.Grind.Arith.Linear.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Linear/Reify.html#Lean.Meta.Grind.Arith.Linear.isAddInst","kind":"def","line":14,"name":"Lean.Meta.Grind.Arith.Linear.isAddInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Linear/Reify.lean#L14-L15"}}],"imports":["Lean.Meta.Tactic.Grind.Arith.Linear.LinearM","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Grind.Arith.Linear.Var"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Arith.Linear.Reify"}