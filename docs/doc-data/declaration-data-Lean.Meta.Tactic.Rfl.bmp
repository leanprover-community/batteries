{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rfl.html#Lean.MVarId.liftReflToEq\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">liftReflToEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Convert a goal of the form `x ~ y` into the form `x = y`, where `~` is a reflexive\nrelation, that is, a relation which has a reflexive lemma tagged with the attribute `@[refl]`.\nIf this can't be done, returns the original `MVarId`.\n","docLink":"./Lean/Meta/Tactic/Rfl.html#Lean.MVarId.liftReflToEq","kind":"def","line":127,"name":"Lean.MVarId.liftReflToEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Rfl.lean#L127-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rfl.html#Lean.MVarId.applyRfl\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">applyRfl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"`MetaM` version of the `rfl` tactic.\n\nThis tactic applies to a goal whose target has the form `x ~ x`, where `~` is a reflexive\nrelation, that is, equality or another relation which has a reflexive lemma tagged with the\nattribute [refl].\n","docLink":"./Lean/Meta/Tactic/Rfl.html#Lean.MVarId.applyRfl","kind":"def","line":61,"name":"Lean.MVarId.applyRfl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Rfl.lean#L61-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rfl.html#Lean.Meta.Rfl.reflExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rfl</span>.<span class=\"name\">reflExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">DiscrTree.Key</a></span>) <span class=\"fn\">(<a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">DiscrTree</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Environment extensions for `refl` lemmas ","docLink":"./Lean/Meta/Tactic/Rfl.html#Lean.Meta.Rfl.reflExt","kind":"opaque","line":25,"name":"Lean.Meta.Rfl.reflExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Rfl.lean#L25-L31"}}],"imports":["Lean.Elab.Tactic.Basic","Lean.Meta.Tactic.Refl"],"instances":[],"name":"Lean.Meta.Tactic.Rfl"}