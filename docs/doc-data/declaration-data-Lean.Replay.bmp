{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.replay\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">replay</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newConstants</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>","info":{"doc":"\"Replay\" some constants into an `Environment`, sending them to the kernel for checking.\n\nThrows a `IO.userError` if the kernel rejects a constant,\nor if there are malformed recursors or constructors for inductive types.\n","docLink":"./Lean/Replay.html#Lean.Environment.replay","kind":"def","line":152,"name":"Lean.Environment.replay","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L152-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.checkPostponedRecursors\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">checkPostponedRecursors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Check that all postponed recursors are identical to those generated\nwhen we replayed the inductives.\n","docLink":"./Lean/Replay.html#Lean.Environment.Replay.checkPostponedRecursors","kind":"def","line":137,"name":"Lean.Environment.Replay.checkPostponedRecursors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L137-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.checkPostponedConstructors\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">checkPostponedConstructors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Check that all postponed constructors are identical to those generated\nwhen we replayed the inductives.\n","docLink":"./Lean/Replay.html#Lean.Environment.Replay.checkPostponedConstructors","kind":"def","line":126,"name":"Lean.Environment.Replay.checkPostponedConstructors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L126-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.replayConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">replayConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Replay a set of constants one at a time. ","docLink":"./Lean/Replay.html#Lean.Environment.Replay.replayConstants","kind":"opaque","line":120,"name":"Lean.Environment.Replay.replayConstants","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L120-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.replayConstant\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">replayConstant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Check if a `Name` still needs to be processed (i.e. is in `remaining`).\n\nIf so, recursively replay any constants it refers to,\nto ensure we add declarations in the right order.\n\nThe construct the `Declaration` from its stored `ConstantInfo`,\nand add it to the environment.\n","docLink":"./Lean/Replay.html#Lean.Environment.Replay.replayConstant","kind":"opaque","line":65,"name":"Lean.Environment.Replay.replayConstant","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L65-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.addDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">addDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add a declaration, possibly throwing a `Kernel.Exception`. ","docLink":"./Lean/Replay.html#Lean.Environment.Replay.addDecl","kind":"def","line":58,"name":"Lean.Environment.Replay.addDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L58-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.throwKernelException\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">throwKernelException</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Kernel.Exception</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Use the current `Environment` to throw a `Kernel.Exception`. ","docLink":"./Lean/Replay.html#Lean.Environment.Replay.throwKernelException","kind":"def","line":54,"name":"Lean.Environment.Replay.throwKernelException","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.isTodo\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">isTodo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Check if a `Name` still needs processing. If so, move it from `remaining` to `pending`. ","docLink":"./Lean/Replay.html#Lean.Environment.Replay.isTodo","kind":"def","line":45,"name":"Lean.Environment.Replay.isTodo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L45-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.M","kind":"def","line":43,"name":"Lean.Environment.Replay.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.postponedRecursors\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">postponedRecursors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.postponedRecursors","kind":"def","line":41,"name":"Lean.Environment.Replay.State.postponedRecursors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.postponedConstructors\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">postponedConstructors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.postponedConstructors","kind":"def","line":40,"name":"Lean.Environment.Replay.State.postponedConstructors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.pending\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">pending</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.pending","kind":"def","line":39,"name":"Lean.Environment.Replay.State.pending","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.remaining\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">remaining</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.remaining","kind":"def","line":38,"name":"Lean.Environment.Replay.State.remaining","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.env\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.env","kind":"def","line":37,"name":"Lean.Environment.Replay.State.env","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">remaining </span><span class=\"fn\">pending </span><span class=\"fn\">postponedConstructors </span><span class=\"fn\">postponedRecursors</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.mk","kind":"ctor","line":36,"name":"Lean.Environment.Replay.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State","kind":"structure","line":36,"name":"Lean.Environment.Replay.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L36-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.Context.newConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">Context</span>.<span class=\"name\">newConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.Context.newConstants","kind":"def","line":34,"name":"Lean.Environment.Replay.Context.newConstants","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newConstants</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.Context.mk","kind":"ctor","line":33,"name":"Lean.Environment.Replay.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Replay.html#Lean.Environment.Replay.Context","kind":"structure","line":33,"name":"Lean.Environment.Replay.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Replay.lean#L33-L34"}}],"imports":["Lean.AddDecl"],"instances":[],"name":"Lean.Replay"}