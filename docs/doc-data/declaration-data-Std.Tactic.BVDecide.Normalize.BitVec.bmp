{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">ISize</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.beq_eq_decide_eq","kind":"theorem","line":623,"name":"Std.Tactic.BVDecide.Normalize.ISize.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L623-L624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int64</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.beq_eq_decide_eq","kind":"theorem","line":620,"name":"Std.Tactic.BVDecide.Normalize.Int64.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L620-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int32</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.beq_eq_decide_eq","kind":"theorem","line":617,"name":"Std.Tactic.BVDecide.Normalize.Int32.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L617-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int16</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.beq_eq_decide_eq","kind":"theorem","line":614,"name":"Std.Tactic.BVDecide.Normalize.Int16.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L614-L615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int8</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.beq_eq_decide_eq","kind":"theorem","line":611,"name":"Std.Tactic.BVDecide.Normalize.Int8.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L611-L612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">USize</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.beq_eq_decide_eq","kind":"theorem","line":608,"name":"Std.Tactic.BVDecide.Normalize.USize.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L608-L609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt64</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.beq_eq_decide_eq","kind":"theorem","line":605,"name":"Std.Tactic.BVDecide.Normalize.UInt64.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L605-L606"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt32</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.beq_eq_decide_eq","kind":"theorem","line":602,"name":"Std.Tactic.BVDecide.Normalize.UInt32.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L602-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt16</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.beq_eq_decide_eq","kind":"theorem","line":599,"name":"Std.Tactic.BVDecide.Normalize.UInt16.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L599-L600"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.beq_eq_decide_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt8</span>.<span class=\"name\">beq_eq_decide_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.beq_eq_decide_eq","kind":"theorem","line":596,"name":"Std.Tactic.BVDecide.Normalize.UInt8.beq_eq_decide_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L596-L597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.toBitVec_ite","kind":"theorem","line":591,"name":"Std.Tactic.BVDecide.Normalize.ISize.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L591-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.toBitVec_ite","kind":"theorem","line":586,"name":"Std.Tactic.BVDecide.Normalize.Int64.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L586-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.toBitVec_ite","kind":"theorem","line":581,"name":"Std.Tactic.BVDecide.Normalize.Int32.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L581-L584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.toBitVec_ite","kind":"theorem","line":576,"name":"Std.Tactic.BVDecide.Normalize.Int16.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L576-L579"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.toBitVec_ite","kind":"theorem","line":571,"name":"Std.Tactic.BVDecide.Normalize.Int8.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L571-L574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">USize</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.toBitVec_ite","kind":"theorem","line":566,"name":"Std.Tactic.BVDecide.Normalize.USize.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L566-L569"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_ite","kind":"theorem","line":561,"name":"Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L561-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_ite","kind":"theorem","line":556,"name":"Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L556-L559"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_ite","kind":"theorem","line":551,"name":"Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L551-L554"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">e</span>).<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_ite","kind":"theorem","line":546,"name":"Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L546-L549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">ISize</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.ISize.toBitVec_cond","kind":"theorem","line":541,"name":"Std.Tactic.BVDecide.Normalize.ISize.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L541-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int64</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int64.toBitVec_cond","kind":"theorem","line":536,"name":"Std.Tactic.BVDecide.Normalize.Int64.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L536-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int32</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int32.toBitVec_cond","kind":"theorem","line":531,"name":"Std.Tactic.BVDecide.Normalize.Int32.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L531-L534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int16</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int16.toBitVec_cond","kind":"theorem","line":526,"name":"Std.Tactic.BVDecide.Normalize.Int16.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L526-L529"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Int8</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.Int8.toBitVec_cond","kind":"theorem","line":521,"name":"Std.Tactic.BVDecide.Normalize.Int8.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L521-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">USize</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.USize.toBitVec_cond","kind":"theorem","line":516,"name":"Std.Tactic.BVDecide.Normalize.USize.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L516-L519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_cond","kind":"theorem","line":511,"name":"Std.Tactic.BVDecide.Normalize.UInt64.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L511-L514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_cond","kind":"theorem","line":506,"name":"Std.Tactic.BVDecide.Normalize.UInt32.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L506-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_cond","kind":"theorem","line":501,"name":"Std.Tactic.BVDecide.Normalize.UInt16.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L501-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> else <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_cond","kind":"theorem","line":496,"name":"Std.Tactic.BVDecide.Normalize.UInt8.toBitVec_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L496-L499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_beq_mul_short_circuit_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y₁ </span><span class=\"fn\">y₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a>(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">y₂</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y₂</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_right","kind":"theorem","line":490,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L490-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_beq_mul_short_circuit_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂ </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a>(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">x₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_left","kind":"theorem","line":484,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_beq_mul_short_circuit_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L484-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">norm_bv_add_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul'","kind":"theorem","line":480,"name":"Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L480-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">norm_bv_add_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul","kind":"theorem","line":476,"name":"Std.Tactic.BVDecide.Normalize.BitVec.norm_bv_add_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L476-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg_mul'''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'''","kind":"theorem","line":473,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L473-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg_mul''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul''","kind":"theorem","line":470,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L470-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'","kind":"theorem","line":467,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L467-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul","kind":"theorem","line":464,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L464-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">signExtend_elim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim'","kind":"theorem","line":460,"name":"Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L460-L462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">signExtend_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">BitVec.signExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">⋯</span> (<span class=\"fn\">(bif <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a>(<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">v</span>) else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a>(<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">v</span>))</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim","kind":"theorem","line":454,"name":"Std.Tactic.BVDecide.Normalize.BitVec.signExtend_elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L454-L458"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.append_const_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_const_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w1 </span><span class=\"fn\">w2 </span><span class=\"fn\">b </span><span class=\"fn\">w3 </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w2</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w3</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">⋯</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w2</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w3</span> <span class=\"fn\">c</span></span>))</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.append_const_right","kind":"theorem","line":446,"name":"Std.Tactic.BVDecide.Normalize.BitVec.append_const_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L446-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.append_const_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">append_const_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w3 </span><span class=\"fn\">w1 </span><span class=\"fn\">a </span><span class=\"fn\">w2 </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w3</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w2</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.cast\">BitVec.cast</a> <span class=\"fn\">⋯</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w1</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w2</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">c</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.append_const_left","kind":"theorem","line":437,"name":"Std.Tactic.BVDecide.Normalize.BitVec.append_const_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L437-L444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_right'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_const_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_right'","kind":"theorem","line":431,"name":"Std.Tactic.BVDecide.Normalize.BitVec.and_const_right'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L431-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_left'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_const_left'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_left'","kind":"theorem","line":426,"name":"Std.Tactic.BVDecide.Normalize.BitVec.and_const_left'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L426-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_const_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_right","kind":"theorem","line":421,"name":"Std.Tactic.BVDecide.Normalize.BitVec.and_const_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L421-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_const_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_const_left","kind":"theorem","line":416,"name":"Std.Tactic.BVDecide.Normalize.BitVec.and_const_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L416-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_beq_const_add_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">const_beq_const_add_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">c </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_beq_const_add_beq","kind":"theorem","line":410,"name":"Std.Tactic.BVDecide.Normalize.BitVec.const_beq_const_add_beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L410-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_beq_add_const_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">const_beq_add_const_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_beq_add_const_beq","kind":"theorem","line":404,"name":"Std.Tactic.BVDecide.Normalize.BitVec.const_beq_add_const_beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L404-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_add_beq_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">const_add_beq_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.const_add_beq_const","kind":"theorem","line":398,"name":"Std.Tactic.BVDecide.Normalize.BitVec.const_add_beq_const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L398-L402"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_beq_const\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_beq_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_beq_const","kind":"theorem","line":392,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_beq_const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L392-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ones\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ones</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ones","kind":"theorem","line":387,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ones","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L387-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ones_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ones_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ones_mul","kind":"theorem","line":382,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ones_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L382-L384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.extractLsb'_if\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb'_if</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">x</span> else <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">x</span></span> else <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">BitVec.extractLsb'</a> <span class=\"fn\">s</span> <span class=\"fn\">l</span> <span class=\"fn\">y</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.extractLsb'_if","kind":"theorem","line":376,"name":"Std.Tactic.BVDecide.Normalize.BitVec.extractLsb'_if","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L376-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.udiv_ofNat_eq_of_lt\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">udiv_ofNat_eq_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"`x / (BitVec.ofNat n)` where `n = 2^k` is the same as shifting `x` right by `k`. ","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.udiv_ofNat_eq_of_lt","kind":"theorem","line":367,"name":"Std.Tactic.BVDecide.Normalize.BitVec.udiv_ofNat_eq_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L367-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ult_max'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ult_max'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ult_max'","kind":"theorem","line":335,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ult_max'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L335-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.max_ult'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">max_ult'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.max_ult'","kind":"theorem","line":331,"name":"Std.Tactic.BVDecide.Normalize.BitVec.max_ult'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L331-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.lt_one_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">lt_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">n</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.lt_one_iff","kind":"theorem","line":325,"name":"Std.Tactic.BVDecide.Normalize.BitVec.lt_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L325-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_lt_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_lt_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_lt_zero","kind":"theorem","line":322,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_lt_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L322-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.lt_irrefl\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">lt_irrefl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.lt_irrefl","kind":"theorem","line":317,"name":"Std.Tactic.BVDecide.Normalize.BitVec.lt_irrefl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L317-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_ult'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_ult'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_ult'","kind":"theorem","line":309,"name":"Std.Tactic.BVDecide.Normalize.BitVec.zero_ult'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L309-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_lt_iff_zero_neq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_lt_iff_zero_neq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_lt_iff_zero_neq","kind":"theorem","line":304,"name":"Std.Tactic.BVDecide.Normalize.BitVec.zero_lt_iff_zero_neq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L304-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_self\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_self","kind":"theorem","line":301,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L301-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_zero'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">w'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_zero'","kind":"theorem","line":295,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ushiftRight_zero'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L295-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w₁</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_neg","kind":"theorem","line":284,"name":"Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L284-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_zero'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">w'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_zero'","kind":"theorem","line":278,"name":"Std.Tactic.BVDecide.Normalize.BitVec.shiftLeft_zero'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L278-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_neg","kind":"theorem","line":271,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L271-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.neg_mul\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">neg_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.neg_mul","kind":"theorem","line":267,"name":"Std.Tactic.BVDecide.Normalize.BitVec.neg_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L267-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_right'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_right'","kind":"theorem","line":254,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_right'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L254-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_left'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_left'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_left'","kind":"theorem","line":249,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_left'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L249-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_right","kind":"theorem","line":244,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L244-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_const_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_const_left","kind":"theorem","line":239,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_const_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L239-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_same\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_same</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> 2<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_same","kind":"theorem","line":236,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_same","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L236-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_neg''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg''","kind":"theorem","line":231,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_neg''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L231-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_neg'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg'","kind":"theorem","line":225,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_neg'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L225-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_neg","kind":"theorem","line":220,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L220-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.neg_add\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">neg_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.neg_add","kind":"theorem","line":214,"name":"Std.Tactic.BVDecide.Normalize.BitVec.neg_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L214-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_neg","kind":"theorem","line":209,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L209-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_add\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.not_add","kind":"theorem","line":205,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L205-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_not\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">add_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.add_not","kind":"theorem","line":201,"name":"Std.Tactic.BVDecide.Normalize.BitVec.add_not","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L201-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_contra'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_contra'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_contra'","kind":"theorem","line":197,"name":"Std.Tactic.BVDecide.Normalize.BitVec.and_contra'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L197-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_contra\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_contra</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_contra","kind":"theorem","line":193,"name":"Std.Tactic.BVDecide.Normalize.BitVec.and_contra","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L193-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.one_plus_not_eq_not_plus_one\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">one_plus_not_eq_not_plus_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.one_plus_not_eq_not_plus_one","kind":"theorem","line":189,"name":"Std.Tactic.BVDecide.Normalize.BitVec.one_plus_not_eq_not_plus_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L189-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_ones\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">and_ones</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.and_ones","kind":"theorem","line":183,"name":"Std.Tactic.BVDecide.Normalize.BitVec.and_ones","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L183-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ones_and\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ones_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ones_and","kind":"theorem","line":178,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ones_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L178-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.getElem_eq_getLsbD\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">getElem_eq_getLsbD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.getElem_eq_getLsbD","kind":"theorem","line":145,"name":"Std.Tactic.BVDecide.Normalize.BitVec.getElem_eq_getLsbD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L145-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.abs_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">abs_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\">abs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> else <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.abs_eq","kind":"theorem","line":139,"name":"Std.Tactic.BVDecide.Normalize.BitVec.abs_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L139-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.srem_umod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">srem_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) else <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>)</span>\n  else <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> else <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.srem_umod","kind":"theorem","line":123,"name":"Std.Tactic.BVDecide.Normalize.BitVec.srem_umod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L123-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.smtSDiv_smtUDiv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">smtSDiv_smtUDiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtSDiv\">smtSDiv</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\">smtUDiv</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)</span> else <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\">smtUDiv</a></span> <span class=\"fn\">y</span></span></span>\n  else <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\">smtUDiv</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)</span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smtUDiv\">smtUDiv</a></span> <span class=\"fn\">y</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.smtSDiv_smtUDiv","kind":"theorem","line":107,"name":"Std.Tactic.BVDecide.Normalize.BitVec.smtSDiv_smtUDiv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L107-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.smod_umod\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">smod_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) else <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> else <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span></span></span>\n  else <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> then <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> else <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></span> else <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.umod\">umod</a></span> <span class=\"fn\">y</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.smod_umod","kind":"theorem","line":89,"name":"Std.Tactic.BVDecide.Normalize.BitVec.smod_umod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L89-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sdiv_udiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> else <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>)</span>\n  else <span class=\"fn\">bif <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> then <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>) else <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv","kind":"theorem","line":73,"name":"Std.Tactic.BVDecide.Normalize.BitVec.sdiv_udiv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L73-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ofBool_eq_if\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofBool_eq_if</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ofBool_eq_if","kind":"theorem","line":68,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ofBool_eq_if","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L68-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ofNatLT_reduce\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ofNatLT_reduce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#BitVec.ofNatLT\">#'</a><span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec.ofNat\">BitVec.ofNat</a> <span class=\"fn\">w</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ofNatLT_reduce","kind":"theorem","line":64,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ofNatLT_reduce","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L64-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.sle_eq_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">sle_eq_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a>(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">x</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.sle_eq_ult","kind":"theorem","line":57,"name":"Std.Tactic.BVDecide.Normalize.BitVec.sle_eq_ult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L57-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.slt_eq_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">slt_eq_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">y</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.slt_eq_ult","kind":"theorem","line":52,"name":"Std.Tactic.BVDecide.Normalize.BitVec.slt_eq_ult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L52-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ge_ule\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ge_ule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">y</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.ge_ule","kind":"theorem","line":41,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ge_ule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L41-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.gt_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">gt_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.gt_ult","kind":"theorem","line":37,"name":"Std.Tactic.BVDecide.Normalize.BitVec.gt_ult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L37-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.le_ult\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">le_ult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">x</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/BitVec.html#Std.Tactic.BVDecide.Normalize.BitVec.le_ult","kind":"theorem","line":29,"name":"Std.Tactic.BVDecide.Normalize.BitVec.le_ult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/BitVec.lean#L29-L33"}}],"imports":["Init.Data.BitVec.Bitblast","Init.Data.AC","Std.Tactic.BVDecide.Normalize.Bool","Std.Tactic.BVDecide.Normalize.Canonicalize","Init.Data.SInt.Basic"],"instances":[],"name":"Std.Tactic.BVDecide.Normalize.BitVec"}