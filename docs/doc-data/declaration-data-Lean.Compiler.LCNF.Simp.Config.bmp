{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.instInhabitedConfig.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedConfig</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.instInhabitedConfig.default","kind":"def","line":44,"name":"Lean.Compiler.LCNF.Simp.instInhabitedConfig.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Config.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.instInhabitedConfig","kind":"instance","line":44,"name":"Lean.Compiler.LCNF.Simp.instInhabitedConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Config.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.inlineDefs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">inlineDefs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `inlineDefs` is `true` then top-level definitions are inlined when they are small are\nannotated with inlining attributes.\n","docLink":"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.inlineDefs","kind":"def","line":43,"name":"Lean.Compiler.LCNF.Simp.Config.inlineDefs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Config.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.implementedBy\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">implementedBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `implementedBy` is `true`, we apply the `implemented_by` replacements.\nRemark: we only apply `casesOn` replacements at phase 2 because `cases` constructor\nmay not have enough information for reconstructing the original `casesOn` application at\nphase 1.\n","docLink":"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.implementedBy","kind":"def","line":38,"name":"Lean.Compiler.LCNF.Simp.Config.implementedBy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Config.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.inlinePartial\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">inlinePartial</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `inlinePartial` is `true`, we inline partial function applications tagged\nwith `[inline]`. Note that this option is automatically disabled when processing\ndeclarations tagged with `[inline]`, marked to be specialized, or instances.\n","docLink":"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.inlinePartial","kind":"def","line":31,"name":"Lean.Compiler.LCNF.Simp.Config.inlinePartial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Config.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.etaPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `etaPoly` is true, we eta expand any global function application when\nthe function takes local instances. The idea is that we do not generate code\nfor this kind of application, and we want all of them to specialized or inlined.\n","docLink":"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.etaPoly","kind":"def","line":25,"name":"Lean.Compiler.LCNF.Simp.Config.etaPoly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Config.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaPoly </span><span class=\"fn\">inlinePartial </span><span class=\"fn\">implementedBy </span><span class=\"fn\">inlineDefs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config.mk","kind":"ctor","line":19,"name":"Lean.Compiler.LCNF.Simp.Config.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Config.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration options for `Simp` that are not controlled using `set_option`.\nRecall that we have multiple `Simp` passes and they use different configurations.\n","docLink":"./Lean/Compiler/LCNF/Simp/Config.html#Lean.Compiler.LCNF.Simp.Config","kind":"structure","line":15,"name":"Lean.Compiler.LCNF.Simp.Config","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/Config.lean#L15-L44"}}],"imports":["Init.Core"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.Simp.instInhabitedConfig","typeNames":["Lean.Compiler.LCNF.Simp.Config"]}],"name":"Lean.Compiler.LCNF.Simp.Config"}