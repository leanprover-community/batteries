{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.toNat_pow_of_nonneg\"><span class=\"name\">Int</span>.<span class=\"name\">toNat_pow_of_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.toNat_pow_of_nonneg","kind":"theorem","line":87,"name":"Int.toNat_pow_of_nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L87-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.natAbs_pow\"><span class=\"name\">Int</span>.<span class=\"name\">natAbs_pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span>).<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.natAbs_pow","kind":"theorem","line":83,"name":"Int.natAbs_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L83-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.pow_lt_pow_of_lt\"><span class=\"name\">Int</span>.<span class=\"name\">pow_lt_pow_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbc</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.pow_lt_pow_of_lt","kind":"theorem","line":76,"name":"Int.pow_lt_pow_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L76-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.two_pow_pred_sub_two_pow'\"><span class=\"name\">Int</span>.<span class=\"name\">two_pow_pred_sub_two_pow'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.two_pow_pred_sub_two_pow'","kind":"theorem","line":69,"name":"Int.two_pow_pred_sub_two_pow'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L69-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.two_pow_pred_sub_two_pow\"><span class=\"name\">Int</span>.<span class=\"name\">two_pow_pred_sub_two_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.two_pow_pred_sub_two_pow","kind":"theorem","line":63,"name":"Int.two_pow_pred_sub_two_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L63-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.natCast_pow\"><span class=\"name\">Int</span>.<span class=\"name\">natCast_pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.natCast_pow","kind":"theorem","line":56,"name":"Int.natCast_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L56-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Nat.pos_pow_of_pos\"><span class=\"name\">Nat</span>.<span class=\"name\">pos_pow_of_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Nat.pos_pow_of_pos","kind":"def","line":53,"name":"Nat.pos_pow_of_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.instNeZeroHPowNat\"><span class=\"name\">Int</span>.<span class=\"name\">instNeZeroHPowNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.instNeZeroHPowNat","kind":"instance","line":50,"name":"Int.instNeZeroHPowNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.pow_ne_zero\"><span class=\"name\">Int</span>.<span class=\"name\">pow_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.pow_ne_zero","kind":"theorem","line":45,"name":"Int.pow_ne_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L45-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.pow_nonneg\"><span class=\"name\">Int</span>.<span class=\"name\">pow_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> → <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.pow_nonneg","kind":"theorem","line":40,"name":"Int.pow_nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L40-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.pow_pos\"><span class=\"name\">Int</span>.<span class=\"name\">pow_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.pow_pos","kind":"theorem","line":35,"name":"Int.pow_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L35-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.one_pow\"><span class=\"name\">Int</span>.<span class=\"name\">one_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.one_pow","kind":"theorem","line":32,"name":"Int.one_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.zero_pow\"><span class=\"name\">Int</span>.<span class=\"name\">zero_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.zero_pow","kind":"theorem","line":28,"name":"Int.zero_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L28-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.pow_add\"><span class=\"name\">Int</span>.<span class=\"name\">pow_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.pow_add","kind":"theorem","line":23,"name":"Int.pow_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L23-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.pow_succ'\"><span class=\"name\">Int</span>.<span class=\"name\">pow_succ'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.pow_succ'","kind":"theorem","line":20,"name":"Int.pow_succ'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L20-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.pow_succ\"><span class=\"name\">Int</span>.<span class=\"name\">pow_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.pow_succ","kind":"theorem","line":19,"name":"Int.pow_succ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Pow.html#Int.pow_zero\"><span class=\"name\">Int</span>.<span class=\"name\">pow_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Pow.html#Int.pow_zero","kind":"theorem","line":17,"name":"Int.pow_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Int/Pow.lean#L17-L17"}}],"imports":["Init.Data.Nat.Lemmas"],"instances":[{"className":"NeZero","name":"Int.instNeZeroHPowNat","typeNames":["HPow.hPow"]}],"name":"Init.Data.Int.Pow"}