{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#instToStringByteArray\"><span class=\"name\">instToStringByteArray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#instToStringByteArray","kind":"instance","line":466,"name":"instToStringByteArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L466-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.prevn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prevn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position several bytes back\\.\n\nIf asked to go back more bytes than available, stops at the beginning of the array\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.prevn","kind":"def","line":454,"name":"ByteArray.Iterator.prevn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L454-L461"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.nextn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position several bytes forward\\.\n\nThe resulting iterator is only valid if the number of bytes to skip is less than or equal to\nthe number of bytes left in the iterator\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.nextn","kind":"def","line":451,"name":"ByteArray.Iterator.nextn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L451-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.forward\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position several bytes forward\\.\n\nThe resulting iterator is only valid if the number of bytes to skip is less than or equal to\nthe number of bytes left in the iterator\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.forward","kind":"def","line":441,"name":"ByteArray.Iterator.forward","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L441-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.toEnd\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Moves the iterator's position to the end of the array\\.\n\nGiven `i : ByteArray.Iterator`, note that `i.toEnd.atEnd` is always `true`\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.toEnd","kind":"def","line":432,"name":"ByteArray.Iterator.toEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L432-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasPrev\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"True if the position is not zero\\. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasPrev","kind":"def","line":427,"name":"ByteArray.Iterator.hasPrev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L427-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.next'\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_h</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"Moves the iterator's position forward by one byte\\. \\-","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.next'","kind":"def","line":421,"name":"ByteArray.Iterator.next'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L421-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.curr'\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"The byte at the current position\\. \\-","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.curr'","kind":"def","line":411,"name":"ByteArray.Iterator.curr'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L411-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasNext\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"True if the iterator is valid; that is, it is not past the array's last byte\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasNext","kind":"def","line":404,"name":"ByteArray.Iterator.hasNext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L404-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.prev\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Decreases the iterator's position\\.\n\nIf the position is zero, this function is the identity\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.prev","kind":"def","line":395,"name":"ByteArray.Iterator.prev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L395-L402"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.next\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Moves the iterator's position forward by one byte, unconditionally\\.\n\nIt is only valid to call this function if the iterator is not at the end of the array, **i\\.e\\.**\n`Iterator.atEnd` is `false`; otherwise, the resulting iterator will be invalid\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.next","kind":"def","line":385,"name":"ByteArray.Iterator.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L385-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.curr\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"The byte at the current position\\.\n\nOn an invalid position, returns `(default : UInt8)`\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.curr","kind":"def","line":372,"name":"ByteArray.Iterator.curr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L372-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.atEnd\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"True if the iterator is past the array's last byte\\. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.atEnd","kind":"def","line":367,"name":"ByteArray.Iterator.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L367-L370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.pos\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The current position.\n\nThis position is not necessarily valid for the array, for instance if one keeps calling\n`Iterator.next` when `Iterator.atEnd` is true. If the position is not valid, then the\ncurrent byte is `(default : UInt8)`. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.pos","kind":"def","line":364,"name":"ByteArray.Iterator.pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L364-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.remainingBytes\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The number of bytes remaining in the iterator\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.remainingBytes","kind":"def","line":358,"name":"ByteArray.Iterator.remainingBytes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L358-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.sizeOf_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.array\">array</a></span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.idx\">idx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.sizeOf_eq","kind":"theorem","line":353,"name":"ByteArray.Iterator.sizeOf_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L353-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instSizeOfIterator\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instSizeOfIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"The size of an array iterator is the number of bytes remaining\\. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instSizeOfIterator","kind":"instance","line":349,"name":"ByteArray.instSizeOfIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L349-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.iter\"><span class=\"name\">ByteArray</span>.<span class=\"name\">iter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"Creates an iterator at the beginning of an array\\. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.iter","kind":"def","line":346,"name":"ByteArray.iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L346-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.mkIterator\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"Creates an iterator at the beginning of an array\\. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.mkIterator","kind":"def","line":342,"name":"ByteArray.mkIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L342-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabitedIterator\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instInhabitedIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabitedIterator","kind":"instance","line":339,"name":"ByteArray.instInhabitedIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L339-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabitedIterator.default\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instInhabitedIterator</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabitedIterator.default","kind":"def","line":339,"name":"ByteArray.instInhabitedIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L339-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.idx\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The current position.\n\nThis position is not necessarily valid for the array, for instance if one keeps calling\n`Iterator.next` when `Iterator.atEnd` is true. If the position is not valid, then the\ncurrent byte is `(default : UInt8)`. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.idx","kind":"def","line":338,"name":"ByteArray.Iterator.idx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L338-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.array\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">array</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"The array the iterator is for. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.array","kind":"def","line":332,"name":"ByteArray.Iterator.array","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L332-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.mk\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">array</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.mk","kind":"ctor","line":330,"name":"ByteArray.Iterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L330-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Iterator over the bytes (`UInt8`) of a `ByteArray`.\n\nTypically created by `arr.iter`, where `arr` is a `ByteArray`.\n\nAn iterator is *valid* if the position `i` is *valid* for the array `arr`, meaning `0 ≤ i ≤ arr.size`\n\nMost operations on iterators return arbitrary values if the iterator is not valid. The functions in\nthe `ByteArray.Iterator` API should rule out the creation of invalid iterators, with two exceptions:\n\n- `Iterator.next iter` is invalid if `iter` is already at the end of the array (`iter.atEnd` is\n  `true`)\n- `Iterator.forward iter n`/`Iterator.nextn iter n` is invalid if `n` is strictly greater than the\n  number of remaining bytes.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator","kind":"structure","line":315,"name":"ByteArray.Iterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L315-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldl\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"A left fold on `ByteArray` that iterates over an array from low to high indices, computing a\nrunning value\\.\n\nEach element of the array is combined with the value from the prior elements using a function\n`f`\\. The initial value `init` is the starting value before any elements have been\nprocessed\\.\n\n`ByteArray.foldlM` is a monadic variant of this function\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldl","kind":"def","line":300,"name":"ByteArray.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L300-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldlM.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldlM</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldlM.loop","kind":"def","line":286,"name":"ByteArray.foldlM.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L286-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldlM\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"A monadic left fold on `ByteArray` that iterates over an array from low to high indices,\ncomputing a running value\\.\n\nEach element of the array is combined with the value from the prior elements using a monadic\nfunction `f`\\. The initial value `init` is the starting value before any elements have\nbeen processed\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldlM","kind":"def","line":275,"name":"ByteArray.foldlM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L275-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldlMUnsafe.fold\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldlMUnsafe</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldlMUnsafe.fold","kind":"def","line":262,"name":"ByteArray.foldlMUnsafe.fold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L262-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldlMUnsafe\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldlMUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"An efficient implementation of a monadic left fold on for `ByteArray` that uses `USize`\nrather than `Nat` for indices\\.\n\nWe claim this unsafe implementation is correct because an array cannot have more than\n`USize.size` elements in our runtime\\. This is similar to the `Array` version\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldlMUnsafe","kind":"def","line":252,"name":"ByteArray.foldlMUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L252-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instForInUInt8\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instForInUInt8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instForInUInt8","kind":"instance","line":249,"name":"ByteArray.instForInUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L249-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.forIn.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">forIn</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.forIn.loop","kind":"def","line":237,"name":"ByteArray.forIn.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L237-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.forIn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"The reference implementation of `ForIn.forIn` for `ByteArray`\\.\n\nIn compiled code, this is replaced by the more efficient `ByteArray.forInUnsafe`\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.forIn","kind":"def","line":230,"name":"ByteArray.forIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L230-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.forInUnsafe.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">forInUnsafe</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.forInUnsafe.loop","kind":"def","line":220,"name":"ByteArray.forInUnsafe.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L220-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.forInUnsafe\"><span class=\"name\">ByteArray</span>.<span class=\"name\">forInUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"An efficient implementation of `ForIn.forIn` for `ByteArray` that uses `USize`\nrather than `Nat` for indices\\.\n\nWe claim this unsafe implementation is correct because an array cannot have more than\n`USize.size` elements in our runtime\\. This is similar to the `Array` version\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.forInUnsafe","kind":"def","line":210,"name":"ByteArray.forInUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L210-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.findIdx?.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">findIdx?</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.findIdx?.loop","kind":"def","line":201,"name":"ByteArray.findIdx?.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L201-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.findIdx?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">findIdx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Finds the index of the first byte in `a` for which `p` returns `true`\\. If no byte\nin `a` satisfies `p`, then the result is `none`\\.\n\nThe variant `findFinIdx?` additionally returns a proof that the found index is in bounds\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.findIdx?","kind":"def","line":194,"name":"ByteArray.findIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L194-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.findFinIdx?.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">findFinIdx?</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.findFinIdx?.loop","kind":"def","line":185,"name":"ByteArray.findFinIdx?.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L185-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.findFinIdx?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">findFinIdx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span></span></div></div>","info":{"doc":"Finds the index of the first byte in `a` for which `p` returns `true`\\. If no byte\nin `a` satisfies `p`, then the result is `none`\\.\n\nThe index is returned along with a proof that it is a valid index in the array\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.findFinIdx?","kind":"def","line":178,"name":"ByteArray.findFinIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L178-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.toList.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">toList</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.toList.loop","kind":"def","line":169,"name":"ByteArray.toList.loop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L169-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.toList\"><span class=\"name\">ByteArray</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"Converts a packed array of bytes to a linked list\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.toList","kind":"def","line":165,"name":"ByteArray.toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L165-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.fastAppend_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">fastAppend_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.fastAppend\">fastAppend</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.fastAppend_eq","kind":"theorem","line":161,"name":"ByteArray.fastAppend_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L161-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.append_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">append_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/ByteArray/Bootstrap.html#ByteArray.append\">append</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.append_eq","kind":"theorem","line":158,"name":"ByteArray.append_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L158-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instAppend\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instAppend","kind":"instance","line":155,"name":"ByteArray.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L155-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.append_eq_fastAppend\"><span class=\"name\">ByteArray</span>.<span class=\"name\">append_eq_fastAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Bootstrap.html#ByteArray.append\">ByteArray.append</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.fastAppend\">ByteArray.fastAppend</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.append_eq_fastAppend","kind":"theorem","line":147,"name":"ByteArray.append_eq_fastAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L147-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size_data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size_data</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.data\">data</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.size_data","kind":"theorem","line":143,"name":"ByteArray.size_data","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L143-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.fastAppend\"><span class=\"name\">ByteArray</span>.<span class=\"name\">fastAppend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.fastAppend","kind":"def","line":138,"name":"ByteArray.fastAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L138-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"Copies the bytes with indices `b` \\(inclusive\\) to `e` \\(exclusive\\) to a new\n`ByteArray`\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.extract","kind":"def","line":131,"name":"ByteArray.extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L131-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.copySlice\"><span class=\"name\">ByteArray</span>.<span class=\"name\">copySlice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">srcOff</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dest</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">destOff </span><span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exact</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"Copies the slice at `[srcOff, srcOff + len)` in `src` to `[destOff, destOff + len)` in\n`dest`, growing `dest` if necessary\\. If `exact` is `false`, the capacity\nwill be doubled when grown\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.copySlice","kind":"def","line":122,"name":"ByteArray.copySlice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L122-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.isEmpty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` when `s` contains zero bytes\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.isEmpty","kind":"def","line":116,"name":"ByteArray.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L116-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instHashable\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instHashable","kind":"instance","line":113,"name":"ByteArray.instHashable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L113-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.hash\"><span class=\"name\">ByteArray</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Computes a hash for a `ByteArray`\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.hash","kind":"opaque","line":107,"name":"ByteArray.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L107-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.uset\"><span class=\"name\">ByteArray</span>.<span class=\"name\">uset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> (<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>) <a href=\"./Init/Data/ByteArray/Basic.html#_auto._@.Init.Data.ByteArray.Basic.2154413398._hygCtx._hyg.9\">_auto✝</a></span>) → <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></span></div></div>","info":{"doc":"Replaces the byte at the given index\\.\n\nNo bounds check is performed, but the function requires a proof that the index is in bounds\\. This\nproof can usually be omitted, and will be synthesized automatically\\.\n\nThe array is modified in\\-place if there are no other references to it\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.uset","kind":"def","line":103,"name":"ByteArray.uset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L103-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>) <a href=\"./Init/Data/ByteArray/Basic.html#_auto._@.Init.Data.ByteArray.Basic.3103831426._hygCtx._hyg.10\">_auto✝</a></span>) → <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></span></div></div>","info":{"doc":"Replaces the byte at the given index\\.\n\nNo bounds check is performed, but the function requires a proof that the index is in bounds\\. This\nproof can usually be omitted, and will be synthesized automatically\\.\n\nThe array is modified in\\-place if there are no other references to it\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.set","kind":"def","line":91,"name":"ByteArray.set","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L91-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set!\"><span class=\"name\">ByteArray</span>.<span class=\"name\">set!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></span></span></div></div>","info":{"doc":"Replaces the byte at the given index\\.\n\nThe array is modified in\\-place if there are no other references to it\\.\n\nIf the index is out of bounds, the array is returned unmodified\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.set!","kind":"def","line":80,"name":"ByteArray.set!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L80-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instGetElemUSizeUInt8LtNatValToFinSize\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instGetElemUSizeUInt8LtNatValToFinSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <span class=\"fn\">fun (<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>) (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instGetElemUSizeUInt8LtNatValToFinSize","kind":"instance","line":77,"name":"ByteArray.instGetElemUSizeUInt8LtNatValToFinSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instGetElemNatUInt8LtSize\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instGetElemNatUInt8LtSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <span class=\"fn\">fun (<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>) (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instGetElemNatUInt8LtSize","kind":"instance","line":74,"name":"ByteArray.instGetElemNatUInt8LtSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L74-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.get\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> := by get_elem_tactic)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Retrieves the byte at the indicated index\\. Callers must prove that the index is in bounds\\.\n\nUse `uget` for a more efficient alternative or `get!` for a variant that panics if the\nindex is out of bounds\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.get","kind":"def","line":64,"name":"ByteArray.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L64-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.get!\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></span></div></div>","info":{"doc":"Retrieves the byte at the indicated index\\. Panics if the index is out of bounds\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.get!","kind":"def","line":57,"name":"ByteArray.get!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L57-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.uget\"><span class=\"name\">ByteArray</span>.<span class=\"name\">uget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span> := by get_elem_tactic)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Retrieves the byte at the indicated index\\. Callers must prove that the index is in bounds\\. The index\nis represented by a platform\\-specific fixed\\-width integer \\(either 32 or 64 bits\\)\\.\n\nBecause `USize` is big enough to address all memory on every platform that Lean supports, there are\nin practice no `ByteArray`s for which `uget` cannot retrieve all elements\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.uget","kind":"def","line":46,"name":"ByteArray.uget","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L46-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.usize\"><span class=\"name\">ByteArray</span>.<span class=\"name\">usize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Retrieves the size of the array as a platform\\-specific fixed\\-width integer\\.\n\nBecause `USize` is big enough to address all memory on every platform that Lean supports,\nthere are in practice no `ByteArray`s that have more elements that `USize` can count\\.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.usize","kind":"def","line":36,"name":"ByteArray.usize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L36-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instEmptyCollection\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instEmptyCollection","kind":"instance","line":33,"name":"ByteArray.instEmptyCollection","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L33-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabited\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabited","kind":"instance","line":30,"name":"ByteArray.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.mkEmpty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mkEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.mkEmpty","kind":"def","line":27,"name":"ByteArray.mkEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L27-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instDecidableEq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instDecidableEq","kind":"instance","line":24,"name":"ByteArray.instDecidableEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L24-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.ext_iff\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ByteArray.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#ByteArray.data\">data</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.ext_iff","kind":"theorem","line":22,"name":"ByteArray.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instBEq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instBEq","kind":"instance","line":20,"name":"ByteArray.instBEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instBEq.beq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instBEq</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> → <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instBEq.beq","kind":"def","line":20,"name":"ByteArray.instBEq.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/ByteArray/Basic.lean#L20-L20"}}],"imports":["Init.Data.UInt.Basic","Init.Data.UInt.BasicAux","Init.Data.Array.Extract"],"instances":[{"className":"BEq","name":"ByteArray.instBEq","typeNames":["ByteArray"]},{"className":"Decidable","name":"ByteArray.instDecidableEq","typeNames":["Eq"]},{"className":"Inhabited","name":"ByteArray.instInhabited","typeNames":["ByteArray"]},{"className":"EmptyCollection","name":"ByteArray.instEmptyCollection","typeNames":["ByteArray"]},{"className":"GetElem","name":"ByteArray.instGetElemNatUInt8LtSize","typeNames":["ByteArray","Nat","UInt8"]},{"className":"GetElem","name":"ByteArray.instGetElemUSizeUInt8LtNatValToFinSize","typeNames":["ByteArray","USize","UInt8"]},{"className":"Hashable","name":"ByteArray.instHashable","typeNames":["ByteArray"]},{"className":"Append","name":"ByteArray.instAppend","typeNames":["ByteArray"]},{"className":"ForIn","name":"ByteArray.instForInUInt8","typeNames":["ByteArray","UInt8"]},{"className":"Inhabited","name":"ByteArray.instInhabitedIterator","typeNames":["ByteArray.Iterator"]},{"className":"SizeOf","name":"ByteArray.instSizeOfIterator","typeNames":["ByteArray.Iterator"]},{"className":"ToString","name":"instToStringByteArray","typeNames":["ByteArray"]}],"name":"Init.Data.ByteArray.Basic"}