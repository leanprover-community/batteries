{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.toIntUnexpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">toIntUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">PrettyPrinter.Unexpander</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.toIntUnexpander","kind":"def","line":363,"name":"Lean.Grind.toIntUnexpander","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L363-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.of_sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Sub</span>.<span class=\"name\">of_sub_eq_add_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">_root_.Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">_root_.Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">_root_.Sub</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sub_eq_add_neg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\">isFinite</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add\">Add</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg\">Neg</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub\">Sub</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"Construct a `ToInt.Sub` instance from a `ToInt.Add` and `ToInt.Neg` instance and\na `sub_eq_add_neg` assumption. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.of_sub_eq_add_neg","kind":"def","line":347,"name":"Lean.Grind.ToInt.Sub.of_sub_eq_add_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L347-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.wrap_toInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">wrap_toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.wrap_toInt","kind":"theorem","line":341,"name":"Lean.Grind.ToInt.wrap_toInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L341-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.wrap_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Zero</span>.<span class=\"name\">wrap_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">_root_.Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero\">Zero</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.wrap_zero","kind":"theorem","line":335,"name":"Lean.Grind.ToInt.Zero.wrap_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L335-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT.lt_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LT</span>.<span class=\"name\">lt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">_root_.LT</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT\">LT</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></div></div>","info":{"doc":"The embedding is strictly monotone with respect to `<`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT.lt_iff","kind":"theorem","line":328,"name":"Lean.Grind.ToInt.LT.lt_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L328-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LT</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">_root_.LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt_iff</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT\">LT</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT.mk","kind":"ctor","line":326,"name":"Lean.Grind.ToInt.LT.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L326-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">_root_.LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers is strictly monotone.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LT","kind":"class","line":323,"name":"Lean.Grind.ToInt.LT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L323-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE.le_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LE</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE\">LE</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></div></div>","info":{"doc":"The embedding is monotone with respect to `≤`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE.le_iff","kind":"theorem","line":321,"name":"Lean.Grind.ToInt.LE.le_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L321-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LE</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le_iff</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE\">LE</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE.mk","kind":"ctor","line":319,"name":"Lean.Grind.ToInt.LE.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L319-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">LE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers is monotone.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.LE","kind":"class","line":316,"name":"Lean.Grind.ToInt.LE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L316-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div.toInt_div\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Div</span>.<span class=\"name\">toInt_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">_root_.Div</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div\">Div</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></div></div>","info":{"doc":"The embedding takes division to division (without needing to wrap into the range interval).\nOne might expect a `wrap` on the right hand side,\nbut in practice this stronger statement is usually true.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div.toInt_div","kind":"theorem","line":314,"name":"Lean.Grind.ToInt.Div.toInt_div","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L314-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Div</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">_root_.Div</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_div</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div\">Div</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div.mk","kind":"ctor","line":308,"name":"Lean.Grind.ToInt.Div.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L308-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">_root_.Div</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes division to division, wrapped into the range interval.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Div","kind":"class","line":305,"name":"Lean.Grind.ToInt.Div","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L305-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod.toInt_mod\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mod</span>.<span class=\"name\">toInt_mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">_root_.Mod</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod\">Mod</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></div></div>","info":{"doc":"The embedding takes modulo to modulo (without needing to wrap into the range interval).\nOne might expect a `wrap` on the right hand side,\nbut in practice this stronger statement is usually true.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod.toInt_mod","kind":"theorem","line":303,"name":"Lean.Grind.ToInt.Mod.toInt_mod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L303-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mod</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">_root_.Mod</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_mod</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod\">Mod</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod.mk","kind":"ctor","line":297,"name":"Lean.Grind.ToInt.Mod.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L297-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">_root_.Mod</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes modulo to modulo (without needing to wrap into the range interval).\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mod","kind":"class","line":294,"name":"Lean.Grind.ToInt.Mod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L294-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow.toInt_pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Pow</span>.<span class=\"name\">toInt_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#HPow\">HPow</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">Pow</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></div></div>","info":{"doc":"The embedding takes exponentiation to exponentiation, wrapped into the range interval. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow.toInt_pow","kind":"theorem","line":292,"name":"Lean.Grind.ToInt.Pow.toInt_pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L292-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Pow</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#HPow\">HPow</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_pow</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">Pow</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow.mk","kind":"ctor","line":290,"name":"Lean.Grind.ToInt.Pow.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L290-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#HPow\">HPow</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes exponentiation to exponentiation, wrapped into the range interval.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow","kind":"class","line":287,"name":"Lean.Grind.ToInt.Pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L287-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul.toInt_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mul</span>.<span class=\"name\">toInt_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">_root_.Mul</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul\">Mul</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"The embedding takes multiplication to multiplication, wrapped into the range interval. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul.toInt_mul","kind":"theorem","line":285,"name":"Lean.Grind.ToInt.Mul.toInt_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L285-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mul</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">_root_.Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_mul</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul\">Mul</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul.mk","kind":"ctor","line":283,"name":"Lean.Grind.ToInt.Mul.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">_root_.Mul</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes multiplication to multiplication, wrapped into the range interval.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Mul","kind":"class","line":280,"name":"Lean.Grind.ToInt.Mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L280-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.toInt_sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Sub</span>.<span class=\"name\">toInt_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">_root_.Sub</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub\">Sub</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"The embedding takes subtraction to subtraction, wrapped into the range interval. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.toInt_sub","kind":"theorem","line":278,"name":"Lean.Grind.ToInt.Sub.toInt_sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L278-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Sub</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">_root_.Sub</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_sub</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub\">Sub</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub.mk","kind":"ctor","line":276,"name":"Lean.Grind.ToInt.Sub.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L276-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">_root_.Sub</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes subtraction to subtraction, wrapped into the range interval.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Sub","kind":"class","line":273,"name":"Lean.Grind.ToInt.Sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L273-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg.toInt_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Neg</span>.<span class=\"name\">toInt_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">_root_.Neg</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg\">Neg</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span>)</span></div></div>","info":{"doc":"The embedding takes negation to negation, wrapped into the range interval. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg.toInt_neg","kind":"theorem","line":271,"name":"Lean.Grind.ToInt.Neg.toInt_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L271-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Neg</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">_root_.Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_neg</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg\">Neg</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg.mk","kind":"ctor","line":269,"name":"Lean.Grind.ToInt.Neg.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L269-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">_root_.Neg</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes negation to negation, wrapped into the range interval.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Neg","kind":"class","line":266,"name":"Lean.Grind.ToInt.Neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L266-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add.toInt_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Add</span>.<span class=\"name\">toInt_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">_root_.Add</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add\">Add</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"The embedding takes addition to addition, wrapped into the range interval. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add.toInt_add","kind":"theorem","line":264,"name":"Lean.Grind.ToInt.Add.toInt_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L264-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Add</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">_root_.Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_add</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add\">Add</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add.mk","kind":"ctor","line":262,"name":"Lean.Grind.ToInt.Add.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L262-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">_root_.Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes addition to addition, wrapped into the range interval.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Add","kind":"class","line":259,"name":"Lean.Grind.ToInt.Add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L259-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat.toInt_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toInt_ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">_root_.OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat\">OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>","info":{"doc":"The embedding takes `OfNat` to `OfNat`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat.toInt_ofNat","kind":"theorem","line":257,"name":"Lean.Grind.ToInt.OfNat.toInt_ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">_root_.OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_ofNat</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">n</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat\">OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat.mk","kind":"ctor","line":255,"name":"Lean.Grind.ToInt.OfNat.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L255-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">OfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">_root_.OfNat</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes numerals in the range interval to themselves.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.OfNat","kind":"class","line":252,"name":"Lean.Grind.ToInt.OfNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L252-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.toInt_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Zero</span>.<span class=\"name\">toInt_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">_root_.Zero</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero\">Zero</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"The embedding takes `0` to `0`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.toInt_zero","kind":"theorem","line":250,"name":"Lean.Grind.ToInt.Zero.toInt_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L250-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Zero</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">_root_.Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_zero</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero\">Zero</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero.mk","kind":"ctor","line":248,"name":"Lean.Grind.ToInt.Zero.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L248-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">Zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">_root_.Zero</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The embedding into the integers takes `0` to `0`.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Zero","kind":"class","line":245,"name":"Lean.Grind.ToInt.Zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L245-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt_mem\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">toInt_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">range</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">range</span></div></div>","info":{"doc":"The embedding function lands in the interval. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt_mem","kind":"theorem","line":243,"name":"Lean.Grind.ToInt.toInt_mem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt_inj\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">toInt_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">range</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\">↑</a><span class=\"fn\">y</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"The embedding function is injective. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt_inj","kind":"theorem","line":241,"name":"Lean.Grind.ToInt.toInt_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L241-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">range</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"The embedding function. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.toInt","kind":"def","line":239,"name":"Lean.Grind.ToInt.toInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L239-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_inj</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toInt</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">toInt</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInt_mem</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">toInt</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">range</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\">ToInt</a> <span class=\"fn\">α</span> <span class=\"fn\">range</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt.mk","kind":"ctor","line":237,"name":"Lean.Grind.ToInt.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L237-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ToInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"`ToInt α I` asserts that `α` can be embedded faithfully into an interval `I` in the integers.\n","docLink":"./Init/Grind/ToInt.html#Lean.Grind.ToInt","kind":"class","line":234,"name":"Lean.Grind.ToInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L234-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_wrap_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_eq_wrap_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\">co</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\">co</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> (<span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">lo</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_wrap_iff","kind":"theorem","line":224,"name":"Lean.Grind.IntInterval.wrap_eq_wrap_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L224-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_eq_bmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\">co</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>) <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">i</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_bmod","kind":"theorem","line":185,"name":"Lean.Grind.IntInterval.wrap_eq_bmod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L185-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\">isFinite</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">y</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_mul","kind":"theorem","line":165,"name":"Lean.Grind.IntInterval.wrap_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L165-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\">isFinite</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">y</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_add","kind":"theorem","line":152,"name":"Lean.Grind.IntInterval.wrap_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L152-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_self_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_eq_self_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty\">nonEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">i</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_eq_self_iff","kind":"theorem","line":131,"name":"Lean.Grind.IntInterval.wrap_eq_self_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L131-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_mem\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty\">nonEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">i</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_mem","kind":"theorem","line":110,"name":"Lean.Grind.IntInterval.wrap_mem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L110-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_wrap\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap_wrap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\">wrap</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap_wrap","kind":"theorem","line":106,"name":"Lean.Grind.IntInterval.wrap_wrap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L106-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">wrap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.wrap","kind":"def","line":98,"name":"Lean.Grind.IntInterval.wrap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L98-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty_of_mem\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">nonEmpty_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty\">nonEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty_of_mem","kind":"theorem","line":95,"name":"Lean.Grind.IntInterval.nonEmpty_of_mem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L95-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_ii\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem_ii</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ii\">ii</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#True\">True</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_ii","kind":"theorem","line":93,"name":"Lean.Grind.IntInterval.mem_ii","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_io\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem_io</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi </span><span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.io\">io</a> <span class=\"fn\">hi</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_io","kind":"theorem","line":92,"name":"Lean.Grind.IntInterval.mem_io","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_ci\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem_ci</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ci\">ci</a> <span class=\"fn\">lo</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_ci","kind":"theorem","line":91,"name":"Lean.Grind.IntInterval.mem_ci","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_co\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem_co</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\">co</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem_co","kind":"theorem","line":90,"name":"Lean.Grind.IntInterval.mem_co","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.instMembershipInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">instMembershipInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.instMembershipInt","kind":"instance","line":87,"name":"Lean.Grind.IntInterval.instMembershipInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L87-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.mem","kind":"def","line":80,"name":"Lean.Grind.IntInterval.mem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L80-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">isFinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.isFinite","kind":"def","line":73,"name":"Lean.Grind.IntInterval.isFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L73-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">nonEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.nonEmpty","kind":"def","line":66,"name":"Lean.Grind.IntInterval.nonEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L66-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.hi?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">hi?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"The upper bound of the interval, if finite. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.hi?","kind":"def","line":58,"name":"Lean.Grind.IntInterval.hi?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L58-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.lo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">lo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"The lower bound of the interval, if finite. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.lo?","kind":"def","line":50,"name":"Lean.Grind.IntInterval.lo?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L50-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">sint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>","info":{"doc":"The interval `[-2^(n-1), 2^(n-1))`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint","kind":"def","line":47,"name":"Lean.Grind.IntInterval.sint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L47-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.uint\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">uint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>","info":{"doc":"The interval `[0, 2^n)`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.uint","kind":"def","line":45,"name":"Lean.Grind.IntInterval.uint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instInhabitedIntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedIntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instInhabitedIntInterval","kind":"instance","line":41,"name":"Lean.Grind.instInhabitedIntInterval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instInhabitedIntInterval.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedIntInterval</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instInhabitedIntInterval.default","kind":"def","line":41,"name":"Lean.Grind.instInhabitedIntInterval.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instDecidableEqIntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instDecidableEqIntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instDecidableEqIntInterval","kind":"instance","line":41,"name":"Lean.Grind.instDecidableEqIntInterval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instDecidableEqIntInterval.decEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instDecidableEqIntInterval</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instDecidableEqIntInterval.decEq","kind":"def","line":41,"name":"Lean.Grind.instDecidableEqIntInterval.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instLawfulBEqIntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instLawfulBEqIntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instLawfulBEqIntInterval","kind":"instance","line":41,"name":"Lean.Grind.instLawfulBEqIntInterval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instReflBEqIntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instReflBEqIntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ReflBEq\">ReflBEq</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instReflBEqIntInterval","kind":"instance","line":41,"name":"Lean.Grind.instReflBEqIntInterval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instBEqIntInterval.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqIntInterval</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a> → <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instBEqIntInterval.beq","kind":"def","line":41,"name":"Lean.Grind.instBEqIntInterval.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.instBEqIntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqIntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/ToInt.html#Lean.Grind.instBEqIntInterval","kind":"instance","line":41,"name":"Lean.Grind.instBEqIntInterval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ii\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">ii</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>","info":{"doc":"The infinite interval `(-∞, ∞)`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ii","kind":"ctor","line":39,"name":"Lean.Grind.IntInterval.ii","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.io\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">io</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>","info":{"doc":"The half-infinite interval `(-∞, hi)`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.io","kind":"ctor","line":37,"name":"Lean.Grind.IntInterval.io","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ci\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">ci</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>","info":{"doc":"The half-infinite interval `[lo, ∞)`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.ci","kind":"ctor","line":35,"name":"Lean.Grind.IntInterval.ci","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L35-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span>.<span class=\"name\">co</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\">IntInterval</a></div></div>","info":{"doc":"The finite interval `[lo, hi)`. ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.co","kind":"ctor","line":33,"name":"Lean.Grind.IntInterval.co","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L33-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">IntInterval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An interval in the integers (either finite, half-infinite, or infinite). ","docLink":"./Init/Grind/ToInt.html#Lean.Grind.IntInterval","kind":"inductive","line":31,"name":"Lean.Grind.IntInterval","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/ToInt.lean#L31-L41"}}],"imports":["Init.Data.Int.DivMod.Lemmas","Init.LawfulBEqTactics"],"instances":[{"className":"BEq","name":"Lean.Grind.instBEqIntInterval","typeNames":["Lean.Grind.IntInterval"]},{"className":"ReflBEq","name":"Lean.Grind.instReflBEqIntInterval","typeNames":["Lean.Grind.IntInterval"]},{"className":"LawfulBEq","name":"Lean.Grind.instLawfulBEqIntInterval","typeNames":["Lean.Grind.IntInterval"]},{"className":"Decidable","name":"Lean.Grind.instDecidableEqIntInterval","typeNames":["Eq"]},{"className":"Inhabited","name":"Lean.Grind.instInhabitedIntInterval","typeNames":["Lean.Grind.IntInterval"]},{"className":"Membership","name":"Lean.Grind.IntInterval.instMembershipInt","typeNames":["Int","Lean.Grind.IntInterval"]}],"name":"Init.Grind.ToInt"}