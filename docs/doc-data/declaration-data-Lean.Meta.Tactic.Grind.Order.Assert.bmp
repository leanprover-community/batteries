{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Assert.html#Lean.Meta.Grind.Order.processNewEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">processNewEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Assert.html#Lean.Meta.Grind.Order.processNewEq","kind":"def","line":291,"name":"Lean.Meta.Grind.Order.processNewEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Assert.lean#L291-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Assert.html#Lean.Meta.Grind.Order.propagateEqFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">propagateEqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Assert.html#Lean.Meta.Grind.Order.propagateEqFalse","kind":"def","line":84,"name":"Lean.Meta.Grind.Order.propagateEqFalse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Assert.lean#L84-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Assert.html#Lean.Meta.Grind.Order.propagateEqTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">propagateEqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Assert.html#Lean.Meta.Grind.Order.propagateEqTrue","kind":"def","line":71,"name":"Lean.Meta.Grind.Order.propagateEqTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Assert.lean#L71-L82"}}],"imports":["Lean.Meta.Tactic.Grind.Order.OrderM","Init.Grind.Propagator","Init.Grind.Order","Lean.Meta.Tactic.Grind.PropagatorAttr","Lean.Meta.Tactic.Grind.Order.Util","Lean.Meta.Tactic.Grind.Order.Proof"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Order.Assert"}