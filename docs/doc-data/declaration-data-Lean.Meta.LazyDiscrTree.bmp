{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">findMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntry</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">droppedKeys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constantsPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"`findMatches` searches for entries in a lazily initialized discriminator tree.\n\n* `ext` should be an environment extension with an IO.Ref for caching the import lazy\n   discriminator tree.\n* `addEntry` is the function for creating discriminator tree entries from constants.\n* `droppedKeys` contains keys we do not want to consider when searching for matches.\n  It is used for dropping very general keys.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findMatches","kind":"def","line":1075,"name":"Lean.Meta.LazyDiscrTree.findMatches","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L1075-L1092"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findMatchesExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">findMatchesExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleTreeRef</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntry</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">droppedKeys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constantsPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">adjustResult</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"`findMatchesExt` searches for entries in a lazily initialized discriminator tree.\n\nIt provides some additional capabilities beyond `findMatches` to adjust results\nbased on priority and cache module declarations\n\n* `modulesTreeRef` points to the discriminator tree for local environment.\n  Used for caching and created by `createLocalTree`.\n* `ext` should be an environment extension with an IO.Ref for caching the import lazy\n   discriminator tree.\n* `addEntry` is the function for creating discriminator tree entries from constants.\n* `droppedKeys` contains keys we do not want to consider when searching for matches.\n  It is used for dropping very general keys.\n* `constantsPerTask` stores number of constants in imported modules used to\n  decide when to create new task.\n* `adjustResult` takes the priority and value to produce a final result.\n* `ty` is the expression type.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findMatchesExt","kind":"def","line":1043,"name":"Lean.Meta.LazyDiscrTree.findMatchesExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L1043-L1073"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findModuleMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">findModuleMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleRef</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Returns candidates from this module in this module that match the expression.\n\n* `moduleRef` is a references to a lazy discriminator tree only containing\nthis module's definitions.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findModuleMatches","kind":"def","line":1030,"name":"Lean.Meta.LazyDiscrTree.findModuleMatches","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L1030-L1041"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createModuleTreeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createModuleTreeRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entriesForConst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">droppedKeys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates reference for lazy discriminator tree that only contains this module's definitions.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createModuleTreeRef","kind":"def","line":1020,"name":"Lean.Meta.LazyDiscrTree.createModuleTreeRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L1020-L1028"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createModuleDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createModuleDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entriesForConst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Create a discriminator tree for current module declarations. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createModuleDiscrTree","kind":"def","line":1008,"name":"Lean.Meta.LazyDiscrTree.createModuleDiscrTree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L1008-L1018"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.ref","kind":"def","line":1006,"name":"Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L1006-L1006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">ModuleDiscrTreeRef</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.mk","kind":"ctor","line":1005,"name":"Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L1005-L1005"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ModuleDiscrTreeRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A discriminator tree for the current module's declarations only.\n\nNote. We use different discriminator trees for imported and current module\ndeclarations since imported declarations are typically much more numerous but\nnot changed after the environment is created.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef","kind":"structure","line":998,"name":"Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L998-L1006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findImportMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">findImportMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntry</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">droppedKeys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constantsPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.findImportMatches","kind":"def","line":977,"name":"Lean.Meta.LazyDiscrTree.findImportMatches","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L977-L996"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createTreeCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createTreeCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a></div></div>","info":{"doc":"Creates the core context used for initializing a tree using the current context. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createTreeCtx","kind":"def","line":966,"name":"Lean.Meta.LazyDiscrTree.createTreeCtx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L966-L975"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createImportedDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constantsPerTask</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Create a discriminator tree for imported environment. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedDiscrTree","kind":"def","line":934,"name":"Lean.Meta.LazyDiscrTree.createImportedDiscrTree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L934-L964"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.logImportFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">logImportFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.logImportFailure","kind":"def","line":931,"name":"Lean.Meta.LazyDiscrTree.logImportFailure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L931-L932"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKeys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">dropKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKeys","kind":"def","line":928,"name":"Lean.Meta.LazyDiscrTree.dropKeys","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L928-L929"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createLocalPreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createLocalPreDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData\">ImportData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createLocalPreDiscrTree","kind":"def","line":914,"name":"Lean.Meta.LazyDiscrTree.createLocalPreDiscrTree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L914-L926"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getChildNgen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">getChildNgen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\">MonadNameGenerator</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getChildNgen","kind":"def","line":908,"name":"Lean.Meta.LazyDiscrTree.getChildNgen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L908-L912"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.combineGet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">combineGet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tasks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Get the results of each task and merge using combining function ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.combineGet","kind":"def","line":904,"name":"Lean.Meta.LazyDiscrTree.combineGet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L904-L906"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedEnvironmentSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">createImportedEnvironmentSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.createImportedEnvironmentSeq","kind":"def","line":889,"name":"Lean.Meta.LazyDiscrTree.createImportedEnvironmentSeq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L889-L902"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.loadImportedModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">loadImportedModule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData\">ImportData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cacheRef</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Cache</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tree</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mname</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mdata</span> : <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.loadImportedModule","kind":"opaque","line":871,"name":"Lean.Meta.LazyDiscrTree.loadImportedModule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L871-L887"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.toFlat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">toFlat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData\">ImportData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tree</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.toFlat","kind":"def","line":866,"name":"Lean.Meta.LazyDiscrTree.toFlat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L866-L869"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">instAppend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.instAppend","kind":"instance","line":861,"name":"Lean.Meta.LazyDiscrTree.InitResults.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L861-L862"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Combine two initial results. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.append","kind":"def","line":855,"name":"Lean.Meta.LazyDiscrTree.InitResults.append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L855-L859"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedInitResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedInitResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedInitResults","kind":"instance","line":850,"name":"Lean.Meta.LazyDiscrTree.instInhabitedInitResults","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L850-L851"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.errors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">errors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.errors","kind":"def","line":848,"name":"Lean.Meta.LazyDiscrTree.InitResults.errors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L848-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.tree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">tree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.tree","kind":"def","line":847,"name":"Lean.Meta.LazyDiscrTree.InitResults.tree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L847-L847"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tree</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errors</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\">InitResults</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults.mk","kind":"ctor","line":846,"name":"Lean.Meta.LazyDiscrTree.InitResults.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L846-L846"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitResults</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Contains the pre discrimination tree and any errors occurring during initialization of\nthe library search tree.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitResults","kind":"structure","line":842,"name":"Lean.Meta.LazyDiscrTree.InitResults","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L842-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.addConstImportData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">addConstImportData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cctx</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData\">ImportData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cacheRef</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Cache</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tree</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constInfo</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.addConstImportData","kind":"def","line":812,"name":"Lean.Meta.LazyDiscrTree.addConstImportData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L812-L840"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.blacklistInsertion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">blacklistInsertion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.blacklistInsertion","kind":"def","line":805,"name":"Lean.Meta.LazyDiscrTree.blacklistInsertion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L805-L810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Cache</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.empty","kind":"def","line":803,"name":"Lean.Meta.LazyDiscrTree.Cache.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L803-L803"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.meta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">meta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.Cache\">Meta.Cache</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.meta","kind":"def","line":801,"name":"Lean.Meta.LazyDiscrTree.Cache.meta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L801-L801"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Core.Cache</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.core","kind":"def","line":800,"name":"Lean.Meta.LazyDiscrTree.Cache.core","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L800-L800"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.ngen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">ngen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.ngen","kind":"def","line":799,"name":"Lean.Meta.LazyDiscrTree.Cache.ngen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L799-L799"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">core</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Cache\">Core.Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«meta»</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.Cache\">Meta.Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\">Cache</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache.mk","kind":"ctor","line":798,"name":"Lean.Meta.LazyDiscrTree.Cache.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L798-L798"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Cache","kind":"structure","line":798,"name":"Lean.Meta.LazyDiscrTree.Cache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L798-L801"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData.new\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportData</span>.<span class=\"name\">new</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData\">ImportData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData.new","kind":"def","line":794,"name":"Lean.Meta.LazyDiscrTree.ImportData.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L794-L796"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData.errors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportData</span>.<span class=\"name\">errors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData\">ImportData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData.errors","kind":"def","line":792,"name":"Lean.Meta.LazyDiscrTree.ImportData.errors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L792-L792"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errors</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData\">ImportData</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData.mk","kind":"ctor","line":791,"name":"Lean.Meta.LazyDiscrTree.ImportData.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L791-L791"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Information generation from imported modules. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportData","kind":"structure","line":790,"name":"Lean.Meta.LazyDiscrTree.ImportData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L790-L792"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure.exception\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportFailure</span>.<span class=\"name\">exception</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a></div></div>","info":{"doc":"Exception that triggers error. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure.exception","kind":"def","line":788,"name":"Lean.Meta.LazyDiscrTree.ImportFailure.exception","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L788-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportFailure</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Constant that import failed on. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure.const","kind":"def","line":786,"name":"Lean.Meta.LazyDiscrTree.ImportFailure.const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L786-L786"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure.module\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportFailure</span>.<span class=\"name\">module</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Module with constant that import failed on. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure.module","kind":"def","line":784,"name":"Lean.Meta.LazyDiscrTree.ImportFailure.module","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L784-L784"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportFailure</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">module </span><span class=\"fn\">const</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exception</span> : <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\">ImportFailure</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure.mk","kind":"ctor","line":782,"name":"Lean.Meta.LazyDiscrTree.ImportFailure.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L782-L782"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">ImportFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Information about a failed import. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ImportFailure","kind":"structure","line":781,"name":"Lean.Meta.LazyDiscrTree.ImportFailure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L781-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">mkSubEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates an entry for a subterm of an initial entry.\n\nThis is slightly more efficient than using `fromExpr` on subterms since it avoids a redundant call\nto `whnf`.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry","kind":"def","line":767,"name":"Lean.Meta.LazyDiscrTree.InitEntry.mkSubEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L767-L777"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.fromExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">fromExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Constructs an initial entry from an expression and value.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.fromExpr","kind":"def","line":757,"name":"Lean.Meta.LazyDiscrTree.InitEntry.fromExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L757-L765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.entry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">entry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns rest of entry for later insertion. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.entry","kind":"def","line":753,"name":"Lean.Meta.LazyDiscrTree.InitEntry.entry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L753-L753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">key</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></div></div>","info":{"doc":"Return root key for an entry. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.key","kind":"def","line":751,"name":"Lean.Meta.LazyDiscrTree.InitEntry.key","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L751-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\">InitEntry</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry.mk","kind":"ctor","line":749,"name":"Lean.Meta.LazyDiscrTree.InitEntry.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L749-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">InitEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Initial entry in lazy discrimination tree ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.InitEntry","kind":"structure","line":748,"name":"Lean.Meta.LazyDiscrTree.InitEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L748-L753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppend\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">instAppend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppend","kind":"instance","line":743,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L743-L744"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Merge two discrimination trees. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.append","kind":"def","line":733,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L733-L741"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.toLazy\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">toLazy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Convert a pre-discrimination tree to a lazy discrimination tree. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.toLazy","kind":"def","line":726,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.toLazy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L726-L731"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.push\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Add an entry to the pre-discrimination tree.","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.push","kind":"def","line":722,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L722-L724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.modifyAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">modifyAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.modifyAt","kind":"def","line":712,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.modifyAt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L712-L720"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedPreDiscrTree</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree.default","kind":"def","line":708,"name":"Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L708-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedPreDiscrTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","kind":"instance","line":708,"name":"Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L708-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.tries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">tries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>","info":{"doc":"Lazy entries for root of trie. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.tries","kind":"def","line":707,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.tries","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L707-L707"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.roots\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">roots</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Maps keys to index in tries array. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.roots","kind":"def","line":705,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.roots","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L705-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">roots</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\">PreDiscrTree</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree.mk","kind":"ctor","line":703,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L703-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PreDiscrTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Structure for quickly initializing a lazy discrimination tree with a large number\nof elements using concurrent functions for generating entries.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PreDiscrTree","kind":"structure","line":699,"name":"Lean.Meta.LazyDiscrTree.PreDiscrTree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L699-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">getMatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></div></div>","info":{"doc":"Find values that match `e` in `d`.\n\nThe results are ordered so that the longest matches in terms of number of\nnon-star keys are first with ties going to earlier operators first.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatch","kind":"def","line":690,"name":"Lean.Meta.LazyDiscrTree.getMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L690-L697"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatchCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">getMatchCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Find values that match `e` in `root`.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatchCore","kind":"def","line":671,"name":"Lean.Meta.LazyDiscrTree.getMatchCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L671-L688"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.pushRootCase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">pushRootCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.pushRootCase","kind":"def","line":665,"name":"Lean.Meta.LazyDiscrTree.pushRootCase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L665-L669"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getStarResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">getStarResult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getStarResult","kind":"def","line":654,"name":"Lean.Meta.LazyDiscrTree.getStarResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L654-L660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatchLoop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">getMatchLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Evaluate all partial matches and add resulting matches to `MatchResult`.\n\nThe partial matches are stored in an array that is used as a stack. When adding\nmultiple partial matches to explore next, to ensure the order of results matches\nuser expectations, this code must add paths we want to prioritize and return\nresults earlier are added last.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.getMatchLoop","kind":"opaque","line":600,"name":"Lean.Meta.LazyDiscrTree.getMatchLoop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L600-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedPartialMatch</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch.default","kind":"def","line":598,"name":"Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L598-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedPartialMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch","kind":"instance","line":598,"name":"Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L598-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.c\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span>.<span class=\"name\">c</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.c","kind":"def","line":597,"name":"Lean.Meta.LazyDiscrTree.PartialMatch.c","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L597-L597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.score\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span>.<span class=\"name\">score</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.score","kind":"def","line":595,"name":"Lean.Meta.LazyDiscrTree.PartialMatch.score","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L595-L595"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.todo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span>.<span class=\"name\">todo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.todo","kind":"def","line":593,"name":"Lean.Meta.LazyDiscrTree.PartialMatch.todo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L593-L593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">score</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\">PartialMatch</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch.mk","kind":"ctor","line":591,"name":"Lean.Meta.LazyDiscrTree.PartialMatch.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L591-L591"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">PartialMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.PartialMatch","kind":"structure","line":591,"name":"Lean.Meta.LazyDiscrTree.PartialMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L591-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.appendResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">appendResults</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mr</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.appendResults","kind":"def","line":578,"name":"Lean.Meta.LazyDiscrTree.MatchResult.appendResults","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L578-L579"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.appendResultsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">appendResultsAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mr</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Append results to array\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.appendResultsAux","kind":"def","line":566,"name":"Lean.Meta.LazyDiscrTree.MatchResult.appendResultsAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L566-L576"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mr</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Number of elements in result\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.size","kind":"def","line":560,"name":"Lean.Meta.LazyDiscrTree.MatchResult.size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L560-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.push\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">score</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.push","kind":"def","line":546,"name":"Lean.Meta.LazyDiscrTree.MatchResult.push","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L546-L558"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.elts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">elts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>","info":{"doc":"The elements in the match result.\n\nThe top-level array represents an array from `score` values to the\nresults with that score. A `score` is the number of non-star matches\nin a pattern against the term, and thus bounded by the size of the\nterm being matched against.  The elements of this array are themselves\narrays of non-empty arrays so that we can defer concatenating results until\nneeded.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.elts","kind":"def","line":542,"name":"Lean.Meta.LazyDiscrTree.MatchResult.elts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L542-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\">MatchResult</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult.mk","kind":"ctor","line":531,"name":"Lean.Meta.LazyDiscrTree.MatchResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L531-L531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A match result contains the terms formed from matching a term against\npatterns in the discrimination tree.\n\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchResult","kind":"structure","line":526,"name":"Lean.Meta.LazyDiscrTree.MatchResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L526-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">dropKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"This drops a specific key from the lazy discrimination tree so that\nall the entries matching that key exactly are removed.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKey","kind":"def","line":515,"name":"Lean.Meta.LazyDiscrTree.dropKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L515-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKeyAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">dropKeyAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rest</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.dropKeyAux","kind":"def","line":502,"name":"Lean.Meta.LazyDiscrTree.dropKeyAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L502-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.evalNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">evalNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.evalNode","kind":"def","line":491,"name":"Lean.Meta.LazyDiscrTree.evalNode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L491-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.evalLazyEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">evalLazyEntries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">values</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">starIdx</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">children</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></div></div>","info":{"doc":"This evaluates all lazy entries in a trie and updates `values`, `starIdx`, and `children`\naccordingly.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.evalLazyEntries","kind":"def","line":478,"name":"Lean.Meta.LazyDiscrTree.evalLazyEntries","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L478-L489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.evalLazyEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">evalLazyEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.evalLazyEntry","kind":"def","line":449,"name":"Lean.Meta.LazyDiscrTree.evalLazyEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L449-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.addLazyEntryToTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">addLazyEntryToTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add a lazy entry to an existing trie. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.addLazyEntryToTrie","kind":"def","line":445,"name":"Lean.Meta.LazyDiscrTree.addLazyEntryToTrie","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L445-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.newTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">newTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState\">MonadState</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span>)</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span></div></div>","info":{"doc":"Create a new trie with the given lazy entry. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.newTrie","kind":"def","line":441,"name":"Lean.Meta.LazyDiscrTree.newTrie","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L441-L443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.setTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">setTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.setTrie","kind":"def","line":438,"name":"Lean.Meta.LazyDiscrTree.setTrie","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L438-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.runMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">runMatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\">MatchM</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.runMatch","kind":"def","line":433,"name":"Lean.Meta.LazyDiscrTree.runMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L433-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchM","kind":"def","line":430,"name":"Lean.Meta.LazyDiscrTree.MatchM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L430-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.targetPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">targetPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span></div></div>","info":{"doc":"Create a key path from an expression we are matching against.\n\nThis should have mvars instantiated where feasible.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.targetPath","kind":"def","line":417,"name":"Lean.Meta.LazyDiscrTree.targetPath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L417-L427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.patternPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">patternPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span></div></div>","info":{"doc":"Create a key path from an expression using the function used for patterns.\n\nThis differs from Lean.Meta.DiscrTree.mkPath and targetPath in that the expression\nshould uses free variables rather than meta-variables for holes.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.patternPath","kind":"def","line":406,"name":"Lean.Meta.LazyDiscrTree.patternPath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L406-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.buildPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">buildPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.buildPath","kind":"opaque","line":397,"name":"Lean.Meta.LazyDiscrTree.buildPath","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L397-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.rootKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">rootKey</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"Get the root key and rest of terms of an expression using the specified config.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.rootKey","kind":"def","line":391,"name":"Lean.Meta.LazyDiscrTree.rootKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L391-L395"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.initCapacity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">initCapacity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Initial capacity for key and todo vector. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.initCapacity","kind":"def","line":388,"name":"Lean.Meta.LazyDiscrTree.initCapacity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L388-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.pushArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">pushArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"Specialization of Lean.Meta.DiscrTree.pushArgs\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.pushArgs","kind":"def","line":334,"name":"Lean.Meta.LazyDiscrTree.pushArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L334-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabited","kind":"instance","line":329,"name":"Lean.Meta.LazyDiscrTree.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L329-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.roots\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">roots</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span></div></div>","info":{"doc":"Map from discriminator trie roots to the index. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.roots","kind":"def","line":323,"name":"Lean.Meta.LazyDiscrTree.roots","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L323-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.tries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">tries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Backing array of trie entries.  Should be owned by this trie. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.tries","kind":"def","line":321,"name":"Lean.Meta.LazyDiscrTree.tries","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L321-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">roots</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\">LazyDiscrTree</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.mk","kind":"ctor","line":319,"name":"Lean.Meta.LazyDiscrTree.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L319-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`LazyDiscrTree` is a variant of the discriminator tree datatype\n`DiscrTree` in Lean core that is designed to be efficiently\ninitializable with a large number of patterns.  This is useful\nin contexts such as searching an entire Lean environment for\nexpressions that match a pattern.\n\nLazy discriminator trees achieve good performance by minimizing\nthe amount of work that is done up front to build the discriminator\ntree.  When first adding patterns to the tree, only the root\ndiscriminator key is computed and processing the remaining\nterms is deferred until demanded by a match.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree","kind":"structure","line":306,"name":"Lean.Meta.LazyDiscrTree","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L306-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.pushPending\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">pushPending</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"Push lazy entry to trie. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.pushPending","kind":"def","line":300,"name":"Lean.Meta.LazyDiscrTree.Trie.pushPending","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L300-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instEmptyCollectionTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","kind":"instance","line":298,"name":"Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L298-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedTrie.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedTrie</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedTrie.default","kind":"def","line":296,"name":"Lean.Meta.LazyDiscrTree.instInhabitedTrie.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L296-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedTrie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedTrie</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedTrie","kind":"instance","line":296,"name":"Lean.Meta.LazyDiscrTree.instInhabitedTrie","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L296-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.pending\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">pending</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Lazy entries at this trie that are not processed. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.pending","kind":"def","line":295,"name":"Lean.Meta.LazyDiscrTree.Trie.pending","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L295-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.children\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">children</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span></div></div>","info":{"doc":"Following matches based on key of trie. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.children","kind":"def","line":293,"name":"Lean.Meta.LazyDiscrTree.Trie.children","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.star\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></div></div>","info":{"doc":"Index of trie matching star. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.star","kind":"def","line":291,"name":"Lean.Meta.LazyDiscrTree.Trie.star","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L291-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.values\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Values for matches ending at this trie. ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.values","kind":"def","line":289,"name":"Lean.Meta.LazyDiscrTree.Trie.values","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L289-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.node\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Trie</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">values</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">star</span> : <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">children</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\">TrieIndex</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pending</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\">LazyEntry</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie.node","kind":"ctor","line":287,"name":"Lean.Meta.LazyDiscrTree.Trie.node","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L287-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Trie</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Discrimination tree trie. See `LazyDiscrTree`.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Trie","kind":"structure","line":283,"name":"Lean.Meta.LazyDiscrTree.Trie","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L283-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">TrieIndex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Index identifying trie in a discrimination tree.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.TrieIndex","kind":"def","line":277,"name":"Lean.Meta.LazyDiscrTree.TrieIndex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L277-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">LazyEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"An unprocessed entry in the lazy discrimination tree.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.LazyEntry","kind":"def","line":272,"name":"Lean.Meta.LazyDiscrTree.LazyEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L272-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.getMatchKeyArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">getMatchKeyArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.getMatchKeyArgs","kind":"def","line":266,"name":"Lean.Meta.LazyDiscrTree.MatchClone.getMatchKeyArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L266-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.getKeyArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">getKeyArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isMatch </span><span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.getKeyArgs","kind":"def","line":191,"name":"Lean.Meta.LazyDiscrTree.MatchClone.getKeyArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L191-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.elimLooseBVarsByBeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">elimLooseBVarsByBeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Eliminate loose bound variables via beta-reduction.\n\nThis is primarily used to reduce pi-terms `∀(x : P), T` into\nnon-dependent functions `P → T`.  The latter has a more specific\ndiscrimination tree key `.arrow..` and this improves the accuracy of the\ndiscrimination tree.\n\nClone of `Lean.Meta.DiscrTree.elimLooseBVarsByBeta`.  See it for more\ndiscussion.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.elimLooseBVarsByBeta","kind":"def","line":170,"name":"Lean.Meta.LazyDiscrTree.MatchClone.elimLooseBVarsByBeta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L170-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.shouldAddAsStar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">shouldAddAsStar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.shouldAddAsStar","kind":"def","line":167,"name":"Lean.Meta.LazyDiscrTree.MatchClone.shouldAddAsStar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L167-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.isNatOffset\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">isNatOffset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is one of the following\n- `Nat.add _ k` where `isNumeral k`\n- `Add.add Nat _ _ k` where `isNumeral k`\n- `HAdd.hAdd _ Nat _ _ k` where `isNumeral k`\n- `Nat.succ _`\nThis function assumes `e.isAppOf fName`\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.isNatOffset","kind":"def","line":144,"name":"Lean.Meta.LazyDiscrTree.MatchClone.isNatOffset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L144-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.isNatType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">isNatType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.isNatType","kind":"def","line":141,"name":"Lean.Meta.LazyDiscrTree.MatchClone.isNatType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.toNatLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">toNatLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Literal\">Literal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.toNatLit?","kind":"def","line":116,"name":"Lean.Meta.LazyDiscrTree.MatchClone.toNatLit?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L116-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.isNumeral\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">isNumeral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `e` is one of the following\n- A nat literal (numeral)\n- `Nat.zero`\n- `Nat.succ x` where `isNumeral x`\n- `OfNat.ofNat _ x _` where `isNumeral x` ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.isNumeral","kind":"opaque","line":98,"name":"Lean.Meta.LazyDiscrTree.MatchClone.isNumeral","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L98-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.pushArgsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">pushArgsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">infos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo\">ParamInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.pushArgsAux","kind":"opaque","line":90,"name":"Lean.Meta.LazyDiscrTree.MatchClone.pushArgsAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L90-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.ignoreArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">ignoreArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">infos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo\">ParamInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns true iff the argument should be treated as a \"wildcard\" by the\ndiscrimination tree.\n\nThis includes proofs, instance implicit arguments, implicit arguments,\nand terms of the form `noIndexing t`\n\nThis is a clone of `Lean.Meta.DiscrTree.ignoreArg` and mainly added to\navoid coupling between `DiscrTree` and `LazyDiscrTree` while both are\npotentially subject to independent changes.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.ignoreArg","kind":"def","line":67,"name":"Lean.Meta.LazyDiscrTree.MatchClone.ignoreArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L67-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.tmpStar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">tmpStar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.tmpStar","kind":"def","line":65,"name":"Lean.Meta.LazyDiscrTree.MatchClone.tmpStar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.tmpMVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">MatchClone</span>.<span class=\"name\">tmpMVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.MatchClone.tmpMVarId","kind":"def","line":64,"name":"Lean.Meta.LazyDiscrTree.MatchClone.tmpMVarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.instHashable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.instHashable","kind":"instance","line":57,"name":"Lean.Meta.LazyDiscrTree.Key.instHashable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"Hash function ","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.hash","kind":"def","line":47,"name":"Lean.Meta.LazyDiscrTree.Key.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L47-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instReprKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instReprKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instReprKey","kind":"instance","line":43,"name":"Lean.Meta.LazyDiscrTree.instReprKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instReprKey.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instReprKey</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instReprKey.repr","kind":"def","line":43,"name":"Lean.Meta.LazyDiscrTree.instReprKey.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instBEqKey.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instBEqKey</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instBEqKey.beq","kind":"def","line":43,"name":"Lean.Meta.LazyDiscrTree.instBEqKey.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instBEqKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instBEqKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instBEqKey","kind":"instance","line":43,"name":"Lean.Meta.LazyDiscrTree.instBEqKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedKey.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedKey</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedKey.default","kind":"def","line":43,"name":"Lean.Meta.LazyDiscrTree.instInhabitedKey.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">instInhabitedKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.instInhabitedKey","kind":"instance","line":43,"name":"Lean.Meta.LazyDiscrTree.instInhabitedKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.proj","kind":"ctor","line":42,"name":"Lean.Meta.LazyDiscrTree.Key.proj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.arrow\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">arrow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.arrow","kind":"ctor","line":41,"name":"Lean.Meta.LazyDiscrTree.Key.arrow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.other","kind":"ctor","line":40,"name":"Lean.Meta.LazyDiscrTree.Key.other","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.star\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.star","kind":"ctor","line":39,"name":"Lean.Meta.LazyDiscrTree.Key.star","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.lit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">lit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Literal\">Literal</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.lit","kind":"ctor","line":38,"name":"Lean.Meta.LazyDiscrTree.Key.lit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.fvar","kind":"ctor","line":37,"name":"Lean.Meta.LazyDiscrTree.Key.fvar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">Key</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key.const","kind":"ctor","line":36,"name":"Lean.Meta.LazyDiscrTree.Key.const","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LazyDiscrTree</span>.<span class=\"name\">Key</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Discrimination tree key.\n","docLink":"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key","kind":"inductive","line":32,"name":"Lean.Meta.LazyDiscrTree.Key","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/LazyDiscrTree.lean#L32-L43"}}],"imports":["Lean.Meta.CompletionName","Lean.Meta.DiscrTree"],"instances":[{"className":"Inhabited","name":"Lean.Meta.LazyDiscrTree.instInhabitedKey","typeNames":["Lean.Meta.LazyDiscrTree.Key"]},{"className":"BEq","name":"Lean.Meta.LazyDiscrTree.instBEqKey","typeNames":["Lean.Meta.LazyDiscrTree.Key"]},{"className":"Repr","name":"Lean.Meta.LazyDiscrTree.instReprKey","typeNames":["Lean.Meta.LazyDiscrTree.Key"]},{"className":"Hashable","name":"Lean.Meta.LazyDiscrTree.Key.instHashable","typeNames":["Lean.Meta.LazyDiscrTree.Key"]},{"className":"Inhabited","name":"Lean.Meta.LazyDiscrTree.instInhabitedTrie","typeNames":["Lean.Meta.LazyDiscrTree.Trie"]},{"className":"EmptyCollection","name":"Lean.Meta.LazyDiscrTree.instEmptyCollectionTrie","typeNames":["Lean.Meta.LazyDiscrTree.Trie"]},{"className":"Inhabited","name":"Lean.Meta.LazyDiscrTree.instInhabited","typeNames":["Lean.Meta.LazyDiscrTree"]},{"className":"Inhabited","name":"Lean.Meta.LazyDiscrTree.instInhabitedPartialMatch","typeNames":["Lean.Meta.LazyDiscrTree.PartialMatch"]},{"className":"Inhabited","name":"Lean.Meta.LazyDiscrTree.instInhabitedPreDiscrTree","typeNames":["Lean.Meta.LazyDiscrTree.PreDiscrTree"]},{"className":"Append","name":"Lean.Meta.LazyDiscrTree.PreDiscrTree.instAppend","typeNames":["Lean.Meta.LazyDiscrTree.PreDiscrTree"]},{"className":"Inhabited","name":"Lean.Meta.LazyDiscrTree.instInhabitedInitResults","typeNames":["Lean.Meta.LazyDiscrTree.InitResults"]},{"className":"Append","name":"Lean.Meta.LazyDiscrTree.InitResults.instAppend","typeNames":["Lean.Meta.LazyDiscrTree.InitResults"]}],"name":"Lean.Meta.LazyDiscrTree"}