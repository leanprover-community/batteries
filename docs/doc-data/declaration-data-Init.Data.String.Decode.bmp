{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8Size_utf8DecodeChar\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8Size_utf8DecodeChar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">i</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/String/Decode.html#UInt8.utf8ByteSize\">utf8ByteSize</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8Size_utf8DecodeChar","kind":"theorem","line":1488,"name":"ByteArray.utf8Size_utf8DecodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1488-L1493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.isUTF8FirstByte_of_validateUTF8At\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isUTF8FirstByte_of_validateUTF8At</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.validateUTF8At\">validateUTF8At</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.isUTF8FirstByte_of_validateUTF8At","kind":"theorem","line":1473,"name":"ByteArray.isUTF8FirstByte_of_validateUTF8At","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1473-L1476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.isUTF8FirstByte_of_isSome_utf8DecodeChar?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isUTF8FirstByte_of_isSome_utf8DecodeChar?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">b</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.isUTF8FirstByte_of_isSome_utf8DecodeChar?","kind":"theorem","line":1464,"name":"ByteArray.isUTF8FirstByte_of_isSome_utf8DecodeChar?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1464-L1471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.isUTF8FirstByte_getElem_zero_utf8EncodeChar_append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isUTF8FirstByte_getElem_zero_utf8EncodeChar_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.toByteArray\">toByteArray</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">0</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.isUTF8FirstByte_getElem_zero_utf8EncodeChar_append","kind":"theorem","line":1459,"name":"ByteArray.isUTF8FirstByte_getElem_zero_utf8EncodeChar_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1459-L1462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#UInt8.utf8ByteSize\"><span class=\"name\">UInt8</span>.<span class=\"name\">utf8ByteSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#UInt8.utf8ByteSize","kind":"def","line":1424,"name":"UInt8.utf8ByteSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1424-L1433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#UInt8.isUTF8FirstByte_getElem_zero_utf8EncodeChar\"><span class=\"name\">UInt8</span>.<span class=\"name\">isUTF8FirstByte_getElem_zero_utf8EncodeChar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">0</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#UInt8.isUTF8FirstByte_getElem_zero_utf8EncodeChar","kind":"theorem","line":1420,"name":"UInt8.isUTF8FirstByte_getElem_zero_utf8EncodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1420-L1422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#UInt8.isUTF8FirstByte_getElem_utf8EncodeChar\"><span class=\"name\">UInt8</span>.<span class=\"name\">isUTF8FirstByte_getElem_utf8EncodeChar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#UInt8.isUTF8FirstByte_getElem_utf8EncodeChar","kind":"theorem","line":1397,"name":"UInt8.isUTF8FirstByte_getElem_utf8EncodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1397-L1418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#UInt8.instDecidableIsUTF8FirstByte\"><span class=\"name\">UInt8</span>.<span class=\"name\">instDecidableIsUTF8FirstByte</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\">IsUTF8FirstByte</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#UInt8.instDecidableIsUTF8FirstByte","kind":"instance","line":1390,"name":"UInt8.instDecidableIsUTF8FirstByte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1390-L1391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte\"><span class=\"name\">UInt8</span>.<span class=\"name\">IsUTF8FirstByte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Predicate for whether a byte can appear as the first byte of the UTF-8 encoding of a Unicode\nscalar value.\n","docLink":"./Init/Data/String/Decode.html#UInt8.IsUTF8FirstByte","kind":"def","line":1382,"name":"UInt8.IsUTF8FirstByte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1382-L1388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#List.utf8DecodeChar_utf8Encode_cons\"><span class=\"name\">List</span>.<span class=\"name\">utf8DecodeChar_utf8Encode_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>).<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>).<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#List.utf8DecodeChar_utf8Encode_cons","kind":"theorem","line":1373,"name":"List.utf8DecodeChar_utf8Encode_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1373-L1376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#List.utf8DecodeChar?_utf8Encode_cons\"><span class=\"name\">List</span>.<span class=\"name\">utf8DecodeChar?_utf8Encode_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>).<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#List.utf8DecodeChar?_utf8Encode_cons","kind":"theorem","line":1367,"name":"List.utf8DecodeChar?_utf8Encode_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1367-L1371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#List.utf8DecodeChar?_utf8Encode_singleton\"><span class=\"name\">List</span>.<span class=\"name\">utf8DecodeChar?_utf8Encode_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#List.utf8DecodeChar?_utf8Encode_singleton","kind":"theorem","line":1362,"name":"List.utf8DecodeChar?_utf8Encode_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1362-L1365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#List.utf8DecodeChar?_utf8Encode_singleton_append\"><span class=\"name\">List</span>.<span class=\"name\">utf8DecodeChar?_utf8Encode_singleton_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Init/Prelude.html#List.utf8Encode\">utf8Encode</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#List.utf8DecodeChar?_utf8Encode_singleton_append","kind":"theorem","line":1355,"name":"List.utf8DecodeChar?_utf8Encode_singleton_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1355-L1360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8EncodeChar_utf8DecodeChar\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8EncodeChar_utf8DecodeChar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">i</span> <span class=\"fn\">h</span>)</span>)</span>.<a href=\"./Init/Prelude.html#List.toByteArray\">toByteArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">i</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8EncodeChar_utf8DecodeChar","kind":"theorem","line":1346,"name":"ByteArray.utf8EncodeChar_utf8DecodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1346-L1353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar_extract_congr\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar_extract_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bytes</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j </span><span class=\"fn\">j'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">bytes</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">bytes</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j'</span>)</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">bytes</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">0</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">bytes</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j'</span>)</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">0</span> <span class=\"fn\">h'</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar_extract_congr","kind":"theorem","line":1340,"name":"ByteArray.utf8DecodeChar_extract_congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1340-L1344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar_eq_utf8DecodeChar_extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar_eq_utf8DecodeChar_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">i</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar_eq_utf8DecodeChar_extract","kind":"theorem","line":1321,"name":"ByteArray.utf8DecodeChar_eq_utf8DecodeChar_extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1321-L1324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.add_utf8Size_utf8DecodeChar_le_size\"><span class=\"name\">ByteArray</span>.<span class=\"name\">add_utf8Size_utf8DecodeChar_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\">utf8DecodeChar</a></span> <span class=\"fn\">i</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.add_utf8Size_utf8DecodeChar_le_size","kind":"theorem","line":1317,"name":"ByteArray.add_utf8Size_utf8DecodeChar_le_size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1317-L1319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bytes</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">bytes</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Decodes and returns the `Char` whose UTF-8 encoding begins at `i` in `bytes`.\n\nThis function requires a proof that there is, in fact, a valid `Char` at `i`. `utf8DecodeChar?` is\nan alternative function that returns `Option Char` instead of requiring a proof ahead of time.\n","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar","kind":"def","line":1307,"name":"ByteArray.utf8DecodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1307-L1315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.isSome_utf8DecodeChar?_append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isSome_utf8DecodeChar?_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b'</span>).<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.isSome_utf8DecodeChar?_append","kind":"theorem","line":1302,"name":"ByteArray.isSome_utf8DecodeChar?_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1302-L1305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?_append_eq_some\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?_append_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b'</span>).<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?_append_eq_some","kind":"theorem","line":1295,"name":"ByteArray.utf8DecodeChar?_append_eq_some","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1295-L1300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.lt_size_of_validateUTF8At\"><span class=\"name\">ByteArray</span>.<span class=\"name\">lt_size_of_validateUTF8At</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.validateUTF8At\">validateUTF8At</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.lt_size_of_validateUTF8At","kind":"theorem","line":1291,"name":"ByteArray.lt_size_of_validateUTF8At","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1291-L1293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.lt_size_of_isSome_utf8DecodeChar?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">lt_size_of_isSome_utf8DecodeChar?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.lt_size_of_isSome_utf8DecodeChar?","kind":"theorem","line":1284,"name":"ByteArray.lt_size_of_isSome_utf8DecodeChar?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1284-L1289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.le_size_of_utf8DecodeChar?_eq_some\"><span class=\"name\">ByteArray</span>.<span class=\"name\">le_size_of_utf8DecodeChar?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.le_size_of_utf8DecodeChar?_eq_some","kind":"theorem","line":1272,"name":"ByteArray.le_size_of_utf8DecodeChar?_eq_some","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1272-L1282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?_eq_utf8DecodeChar?_extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?_eq_utf8DecodeChar?_extract</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span>)</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?_eq_utf8DecodeChar?_extract","kind":"theorem","line":1238,"name":"ByteArray.utf8DecodeChar?_eq_utf8DecodeChar?_extract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1238-L1270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.exists_of_utf8DecodeChar?_eq_some\"><span class=\"name\">ByteArray</span>.<span class=\"name\">exists_of_utf8DecodeChar?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.toByteArray\">toByteArray</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.exists_of_utf8DecodeChar?_eq_some","kind":"theorem","line":1234,"name":"ByteArray.exists_of_utf8DecodeChar?_eq_some","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1234-L1236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.eq_of_utf8DecodeChar?_eq_some\"><span class=\"name\">ByteArray</span>.<span class=\"name\">eq_of_utf8DecodeChar?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.toByteArray\">toByteArray</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#ByteArray.size\">size</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.eq_of_utf8DecodeChar?_eq_some","kind":"theorem","line":1228,"name":"ByteArray.eq_of_utf8DecodeChar?_eq_some","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1228-L1232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.validateUTF8At_eq_isSome_utf8DecodeChar?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">validateUTF8At_eq_isSome_utf8DecodeChar?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.validateUTF8At\">validateUTF8At</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.validateUTF8At_eq_isSome_utf8DecodeChar?","kind":"theorem","line":1218,"name":"ByteArray.validateUTF8At_eq_isSome_utf8DecodeChar?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1218-L1224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#String.toByteArray_utf8EncodeChar_of_utf8DecodeChar?_eq_some\"><span class=\"name\">String</span>.<span class=\"name\">toByteArray_utf8EncodeChar_of_utf8DecodeChar?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.toByteArray\">toByteArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\">extract</a></span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#String.toByteArray_utf8EncodeChar_of_utf8DecodeChar?_eq_some","kind":"theorem","line":1185,"name":"String.toByteArray_utf8EncodeChar_of_utf8DecodeChar?_eq_some","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1185-L1216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?_utf8EncodeChar_append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?_utf8EncodeChar_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">String.utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.toByteArray\">toByteArray</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\">utf8DecodeChar?</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?_utf8EncodeChar_append","kind":"theorem","line":1165,"name":"ByteArray.utf8DecodeChar?_utf8EncodeChar_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1165-L1183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.validateUTF8At\"><span class=\"name\">ByteArray</span>.<span class=\"name\">validateUTF8At</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bytes</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.validateUTF8At","kind":"def","line":1011,"name":"ByteArray.validateUTF8At","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L1011-L1030"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bytes</span> : <a href=\"./Init/Prelude.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Decodes and returns the `Char` whose UTF-8 encoding begins at `i` in `bytes`.\n\nReturns `none` if `i` is not the start of a valid UTF-8 encoding of a character.\n","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?","kind":"def","line":985,"name":"ByteArray.utf8DecodeChar?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L985-L1009"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.verify₄\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">verify₄</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.verify₄","kind":"def","line":842,"name":"ByteArray.utf8DecodeChar?.verify₄","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L842-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₄\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">assemble₄</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₄","kind":"def","line":825,"name":"ByteArray.utf8DecodeChar?.assemble₄","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L825-L840"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₄Unchecked\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">assemble₄Unchecked</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₄Unchecked","kind":"def","line":817,"name":"ByteArray.utf8DecodeChar?.assemble₄Unchecked","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L817-L823"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.verify₃\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">verify₃</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.verify₃","kind":"def","line":694,"name":"ByteArray.utf8DecodeChar?.verify₃","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L694-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₃\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">assemble₃</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₃","kind":"def","line":660,"name":"ByteArray.utf8DecodeChar?.assemble₃","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L660-L692"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₃Unchecked\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">assemble₃Unchecked</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₃Unchecked","kind":"def","line":653,"name":"ByteArray.utf8DecodeChar?.assemble₃Unchecked","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L653-L658"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.verify₂\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">verify₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.verify₂","kind":"def","line":540,"name":"ByteArray.utf8DecodeChar?.verify₂","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L540-L546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₂\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">assemble₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₂","kind":"def","line":516,"name":"ByteArray.utf8DecodeChar?.assemble₂","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L516-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₂Unchecked\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">assemble₂Unchecked</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w </span><span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₂Unchecked","kind":"def","line":510,"name":"ByteArray.utf8DecodeChar?.assemble₂Unchecked","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L510-L514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.verify₁\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">verify₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_w</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.parseFirstByte\">parseFirstByte</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.done\">FirstByte.done</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.verify₁","kind":"def","line":500,"name":"ByteArray.utf8DecodeChar?.verify₁","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L500-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₁\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">assemble₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.parseFirstByte\">parseFirstByte</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.done\">FirstByte.done</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.assemble₁","kind":"def","line":455,"name":"ByteArray.utf8DecodeChar?.assemble₁","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L455-L464"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.isInvalidContinuationByte\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">isInvalidContinuationByte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.isInvalidContinuationByte","kind":"def","line":346,"name":"ByteArray.utf8DecodeChar?.isInvalidContinuationByte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L346-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.parseFirstByte\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">parseFirstByte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte\">FirstByte</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.parseFirstByte","kind":"def","line":242,"name":"ByteArray.utf8DecodeChar?.parseFirstByte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L242-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.threeMore\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">FirstByte</span>.<span class=\"name\">threeMore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte\">FirstByte</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.threeMore","kind":"ctor","line":240,"name":"ByteArray.utf8DecodeChar?.FirstByte.threeMore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.twoMore\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">FirstByte</span>.<span class=\"name\">twoMore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte\">FirstByte</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.twoMore","kind":"ctor","line":239,"name":"ByteArray.utf8DecodeChar?.FirstByte.twoMore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L239-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.oneMore\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">FirstByte</span>.<span class=\"name\">oneMore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte\">FirstByte</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.oneMore","kind":"ctor","line":238,"name":"ByteArray.utf8DecodeChar?.FirstByte.oneMore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L238-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.done\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">FirstByte</span>.<span class=\"name\">done</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte\">FirstByte</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.done","kind":"ctor","line":237,"name":"ByteArray.utf8DecodeChar?.FirstByte.done","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L237-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.invalid\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">FirstByte</span>.<span class=\"name\">invalid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte\">FirstByte</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte.invalid","kind":"ctor","line":236,"name":"ByteArray.utf8DecodeChar?.FirstByte.invalid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L236-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte\"><span class=\"name\">ByteArray</span>.<span class=\"name\">utf8DecodeChar?</span>.<span class=\"name\">FirstByte</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#ByteArray.utf8DecodeChar?.FirstByte","kind":"inductive","line":235,"name":"ByteArray.utf8DecodeChar?.FirstByte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L235-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_cons_cons_cons_cons\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeChar_eq_cons_cons_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">4</span> →\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">18</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">7</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">240</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">12</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">128</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">6</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">128</span><a href=\"./Init/Prelude.html#List.cons\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">128</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_cons_cons_cons_cons","kind":"theorem","line":158,"name":"String.utf8EncodeChar_eq_cons_cons_cons_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L158-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_cons_cons_cons\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeChar_eq_cons_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span> →\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>     <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">12</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">15</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">224</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">6</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">128</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">128</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_cons_cons_cons","kind":"theorem","line":149,"name":"String.utf8EncodeChar_eq_cons_cons_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L149-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_cons_cons\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeChar_eq_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">6</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">31</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">192</span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">63</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">128</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_cons_cons","kind":"theorem","line":143,"name":"String.utf8EncodeChar_eq_cons_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L143-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_singleton\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeChar_eq_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_singleton","kind":"theorem","line":137,"name":"String.utf8EncodeChar_eq_singleton","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L137-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#String.length_utf8EncodeChar\"><span class=\"name\">String</span>.<span class=\"name\">length_utf8EncodeChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#String.length_utf8EncodeChar","kind":"theorem","line":131,"name":"String.length_utf8EncodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L131-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_utf8EncodeCharFast\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeChar_eq_utf8EncodeCharFast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Decode.html#String.utf8EncodeCharFast\">utf8EncodeCharFast</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#String.utf8EncodeChar_eq_utf8EncodeCharFast","kind":"theorem","line":85,"name":"String.utf8EncodeChar_eq_utf8EncodeCharFast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L85-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#String.utf8EncodeCharFast\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeCharFast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"Returns the sequence of bytes in a character's UTF-8 encoding.\n","docLink":"./Init/Data/String/Decode.html#String.utf8EncodeCharFast","kind":"def","line":60,"name":"String.utf8EncodeCharFast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L60-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#Char.utf8Size_eq\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">4</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#Char.utf8Size_eq","kind":"theorem","line":47,"name":"Char.utf8Size_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L47-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#Char.utf8Size_le_four\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_le_four</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">4</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#Char.utf8Size_le_four","kind":"theorem","line":44,"name":"Char.utf8Size_le_four","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L44-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#Char.utf8Size_pos\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#Char.utf8Size_pos","kind":"theorem","line":41,"name":"Char.utf8Size_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L41-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#Char.utf8Size_eq_four_iff\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_eq_four_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">4</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">65535</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#Char.utf8Size_eq_four_iff","kind":"theorem","line":34,"name":"Char.utf8Size_eq_four_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L34-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#Char.utf8Size_eq_three_iff\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_eq_three_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">3</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">2047</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">65535</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#Char.utf8Size_eq_three_iff","kind":"theorem","line":27,"name":"Char.utf8Size_eq_three_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L27-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#Char.utf8Size_eq_two_iff\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_eq_two_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">127</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2047</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#Char.utf8Size_eq_two_iff","kind":"theorem","line":20,"name":"Char.utf8Size_eq_two_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L20-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Decode.html#Char.utf8Size_eq_one_iff\"><span class=\"name\">Char</span>.<span class=\"name\">utf8Size_eq_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.val\">val</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">127</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Decode.html#Char.utf8Size_eq_one_iff","kind":"theorem","line":16,"name":"Char.utf8Size_eq_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Decode.lean#L16-L18"}}],"imports":["Init.Data.UInt.Bitwise","Init.Data.Char.Lemmas","Init.Data.ByteArray.Basic","Init.Data.ByteArray.Lemmas"],"instances":[{"className":"Decidable","name":"UInt8.instDecidableIsUTF8FirstByte","typeNames":["UInt8.IsUTF8FirstByte"]}],"name":"Init.Data.String.Decode"}