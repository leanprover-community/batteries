{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Int.divFloat\"><span class=\"name\">Int</span>.<span class=\"name\">divFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Divide two integers, to produce a correctly rounded (nearest-ties-to-even) `Float` result.\n","docLink":"./Batteries/Lean/Float.html#Int.divFloat","kind":"def","line":98,"name":"Int.divFloat","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Float.lean#L98-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Nat.divFloat\"><span class=\"name\">Nat</span>.<span class=\"name\">divFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Divide two natural numbers, to produce a correctly rounded (nearest-ties-to-even) `Float` result.\n","docLink":"./Batteries/Lean/Float.html#Nat.divFloat","kind":"def","line":80,"name":"Nat.divFloat","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Float.lean#L80-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.toStringFull\"><span class=\"name\">Float</span>.<span class=\"name\">toStringFull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Converts `f` to a string, including all decimal digits. ","docLink":"./Batteries/Lean/Float.html#Float.toStringFull","kind":"def","line":59,"name":"Float.toStringFull","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Float.lean#L59-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.toRatParts'.trailingZeros\"><span class=\"name\">Float</span>.<span class=\"name\">toRatParts'</span>.<span class=\"name\">trailingZeros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Calculates the number of trailing bits in a `UInt64`. Requires `v ≠ 0`. ","docLink":"./Batteries/Lean/Float.html#Float.toRatParts'.trailingZeros","kind":"opaque","line":56,"name":"Float.toRatParts'.trailingZeros","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Float.lean#L56-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.toRatParts'\"><span class=\"name\">Float</span>.<span class=\"name\">toRatParts'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></div></div>","info":{"doc":"Returns `v, exp` integers such that `f = v * 2^exp`.\nLike `toRatParts`, but `e` is guaranteed to be minimal (`n` is always odd), unless `n = 0`.\n`n.abs` will be at most `2^53 - 1` because `Float` has 53 bits of precision.\nReturns `none` when `f` is not finite (i.e. `inf`, `-inf` or a `nan`). ","docLink":"./Batteries/Lean/Float.html#Float.toRatParts'","kind":"def","line":39,"name":"Float.toRatParts'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Float.lean#L39-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.toRatParts\"><span class=\"name\">Float</span>.<span class=\"name\">toRatParts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></div></div>","info":{"doc":"Returns `v, exp` integers such that `f = v * 2^exp`.\n(`e` is not minimal, but `v.abs` will be at most `2^53 - 1`.)\nReturns `none` when `f` is not finite (i.e. `inf`, `-inf` or a `nan`). ","docLink":"./Batteries/Lean/Float.html#Float.toRatParts","kind":"def","line":25,"name":"Float.toRatParts","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Float.lean#L25-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.nan\"><span class=\"name\">Float</span>.<span class=\"name\">nan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"The floating point value \"not a number\", used to represent erroneous numerical computations\nsuch as `0 / 0`. Using `nan` in any float operation will return `nan`, and all comparisons\ninvolving `nan` return `false`, including in particular `nan == nan`.\n","docLink":"./Batteries/Lean/Float.html#Float.nan","kind":"def","line":18,"name":"Float.nan","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Float.lean#L18-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.inf\"><span class=\"name\">Float</span>.<span class=\"name\">inf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"The floating point value \"positive infinity\", also used to represent numerical computations\nwhich produce finite values outside of the representable range of `Float`.\n","docLink":"./Batteries/Lean/Float.html#Float.inf","kind":"def","line":12,"name":"Float.inf","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Float.lean#L12-L16"}}],"imports":["Init"],"instances":[],"name":"Batteries.Lean.Float"}