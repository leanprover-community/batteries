{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ppGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal","kind":"def","line":82,"name":"Lean.Meta.ppGoal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L82-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.getGoalPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getGoalPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarDecl</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.getGoalPrefix","kind":"def","line":75,"name":"Lean.Meta.getGoalPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L75-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.shouldShowLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ppGoal</span>.<span class=\"name\">shouldShowLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Given the current values of the options `pp.showLetValues` and `pp.showLetValues.threshold`,\ndetermines whether the local let declaration's value should be omitted.\n\n- `tactic` is whether the goal is for a tactic metavariable.\n  In that case, uses the maximum of `pp.showLetValues.tactic.threshold` and `pp.showLetValues.threshold` for the threshold.\n  In tactics, we usually want to see let values.\n  In contrast, for the \"expected type\" view we usually do not.\n","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.shouldShowLetValue","kind":"def","line":51,"name":"Lean.Meta.ppGoal.shouldShowLetValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L51-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues.tactic.threshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">showLetValues</span>.<span class=\"name\">tactic</span>.<span class=\"name\">threshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues.tactic.threshold","kind":"opaque","line":45,"name":"Lean.Meta.pp.showLetValues.tactic.threshold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L45-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues.threshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">showLetValues</span>.<span class=\"name\">threshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues.threshold","kind":"opaque","line":39,"name":"Lean.Meta.pp.showLetValues.threshold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L39-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">showLetValues</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues","kind":"opaque","line":33,"name":"Lean.Meta.pp.showLetValues","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L33-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.inaccessibleNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">inaccessibleNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.inaccessibleNames","kind":"opaque","line":27,"name":"Lean.Meta.pp.inaccessibleNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L27-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.implementationDetailHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">implementationDetailHyps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.implementationDetailHyps","kind":"opaque","line":21,"name":"Lean.Meta.pp.implementationDetailHyps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L21-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/PPGoal.html#Lean.Meta.pp.auxDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">pp</span>.<span class=\"name\">auxDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.auxDecls","kind":"opaque","line":15,"name":"Lean.Meta.pp.auxDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/PPGoal.lean#L15-L19"}}],"imports":["Lean.Meta.InferType"],"instances":[],"name":"Lean.Meta.PPGoal"}