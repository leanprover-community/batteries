{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildLeanExe\"><span class=\"name\">Lake</span>.<span class=\"name\">buildLeanExe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exeFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linkObjs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linkLibs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">weakArgs </span><span class=\"fn\">traceArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sharedLean</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span></div></div>","info":{"doc":"Build an executable by linking the results of `linkJobs`\nusing the Lean toolchain's linker.\n","docLink":"./Lake/Build/Common.html#Lake.buildLeanExe","kind":"def","line":841,"name":"Lake.buildLeanExe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L841-L861"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildLeanSharedLib\"><span class=\"name\">Lake</span>.<span class=\"name\">buildLeanSharedLib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">libName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">libFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linkObjs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linkLibs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">weakArgs </span><span class=\"fn\">traceArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">plugin</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linkDeps</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/System/Platform.html#System.Platform.isWindows\">System.Platform.isWindows</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a>)</span></span></div></div>","info":{"doc":"Build a shared library by linking the results of `linkJobs`\nusing `linker`.\n","docLink":"./Lake/Build/Common.html#Lake.buildLeanSharedLib","kind":"def","line":816,"name":"Lake.buildLeanSharedLib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L816-L839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildSharedLib\"><span class=\"name\">Lake</span>.<span class=\"name\">buildSharedLib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">libName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">libFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linkObjs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linkLibs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">weakArgs </span><span class=\"fn\">traceArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linker</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;c++&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraDepTrace</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a></span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace.nil\">BuildTrace.nil</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">plugin</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linkDeps</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/System/Platform.html#System.Platform.isWindows\">System.Platform.isWindows</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a>)</span></span></div></div>","info":{"doc":"Build a shared library by linking the results of `linkJobs`\nusing the Lean toolchain's C compiler.\n","docLink":"./Lake/Build/Common.html#Lake.buildSharedLib","kind":"def","line":792,"name":"Lake.buildSharedLib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L792-L814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildStaticLib\"><span class=\"name\">Lake</span>.<span class=\"name\">buildStaticLib</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">libFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oFileJobs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thin</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span></div></div>","info":{"doc":"Build a static library from object file jobs using the Lean toolchain's `ar`. ","docLink":"./Lake/Build/Common.html#Lake.buildStaticLib","kind":"def","line":748,"name":"Lake.buildStaticLib","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L748-L755"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildLeanO\"><span class=\"name\">Lake</span>.<span class=\"name\">buildLeanO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">srcJob</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">weakArgs </span><span class=\"fn\">traceArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leanIncludeDir?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span></div></div>","info":{"doc":"Build an object file from a source fie job (i.e, a `lean -c` output)\nusing the Lean toolchain's C compiler.\n","docLink":"./Lake/Build/Common.html#Lake.buildLeanO","kind":"def","line":728,"name":"Lake.buildLeanO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L728-L746"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildO\"><span class=\"name\">Lake</span>.<span class=\"name\">buildO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">srcJob</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">weakArgs </span><span class=\"fn\">traceArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compiler</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> := <a href=\"./Init/System/FilePath.html#System.FilePath.mk\">{</a> <span class=\"fn\">toString</span> := <span class=\"fn\">&quot;cc&quot;</span> <a href=\"./Init/System/FilePath.html#System.FilePath.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraDepTrace</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a></span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace.nil\">BuildTrace.nil</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span></div></div>","info":{"doc":"Build an object file from a source file job using `compiler`. The invocation is:\n\n```\ncompiler -c -o oFile srcFile weakArgs... traceArgs...\n```\n\nThe `traceArgs` are included as part of the dependency trace hash, whereas\nthe `weakArgs` are not. Thus, system-dependent options like `-I` or `-L` should\nbe `weakArgs` to avoid build artifact incompatibility between systems\n(i.e., a change in the file path should not cause a rebuild).\n\nYou can add more components to the trace via `extraDepTrace`,\nwhich will be computed in the resulting `Job` before building.\n","docLink":"./Lake/Build/Common.html#Lake.buildO","kind":"def","line":700,"name":"Lake.buildO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L700-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.inputDir\"><span class=\"name\">Lake</span>.<span class=\"name\">inputDir</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">filter</span> : <span class=\"fn\"><a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span>)</span></span></div></div>","info":{"doc":"A build job for a directory of files that are expected to already exist.\nReturns an array of the files in the directory that match the filter.\n\nIf `text := true`, the files are handled as text files rather than a binary files.\nAny byte difference in a binary file will trigger a rebuild of its dependents.\nIn contrast, text file traces have normalized line endings to avoid unnecessary\nrebuilds across platforms.\n","docLink":"./Lake/Build/Common.html#Lake.inputDir","kind":"def","line":678,"name":"Lake.inputDir","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L678-L698"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.inputFile\"><span class=\"name\">Lake</span>.<span class=\"name\">inputFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span></div></div>","info":{"doc":"A build job for a file that is expected to already exist (e.g., a data blob or source file).\n\nIf `text := true`, the file is handled as a text file rather than a binary file.\nAny byte difference in a binary file will trigger a rebuild of its dependents.\nIn contrast, text file traces have normalized line endings to avoid unnecessary\nrebuilds across platforms.\n","docLink":"./Lake/Build/Common.html#Lake.inputFile","kind":"def","line":667,"name":"Lake.inputFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L667-L676"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.inputTextFile\"><span class=\"name\">Lake</span>.<span class=\"name\">inputTextFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span></div></div>","info":{"doc":"A build job for a text file that is expected to already exist (e.g., a source file).\n\nText file traces have normalized line endings to avoid unnecessary rebuilds across platforms.\n","docLink":"./Lake/Build/Common.html#Lake.inputTextFile","kind":"def","line":658,"name":"Lake.inputTextFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L658-L665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.inputBinFile\"><span class=\"name\">Lake</span>.<span class=\"name\">inputBinFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span></div></div>","info":{"doc":"A build job for a binary file that is expected to already exist (e.g., a data blob).\n\nAny byte difference in a binary file will trigger a rebuild of its dependents.\n","docLink":"./Lake/Build/Common.html#Lake.inputBinFile","kind":"def","line":649,"name":"Lake.inputBinFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L649-L656"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildFileAfterDep\"><span class=\"name\">Lake</span>.<span class=\"name\">buildFileAfterDep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dep</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">build</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraDepTrace</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a></span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace.nil\">BuildTrace.nil</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.SpawnM\">SpawnM</a> <span class=\"fn\">(<a href=\"./Lake/Build/Job/Basic.html#Lake.Job\">Job</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span></div></div>","info":{"doc":"Build `file` using `build` after `dep` completes if the dependency's\ntrace (and/or `extraDepTrace`) has changed.\n\nIf `text := true`, `file` is handled as a text file rather than a binary file.\n","docLink":"./Lake/Build/Common.html#Lake.buildFileAfterDep","kind":"def","line":632,"name":"Lake.buildFileAfterDep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L632-L645"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildArtifactUnlessUpToDate\"><span class=\"name\">Lake</span>.<span class=\"name\">buildArtifactUnlessUpToDate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">build</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;art&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">restore </span><span class=\"fn\">exe</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Lake/Config/Artifact.html#Lake.Artifact\">Artifact</a></span></div></div>","info":{"doc":"Uses the current job's trace to search Lake's local artifact cache for an artifact\nwith a matching extension (`ext`) and content hash. If one is found, use it.\nOtherwise, builds `file` using `build` and saves it to the cache. If Lake's\nlocal artifact cache is not enabled, falls back to `buildFileUnlessUpToDate'`.\n\nIf `text := true`, `file` is hashed as a text file rather than a binary file.\n\nIf `restore := true`, if `file` is missing but the artifact is in the cache,\nit will be copied to the `file`. This function will also return `file` rather\nthan the path to the cached artifact.\n","docLink":"./Lake/Build/Common.html#Lake.buildArtifactUnlessUpToDate","kind":"def","line":551,"name":"Lake.buildArtifactUnlessUpToDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L551-L630"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.computeArtifact\"><span class=\"name\">Lake</span>.<span class=\"name\">computeArtifact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;art&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Lake/Config/Artifact.html#Lake.Artifact\">Artifact</a></span></div></div>","info":{"doc":"Construct an artifact from a path outside the Lake artifact cache.\n\nIf `text := true`, `file` is hashed as a text file rather than a binary file.\n","docLink":"./Lake/Build/Common.html#Lake.computeArtifact","kind":"def","line":541,"name":"Lake.computeArtifact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L541-L549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.getArtifacts?\"><span class=\"name\">Lake</span>.<span class=\"name\">getArtifacts?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Common.html#Lake.ResolveOutputs\">ResolveOutputs</a> <a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inputHash</span> : <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedTrace</span> : <a href=\"./Lake/Build/Common.html#Lake.SavedTrace\">SavedTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <a href=\"./Lake/Config/Cache.html#Lake.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pkg</span> : <a href=\"./Lake/Config/Package.html#Lake.Package\">Package</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Retrieve artifacts from the Lake cache using the the outputs stored\nin either the saved trace file or in the cached input-to-content mapping.\n\n**For internal use only.**\n","docLink":"./Lake/Build/Common.html#Lake.getArtifacts?","kind":"def","line":501,"name":"Lake.getArtifacts?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L501-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.ResolveOutputs.resolveOutputs?\"><span class=\"name\">Lake</span>.<span class=\"name\">ResolveOutputs</span>.<span class=\"name\">resolveOutputs?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Common.html#Lake.ResolveOutputs\">ResolveOutputs</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outputs</span> : <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"**For internal use only.** ","docLink":"./Lake/Build/Common.html#Lake.ResolveOutputs.resolveOutputs?","kind":"def","line":498,"name":"Lake.ResolveOutputs.resolveOutputs?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L498-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.ResolveOutputs.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">ResolveOutputs</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resolveOutputs?</span> : <span class=\"fn\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Common.html#Lake.ResolveOutputs\">ResolveOutputs</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.ResolveOutputs.mk","kind":"ctor","line":496,"name":"Lake.ResolveOutputs.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L496-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.ResolveOutputs\"><span class=\"name\">Lake</span>.<span class=\"name\">ResolveOutputs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>","info":{"doc":"**For internal use only.** ","docLink":"./Lake/Build/Common.html#Lake.ResolveOutputs","kind":"class","line":495,"name":"Lake.ResolveOutputs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L495-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.cacheArtifact\"><span class=\"name\">Lake</span>.<span class=\"name\">cacheArtifact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Monad.html#Lake.MonadWorkspace\">MonadWorkspace</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;art&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text </span><span class=\"fn\">exe </span><span class=\"fn\">useLocalFile</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Config/Artifact.html#Lake.Artifact\">Artifact</a></span></div></div>","info":{"doc":"Copies `file` to the Lake cache with the file extension `ext`, and\nsaves its hash in its `.hash` file.\n\n**Additional Options:**\n* `text`: the contents of `file` are hashed as text rather than as a binary blob.\n* `exe`: the cached file will be executable.\n* `useLocalFile`: the resulting artifact will use `file`'s path instead of path to\nthe file in the cache.\n","docLink":"./Lake/Build/Common.html#Lake.cacheArtifact","kind":"def","line":489,"name":"Lake.cacheArtifact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L489-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.Cache.saveArtifact\"><span class=\"name\">Lake</span>.<span class=\"name\">Cache</span>.<span class=\"name\">saveArtifact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <a href=\"./Lake/Config/Cache.html#Lake.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;art&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text </span><span class=\"fn\">exe </span><span class=\"fn\">useLocalFile</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lake/Config/Artifact.html#Lake.Artifact\">Artifact</a></span></div></div>","info":{"doc":"Copies `file` to the Lake cache with the file extension `ext`, and\nsaves its hash in its `.hash` file.\n\n**Additional Options:**\n* `text`: the contents of `file` are hashed as text rather than as a binary blob.\n* `exe`: the cached file will be executable.\n* `useLocalFile`: the resulting artifact will use `file`'s path instead of path to\nthe file in the cache.\n","docLink":"./Lake/Build/Common.html#Lake.Cache.saveArtifact","kind":"def","line":449,"name":"Lake.Cache.saveArtifact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L449-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildFileUnlessUpToDate'\"><span class=\"name\">Lake</span>.<span class=\"name\">buildFileUnlessUpToDate'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">build</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Builds `file` using `build` unless it already exists and the current job's\ntrace matches the trace stored in the `.trace` file. If built, saves the new\ntrace and caches `file`'s hash in a `.hash` file. Otherwise, tries to fetch the\nhash from the `.hash` file using `fetchFileTrace`. Build logs (if any) are\nsaved to the trace file and replayed from there if the build is skipped.\n\nFor example, given `file := \"foo.c\"`, compares `getTrace` with that in\n`foo.c.trace`. If built, the hash is cached in `foo.c.hash` and the new\ntrace is saved to `foo.c.trace` (including the build log).\n\nIf `text := true`, `file` is hashed as a text file rather than a binary file.\n","docLink":"./Lake/Build/Common.html#Lake.buildFileUnlessUpToDate'","kind":"def","line":427,"name":"Lake.buildFileUnlessUpToDate'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L427-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.fetchFileTrace\"><span class=\"name\">Lake</span>.<span class=\"name\">fetchFileTrace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a></span></div></div>","info":{"doc":"Fetches the trace of a file that may have already have its hash cached\nin a `.hash` file. If no such `.hash` file exists, recomputes and creates it.\n\nIf `text := true`, `file` is hashed as text file rather than a binary file.\n","docLink":"./Lake/Build/Common.html#Lake.fetchFileTrace","kind":"def","line":416,"name":"Lake.fetchFileTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L416-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.fetchFileHash\"><span class=\"name\">Lake</span>.<span class=\"name\">fetchFileHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a></span></div></div>","info":{"doc":"Fetches the hash of a file that may already be cached in a `.hash` file.\nIf hash files are not trusted (e.g., with `--rehash`) or the `.hash` file does\nnot exist, it will be created with a newly computed hash.\n\nIf `text := true`, `file` is hashed as a text file rather than a binary file.\n","docLink":"./Lake/Build/Common.html#Lake.fetchFileHash","kind":"def","line":399,"name":"Lake.fetchFileHash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L399-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.clearFileHash\"><span class=\"name\">Lake</span>.<span class=\"name\">clearFileHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Remove the cached hash of a file (its `.hash` file) if it exists. ","docLink":"./Lake/Build/Common.html#Lake.clearFileHash","kind":"def","line":395,"name":"Lake.clearFileHash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L395-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.cacheFileHash\"><span class=\"name\">Lake</span>.<span class=\"name\">cacheFileHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Computes the hash of a file and saves it to a `.hash` file.\n\nIf `text := true`, `file` is hashed as a text file rather than a binary file.\n","docLink":"./Lake/Build/Common.html#Lake.cacheFileHash","kind":"def","line":386,"name":"Lake.cacheFileHash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L386-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.writeFileHash\"><span class=\"name\">Lake</span>.<span class=\"name\">writeFileHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">file</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hash</span> : <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Saves the hash of a file and to its `.hash` file. ","docLink":"./Lake/Build/Common.html#Lake.writeFileHash","kind":"def","line":380,"name":"Lake.writeFileHash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L380-L384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildUnlessUpToDate\"><span class=\"name\">Lake</span>.<span class=\"name\">buildUnlessUpToDate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.CheckExists\">CheckExists</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.GetMTime\">GetMTime</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">build</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Lake/Build/Job/Basic.html#Lake.JobAction\">JobAction</a> := <a href=\"./Lake/Build/Job/Basic.html#Lake.JobAction.build\">JobAction.build</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.MTime\">MTime</a> := <span class=\"fn\"><span class=\"fn\">depTrace</span>.<a href=\"./Lake/Build/Trace.html#Lake.BuildTrace.mtime\">mtime</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Checks whether `info` is up-to-date, and runs `build` to recreate it if not.\nIf rebuilt, saves the new `depTrace` and build log to `traceFile`.\n\nSee `buildUnlessUpToDate?` for more details on how Lake determines whether\n`info` is up-to-date.\n","docLink":"./Lake/Build/Common.html#Lake.buildUnlessUpToDate","kind":"def","line":366,"name":"Lake.buildUnlessUpToDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L366-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildUnlessUpToDate?\"><span class=\"name\">Lake</span>.<span class=\"name\">buildUnlessUpToDate?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.CheckExists\">CheckExists</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.GetMTime\">GetMTime</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">build</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Lake/Build/Job/Basic.html#Lake.JobAction\">JobAction</a> := <a href=\"./Lake/Build/Job/Basic.html#Lake.JobAction.build\">JobAction.build</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.MTime\">MTime</a> := <span class=\"fn\"><span class=\"fn\">depTrace</span>.<a href=\"./Lake/Build/Trace.html#Lake.BuildTrace.mtime\">mtime</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether `info` is up-to-date, and runs `build` to recreate it if not.\nIf rebuilt, saves the new `depTrace` and build log to `traceFile`.\nReturns whether `info` was already up-to-date.\n\n**Up-to-date Checking**\n\nIf `traceFile` exists, checks that the hash in `depTrace` matches that\nof the `traceFile`. If not, and old mode is enabled (e.g., `--old`), falls back\nto the `oldTrace` modification time as the point of comparison.\nIf up-to-date, replay the build log stored in `traceFile`.\n\nIf `traceFile` does not exist, checks that `info` has a newer modification time\nthen `depTrace` / `oldTrace`. No log will be replayed.\n","docLink":"./Lake/Build/Common.html#Lake.buildUnlessUpToDate?","kind":"def","line":339,"name":"Lake.buildUnlessUpToDate?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L339-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.buildAction\"><span class=\"name\">Lake</span>.<span class=\"name\">buildAction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Common.html#Lake.ToOutputJson\">ToOutputJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceFile</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">build</span> : <span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Lake/Build/Job/Basic.html#Lake.JobAction\">JobAction</a> := <a href=\"./Lake/Build/Job/Basic.html#Lake.JobAction.build\">JobAction.build</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs `build` as a build action of kind `action`.\n\nThe build's input trace (`depTrace`), JSON description of the result of `build`,\nand log are saved to `traceFile`, if the build completes without a fatal error\n(i.e., it does not `throw`).\n","docLink":"./Lake/Build/Common.html#Lake.buildAction","kind":"def","line":309,"name":"Lake.buildAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L309-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.instToOutputJsonArtifact\"><span class=\"name\">Lake</span>.<span class=\"name\">instToOutputJsonArtifact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Common.html#Lake.ToOutputJson\">ToOutputJson</a> <a href=\"./Lake/Config/Artifact.html#Lake.Artifact\">Artifact</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.instToOutputJsonArtifact","kind":"instance","line":306,"name":"Lake.instToOutputJsonArtifact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L306-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.instToOutputJsonPUnit\"><span class=\"name\">Lake</span>.<span class=\"name\">instToOutputJsonPUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Common.html#Lake.ToOutputJson\">ToOutputJson</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.instToOutputJsonPUnit","kind":"instance","line":305,"name":"Lake.instToOutputJsonPUnit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L305-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.ToOutputJson.toOutputJson\"><span class=\"name\">Lake</span>.<span class=\"name\">ToOutputJson</span>.<span class=\"name\">toOutputJson</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Common.html#Lake.ToOutputJson\">ToOutputJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arts</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.ToOutputJson.toOutputJson","kind":"def","line":303,"name":"Lake.ToOutputJson.toOutputJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L303-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.ToOutputJson.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">ToOutputJson</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toOutputJson</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Common.html#Lake.ToOutputJson\">ToOutputJson</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.ToOutputJson.mk","kind":"ctor","line":302,"name":"Lake.ToOutputJson.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L302-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.ToOutputJson\"><span class=\"name\">Lake</span>.<span class=\"name\">ToOutputJson</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"**For internal use only.** ","docLink":"./Lake/Build/Common.html#Lake.ToOutputJson","kind":"class","line":301,"name":"Lake.ToOutputJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L301-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.SavedTrace.replayOrFetchIfUpToDate\"><span class=\"name\">Lake</span>.<span class=\"name\">SavedTrace</span>.<span class=\"name\">replayOrFetchIfUpToDate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inputHash</span> : <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Build/Common.html#Lake.SavedTrace\">SavedTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns if the saved trace exists and its hash matches `inputHash`.\n\nIf up-to-date, replays the saved log from the trace and sets the current\nbuild action to `replay`. Otherwise, if the log is empty and trace is synthetic,\nor if the trace is not up-to-date, the build action will be set ot `fetch`.\n","docLink":"./Lake/Build/Common.html#Lake.SavedTrace.replayOrFetchIfUpToDate","kind":"def","line":282,"name":"Lake.SavedTrace.replayOrFetchIfUpToDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L282-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.SavedTrace.replayIfUpToDate\"><span class=\"name\">Lake</span>.<span class=\"name\">SavedTrace</span>.<span class=\"name\">replayIfUpToDate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.CheckExists\">CheckExists</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.GetMTime\">GetMTime</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedTrace</span> : <a href=\"./Lake/Build/Common.html#Lake.SavedTrace\">SavedTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.MTime\">MTime</a> := <span class=\"fn\"><span class=\"fn\">depTrace</span>.<a href=\"./Lake/Build/Trace.html#Lake.BuildTrace.mtime\">mtime</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether `info` is up-to-date with the trace.\nIf so, replays the log of the trace if available.\n","docLink":"./Lake/Build/Common.html#Lake.SavedTrace.replayIfUpToDate","kind":"def","line":272,"name":"Lake.SavedTrace.replayIfUpToDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L272-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.SavedTrace.replayIfUpToDate'\"><span class=\"name\">Lake</span>.<span class=\"name\">SavedTrace</span>.<span class=\"name\">replayIfUpToDate'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.CheckExists\">CheckExists</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.GetMTime\">GetMTime</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedTrace</span> : <a href=\"./Lake/Build/Common.html#Lake.SavedTrace\">SavedTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.MTime\">MTime</a> := <span class=\"fn\"><span class=\"fn\">depTrace</span>.<a href=\"./Lake/Build/Trace.html#Lake.BuildTrace.mtime\">mtime</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a></span></div></div>","info":{"doc":"Checks whether `info` is up-to-date with the trace.\nIf so, replays the log of the trace if available.\n","docLink":"./Lake/Build/Common.html#Lake.SavedTrace.replayIfUpToDate'","kind":"def","line":251,"name":"Lake.SavedTrace.replayIfUpToDate'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L251-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.checkHashUpToDate\"><span class=\"name\">Lake</span>.<span class=\"name\">checkHashUpToDate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.CheckExists\">CheckExists</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.GetMTime\">GetMTime</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <span class=\"fn\">ι</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depHash</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.MTime\">MTime</a> := <span class=\"fn\"><span class=\"fn\">depTrace</span>.<a href=\"./Lake/Build/Trace.html#Lake.BuildTrace.mtime\">mtime</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks if the `info` is up-to-date by comparing `depTrace` with `depHash`.\nIf old mode is enabled (e.g., `--old`), uses the `oldTrace` modification time\nas the point of comparison instead.\n","docLink":"./Lake/Build/Common.html#Lake.checkHashUpToDate","kind":"def","line":240,"name":"Lake.checkHashUpToDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L240-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.OutputStatus.isCacheable\"><span class=\"name\">Lake</span>.<span class=\"name\">OutputStatus</span>.<span class=\"name\">isCacheable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">status</span> : <a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether the build or rebuild should be considered up-to-date for caching. ","docLink":"./Lake/Build/Common.html#Lake.OutputStatus.isCacheable","kind":"def","line":224,"name":"Lake.OutputStatus.isCacheable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L224-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.OutputStatus.isUpToDate\"><span class=\"name\">Lake</span>.<span class=\"name\">OutputStatus</span>.<span class=\"name\">isUpToDate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">status</span> : <a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether the build should be considered up-to-date for rebuilding. ","docLink":"./Lake/Build/Common.html#Lake.OutputStatus.isUpToDate","kind":"def","line":220,"name":"Lake.OutputStatus.isUpToDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L220-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.OutputStatus.ofMTimeCheck\"><span class=\"name\">Lake</span>.<span class=\"name\">OutputStatus</span>.<span class=\"name\">ofMTimeCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upToDate</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a></div></div>","info":{"doc":"Constructs an `OutputStatus` from a modification time check. ","docLink":"./Lake/Build/Common.html#Lake.OutputStatus.ofMTimeCheck","kind":"def","line":216,"name":"Lake.OutputStatus.ofMTimeCheck","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L216-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.OutputStatus.ofHashCheck\"><span class=\"name\">Lake</span>.<span class=\"name\">OutputStatus</span>.<span class=\"name\">ofHashCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upToDate</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a></div></div>","info":{"doc":"Constructs an `OutputStatus` from a hash check. ","docLink":"./Lake/Build/Common.html#Lake.OutputStatus.ofHashCheck","kind":"def","line":212,"name":"Lake.OutputStatus.ofHashCheck","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L212-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.instDecidableEqOutputStatus\"><span class=\"name\">Lake</span>.<span class=\"name\">instDecidableEqOutputStatus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.instDecidableEqOutputStatus","kind":"instance","line":210,"name":"Lake.instDecidableEqOutputStatus","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L210-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.OutputStatus.hashUpToDate\"><span class=\"name\">Lake</span>.<span class=\"name\">OutputStatus</span>.<span class=\"name\">hashUpToDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a></div></div>","info":{"doc":"Up-to-date by hash ","docLink":"./Lake/Build/Common.html#Lake.OutputStatus.hashUpToDate","kind":"ctor","line":209,"name":"Lake.OutputStatus.hashUpToDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L209-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.OutputStatus.mtimeUpToDate\"><span class=\"name\">Lake</span>.<span class=\"name\">OutputStatus</span>.<span class=\"name\">mtimeUpToDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a></div></div>","info":{"doc":"Up-to-date by modification time ","docLink":"./Lake/Build/Common.html#Lake.OutputStatus.mtimeUpToDate","kind":"ctor","line":208,"name":"Lake.OutputStatus.mtimeUpToDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.OutputStatus.outOfDate\"><span class=\"name\">Lake</span>.<span class=\"name\">OutputStatus</span>.<span class=\"name\">outOfDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.OutputStatus\">OutputStatus</a></div></div>","info":{"doc":"Needs rebuild ","docLink":"./Lake/Build/Common.html#Lake.OutputStatus.outOfDate","kind":"ctor","line":207,"name":"Lake.OutputStatus.outOfDate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L207-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.OutputStatus\"><span class=\"name\">Lake</span>.<span class=\"name\">OutputStatus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Indicator of whether a build's output(s) are up-to-date. ","docLink":"./Lake/Build/Common.html#Lake.OutputStatus","kind":"inductive","line":205,"name":"Lake.OutputStatus","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L205-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.writeTraceFile\"><span class=\"name\">Lake</span>.<span class=\"name\">writeTraceFile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outputs</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.writeTraceFile","kind":"def","line":202,"name":"Lake.writeTraceFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L202-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.writeBuildTrace\"><span class=\"name\">Lake</span>.<span class=\"name\">writeBuildTrace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outputs</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Write a trace file containing metadata about a build. ","docLink":"./Lake/Build/Common.html#Lake.writeBuildTrace","kind":"def","line":197,"name":"Lake.writeBuildTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L197-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.writeFetchTrace\"><span class=\"name\">Lake</span>.<span class=\"name\">writeFetchTrace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inputHash</span> : <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outputs</span> : <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Write a trace file containing metadata on an artifact fetched from a cache. ","docLink":"./Lake/Build/Common.html#Lake.writeFetchTrace","kind":"def","line":193,"name":"Lake.writeFetchTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L193-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.writeFile\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">writeFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Write a trace file containing the metadata. ","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.writeFile","kind":"def","line":188,"name":"Lake.BuildMetadata.writeFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L188-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.readTraceFile?\"><span class=\"name\">Lake</span>.<span class=\"name\">readTraceFile?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogIO\">LogIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span></div></div>","info":{"doc":"Tries to read data from a trace file. On failure, returns `none`.\nLogs if the read failed or the contents where invalid.\n","docLink":"./Lake/Build/Common.html#Lake.readTraceFile?","kind":"def","line":180,"name":"Lake.readTraceFile?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L180-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.readTraceFile\"><span class=\"name\">Lake</span>.<span class=\"name\">readTraceFile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogIO\">LogIO</a> <a href=\"./Lake/Build/Common.html#Lake.SavedTrace\">SavedTrace</a></span></div></div>","info":{"doc":"Try to read data from a trace file.\nLogs if the read failed or the contents where invalid.\n","docLink":"./Lake/Build/Common.html#Lake.readTraceFile","kind":"def","line":162,"name":"Lake.readTraceFile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L162-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.SavedTrace.ok\"><span class=\"name\">Lake</span>.<span class=\"name\">SavedTrace</span>.<span class=\"name\">ok</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.SavedTrace\">SavedTrace</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.SavedTrace.ok","kind":"ctor","line":160,"name":"Lake.SavedTrace.ok","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L160-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.SavedTrace.invalid\"><span class=\"name\">Lake</span>.<span class=\"name\">SavedTrace</span>.<span class=\"name\">invalid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.SavedTrace\">SavedTrace</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.SavedTrace.invalid","kind":"ctor","line":159,"name":"Lake.SavedTrace.invalid","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.SavedTrace.missing\"><span class=\"name\">Lake</span>.<span class=\"name\">SavedTrace</span>.<span class=\"name\">missing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.SavedTrace\">SavedTrace</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.SavedTrace.missing","kind":"ctor","line":158,"name":"Lake.SavedTrace.missing","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.SavedTrace\"><span class=\"name\">Lake</span>.<span class=\"name\">SavedTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The state of the trace file data saved on the file system. ","docLink":"./Lake/Build/Common.html#Lake.SavedTrace","kind":"inductive","line":156,"name":"Lake.SavedTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L156-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.ofBuild\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">ofBuild</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depTrace</span> : <a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outputs</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></div></div>","info":{"doc":"Construct trace file contents from a build's trace, outputs, and log. ","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.ofBuild","kind":"def","line":151,"name":"Lake.BuildMetadata.ofBuild","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L151-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.ofFetch\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">ofFetch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inputHash</span> : <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outputs</span> : <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></div></div>","info":{"doc":"Construct build metadata from a cached input-to-output mapping. ","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.ofFetch","kind":"def","line":129,"name":"Lake.BuildMetadata.ofFetch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L129-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.parse\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contents</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></span></div></div>","info":{"doc":"Parse build metadata from a trace file's contents. ","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.parse","kind":"def","line":125,"name":"Lake.BuildMetadata.parse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L125-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.instFromJsonBuildMetadata\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonBuildMetadata</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.instFromJsonBuildMetadata","kind":"instance","line":123,"name":"Lake.instFromJsonBuildMetadata","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.fromJson?\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">fromJson?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">json</span> : <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.fromJson?","kind":"def","line":103,"name":"Lake.BuildMetadata.fromJson?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L103-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.fromJsonObject?\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">fromJsonObject?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">obj</span> : <a href=\"./Lake/Util/JsonObject.html#Lake.JsonObject\">JsonObject</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.fromJsonObject?","kind":"def","line":90,"name":"Lake.BuildMetadata.fromJsonObject?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L90-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.ofHash\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">ofHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hash</span> : <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.ofHash","kind":"def","line":87,"name":"Lake.BuildMetadata.ofHash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L87-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.ofStub\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">ofStub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hash</span> : <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></div></div>","info":{"doc":"Construct build metadata from a trace stub.\nThat is, the very old version of the trace file format that just contained a hash.\n","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.ofStub","kind":"def","line":80,"name":"Lake.BuildMetadata.ofStub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L80-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.instToJsonBuildMetadata\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonBuildMetadata</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">Lean.ToJson</a> <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.instToJsonBuildMetadata","kind":"instance","line":78,"name":"Lake.instToJsonBuildMetadata","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.toJson\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">toJson</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.toJson","kind":"def","line":69,"name":"Lake.BuildMetadata.toJson","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L69-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.synthetic\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">synthetic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"A trace file that was created from fetching an artifact from the cache. ","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.synthetic","kind":"def","line":64,"name":"Lake.BuildMetadata.synthetic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.log\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">log</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.log","kind":"def","line":62,"name":"Lake.BuildMetadata.log","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.outputs?\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">outputs?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.outputs?","kind":"def","line":61,"name":"Lake.BuildMetadata.outputs?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.inputs\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">inputs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a>)</span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.inputs","kind":"def","line":60,"name":"Lake.BuildMetadata.inputs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.depHash\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">depHash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.depHash","kind":"def","line":59,"name":"Lake.BuildMetadata.depHash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depHash</span> : <a href=\"./Lake/Build/Trace.html#Lake.Hash\">Hash</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inputs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outputs?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthetic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Common.html#Lake.BuildMetadata\">BuildMetadata</a></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata.mk","kind":"ctor","line":58,"name":"Lake.BuildMetadata.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.BuildMetadata\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildMetadata</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The build trace file format,\nwhich stores information about a (successful) build.\n","docLink":"./Lake/Build/Common.html#Lake.BuildMetadata","kind":"structure","line":54,"name":"Lake.BuildMetadata","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L54-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.addPureTrace\"><span class=\"name\">Lake</span>.<span class=\"name\">addPureTrace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Trace.html#Lake.ComputeHash\">ComputeHash</a> <span class=\"fn\">α</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caption</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;pure&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Mixes the trace of a pure value into the current job's trace. ","docLink":"./Lake/Build/Common.html#Lake.addPureTrace","kind":"def","line":49,"name":"Lake.addPureTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L49-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.addLeanTrace\"><span class=\"name\">Lake</span>.<span class=\"name\">addLeanTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Mixes Lean's trace into the current job's trace. ","docLink":"./Lake/Build/Common.html#Lake.addLeanTrace","kind":"def","line":45,"name":"Lake.addLeanTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L45-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.addPlatformTrace\"><span class=\"name\">Lake</span>.<span class=\"name\">addPlatformTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Mixes the platform into the current job's trace.\nIf an artifact includes this trace, it is platform-dependent\nand will be rebuilt on different host platforms.\n","docLink":"./Lake/Build/Common.html#Lake.addPlatformTrace","kind":"def","line":37,"name":"Lake.addPlatformTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L37-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.platformTrace\"><span class=\"name\">Lake</span>.<span class=\"name\">platformTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Build/Trace.html#Lake.BuildTrace\">BuildTrace</a></div></div>","info":{"doc":"Build trace for the host platform.\nIf an artifact includes this trace, it is platform-dependent\nand will be rebuilt on different host platforms.\n","docLink":"./Lake/Build/Common.html#Lake.platformTrace","kind":"def","line":30,"name":"Lake.platformTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L30-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Common.html#Lake.instMonadWorkspaceJobM\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadWorkspaceJobM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Monad.html#Lake.MonadWorkspace\">MonadWorkspace</a> <a href=\"./Lake/Build/Job/Monad.html#Lake.JobM\">JobM</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Build/Common.html#Lake.instMonadWorkspaceJobM","kind":"instance","line":27,"name":"Lake.instMonadWorkspaceJobM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/lake/Lake/Build/Common.lean#L27-L27"}}],"imports":["Lake.Build.Job.Monad","Lake.Config.Monad","Lake.Util.JsonObject","Lake.Util.IO","Lake.Build.Target.Fetch","Lake.Build.Actions"],"instances":[{"className":"Lake.MonadWorkspace","name":"Lake.instMonadWorkspaceJobM","typeNames":["Lake.JobM"]},{"className":"Lean.ToJson","name":"Lake.instToJsonBuildMetadata","typeNames":["Lake.BuildMetadata"]},{"className":"Lean.FromJson","name":"Lake.instFromJsonBuildMetadata","typeNames":["Lake.BuildMetadata"]},{"className":"Decidable","name":"Lake.instDecidableEqOutputStatus","typeNames":["Eq"]},{"className":"Lake.ToOutputJson","name":"Lake.instToOutputJsonPUnit","typeNames":["PUnit"]},{"className":"Lake.ToOutputJson","name":"Lake.instToOutputJsonArtifact","typeNames":["Lake.Artifact"]}],"name":"Lake.Build.Common"}