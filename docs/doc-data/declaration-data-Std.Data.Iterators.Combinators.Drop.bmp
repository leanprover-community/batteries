{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Combinators/Drop.html#Std.Iterators.Iter.drop\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Iter</span>.<span class=\"name\">drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Given an iterator `it` and a natural number `n`, `it.drop n` is an iterator that forwards all of\n`it`'s output values except for the first `n`.\n\n**Marble diagram:**\n\n```text\nit          ---a----b---c--d-e--⊥\nit.drop 3   ---------------d-e--⊥\n\nit          ---a--⊥\nit.drop 3   ------⊥\n```\n\n**Termination properties:**\n\n* `Finite` instance: only if `it` is finite\n* `Productive` instance: only if `it` is productive\n\n**Performance:**\n\nCurrently, this combinator incurs an additional O(1) cost with each output of `it`, even when the iterator\ndoes not drop any elements anymore.\n","docLink":"./Std/Data/Iterators/Combinators/Drop.html#Std.Iterators.Iter.drop","kind":"def","line":15,"name":"Std.Iterators.Iter.drop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Combinators/Drop.lean#L15-L42"}}],"imports":["Std.Data.Iterators.Combinators.Monadic.Drop"],"instances":[],"name":"Std.Data.Iterators.Combinators.Drop"}