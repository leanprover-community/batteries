{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpJpCases?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span></div></div>","info":{"doc":"Try to optimize `jpCases` join points.\nWe say a join point is a `jpCases` when it satisfies the predicate `isJpCases`.\nIf we have a jump to `jpCases` with a constructor, then we can optimize the code by creating an new join point for\nthe constructor.\nExample: suppose we have\n```lean\njp _jp.1 y :=\n  let x.1 := true\n  cases y\n  | nil => let x.2 := g x.1; return x.2\n  | cons h t => let x.3 := h x.1; return x.3\n...\ncases x.4\n| ctor1 =>\n  let x.5 := cons z.1 z.2\n  jmp _jp.1 x.5\n| ctor2 =>\n  let x.6 := f x.4\n  jmp _jp.1 x.6\n```\nThis `simpJpCases?` converts it to\n```lean\njp _jp.2 h t :=\n  let x.1 := true\n  let x.3 := h x.1\n  return x.3\njp _jp.1 y :=\n  let x.1 := true\n  cases y\n  | nil => let x.2 := g x.1; return x.2\n  | cons h t => jmp _jp.2 h t\n...\ncases x.4\n| ctor1 =>\n  -- The constructor has been eliminated here\n  jmp _jp.2 z.1 z.2\n| ctor2 =>\n  let x.6 := f x.4\n  jmp _jp.1 x.6\n```\nNote that if all jumps to the join point are with constructors,\nthen the join point is eliminated as dead code.\n","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?","kind":"def","line":153,"name":"Lean.Compiler.LCNF.Simp.simpJpCases?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L153-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Ctor2JpCasesAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt","kind":"def","line":107,"name":"Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.dependsOnDiscr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span>.<span class=\"name\">dependsOnDiscr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\">JpCasesAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.dependsOnDiscr","kind":"def","line":105,"name":"Lean.Compiler.LCNF.Simp.JpCasesAlt.dependsOnDiscr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\">JpCasesAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.default","kind":"def","line":104,"name":"Lean.Compiler.LCNF.Simp.JpCasesAlt.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\">JpCasesAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.decl","kind":"def","line":103,"name":"Lean.Compiler.LCNF.Simp.JpCasesAlt.decl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">default </span><span class=\"fn\">dependsOnDiscr</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\">JpCasesAlt</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.mk","kind":"ctor","line":102,"name":"Lean.Compiler.LCNF.Simp.JpCasesAlt.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt","kind":"structure","line":102,"name":"Lean.Compiler.LCNF.Simp.JpCasesAlt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L102-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.collectJpCasesInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">collectJpCasesInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\">JpCasesInfoMap</a></span></div></div>","info":{"doc":"Return a map containing entries `jpFVarId â†¦ { paramIdx, ctorNames }` where `jpFVarId` is the id of join point\nin code that satisfies `isJpCases`, and `ctorNames` is a set of constructor names such that\nthere is a jump `.jmp jpFVarId #[..., x, ...]` in `code` and `x` is a constructor application.\n`paramIdx` is the index of the parameter\n","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.collectJpCasesInfo","kind":"def","line":61,"name":"Lean.Compiler.LCNF.Simp.collectJpCasesInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L61-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap.isCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfoMap</span>.<span class=\"name\">isCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\">JpCasesInfoMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if the collected information suggests opportunities for the `JpCases` optimization. ","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap.isCandidate","kind":"def","line":57,"name":"Lean.Compiler.LCNF.Simp.JpCasesInfoMap.isCandidate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L57-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfoMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap","kind":"def","line":55,"name":"Lean.Compiler.LCNF.Simp.JpCasesInfoMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedJpCasesInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo.default","kind":"def","line":53,"name":"Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedJpCasesInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo","kind":"instance","line":53,"name":"Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.ctorNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfo</span>.<span class=\"name\">ctorNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"Set of constructor names s.t. `ctorName` is in the set if there is a jump to the join point where the parameter\n`paramIdx` is a constructor application.\n","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.ctorNames","kind":"def","line":52,"name":"Lean.Compiler.LCNF.Simp.JpCasesInfo.ctorNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.paramIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfo</span>.<span class=\"name\">paramIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Parameter index returned by `isJpCases?`. This parameter is the one the join point is performing the case-split. ","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.paramIdx","kind":"def","line":47,"name":"Lean.Compiler.LCNF.Simp.JpCasesInfo.paramIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorNames</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.mk","kind":"ctor","line":45,"name":"Lean.Compiler.LCNF.Simp.JpCasesInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Information for join points that satisfy `isJpCases?`\n","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo","kind":"structure","line":42,"name":"Lean.Compiler.LCNF.Simp.JpCasesInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L42-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.isJpCases?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">isJpCases?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"Given the function declaration `decl`, return `some idx` if it is of the form\n```\nf y :=\n  ... /- This part is not bigger than smallThreshold. -/\n  cases y\n  | ... => ...\n  ...\n```\n`idx` is the index of the parameter used in the `cases` statement.\n","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.isJpCases?","kind":"def","line":18,"name":"Lean.Compiler.LCNF.Simp.isJpCases?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L18-L40"}}],"imports":["Lean.Compiler.LCNF.DependsOn","Lean.Compiler.LCNF.Internalize","Lean.Compiler.LCNF.Simp.DiscrM"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo","typeNames":["Lean.Compiler.LCNF.Simp.JpCasesInfo"]}],"name":"Lean.Compiler.LCNF.Simp.JpCases"}