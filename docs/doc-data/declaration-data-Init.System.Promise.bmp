{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.isResolved\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">isResolved</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the promise has already been resolved, i.e. whether access to `result*` will return\nimmediately.\n","docLink":"./Init/System/Promise.html#IO.Promise.isResolved","kind":"def","line":80,"name":"IO.Promise.isResolved","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/Promise.lean#L80-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.resultD\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">resultD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dflt</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Like `Promise.result`, but resolves to `dflt` if the promise is dropped without ever being resolved.\n","docLink":"./Init/System/Promise.html#IO.Promise.resultD","kind":"def","line":74,"name":"IO.Promise.resultD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/Promise.lean#L74-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.result!\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">result!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The result task of a `Promise`.\n\nThe task blocks until `Promise.resolve` is called. If the promise is dropped without ever being\nresolved, evaluating the task will panic and, when not using fatal panics, block forever. As\n`Promise.result!` is a pure value and thus the point of evaluation may not be known precisely, this\nmeans that any promise on which `Promise.result!` *may* be evaluated *must* be resolved eventually.\nWhen in doubt, always prefer `Promise.result?` to handle dropped promises explicitly.\n","docLink":"./Init/System/Promise.html#IO.Promise.result!","kind":"def","line":61,"name":"IO.Promise.result!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/Promise.lean#L61-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.result?\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">result?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Like `Promise.result`, but resolves to `none` if the promise is dropped without ever being resolved.\n","docLink":"./Init/System/Promise.html#IO.Promise.result?","kind":"opaque","line":51,"name":"IO.Promise.result?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/Promise.lean#L51-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.resolve\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">resolve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">promise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Resolves a `Promise`.\n\nOnly the first call to this function has an effect.\n","docLink":"./Init/System/Promise.html#IO.Promise.resolve","kind":"opaque","line":43,"name":"IO.Promise.resolve","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/Promise.lean#L43-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise.new\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a new `Promise`. ","docLink":"./Init/System/Promise.html#IO.Promise.new","kind":"opaque","line":39,"name":"IO.Promise.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/Promise.lean#L39-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.instNonemptyPromise\"><span class=\"name\">IO</span>.<span class=\"name\">instNonemptyPromise</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Init/System/Promise.html#IO.Promise\">Promise</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/System/Promise.html#IO.instNonemptyPromise","kind":"instance","line":36,"name":"IO.instNonemptyPromise","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/Promise.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/System/Promise.html#IO.Promise\"><span class=\"name\">IO</span>.<span class=\"name\">Promise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Promise α` allows you to create a `Task α` whose value is provided later by calling `resolve`.\n\nTypical usage is as follows:\n1. `let promise ← Promise.new` creates a promise\n2. `promise.result? : Task (Option α)` can now be passed around\n3. `promise.result?.get` blocks until the promise is resolved\n4. `promise.resolve a` resolves the promise\n5. `promise.result?.get` now returns `some a`\n\nIf the promise is dropped without ever being resolved, `promise.result?.get` will return `none`.\nSee `Promise.result!/resultD` for other ways to handle this case.\n","docLink":"./Init/System/Promise.html#IO.Promise","kind":"structure","line":19,"name":"IO.Promise","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/System/Promise.lean#L19-L34"}}],"imports":["Init.System.IO"],"instances":[{"className":"Nonempty","name":"IO.instNonemptyPromise","typeNames":["IO.Promise"]}],"name":"Init.System.Promise"}