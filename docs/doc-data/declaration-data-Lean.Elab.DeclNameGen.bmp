{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.mkInstanceName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkInstanceName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Generates an instance name for a declaration that has the given binders and type.\nIt tries to make these names relatively unique ecosystem-wide.\n\nNote that this elaborates the binders and the type.\nThis means that when elaborating an instance declaration, we elaborate these twice.\n","docLink":"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.mkInstanceName","kind":"def","line":253,"name":"Lean.Elab.Command.mkInstanceName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DeclNameGen.lean#L253-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseNameWithSuffix'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">NameGen</span>.<span class=\"name\">mkBaseNameWithSuffix'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Elaborates the binders and type and then uses `mkBaseNameWithSuffix` to generate a name.\nFurthermore, uses `mkUnusedBaseName` on the result.\n","docLink":"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseNameWithSuffix'","kind":"def","line":237,"name":"Lean.Elab.Command.NameGen.mkBaseNameWithSuffix'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DeclNameGen.lean#L237-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseNameWithSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">NameGen</span>.<span class=\"name\">mkBaseNameWithSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Uses heuristics to generate an informative but terse base name for a term of the given type, using `mkBaseName`.\nMakes use of the current namespace.\nIt tries to make these names relatively unique ecosystem-wide,\nand it adds suffixes using the current module if the resulting name doesn't refer to anything defined in this module.\n\nIf any constant in `type` has a name with macro scopes, then the result will be a name with fresh macro scopes.\nWhile in this case we could skip the naming heuristics, we still want informative names for debugging purposes.\n","docLink":"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseNameWithSuffix","kind":"def","line":208,"name":"Lean.Elab.Command.NameGen.mkBaseNameWithSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DeclNameGen.lean#L208-L235"}}],"imports":["Lean.Elab.Command"],"instances":[],"name":"Lean.Elab.DeclNameGen"}