{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.extCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">extCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">100</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">failIfUnchanged</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span>)</span>)</span></div></div>","info":{"doc":"Apply extensionality theorems as much as possible, using `pats` to introduce the variables\nin extensionality theorems like `funext`. Returns a list of subgoals.\n\nThis is built on top of `withExtN`, running in `TermElabM` to build the list of new subgoals.\n(And, for each goal, the patterns consumed.)\n","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.extCore","kind":"def","line":294,"name":"Lean.Elab.Tactic.Ext.extCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Ext.lean#L294-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.applyExtTheoremAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Ext</span>.<span class=\"name\">applyExtTheoremAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Apply a single extensionality theorem to `goal`. ","docLink":"./Lean/Elab/Tactic/Ext.html#Lean.Elab.Tactic.Ext.applyExtTheoremAt","kind":"def","line":221,"name":"Lean.Elab.Tactic.Ext.applyExtTheoremAt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Tactic/Ext.lean#L221-L245"}}],"imports":["Lean.Meta.Tactic.Ext","Lean.Elab.Tactic.RCases","Lean.Elab.Tactic.Repeat","Lean.Elab.Tactic.BuiltinTactic","Lean.Elab.Command","Lean.Linter.Basic","Lean.Expr","Lean.Elab.Term.TermElabM"],"instances":[],"name":"Lean.Elab.Tactic.Ext"}