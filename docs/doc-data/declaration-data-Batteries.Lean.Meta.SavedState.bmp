{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/SavedState.html#Lean.Meta.getAssignedExprMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getAssignedExprMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preState </span><span class=\"fn\">postState</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Returns the mvars that are declared but unassigned in `preState`, and\nassigned in `postState`. Delayed-assigned mvars are considered assigned.\n","docLink":"./Batteries/Lean/Meta/SavedState.html#Lean.Meta.getAssignedExprMVars","kind":"def","line":43,"name":"Lean.Meta.getAssignedExprMVars","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/SavedState.lean#L43-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/SavedState.html#Lean.Meta.getIntroducedExprMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getIntroducedExprMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preState </span><span class=\"fn\">postState</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Returns the mvars that are not declared in `preState`, but declared and\nunassigned in `postState`. Delayed-assigned mvars are considered assigned.\n","docLink":"./Batteries/Lean/Meta/SavedState.html#Lean.Meta.getIntroducedExprMVars","kind":"def","line":33,"name":"Lean.Meta.getIntroducedExprMVars","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/SavedState.lean#L33-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/SavedState.html#Lean.Meta.SavedState.runMetaM'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">runMetaM'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run the action `x` in state `s`. Returns the result of `x`. The global state\nremains unchanged.\n","docLink":"./Batteries/Lean/Meta/SavedState.html#Lean.Meta.SavedState.runMetaM'","kind":"def","line":23,"name":"Lean.Meta.SavedState.runMetaM'","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/SavedState.lean#L23-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/SavedState.html#Lean.Meta.SavedState.runMetaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">runMetaM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">SavedState</a>)</span></div></div>","info":{"doc":"Run the action `x` in state `s`. Returns the result of `x` and the state after\n`x` was executed. The global state remains unchanged.\n","docLink":"./Batteries/Lean/Meta/SavedState.html#Lean.Meta.SavedState.runMetaM","kind":"def","line":15,"name":"Lean.Meta.SavedState.runMetaM","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Lean/Meta/SavedState.lean#L15-L21"}}],"imports":["Init","Batteries.Lean.Meta.Basic","Batteries.Lean.MonadBacktrack"],"instances":[],"name":"Batteries.Lean.Meta.SavedState"}