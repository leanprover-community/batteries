{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.max\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">Max.max</a> <span class=\"fn\">n</span> <span class=\"fn\">val</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">Max.max</a> <span class=\"fn\">m</span> <span class=\"fn\">val</span>)</span></span></div></div>","info":{"doc":"Returns the maximum between a number and the bounded.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.max","kind":"def","line":467,"name":"Std.Time.Internal.Bounded.LE.max","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L467-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.abs\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bo</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>) <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"Returns the absolute value of the bounded number `bo` with bounds `-(i - 1)` to `i - 1`. The result\nwill be a new bounded number with bounds `0` to `i - 1`.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.abs","kind":"def","line":454,"name":"Std.Time.Internal.Bounded.LE.abs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L454-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.succ\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">bounded</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>","info":{"doc":"Adds one to the value of the bounded if the value is less than the higher bound of the bounded number.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.succ","kind":"def","line":446,"name":"Std.Time.Internal.Bounded.LE.succ","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L446-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expandBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">nlo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">nlo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">nlo</span> <span class=\"fn\">hi</span></span></div></div>","info":{"doc":"Expand the bottom of the bounded to a number `nlo` if `lo` is greater or equal to the previous lower bound.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandBottom","kind":"def","line":439,"name":"Std.Time.Internal.Bounded.LE.expandBottom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L439-L444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expandTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">nhi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">nhi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">nhi</span></span></div></div>","info":{"doc":"Expand the bottom of the bounded to a number `nhi` is `hi` is less or equal to the previous higher bound.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandTop","kind":"def","line":432,"name":"Std.Time.Internal.Bounded.LE.expandTop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L432-L437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expand\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">nhi </span><span class=\"fn\">nlo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">nhi</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">nlo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">nlo</span> <span class=\"fn\">nhi</span></span></div></div>","info":{"doc":"Expand the range of a bounded value.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expand","kind":"def","line":425,"name":"Std.Time.Internal.Bounded.LE.expand","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L425-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.eq\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.eq","kind":"def","line":421,"name":"Std.Time.Internal.Bounded.LE.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L421-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ediv\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ediv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">num</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">num</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by applying the div operation.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ediv","kind":"def","line":407,"name":"Std.Time.Internal.Bounded.LE.ediv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L407-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>) (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by applying the multiplication operation with a positive number.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_neg","kind":"def","line":398,"name":"Std.Time.Internal.Bounded.LE.mul_neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L398-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_pos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mul_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by applying the multiplication operation with a positive number.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_pos","kind":"def","line":389,"name":"Std.Time.Internal.Bounded.LE.mul_pos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L389-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">num</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num✝</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">num✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">num✝</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)) (<span class=\"fn\">num✝</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by applying the mod operation.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mod","kind":"def","line":382,"name":"Std.Time.Internal.Bounded.LE.mod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L382-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.emod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">emod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">num</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num✝</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">num✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> (<span class=\"fn\">num✝</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by applying the emod operation constraining the lower bound to 0 and\nthe upper bound to the value.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.emod","kind":"def","line":374,"name":"Std.Time.Internal.Bounded.LE.emod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L374-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBounds\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">subBounds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded₂</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">j</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span>)</span></div></div>","info":{"doc":"Adds two `Bounded` and adjust the boundaries.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBounds","kind":"def","line":367,"name":"Std.Time.Internal.Bounded.LE.subBounds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L367-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.sub\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by subtracting a constant value to both the lower and upper bounds.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.sub","kind":"def","line":360,"name":"Std.Time.Internal.Bounded.LE.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L360-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addBounds\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addBounds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded₂</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">j</span>)</span></div></div>","info":{"doc":"Adds two `Bounded` and adjust the boundaries.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addBounds","kind":"def","line":351,"name":"Std.Time.Internal.Bounded.LE.addBounds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L351-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">subBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>) <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by adding a constant value to the lower bounds.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBottom","kind":"def","line":340,"name":"Std.Time.Internal.Bounded.LE.subBottom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L340-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by adding a constant value to the upper bounds.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addTop","kind":"def","line":329,"name":"Std.Time.Internal.Bounded.LE.addTop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L329-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addProven\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addProven</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\">bounded</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addProven","kind":"def","line":320,"name":"Std.Time.Internal.Bounded.LE.addProven","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L320-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.add\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.add","kind":"def","line":310,"name":"Std.Time.Internal.Bounded.LE.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L310-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.neg\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">m</span>) (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.neg","kind":"def","line":301,"name":"Std.Time.Internal.Bounded.LE.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L301-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncateBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">bounded</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">j</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by changing the lower bound if another value `j` satisfies the same\nconstraint.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateBottom","kind":"def","line":291,"name":"Std.Time.Internal.Bounded.LE.truncateBottom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L291-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncateTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">bounded</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">j</span></span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by changing the higher bound if another value `j` satisfies the same\nconstraint.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateTop","kind":"def","line":281,"name":"Std.Time.Internal.Bounded.LE.truncateTop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L281-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span>)</span></div></div>","info":{"doc":"Adjust the bounds of a `Bounded` by setting the lower bound to zero and the maximum value to (m - n).\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncate","kind":"def","line":272,"name":"Std.Time.Internal.Bounded.LE.truncate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L272-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byMod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">byMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"Creates a new `Bounded.LE` using a the Truncating modulus of a number.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byMod","kind":"def","line":252,"name":"Std.Time.Internal.Bounded.LE.byMod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L252-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byEmod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">byEmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"Creates a new `Bounded.LE` using a the modulus of a number.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byEmod","kind":"def","line":239,"name":"Std.Time.Internal.Bounded.LE.byEmod","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L239-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofFin'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi </span><span class=\"fn\">lo</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fin</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">↑<span class=\"fn\">lo</span></span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>","info":{"doc":"Convert a `Fin` to a `Bounded.LE`.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin'","kind":"def","line":230,"name":"Std.Time.Internal.Bounded.LE.ofFin'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L230-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fin</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>","info":{"doc":"Convert a `Fin` to a `Bounded.LE`.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin","kind":"def","line":223,"name":"Std.Time.Internal.Bounded.LE.ofFin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L223-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toFin\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span></div></div>","info":{"doc":"Convert a `Bounded.LE` to a `Fin`.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toFin","kind":"def","line":212,"name":"Std.Time.Internal.Bounded.LE.toFin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L212-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Convert a `Bounded.LE` to an Int.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toInt","kind":"def","line":205,"name":"Std.Time.Internal.Bounded.LE.toInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L205-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Convert a `Bounded.LE` to a Nat.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat'","kind":"def","line":195,"name":"Std.Time.Internal.Bounded.LE.toNat'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L195-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Convert a `Bounded.LE` to a Nat.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat","kind":"def","line":188,"name":"Std.Time.Internal.Bounded.LE.toNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L188-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.clip\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">clip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>","info":{"doc":"Convert a `Nat` to a `Bounded.LE` using the lower boundary too.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.clip","kind":"def","line":177,"name":"Std.Time.Internal.Bounded.LE.clip","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L177-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">↑<span class=\"fn\">lo</span></span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>","info":{"doc":"Convert a `Nat` to a `Bounded.LE` using the lower boundary too.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat'","kind":"def","line":170,"name":"Std.Time.Internal.Bounded.LE.ofNat'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L170-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat?\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span>)</span></span></div></div>","info":{"doc":"Convert a `Nat` to a `Bounded.LE` if it checks.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat?","kind":"def","line":160,"name":"Std.Time.Internal.Bounded.LE.ofNat?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L160-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>","info":{"doc":"Convert a `Nat` to a `Bounded.LE`.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat","kind":"def","line":153,"name":"Std.Time.Internal.Bounded.LE.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L153-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span></span></div></div>","info":{"doc":"Creates a new `Bounded` integer.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofInt","kind":"def","line":144,"name":"Std.Time.Internal.Bounded.LE.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L144-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.exact\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">↑<span class=\"fn\">val</span></span> <span class=\"fn\">↑<span class=\"fn\">val</span></span></span></div></div>","info":{"doc":"Creates a new `Bounded` integer that the relation is less-equal.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.exact","kind":"def","line":137,"name":"Std.Time.Internal.Bounded.LE.exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L137-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>","info":{"doc":"Creates a new `Bounded` integer that the relation is less-equal.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mk","kind":"def","line":130,"name":"Std.Time.Internal.Bounded.LE.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L130-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">instInhabitedHAddIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> (<span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>))</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","kind":"instance","line":125,"name":"Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L125-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">instOfNatHAddIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> (<span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>))</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","kind":"instance","line":120,"name":"Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L120-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNatWrapping\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNatWrapping</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>","info":{"doc":"Convert a `Nat` to a `Bounded.LE` by wrapping it.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNatWrapping","kind":"def","line":101,"name":"Std.Time.Internal.Bounded.LE.ofNatWrapping","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L101-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.ofInt?\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">ofInt?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">rel</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span></span></div></div>","info":{"doc":"Convert a `Int` to a `Bounded` if it checks.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.ofInt?","kind":"def","line":89,"name":"Std.Time.Internal.Bounded.ofInt?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L89-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">val</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>","info":{"doc":"Creates a new `Bounded` Integer.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.mk","kind":"def","line":82,"name":"Std.Time.Internal.Bounded.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L82-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LT\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Bounded` integer that the relation used is the the less-than relation so, it includes all\nintegers that `lo < val < hi`.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LT","kind":"def","line":76,"name":"Std.Time.Internal.Bounded.LT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L76-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.cast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo₁ </span><span class=\"fn\">lo₂ </span><span class=\"fn\">hi₁ </span><span class=\"fn\">hi₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">lo₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lo₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">hi₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">hi₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo₁</span> <span class=\"fn\">hi₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo₂</span> <span class=\"fn\">hi₂</span></span></div></div>","info":{"doc":"Casts the boundaries of the `Bounded` using equivalences.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.cast","kind":"def","line":69,"name":"Std.Time.Internal.Bounded.cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L69-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Bounded` integer that the relation used is the the less-equal relation so, it includes all\nintegers that `lo ≤ val ≤ hi`.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE","kind":"def","line":63,"name":"Std.Time.Internal.Bounded.LE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L63-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLawfulEqOrd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instLawfulEqOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLawfulEqOrd","kind":"instance","line":58,"name":"Std.Time.Internal.Bounded.instLawfulEqOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instTransOrd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instTransOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instTransOrd","kind":"instance","line":55,"name":"Std.Time.Internal.Bounded.instTransOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instOrientedOrd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instOrientedOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedOrd\">OrientedOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instOrientedOrd","kind":"instance","line":52,"name":"Std.Time.Internal.Bounded.instOrientedOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L52-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableLe\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableLe","kind":"instance","line":48,"name":"Std.Time.Internal.Bounded.instDecidableLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L48-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableEq\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableEq","kind":"instance","line":45,"name":"Std.Time.Internal.Bounded.instDecidableEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instRepr","kind":"instance","line":41,"name":"Std.Time.Internal.Bounded.instRepr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L41-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instOrd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instOrd","kind":"instance","line":37,"name":"Std.Time.Internal.Bounded.instOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L37-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLT\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">_root_.LT</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLT","kind":"instance","line":33,"name":"Std.Time.Internal.Bounded.instLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L33-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLE\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLE","kind":"instance","line":29,"name":"Std.Time.Internal.Bounded.instLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L29-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Bounded` is represented by an `Int` that is constrained by a lower and higher bounded using some\nrelation `rel`. It includes all the integers that `rel lo val ∧ rel val hi`.\n","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded","kind":"def","line":21,"name":"Std.Time.Internal.Bounded","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Time/Internal/Bounded.lean#L21-L25"}}],"imports":["Init.Data.Int.DivMod.Lemmas","Init.Data.Order.Ord","Init.Data.Subtype.Basic"],"instances":[{"className":"LE","name":"Std.Time.Internal.Bounded.instLE","typeNames":["Std.Time.Internal.Bounded"]},{"className":"LT","name":"Std.Time.Internal.Bounded.instLT","typeNames":["Std.Time.Internal.Bounded"]},{"className":"Ord","name":"Std.Time.Internal.Bounded.instOrd","typeNames":["Std.Time.Internal.Bounded"]},{"className":"Repr","name":"Std.Time.Internal.Bounded.instRepr","typeNames":["Std.Time.Internal.Bounded"]},{"className":"Decidable","name":"Std.Time.Internal.Bounded.instDecidableEq","typeNames":["Eq"]},{"className":"Decidable","name":"Std.Time.Internal.Bounded.instDecidableLe","typeNames":["LE.le"]},{"className":"Std.OrientedCmp","name":"Std.Time.Internal.Bounded.instOrientedOrd","typeNames":["Std.Time.Internal.Bounded"]},{"className":"Std.TransCmp","name":"Std.Time.Internal.Bounded.instTransOrd","typeNames":["Std.Time.Internal.Bounded"]},{"className":"Std.LawfulEqCmp","name":"Std.Time.Internal.Bounded.instLawfulEqOrd","typeNames":["Std.Time.Internal.Bounded"]},{"className":"OfNat","name":"Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","typeNames":["Std.Time.Internal.Bounded.LE"]},{"className":"Inhabited","name":"Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","typeNames":["Std.Time.Internal.Bounded.LE"]}],"name":"Std.Time.Internal.Bounded"}