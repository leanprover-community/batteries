{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.modify'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">modify'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a> → <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.modify'","kind":"def","line":152,"name":"Lean.Meta.Grind.Order.modify'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L152-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.get'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">get'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.get'","kind":"def","line":149,"name":"Lean.Meta.Grind.Order.get'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L149-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.orderExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">orderExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.orderExt","kind":"opaque","line":147,"name":"Lean.Meta.Grind.Order.orderExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedState.default","kind":"def","line":145,"name":"Lean.Meta.Grind.Order.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedState","kind":"instance","line":145,"name":"Lean.Meta.Grind.Order.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.cnstrsMapInv\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">State</span>.<span class=\"name\">cnstrsMapInv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"`cnstrsMap` inverse ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.cnstrsMapInv","kind":"def","line":144,"name":"Lean.Meta.Grind.Order.State.cnstrsMapInv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.cnstrsMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">State</span>.<span class=\"name\">cnstrsMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Mapping from terms/constraints that have been mapped into `Ring`s before being internalized.\nExample: given `x y : Nat`, `x ≤ y + 1` is mapped to `Int.ofNat x ≤ Int.ofNat y + 1`, and proof\nof equivalence.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.cnstrsMap","kind":"def","line":142,"name":"Lean.Meta.Grind.Order.State.cnstrsMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.exprToStructId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">State</span>.<span class=\"name\">exprToStructId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Mapping from expressions/terms to their structure ids. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.exprToStructId","kind":"def","line":136,"name":"Lean.Meta.Grind.Order.State.exprToStructId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.typeIdOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">State</span>.<span class=\"name\">typeIdOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"Mapping from types to its \"structure id\". We cache failures using `none`.\n`typeIdOf[type]` is `some id`, then `id < structs.size`. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.typeIdOf","kind":"def","line":134,"name":"Lean.Meta.Grind.Order.State.typeIdOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.structs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">State</span>.<span class=\"name\">structs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a></span></div></div>","info":{"doc":"Order structures detected. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.structs","kind":"def","line":130,"name":"Lean.Meta.Grind.Order.State.structs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeIdOf</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprToStructId</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnstrsMap </span><span class=\"fn\">cnstrsMapInv</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State.mk","kind":"ctor","line":128,"name":"Lean.Meta.Grind.Order.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for all order types detected by `grind`. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.State","kind":"structure","line":127,"name":"Lean.Meta.Grind.Order.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L127-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedStruct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedStruct","kind":"instance","line":125,"name":"Lean.Meta.Grind.Order.instInhabitedStruct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedStruct.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedStruct</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedStruct.default","kind":"def","line":125,"name":"Lean.Meta.Grind.Order.instInhabitedStruct.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.propagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">propagate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate\">ToPropagate</a></span></div></div>","info":{"doc":"Truth values and equalities to propagate to core. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.propagate","kind":"def","line":124,"name":"Lean.Meta.Grind.Order.Struct.propagate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.proofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">proofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a>)</span></span></div></div>","info":{"doc":"Proof reconstruction information. For each node with id `u`, `proofs[u]` contains\npairs `(v, { w, proof })` s.t. there is a path from `u` to `v`, and\n`w` is the penultimate node in the path, and `proof` is the justification for\nthe last edge.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.proofs","kind":"def","line":122,"name":"Lean.Meta.Grind.Order.Struct.proofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.targets\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">targets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span></div></div>","info":{"doc":"For each node with id `u`, `targets[u]` contains\npairs `(v, k)` s.t. there is a path from `u` to `v` with weight `k`.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.targets","kind":"def","line":115,"name":"Lean.Meta.Grind.Order.Struct.targets","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.sources\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">sources</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span></div></div>","info":{"doc":"For each node with id `u`, `sources[u]` contains\npairs `(v, k)` s.t. there is a path from `v` to `u` with weight `k`.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.sources","kind":"def","line":110,"name":"Lean.Meta.Grind.Order.Struct.sources","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.cnstrsOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">cnstrsOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>","info":{"doc":"Mapping from pairs `(u, v)` to a list of constraints on `u` and `v`.\nWe use this mapping to implement exhaustive constraint propagation.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.cnstrsOf","kind":"def","line":105,"name":"Lean.Meta.Grind.Order.Struct.cnstrsOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.cnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">cnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span></div></div>","info":{"doc":"Mapping from `Expr` representing inequalities to constraints. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.cnstrs","kind":"def","line":100,"name":"Lean.Meta.Grind.Order.Struct.cnstrs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.nodeMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">nodeMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></span></div></div>","info":{"doc":"Mapping from `Expr` to a node representing it. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.nodeMap","kind":"def","line":98,"name":"Lean.Meta.Grind.Order.Struct.nodeMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.nodes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">nodes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Mapping from `NodeId` to the `Expr` represented by the node. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.nodes","kind":"def","line":96,"name":"Lean.Meta.Grind.Order.Struct.nodes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.ltFn?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ltFn?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.ltFn?","kind":"def","line":94,"name":"Lean.Meta.Grind.Order.Struct.ltFn?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.leFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">leFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.leFn","kind":"def","line":93,"name":"Lean.Meta.Grind.Order.Struct.leFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.orderedRingInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">orderedRingInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"`OrderedRing` instance if available ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.orderedRingInst?","kind":"def","line":92,"name":"Lean.Meta.Grind.Order.Struct.orderedRingInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.ringInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ringInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"`Ring` instance if available ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.ringInst?","kind":"def","line":90,"name":"Lean.Meta.Grind.Order.Struct.ringInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.isCommRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">isCommRing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`true` if `ringId?` is the Id of a commutative ring ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.isCommRing","kind":"def","line":88,"name":"Lean.Meta.Grind.Order.Struct.isCommRing","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.ringId?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ringId?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"`id` of the `CommRing` (or `Ring`) structure in the `grind ring` module if available. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.ringId?","kind":"def","line":86,"name":"Lean.Meta.Grind.Order.Struct.ringId?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.lawfulOrderLTInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">lawfulOrderLTInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"`LawfulOrderLT` instance if available ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.lawfulOrderLTInst?","kind":"def","line":84,"name":"Lean.Meta.Grind.Order.Struct.lawfulOrderLTInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.isLinearPreInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">isLinearPreInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"`IsLinearPreorder` instance if available ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.isLinearPreInst?","kind":"def","line":82,"name":"Lean.Meta.Grind.Order.Struct.isLinearPreInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.isPartialInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">isPartialInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"`IsPartialOrder` instance if available ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.isPartialInst?","kind":"def","line":80,"name":"Lean.Meta.Grind.Order.Struct.isPartialInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.ltInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">ltInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"`LT` instance if available ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.ltInst?","kind":"def","line":78,"name":"Lean.Meta.Grind.Order.Struct.ltInst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.leInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">leInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"`LE` instance  ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.leInst","kind":"def","line":76,"name":"Lean.Meta.Grind.Order.Struct.leInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.isPreorderInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">isPreorderInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.isPreorderInst","kind":"def","line":74,"name":"Lean.Meta.Grind.Order.Struct.isPreorderInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.u\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">u</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Level</a></div></div>","info":{"doc":"Cached `getDecLevel type` ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.u","kind":"def","line":73,"name":"Lean.Meta.Grind.Order.Struct.u","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.type","kind":"def","line":71,"name":"Lean.Meta.Grind.Order.Struct.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.id","kind":"def","line":70,"name":"Lean.Meta.Grind.Order.Struct.id","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isPreorderInst </span><span class=\"fn\">leInst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ltInst? </span><span class=\"fn\">isPartialInst? </span><span class=\"fn\">isLinearPreInst? </span><span class=\"fn\">lawfulOrderLTInst?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ringId?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isCommRing</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ringInst? </span><span class=\"fn\">orderedRingInst?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leFn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ltFn?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nodes</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nodeMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnstrs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnstrsOf</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sources </span><span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proofs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">propagate</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate\">ToPropagate</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\">Struct</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct.mk","kind":"ctor","line":69,"name":"Lean.Meta.Grind.Order.Struct.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Struct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for each order structure processed by this module.\nEach type must at least implement the instance `Std.IsPreorder`.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Struct","kind":"structure","line":65,"name":"Lean.Meta.Grind.Order.Struct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L65-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedToPropagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedToPropagate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate\">ToPropagate</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedToPropagate","kind":"instance","line":63,"name":"Lean.Meta.Grind.Order.instInhabitedToPropagate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedToPropagate.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedToPropagate</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate\">ToPropagate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedToPropagate.default","kind":"def","line":63,"name":"Lean.Meta.Grind.Order.instInhabitedToPropagate.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate\">ToPropagate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate.eq","kind":"ctor","line":62,"name":"Lean.Meta.Grind.Order.ToPropagate.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate.eqFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate\">ToPropagate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate.eqFalse","kind":"ctor","line":61,"name":"Lean.Meta.Grind.Order.ToPropagate.eqFalse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate.eqTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate\">ToPropagate</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate.eqTrue","kind":"ctor","line":60,"name":"Lean.Meta.Grind.Order.ToPropagate.eqTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ToPropagate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary inductive type for representing constraints and equalities\nthat should be propagated to core.\nRecall that we cannot compute proofs until the short-distance\ndata-structures have been fully updated when a new edge is inserted.\nThus, we store the information to be propagated into a list.\nSee field `propagate` in `State`.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ToPropagate","kind":"inductive","line":51,"name":"Lean.Meta.Grind.Order.ToPropagate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L51-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedProofInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedProofInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedProofInfo.default","kind":"def","line":49,"name":"Lean.Meta.Grind.Order.instInhabitedProofInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedProofInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedProofInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedProofInfo","kind":"instance","line":49,"name":"Lean.Meta.Grind.Order.instInhabitedProofInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo.proof","kind":"def","line":48,"name":"Lean.Meta.Grind.Order.ProofInfo.proof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo.k\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo.k","kind":"def","line":47,"name":"Lean.Meta.Grind.Order.ProofInfo.k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo.w\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">w</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo.w","kind":"def","line":46,"name":"Lean.Meta.Grind.Order.ProofInfo.w","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo.mk","kind":"ctor","line":45,"name":"Lean.Meta.Grind.Order.ProofInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">ProofInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary structure used for proof extraction.  ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo","kind":"structure","line":44,"name":"Lean.Meta.Grind.Order.ProofInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L44-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedWeight\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedWeight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedWeight","kind":"instance","line":42,"name":"Lean.Meta.Grind.Order.instInhabitedWeight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedWeight.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedWeight</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedWeight.default","kind":"def","line":42,"name":"Lean.Meta.Grind.Order.instInhabitedWeight.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight.strict\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Weight</span>.<span class=\"name\">strict</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight.strict","kind":"def","line":41,"name":"Lean.Meta.Grind.Order.Weight.strict","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight.k\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Weight</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight.k","kind":"def","line":40,"name":"Lean.Meta.Grind.Order.Weight.k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Weight</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">strict</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight.mk","kind":"ctor","line":39,"name":"Lean.Meta.Grind.Order.Weight.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Weight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight","kind":"structure","line":39,"name":"Lean.Meta.Grind.Order.Weight","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L39-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedCnstr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedCnstr</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedCnstr.default","kind":"def","line":37,"name":"Lean.Meta.Grind.Order.instInhabitedCnstr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedCnstr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedCnstr","kind":"instance","line":37,"name":"Lean.Meta.Grind.Order.instInhabitedCnstr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.h?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">h?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.h?","kind":"def","line":36,"name":"Lean.Meta.Grind.Order.Cnstr.h?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.e\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">e</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Denotation of this constraint as an expression. ","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.e","kind":"def","line":35,"name":"Lean.Meta.Grind.Order.Cnstr.e","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.k\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">k</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.k","kind":"def","line":33,"name":"Lean.Meta.Grind.Order.Cnstr.k","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.v\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">v</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.v","kind":"def","line":32,"name":"Lean.Meta.Grind.Order.Cnstr.v","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.u\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">u</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.u","kind":"def","line":31,"name":"Lean.Meta.Grind.Order.Cnstr.u","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">kind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind\">CnstrKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.kind","kind":"def","line":30,"name":"Lean.Meta.Grind.Order.Cnstr.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Cnstr</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind\">CnstrKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\">Cnstr</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr.mk","kind":"ctor","line":29,"name":"Lean.Meta.Grind.Order.Cnstr.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">Cnstr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A constraint of the form `u ≤ v + k` (`u < v + k` if `strict := true`)\nRemark: If the order does not support offsets, then `k` is zero.\n`h? := some h` if the Lean expression is not definitionally equal to the constraint,\nbut provably equal with proof `h`.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Cnstr","kind":"structure","line":23,"name":"Lean.Meta.Grind.Order.Cnstr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L23-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedCnstrKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedCnstrKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind\">CnstrKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedCnstrKind.default","kind":"def","line":21,"name":"Lean.Meta.Grind.Order.instInhabitedCnstrKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedCnstrKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">instInhabitedCnstrKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind\">CnstrKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.instInhabitedCnstrKind","kind":"instance","line":21,"name":"Lean.Meta.Grind.Order.instInhabitedCnstrKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">CnstrKind</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind\">CnstrKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind.lt","kind":"ctor","line":20,"name":"Lean.Meta.Grind.Order.CnstrKind.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind.le\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">CnstrKind</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind\">CnstrKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind.le","kind":"ctor","line":20,"name":"Lean.Meta.Grind.Order.CnstrKind.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">CnstrKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.CnstrKind","kind":"inductive","line":19,"name":"Lean.Meta.Grind.Order.CnstrKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L19-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">NodeId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId","kind":"def","line":17,"name":"Lean.Meta.Grind.Order.NodeId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Types.lean#L17-L17"}}],"imports":["Lean.Meta.Tactic.Grind.Types","Init.Data.Rat.Basic"],"instances":[{"className":"Inhabited","name":"Lean.Meta.Grind.Order.instInhabitedCnstrKind","typeNames":["Lean.Meta.Grind.Order.CnstrKind"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Order.instInhabitedCnstr","typeNames":["Lean.Meta.Grind.Order.Cnstr"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Order.instInhabitedWeight","typeNames":["Lean.Meta.Grind.Order.Weight"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Order.instInhabitedProofInfo","typeNames":["Lean.Meta.Grind.Order.ProofInfo"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Order.instInhabitedToPropagate","typeNames":["Lean.Meta.Grind.Order.ToPropagate"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Order.instInhabitedStruct","typeNames":["Lean.Meta.Grind.Order.Struct"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Order.instInhabitedState","typeNames":["Lean.Meta.Grind.Order.State"]}],"name":"Lean.Meta.Tactic.Grind.Order.Types"}