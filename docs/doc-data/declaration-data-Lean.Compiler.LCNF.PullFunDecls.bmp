{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.pullFunDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">pullFunDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.pullFunDecls","kind":"def","line":182,"name":"Lean.Compiler.LCNF.pullFunDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L182-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.Decl.pullFunDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">pullFunDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"Pull local function declarations and join points in the given declaration.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.Decl.pullFunDecls","kind":"def","line":174,"name":"Lean.Compiler.LCNF.Decl.pullFunDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L174-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.pull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">pull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"Pull local function declarations and join points in `code`.\nThe state contains the declarations being pulled.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.pull","kind":"opaque","line":146,"name":"Lean.Compiler.LCNF.PullFunDecls.pull","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L146-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.addToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">addToPull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isFun</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add local function declaration (or join point if `isFun = false`) to the state.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.addToPull","kind":"opaque","line":132,"name":"Lean.Compiler.LCNF.PullFunDecls.addToPull","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L132-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachJps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachJps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachJps","kind":"def","line":125,"name":"Lean.Compiler.LCNF.PullFunDecls.attachJps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L125-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachParamsDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"Similar to `attachFVarDeps`. Extract from the state any local function declarations that depends on the given\nparameters, **and** attach to code `k`.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps","kind":"def","line":117,"name":"Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L117-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachFVarDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"Extract from the state any local function declarations that depends on the given\nfree variable, **and** attach to code `k`.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps","kind":"def","line":109,"name":"Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L109-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>","info":{"doc":"Attach the given array of local function declarations and join points to `k`.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach","kind":"def","line":83,"name":"Lean.Compiler.LCNF.PullFunDecls.attach","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L83-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.attach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">attach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>","info":{"doc":"Construct the code `fun p.decl k` or `jp p.decl k`.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.attach","kind":"def","line":74,"name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.attach","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L74-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findParamsDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findParamsDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span></div></div>","info":{"doc":"Similar to `findFVarDeps`. Extract from the state any local function declarations that depends on the given\nparameters.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findParamsDeps","kind":"def","line":64,"name":"Lean.Compiler.LCNF.PullFunDecls.findParamsDeps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L64-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDeps","kind":"def","line":60,"name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDeps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L60-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDepsFixpoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint","kind":"opaque","line":53,"name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L53-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDirectDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span></div></div>","info":{"doc":"Extract from the state any local function declarations that depends on the given\nfree variable. The idea is that we have to stop pulling these declarations because they\ndepend on `fvarId`.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps","kind":"def","line":31,"name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L31-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">PullM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The `PullM` state contains the local function declarations and join points being pulled.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM","kind":"def","line":26,"name":"Lean.Compiler.LCNF.PullFunDecls.PullM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L26-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">instInhabitedToPull</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull.default","kind":"def","line":24,"name":"Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">instInhabitedToPull</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","kind":"instance","line":24,"name":"Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdHashSet\">FVarIdHashSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.used","kind":"def","line":23,"name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.used","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.decl","kind":"def","line":22,"name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.decl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">isFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun","kind":"def","line":21,"name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isFun</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdHashSet\">FVarIdHashSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.mk","kind":"ctor","line":20,"name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Local function declaration and join point being pulled.\n","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull","kind":"structure","line":17,"name":"Lean.Compiler.LCNF.PullFunDecls.ToPull","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/PullFunDecls.lean#L17-L24"}}],"imports":["Lean.Compiler.LCNF.DependsOn","Lean.Compiler.LCNF.PassManager"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","typeNames":["Lean.Compiler.LCNF.PullFunDecls.ToPull"]}],"name":"Lean.Compiler.LCNF.PullFunDecls"}