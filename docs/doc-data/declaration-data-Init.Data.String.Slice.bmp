{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.back\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">back</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the last character in `s`\\. If `s` is empty, returns `(default : Char)`\\.\n\nExamples:\n\n* `\"abc\".toSlice.back = 'c'`\n\n* `\"\".toSlice.back = (default : Char)`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.back","kind":"def","line":1189,"name":"String.Slice.back","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1189-L1198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.back?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">back?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Returns the last character in `s`\\. If `s` is empty, returns `none`\\.\n\nExamples:\n\n* `\"abc\".toSlice.back? = some 'c'`\n\n* `\"\".toSlice.back? = none`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.back?","kind":"def","line":1178,"name":"String.Slice.back?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1178-L1187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.front\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">front</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Returns the first character in `s`\\. If `s` is empty, returns `(default : Char)`\\.\n\nExamples:\n\n* `\"abc\".toSlice.front = 'a'`\n\n* `\"\".toSlice.front = (default : Char)`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.front","kind":"def","line":1167,"name":"String.Slice.front","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1167-L1176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.front?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">front?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Returns the first character in `s`\\. If `s` is empty, `none`\\.\n\nExamples:\n\n* `\"abc\".toSlice.front? = some 'a'`\n\n* `\"\".toSlice.front? = none`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.front?","kind":"def","line":1156,"name":"String.Slice.front?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1156-L1165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.toNat!\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">toNat!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Interprets a slice as the decimal representation of a natural number, returning it\\. Panics if the\nslice does not contain a decimal natural number\\.\n\nA slice can be interpreted as a decimal natural number if it is not empty and all the characters in\nit are digits\\.\n\nUse `isNat` to check whether `toNat!` would return a value\\. `toNat?` is a safer\nalternative that returns `none` instead of panicking when the string is not a natural number\\.\n\nExamples:\n\n* `\"0\".toSlice.toNat! = 0`\n\n* `\"5\".toSlice.toNat! = 5`\n\n* `\"587\".toSlice.toNat! = 587`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.toNat!","kind":"def","line":1135,"name":"String.Slice.toNat!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1135-L1154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.toNat?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">toNat?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Interprets a slice as the decimal representation of a natural number, returning it\\. Returns\n`none` if the slice does not contain a decimal natural number\\.\n\nA slice can be interpreted as a decimal natural number if it is not empty and all the characters in\nit are digits\\.\n\nUse `isNat` to check whether `toNat?` would return `some`\\.\n`toNat!` is an alternative that panics instead of\nreturning `none` when the slice is not a natural number\\.\n\nExamples:\n\n* `\"\".toSlice.toNat? = none`\n\n* `\"0\".toSlice.toNat? = some 0`\n\n* `\"5\".toSlice.toNat? = some 5`\n\n* `\"587\".toSlice.toNat? = some 587`\n\n* `\"-587\".toSlice.toNat? = none`\n\n* `\" 5\".toSlice.toNat? = none`\n\n* `\"2+3\".toSlice.toNat? = none`\n\n* `\"0xff\".toSlice.toNat? = none`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.toNat?","kind":"def","line":1108,"name":"String.Slice.toNat?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1108-L1133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.isNat\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">isNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the slice can be interpreted as the decimal representation of a natural number\\.\n\nA slice can be interpreted as a decimal natural number if it is not empty and all the characters in\nit are digits\\.\n\nUse `toNat?` or\n`toNat!` to convert such a slice to a natural number\\.\n\nExamples:\n\n* `\"\".toSlice.isNat = false`\n\n* `\"0\".toSlice.isNat = true`\n\n* `\"5\".toSlice.isNat = true`\n\n* `\"05\".toSlice.isNat = true`\n\n* `\"587\".toSlice.isNat = true`\n\n* `\"-587\".toSlice.isNat = false`\n\n* `\" 5\".toSlice.isNat = false`\n\n* `\"2+3\".toSlice.isNat = false`\n\n* `\"0xff\".toSlice.isNat = false`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.isNat","kind":"def","line":1084,"name":"String.Slice.isNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1084-L1106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.foldr\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Folds a function over a slice from the end, accumulating a value starting with `init`\\. The\naccumulated value is combined with each character in reverse order, using `f`\\.\n\nExamples:\n\n* `\"coffee tea water\".toSlice.foldr (fun c n => if c.isWhitespace then n + 1 else n) 0 = 2`\n\n* `\"coffee tea and water\".toSlice.foldr (fun c n => if c.isWhitespace then n + 1 else n) 0 = 3`\n\n* `\"coffee tea water\".toSlice.foldr (fun c s => s.push c) \"\" = \"retaw aet eeffoc\"`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.foldr","kind":"def","line":1071,"name":"String.Slice.foldr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1071-L1082"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.foldl\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Folds a function over a slice from the start, accumulating a value starting with `init`\\. The\naccumulated value is combined with each character in order, using `f`\\.\n\nExamples:\n\n* `\"coffee tea water\".toSlice.foldl (fun n c => if c.isWhitespace then n + 1 else n) 0 = 2`\n\n* `\"coffee tea and water\".toSlice.foldl (fun n c => if c.isWhitespace then n + 1 else n) 0 = 3`\n\n* `\"coffee tea water\".toSlice.foldl (·.push ·) \"\" = \"coffee tea water\"`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.foldl","kind":"def","line":1058,"name":"String.Slice.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1058-L1069"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.lines\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">lines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"Creates an iterator over all lines in `s` with the line ending characters `\\r\\n` or `\\n` being\nstripped\\.\n\nExamples:\n\n* `\"foo\\r\\nbar\\n\\nbaz\\n\".toSlice.lines.allowNontermination.toList  == [\"foo\".toSlice, \"bar\".toSlice, \"\".toSlice, \"baz\".toSlice]`\n\n* `\"foo\\r\\nbar\\n\\nbaz\".toSlice.lines.allowNontermination.toList  == [\"foo\".toSlice, \"bar\".toSlice, \"\".toSlice, \"baz\".toSlice]`\n\n* `\"foo\\r\\nbar\\n\\nbaz\\r\".toSlice.lines.allowNontermination.toList  == [\"foo\".toSlice, \"bar\".toSlice, \"\".toSlice, \"baz\\r\".toSlice]`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.lines","kind":"def","line":1046,"name":"String.Slice.lines","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1046-L1056"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.lines.lineMap\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">lines</span>.<span class=\"name\">lineMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.lines.lineMap","kind":"def","line":1037,"name":"String.Slice.lines.lineMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1037-L1044"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorLoopPartialUInt8OfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">instIteratorLoopPartialUInt8OfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Std.Iterators.IteratorLoopPartial</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorLoopPartialUInt8OfMonad","kind":"instance","line":1030,"name":"String.Slice.RevByteIterator.instIteratorLoopPartialUInt8OfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1030-L1031"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorLoopUInt8OfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">instIteratorLoopUInt8OfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Std.Iterators.IteratorLoop</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorLoopUInt8OfMonad","kind":"instance","line":1027,"name":"String.Slice.RevByteIterator.instIteratorLoopUInt8OfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1027-L1028"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorCollectPartialUInt8OfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">instIteratorCollectPartialUInt8OfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Std.Iterators.IteratorCollectPartial</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorCollectPartialUInt8OfMonad","kind":"instance","line":1024,"name":"String.Slice.RevByteIterator.instIteratorCollectPartialUInt8OfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1024-L1025"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorCollectUInt8OfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">instIteratorCollectUInt8OfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Std.Iterators.IteratorCollect</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorCollectUInt8OfMonad","kind":"instance","line":1021,"name":"String.Slice.RevByteIterator.instIteratorCollectUInt8OfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1021-L1022"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instFiniteUInt8\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">instFiniteUInt8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instFiniteUInt8","kind":"instance","line":1017,"name":"String.Slice.RevByteIterator.instFiniteUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L1017-L1019"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorUInt8OfPure\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">instIteratorUInt8OfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.instIteratorUInt8OfPure","kind":"instance","line":976,"name":"String.Slice.RevByteIterator.instIteratorUInt8OfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L976-L998"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevByteIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedRevByteIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevByteIterator","kind":"instance","line":969,"name":"String.Slice.instInhabitedRevByteIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L969-L972"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.revBytes\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">revBytes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"Creates an iterator over all bytes in {name}`s`, starting from the last one and iterating towards\nthe first one.\n\nExamples:\n * {lean}`\"abc\".toSlice.revBytes.toList = [99, 98, 97]`\n * {lean}`\"ab∀c\".toSlice.revBytes.toList = [99, 128, 136, 226, 98, 97]`\n","docLink":"./Init/Data/String/Slice.html#String.Slice.revBytes","kind":"def","line":956,"name":"String.Slice.revBytes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L956-L965"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.hinv\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">hinv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.offset\">offset</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.s\">s</a></span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.hinv","kind":"theorem","line":953,"name":"String.Slice.RevByteIterator.hinv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L953-L953"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.offset\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">offset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.offset","kind":"def","line":952,"name":"String.Slice.RevByteIterator.offset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L952-L952"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.s\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">s</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.s","kind":"def","line":951,"name":"String.Slice.RevByteIterator.s","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L951-L951"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hinv</span> : <span class=\"fn\">offset</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.rawEndPos\">rawEndPos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\">RevByteIterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator.mk","kind":"ctor","line":950,"name":"String.Slice.RevByteIterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L950-L950"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevByteIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevByteIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevByteIterator","kind":"structure","line":950,"name":"String.Slice.RevByteIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L950-L953"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorLoopPartialUInt8OfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">instIteratorLoopPartialUInt8OfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Std.Iterators.IteratorLoopPartial</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorLoopPartialUInt8OfMonad","kind":"instance","line":943,"name":"String.Slice.ByteIterator.instIteratorLoopPartialUInt8OfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L943-L944"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorLoopUInt8OfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">instIteratorLoopUInt8OfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Std.Iterators.IteratorLoop</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorLoopUInt8OfMonad","kind":"instance","line":940,"name":"String.Slice.ByteIterator.instIteratorLoopUInt8OfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L940-L941"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorCollectPartialUInt8OfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">instIteratorCollectPartialUInt8OfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Std.Iterators.IteratorCollectPartial</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorCollectPartialUInt8OfMonad","kind":"instance","line":937,"name":"String.Slice.ByteIterator.instIteratorCollectPartialUInt8OfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L937-L938"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorCollectUInt8OfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">instIteratorCollectUInt8OfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Std.Iterators.IteratorCollect</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorCollectUInt8OfMonad","kind":"instance","line":934,"name":"String.Slice.ByteIterator.instIteratorCollectUInt8OfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L934-L935"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instFiniteUInt8\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">instFiniteUInt8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instFiniteUInt8","kind":"instance","line":930,"name":"String.Slice.ByteIterator.instFiniteUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L930-L932"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorUInt8OfPure\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">instIteratorUInt8OfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.instIteratorUInt8OfPure","kind":"instance","line":896,"name":"String.Slice.ByteIterator.instIteratorUInt8OfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L896-L909"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.bytes\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">bytes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"Creates an iterator over all bytes in {name}`s`.\n\nExamples:\n* {lean}`\"abc\".toSlice.bytes.toList = [97, 98, 99]`\n* {lean}`\"ab∀c\".toSlice.bytes.toList = [97, 98, 226, 136, 128, 99]`\n","docLink":"./Init/Data/String/Slice.html#String.Slice.bytes","kind":"def","line":882,"name":"String.Slice.bytes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L882-L890"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedByteIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedByteIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedByteIterator","kind":"instance","line":879,"name":"String.Slice.instInhabitedByteIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L879-L879"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedByteIterator.default\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedByteIterator</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedByteIterator.default","kind":"def","line":879,"name":"String.Slice.instInhabitedByteIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L879-L879"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.offset\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">offset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.offset","kind":"def","line":878,"name":"String.Slice.ByteIterator.offset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L878-L878"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.s\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">s</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.s","kind":"def","line":877,"name":"String.Slice.ByteIterator.s","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L877-L877"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#String.Pos.Raw\">Pos.Raw</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\">ByteIterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator.mk","kind":"ctor","line":876,"name":"String.Slice.ByteIterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L876-L876"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.ByteIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">ByteIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.ByteIterator","kind":"structure","line":876,"name":"String.Slice.ByteIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L876-L879"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.revChars\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">revChars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Creates an iterator over all characters \\(Unicode code points\\) in `s`, starting from the end\nof the slice and iterating towards the start\\.\n\nExample:\n\n* `\"abc\".toSlice.revChars.toList = ['c', 'b', 'a']`\n\n* `\"ab∀c\".toSlice.revChars.toList = ['c', '∀', 'b', 'a']`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.revChars","kind":"def","line":864,"name":"String.Slice.revChars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L864-L874"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorLoopPartialSubtypePosNeEndPosOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span>.<span class=\"name\">instIteratorLoopPartialSubtypePosNeEndPosOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Std.Iterators.IteratorLoopPartial</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorLoopPartialSubtypePosNeEndPosOfMonad","kind":"instance","line":857,"name":"String.Slice.RevPosIterator.instIteratorLoopPartialSubtypePosNeEndPosOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L857-L858"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorLoopSubtypePosNeEndPosOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span>.<span class=\"name\">instIteratorLoopSubtypePosNeEndPosOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Std.Iterators.IteratorLoop</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorLoopSubtypePosNeEndPosOfMonad","kind":"instance","line":854,"name":"String.Slice.RevPosIterator.instIteratorLoopSubtypePosNeEndPosOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L854-L855"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorCollectPartialSubtypePosNeEndPosOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span>.<span class=\"name\">instIteratorCollectPartialSubtypePosNeEndPosOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Std.Iterators.IteratorCollectPartial</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorCollectPartialSubtypePosNeEndPosOfMonad","kind":"instance","line":850,"name":"String.Slice.RevPosIterator.instIteratorCollectPartialSubtypePosNeEndPosOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L850-L852"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorCollectSubtypePosNeEndPosOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span>.<span class=\"name\">instIteratorCollectSubtypePosNeEndPosOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Std.Iterators.IteratorCollect</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorCollectSubtypePosNeEndPosOfMonad","kind":"instance","line":847,"name":"String.Slice.RevPosIterator.instIteratorCollectSubtypePosNeEndPosOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L847-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instFiniteSubtypePosNeEndPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span>.<span class=\"name\">instFiniteSubtypePosNeEndPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instFiniteSubtypePosNeEndPos","kind":"instance","line":843,"name":"String.Slice.RevPosIterator.instFiniteSubtypePosNeEndPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L843-L845"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorSubtypePosNeEndPosOfPure\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span>.<span class=\"name\">instIteratorSubtypePosNeEndPosOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.instIteratorSubtypePosNeEndPosOfPure","kind":"instance","line":810,"name":"String.Slice.RevPosIterator.instIteratorSubtypePosNeEndPosOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L810-L824"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.revPositions\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">revPositions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"Creates an iterator over all valid positions within {name}`s`, starting from the last valid\nposition and iterating towards the first one.\n\nExamples\n * {lean}`(\"abc\".toSlice.revPositions.map (fun ⟨p, h⟩ => p.get h) |>.toList) = ['c', 'b', 'a']`\n * {lean}`(\"abc\".toSlice.revPositions.map (·.val.offset.byteIdx) |>.toList) = [2, 1, 0]`\n * {lean}`(\"ab∀c\".toSlice.revPositions.map (fun ⟨p, h⟩ => p.get h) |>.toList) = ['c', '∀', 'b', 'a']`\n * {lean}`(\"ab∀c\".toSlice.revPositions.map (·.val.offset.byteIdx) |>.toList) = [5, 2, 1, 0]`\n","docLink":"./Init/Data/String/Slice.html#String.Slice.revPositions","kind":"def","line":793,"name":"String.Slice.revPositions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L793-L804"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevPosIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedRevPosIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevPosIterator","kind":"instance","line":790,"name":"String.Slice.instInhabitedRevPosIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L790-L790"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevPosIterator.default\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedRevPosIterator</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevPosIterator.default","kind":"def","line":790,"name":"String.Slice.instInhabitedRevPosIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L790-L790"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.currPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span>.<span class=\"name\">currPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.currPos","kind":"def","line":789,"name":"String.Slice.RevPosIterator.currPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L789-L789"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currPos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\">RevPosIterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator.mk","kind":"ctor","line":788,"name":"String.Slice.RevPosIterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L788-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevPosIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevPosIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevPosIterator","kind":"structure","line":788,"name":"String.Slice.RevPosIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L788-L790"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.chars\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">chars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Creates an iterator over all characters \\(Unicode code points\\) in `s`\\.\n\nExamples:\n\n* `\"abc\".toSlice.chars.toList = ['a', 'b', 'c']`\n\n* `\"ab∀c\".toSlice.chars.toList = ['a', 'b', '∀', 'c']`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.chars","kind":"def","line":777,"name":"String.Slice.chars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L777-L786"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorLoopPartialSubtypePosNeEndPosOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span>.<span class=\"name\">instIteratorLoopPartialSubtypePosNeEndPosOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Std.Iterators.IteratorLoopPartial</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorLoopPartialSubtypePosNeEndPosOfMonad","kind":"instance","line":770,"name":"String.Slice.PosIterator.instIteratorLoopPartialSubtypePosNeEndPosOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L770-L771"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorLoopSubtypePosNeEndPosOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span>.<span class=\"name\">instIteratorLoopSubtypePosNeEndPosOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Std.Iterators.IteratorLoop</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorLoopSubtypePosNeEndPosOfMonad","kind":"instance","line":767,"name":"String.Slice.PosIterator.instIteratorLoopSubtypePosNeEndPosOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L767-L768"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorCollectPartialSubtypePosNeEndPosOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span>.<span class=\"name\">instIteratorCollectPartialSubtypePosNeEndPosOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Std.Iterators.IteratorCollectPartial</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorCollectPartialSubtypePosNeEndPosOfMonad","kind":"instance","line":764,"name":"String.Slice.PosIterator.instIteratorCollectPartialSubtypePosNeEndPosOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L764-L765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorCollectSubtypePosNeEndPosOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span>.<span class=\"name\">instIteratorCollectSubtypePosNeEndPosOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Std.Iterators.IteratorCollect</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorCollectSubtypePosNeEndPosOfMonad","kind":"instance","line":761,"name":"String.Slice.PosIterator.instIteratorCollectSubtypePosNeEndPosOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L761-L762"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator.instFiniteSubtypePosNeEndPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span>.<span class=\"name\">instFiniteSubtypePosNeEndPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator.instFiniteSubtypePosNeEndPos","kind":"instance","line":757,"name":"String.Slice.PosIterator.instFiniteSubtypePosNeEndPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L757-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorSubtypePosNeEndPosOfPure\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span>.<span class=\"name\">instIteratorSubtypePosNeEndPosOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator.instIteratorSubtypePosNeEndPosOfPure","kind":"instance","line":724,"name":"String.Slice.PosIterator.instIteratorSubtypePosNeEndPosOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L724-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.positions\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">positions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>","info":{"doc":"Creates an iterator over all valid positions within {name}`s`.\n\nExamples\n* {lean}`(\"abc\".toSlice.positions.map (fun ⟨p, h⟩ => p.get h) |>.toList) = ['a', 'b', 'c']`\n* {lean}`(\"abc\".toSlice.positions.map (·.val.offset.byteIdx) |>.toList) = [0, 1, 2]`\n* {lean}`(\"ab∀c\".toSlice.positions.map (fun ⟨p, h⟩ => p.get h) |>.toList) = ['a', 'b', '∀', 'c']`\n* {lean}`(\"ab∀c\".toSlice.positions.map (·.val.offset.byteIdx) |>.toList) = [0, 1, 2, 5]`\n","docLink":"./Init/Data/String/Slice.html#String.Slice.positions","kind":"def","line":708,"name":"String.Slice.positions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L708-L718"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedPosIterator.default\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedPosIterator</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedPosIterator.default","kind":"def","line":705,"name":"String.Slice.instInhabitedPosIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L705-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedPosIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedPosIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedPosIterator","kind":"instance","line":705,"name":"String.Slice.instInhabitedPosIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L705-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator.currPos\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span>.<span class=\"name\">currPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator.currPos","kind":"def","line":704,"name":"String.Slice.PosIterator.currPos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L704-L704"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator.mk\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currPos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\">PosIterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator.mk","kind":"ctor","line":703,"name":"String.Slice.PosIterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L703-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.PosIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">PosIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.PosIterator","kind":"structure","line":703,"name":"String.Slice.PosIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L703-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.eqIgnoreAsciiCase\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">eqIgnoreAsciiCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s1 </span><span class=\"fn\">s2</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether `s1 == s2` if ASCII upper/lowercase are ignored\\.\n","docLink":"./Init/Data/String/Slice.html#String.Slice.eqIgnoreAsciiCase","kind":"def","line":682,"name":"String.Slice.eqIgnoreAsciiCase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L682-L701"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.trimAscii\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">trimAscii</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Removes leading and trailing whitespace from a slice\\.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`\\.\n\nExamples:\n\n* `\"abc\".toSlice.trimAscii == \"abc\".toSlice`\n\n* `\"   abc\".toSlice.trimAscii == \"abc\".toSlice`\n\n* `\"abc \\t  \".toSlice.trimAscii == \"abc\".toSlice`\n\n* `\"  abc   \".toSlice.trimAscii == \"abc\".toSlice`\n\n* `\"abc\\ndef\\n\".toSlice.trimAscii == \"abc\\ndef\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.trimAscii","kind":"def","line":667,"name":"String.Slice.trimAscii","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L667-L680"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.revFind?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">revFind?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"Finds the position of the first match of the pattern `pat` in a slice `true`, starting\nfrom the end of the slice and traversing towards the start\\. If there is no match `none` is\nreturned\\.\n\nThis function is generic over all currently supported patterns except\n`String`/`String.Slice`\\.\n\nExamples:\n\n* `(\"coffee tea water\".toSlice.find? Char.isWhitespace).map (·.get!) == some ' '`\n\n* `\"tea\".toSlice.find? (fun (c : Char) => c == 'X') == none`\n\n* `(\"coffee tea water\".toSlice.find? \"tea\").map (·.get!) == some 't'`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.revFind?","kind":"def","line":645,"name":"String.Slice.revFind?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L645-L663"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.takeEndWhile\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">takeEndWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">Pattern.BackwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Creates a new slice that contains the suffix prefix of `s` for which `pat` matched\n\\(potentially repeatedly\\)\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.takeEndWhile Char.isLower == \"blue\".toSlice`\n\n* `\"red green blue\".toSlice.takeEndWhile 'e' == \"e\".toSlice`\n\n* `\"red green blue\".toSlice.takeEndWhile (fun (_ : Char) => true) == \"red green blue\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.takeEndWhile","kind":"def","line":619,"name":"String.Slice.takeEndWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L619-L643"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.takeEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">takeEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Creates a new slice that contains the last `n` characters \\(Unicode code points\\) of `s`\\.\n\nIf `n` is greater than the amount of characters in `s`, returns `s`\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.takeEnd 4 == \"blue\".toSlice`\n\n* `\"red green blue\".toSlice.takeEnd 1 == \"e\".toSlice`\n\n* `\"red green blue\".toSlice.takeEnd 0 == \"\".toSlice`\n\n* `\"red green blue\".toSlice.takeEnd 100 == \"red green blue\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.takeEnd","kind":"def","line":604,"name":"String.Slice.takeEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L604-L617"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.trimAsciiEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">trimAsciiEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Removes trailing whitespace from a slice by moving its start position to the first non\\-whitespace\ncharacter, or to its end position if there is no non\\-whitespace character\\.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`\\.\n\nExamples:\n\n* `\"abc\".toSlice.trimAsciiEnd == \"abc\".toSlice`\n\n* `\"   abc\".toSlice.trimAsciiEnd == \"   abc\".toSlice`\n\n* `\"abc \\t  \".toSlice.trimAsciiEnd == \"abc\".toSlice`\n\n* `\"  abc   \".toSlice.trimAsciiEnd == \"  abc\".toSlice`\n\n* `\"abc\\ndef\\n\".toSlice.trimAsciiEnd == \"abc\\ndef\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.trimAsciiEnd","kind":"def","line":586,"name":"String.Slice.trimAsciiEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L586-L602"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.dropEndWhile\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">dropEndWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">Pattern.BackwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Creates a new slice that contains the longest suffix of `s` for which `pat` matched\n\\(potentially repeatedly\\)\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.dropEndWhile Char.isLower == \"red green \".toSlice`\n\n* `\"red green blue\".toSlice.dropEndWhile 'e' == \"red green blu\".toSlice`\n\n* `\"red green blue\".toSlice.dropEndWhile (fun (_ : Char) => true) == \"\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.dropEndWhile","kind":"def","line":562,"name":"String.Slice.dropEndWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L562-L584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.dropEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">dropEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Removes the specified number of characters \\(Unicode code points\\) from the end of the slice\\.\n\nIf `n` is greater than the amount of characters in `s`, returns an empty slice\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.dropEnd 5 == \"red green\".toSlice`\n\n* `\"red green blue\".toSlice.dropEnd 11 == \"red\".toSlice`\n\n* `\"red green blue\".toSlice.dropEnd 50 == \"\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.dropEnd","kind":"def","line":548,"name":"String.Slice.dropEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L548-L560"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.dropSuffix\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">dropSuffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">Pattern.BackwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"If `pat` matches a suffix of `s`, returns the remainder\\. Returns `s` unmodified\notherwise\\.\n\nUse `String.Slice.dropSuffix?` to return `none` when `pat` does not match a\nprefix\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.dropSuffix \" blue\" == \"red green\".toSlice`\n\n* `\"red green blue\".toSlice.dropSuffix \"bluu \" == \"red green blue\".toSlice`\n\n* `\"red green blue\".toSlice.dropSuffix 'e' == \"red green blu\".toSlice`\n\n* `\"red green blue\".toSlice.dropSuffix Char.isLower == \"red green blu\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.dropSuffix","kind":"def","line":529,"name":"String.Slice.dropSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L529-L546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.dropSuffix?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">dropSuffix?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">Pattern.BackwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"If `pat` matches a suffix of `s`, returns the remainder\\. Returns `none` otherwise\\.\n\nUse `String.Slice.dropSuffix` to return the slice\nunchanged when `pat` does not match a prefix\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.dropSuffix? \" blue\" == some \"red green\".toSlice`\n\n* `\"red green blue\".toSlice.dropSuffix? \"bluu \" == none`\n\n* `\"red green blue\".toSlice.dropSuffix? 'e' == some \"red green blu\".toSlice`\n\n* `\"red green blue\".toSlice.dropSuffix? Char.isLower == some \"red green blu\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.dropSuffix?","kind":"def","line":511,"name":"String.Slice.dropSuffix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L511-L527"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.revSplit\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">revSplit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"Splits a slice at each subslice that matches the pattern `pat`, starting from the end of the\nslice and traversing towards the start\\.\n\nThe subslices that matched the pattern are not included in any of the resulting subslices\\. If\nmultiple subslices in a row match the pattern, the resulting list will contain empty slices\\.\n\nThis function is generic over all currently supported patterns except\n`String`/`String.Slice`\\.\n\nExamples:\n\n* `(\"coffee tea water\".toSlice.revSplit Char.isWhitespace).allowNontermination.toList == [\"water\".toSlice, \"tea\".toSlice, \"coffee\".toSlice]`\n\n* `(\"coffee tea water\".toSlice.revSplit ' ').allowNontermination.toList == [\"water\".toSlice, \"tea\".toSlice, \"coffee\".toSlice]`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.revSplit","kind":"def","line":492,"name":"String.Slice.revSplit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L492-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorLoopPartialOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevSplitIterator</span>.<span class=\"name\">instIteratorLoopPartialOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Std.Iterators.IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorLoopPartialOfMonad","kind":"instance","line":487,"name":"String.Slice.RevSplitIterator.instIteratorLoopPartialOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L487-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorLoopOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevSplitIterator</span>.<span class=\"name\">instIteratorLoopOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Std.Iterators.IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorLoopOfMonad","kind":"instance","line":484,"name":"String.Slice.RevSplitIterator.instIteratorLoopOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L484-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorCollectPartialOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevSplitIterator</span>.<span class=\"name\">instIteratorCollectPartialOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Std.Iterators.IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorCollectPartialOfMonad","kind":"instance","line":480,"name":"String.Slice.RevSplitIterator.instIteratorCollectPartialOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L480-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorCollectOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevSplitIterator</span>.<span class=\"name\">instIteratorCollectOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Std.Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorCollectOfMonad","kind":"instance","line":477,"name":"String.Slice.RevSplitIterator.instIteratorCollectOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L477-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorOfPure\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevSplitIterator</span>.<span class=\"name\">instIteratorOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.instIteratorOfPure","kind":"instance","line":457,"name":"String.Slice.RevSplitIterator.instIteratorOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L457-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevSplitIterator.default\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedRevSplitIterator</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">a✝¹</span> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">a✝¹</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevSplitIterator.default","kind":"def","line":451,"name":"String.Slice.instInhabitedRevSplitIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L451-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevSplitIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedRevSplitIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">a✝¹</span> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">a✝¹</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedRevSplitIterator","kind":"instance","line":451,"name":"String.Slice.instInhabitedRevSplitIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L451-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevSplitIterator</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.atEnd","kind":"ctor","line":450,"name":"String.Slice.RevSplitIterator.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L450-L450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.operating\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevSplitIterator</span>.<span class=\"name\">operating</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currPos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">searcher</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\">RevSplitIterator</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator.operating","kind":"ctor","line":449,"name":"String.Slice.RevSplitIterator.operating","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L449-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">RevSplitIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToBackwardSearcher\">Pattern.ToBackwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.RevSplitIterator","kind":"inductive","line":448,"name":"String.Slice.RevSplitIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L448-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.endsWith\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">endsWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.BackwardPattern\">Pattern.BackwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the slice \\(`s`\\) ends with the pattern \\(`pat`\\)\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.endsWith \"blue\" = true`\n\n* `\"red green blue\".toSlice.endsWith \"green\" = false`\n\n* `\"red green blue\".toSlice.endsWith \"\" = true`\n\n* `\"red green blue\".toSlice.endsWith 'e' = true`\n\n* `\"red green blue\".toSlice.endsWith Char.isLower = true`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.endsWith","kind":"def","line":432,"name":"String.Slice.endsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L432-L446"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.all\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">Pattern.ForwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether a slice only consists of matches of the pattern `pat` anywhere\\.\n\nShort\\-circuits at the first pattern mis\\-match\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"brown\".toSlice.all Char.isLower = true`\n\n* `\"brown and orange\".toSlice.all Char.isLower = false`\n\n* `\"aaaaaa\".toSlice.all 'a' = true`\n\n* `\"aaaaaa\".toSlice.all \"aa\" = true`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.all","kind":"def","line":406,"name":"String.Slice.all","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L406-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.contains\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether a slice has a match of the pattern `pat` anywhere\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"coffee tea water\".toSlice.contains Char.isWhitespace = true`\n\n* `\"tea\".toSlice.contains (fun (c : Char) => c == 'X') = false`\n\n* `\"coffee tea water\".toSlice.contains \"tea\" = true`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.contains","kind":"def","line":391,"name":"String.Slice.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L391-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.find?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span></span></div></div>","info":{"doc":"Finds the position of the first match of the pattern `pat` in a slice `true`\\. If there\nis no match `none` is returned\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `(\"coffee tea water\".toSlice.find? Char.isWhitespace).map (·.get!) == some ' '`\n\n* `\"tea\".toSlice.find? (fun (c : Char) => c == 'X') == none`\n\n* `(\"coffee tea water\".toSlice.find? \"tea\").map (·.get!) == some 't'`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.find?","kind":"def","line":373,"name":"String.Slice.find?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L373-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.takeWhile\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">takeWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">Pattern.ForwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Creates a new slice that contains the longest prefix of `s` for which `pat` matched\n\\(potentially repeatedly\\)\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.takeWhile Char.isLower == \"red\".toSlice`\n\n* `\"red green blue\".toSlice.takeWhile 'r' == \"r\".toSlice`\n\n* `\"red red green blue\".toSlice.takeWhile \"red \" == \"red red \".toSlice`\n\n* `\"red green blue\".toSlice.takeWhile (fun (_ : Char) => true) == \"red green blue\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.takeWhile","kind":"def","line":346,"name":"String.Slice.takeWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L346-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.take\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Creates a new slice that contains the first `n` characters \\(Unicode code points\\) of `s`\\.\n\nIf `n` is greater than the amount of characters in `s`, returns `s`\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.take 3 == \"red\".toSlice`\n\n* `\"red green blue\".toSlice.take 1 == \"r\".toSlice`\n\n* `\"red green blue\".toSlice.take 0 == \"\".toSlice`\n\n* `\"red green blue\".toSlice.take 100 == \"red green blue\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.take","kind":"def","line":331,"name":"String.Slice.take","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L331-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.trimAsciiStart\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">trimAsciiStart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Removes leading whitespace from a slice by moving its start position to the first non\\-whitespace\ncharacter, or to its end position if there is no non\\-whitespace character\\.\n\n“Whitespace” is defined as characters for which `Char.isWhitespace` returns `true`\\.\n\nExamples:\n\n* `\"abc\".toSlice.trimAsciiStart == \"abc\".toSlice`\n\n* `\"   abc\".toSlice.trimAsciiStart == \"abc\".toSlice`\n\n* `\"abc \\t  \".toSlice.trimAsciiStart == \"abc \\t  \".toSlice`\n\n* `\"  abc   \".toSlice.trimAsciiStart == \"abc   \".toSlice`\n\n* `\"abc\\ndef\\n\".toSlice.trimAsciiStart == \"abc\\ndef\\n\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.trimAsciiStart","kind":"def","line":313,"name":"String.Slice.trimAsciiStart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L313-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.dropWhile\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">dropWhile</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">Pattern.ForwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Creates a new slice that contains the longest prefix of `s` for which `pat` matched\n\\(potentially repeatedly\\)\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.dropWhile Char.isLower == \" green blue\".toSlice`\n\n* `\"red green blue\".toSlice.dropWhile 'r' == \"ed green blue\".toSlice`\n\n* `\"red red green blue\".toSlice.dropWhile \"red \" == \"green blue\".toSlice`\n\n* `\"red green blue\".toSlice.dropWhile (fun (_ : Char) => true) == \"\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.dropWhile","kind":"def","line":288,"name":"String.Slice.dropWhile","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L288-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.drop\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"Removes the specified number of characters \\(Unicode code points\\) from the start of the slice\\.\n\nIf `n` is greater than the amount of characters in `s`, returns an empty slice\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.drop 4 == \"green blue\".toSlice`\n\n* `\"red green blue\".toSlice.drop 10 == \"blue\".toSlice`\n\n* `\"red green blue\".toSlice.drop 50 == \"\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.drop","kind":"def","line":274,"name":"String.Slice.drop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L274-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.dropPrefix\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">dropPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">Pattern.ForwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></div></div>","info":{"doc":"If `pat` matches a prefix of `s`, returns the remainder\\. Returns `s` unmodified\notherwise\\.\n\nUse `String.Slice.dropPrefix?` to return `none` when `pat` does not match a prefix\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.dropPrefix \"red \" == \"green blue\".toSlice`\n\n* `\"red green blue\".toSlice.dropPrefix \"reed \" == \"red green blue\".toSlice`\n\n* `\"red green blue\".toSlice.dropPrefix 'r' == \"ed green blue\".toSlice`\n\n* `\"red green blue\".toSlice.dropPrefix Char.isLower == \"ed green blue\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.dropPrefix","kind":"def","line":256,"name":"String.Slice.dropPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L256-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.dropPrefix?\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">dropPrefix?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">Pattern.ForwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"If `pat` matches a prefix of `s`, returns the remainder\\. Returns `none` otherwise\\.\n\nUse `String.Slice.dropPrefix` to return the slice\nunchanged when `pat` does not match a prefix\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.dropPrefix? \"red \" == some \"green blue\".toSlice`\n\n* `\"red green blue\".toSlice.dropPrefix? \"reed \" == none`\n\n* `\"red green blue\".toSlice.dropPrefix? 'r' == some \"ed green blue\".toSlice`\n\n* `\"red green blue\".toSlice.dropPrefix? Char.isLower == some \"ed green blue\".toSlice`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.dropPrefix?","kind":"def","line":238,"name":"String.Slice.dropPrefix?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L238-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.splitInclusive\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">splitInclusive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"Splits a slice at each subslice that matches the pattern `pat`\\. Unlike `split` the\nmatched subslices are included at the end of each subslice\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `(\"coffee tea water\".toSlice.splitInclusive Char.isWhitespace).allowNontermination.toList == [\"coffee \".toSlice, \"tea \".toSlice, \"water\".toSlice]`\n\n* `(\"coffee tea water\".toSlice.splitInclusive ' ').allowNontermination.toList == [\"coffee \".toSlice, \"tea \".toSlice, \"water\".toSlice]`\n\n* `(\"coffee tea water\".toSlice.splitInclusive \" tea \").allowNontermination.toList == [\"coffee tea \".toSlice, \"water\".toSlice]`\n\n* `(\"baaab\".toSlice.splitInclusive \"aa\").allowNontermination.toList == [\"baa\".toSlice, \"ab\".toSlice]`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.splitInclusive","kind":"def","line":221,"name":"String.Slice.splitInclusive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L221-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorLoopPartialOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitInclusiveIterator</span>.<span class=\"name\">instIteratorLoopPartialOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Std.Iterators.IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorLoopPartialOfMonad","kind":"instance","line":215,"name":"String.Slice.SplitInclusiveIterator.instIteratorLoopPartialOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L215-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorLoopOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitInclusiveIterator</span>.<span class=\"name\">instIteratorLoopOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Std.Iterators.IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorLoopOfMonad","kind":"instance","line":211,"name":"String.Slice.SplitInclusiveIterator.instIteratorLoopOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L211-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorCollectPartialOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitInclusiveIterator</span>.<span class=\"name\">instIteratorCollectPartialOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Std.Iterators.IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorCollectPartialOfMonad","kind":"instance","line":207,"name":"String.Slice.SplitInclusiveIterator.instIteratorCollectPartialOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L207-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorCollectOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitInclusiveIterator</span>.<span class=\"name\">instIteratorCollectOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Std.Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorCollectOfMonad","kind":"instance","line":203,"name":"String.Slice.SplitInclusiveIterator.instIteratorCollectOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L203-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorOfPure\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitInclusiveIterator</span>.<span class=\"name\">instIteratorOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.instIteratorOfPure","kind":"instance","line":183,"name":"String.Slice.SplitInclusiveIterator.instIteratorOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L183-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedSplitInclusiveIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedSplitInclusiveIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">a✝¹</span> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">a✝¹</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedSplitInclusiveIterator","kind":"instance","line":177,"name":"String.Slice.instInhabitedSplitInclusiveIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L177-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedSplitInclusiveIterator.default\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedSplitInclusiveIterator</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">a✝¹</span> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">a✝¹</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedSplitInclusiveIterator.default","kind":"def","line":177,"name":"String.Slice.instInhabitedSplitInclusiveIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L177-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitInclusiveIterator</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.atEnd","kind":"ctor","line":176,"name":"String.Slice.SplitInclusiveIterator.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.operating\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitInclusiveIterator</span>.<span class=\"name\">operating</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currPos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">searcher</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\">SplitInclusiveIterator</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator.operating","kind":"ctor","line":175,"name":"String.Slice.SplitInclusiveIterator.operating","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L175-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitInclusiveIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitInclusiveIterator","kind":"inductive","line":174,"name":"String.Slice.SplitInclusiveIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L174-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.split\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">split</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"Splits a slice at each subslice that matches the pattern `pat`\\.\n\nThe subslices that matched the pattern are not included in any of the resulting subslices\\. If\nmultiple subslices in a row match the pattern, the resulting list will contain empty strings\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `(\"coffee tea water\".toSlice.split Char.isWhitespace).allowNontermination.toList == [\"coffee\".toSlice, \"tea\".toSlice, \"water\".toSlice]`\n\n* `(\"coffee tea water\".toSlice.split ' ').allowNontermination.toList == [\"coffee\".toSlice, \"tea\".toSlice, \"water\".toSlice]`\n\n* `(\"coffee tea water\".toSlice.split \" tea \").allowNontermination.toList == [\"coffee\".toSlice, \"water\".toSlice]`\n\n* `(\"ababababa\".toSlice.split \"aba\").allowNontermination.toList == [\"coffee\".toSlice, \"water\".toSlice]`\n\n* `(\"baaab\".toSlice.split \"aa\").allowNontermination.toList == [\"b\".toSlice, \"ab\".toSlice]`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.split","kind":"def","line":155,"name":"String.Slice.split","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L155-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorLoopPartialOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitIterator</span>.<span class=\"name\">instIteratorLoopPartialOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Std.Iterators.IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorLoopPartialOfMonad","kind":"instance","line":150,"name":"String.Slice.SplitIterator.instIteratorLoopPartialOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L150-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorLoopOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitIterator</span>.<span class=\"name\">instIteratorLoopOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Std.Iterators.IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorLoopOfMonad","kind":"instance","line":147,"name":"String.Slice.SplitIterator.instIteratorLoopOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L147-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorCollectPartialOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitIterator</span>.<span class=\"name\">instIteratorCollectPartialOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Std.Iterators.IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorCollectPartialOfMonad","kind":"instance","line":144,"name":"String.Slice.SplitIterator.instIteratorCollectPartialOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L144-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorCollectOfMonad\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitIterator</span>.<span class=\"name\">instIteratorCollectOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Std.Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorCollectOfMonad","kind":"instance","line":141,"name":"String.Slice.SplitIterator.instIteratorCollectOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorOfPure\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitIterator</span>.<span class=\"name\">instIteratorOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>) → <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>), <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">ρ</span>)</span> <span class=\"fn\">m</span> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitIterator.instIteratorOfPure","kind":"instance","line":124,"name":"String.Slice.SplitIterator.instIteratorOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L124-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedSplitIterator.default\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedSplitIterator</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">a✝¹</span> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">a✝¹</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedSplitIterator.default","kind":"def","line":118,"name":"String.Slice.instInhabitedSplitIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instInhabitedSplitIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instInhabitedSplitIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">a✝¹</span> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">a✝¹</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instInhabitedSplitIterator","kind":"instance","line":118,"name":"String.Slice.instInhabitedSplitIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator.atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitIterator</span>.<span class=\"name\">atEnd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitIterator.atEnd","kind":"ctor","line":117,"name":"String.Slice.SplitIterator.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator.operating\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitIterator</span>.<span class=\"name\">operating</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currPos</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.Slice.Pos\">Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">searcher</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Std.Iter</a> <span class=\"fn\">(<a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.SearchStep\">Pattern.SearchStep</a> <span class=\"fn\">s</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\">SplitIterator</a> <span class=\"fn\">ρ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitIterator.operating","kind":"ctor","line":116,"name":"String.Slice.SplitIterator.operating","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L116-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.SplitIterator\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">SplitIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ToForwardSearcher\">Pattern.ToForwardSearcher</a> <span class=\"fn\">ρ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.SplitIterator","kind":"inductive","line":115,"name":"String.Slice.SplitIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L115-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.startsWith\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">startsWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/String/Pattern/Basic.html#String.Slice.Pattern.ForwardPattern\">Pattern.ForwardPattern</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether the slice \\(`s`\\) begins with the pattern \\(`pat`\\)\\.\n\nThis function is generic over all currently supported patterns\\.\n\nExamples:\n\n* `\"red green blue\".toSlice.startsWith \"red\" = true`\n\n* `\"red green blue\".toSlice.startsWith \"green\" = false`\n\n* `\"red green blue\".toSlice.startsWith \"\" = true`\n\n* `\"red green blue\".toSlice.startsWith 'r' = true`\n\n* `\"red green blue\".toSlice.startsWith Char.isLower = true`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.startsWith","kind":"def","line":99,"name":"String.Slice.startsWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L99-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instDecidableLE\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instDecidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instDecidableLE","kind":"instance","line":89,"name":"String.Slice.instDecidableLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L89-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instLE\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instLE","kind":"instance","line":86,"name":"String.Slice.instLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L86-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instOrd\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instOrd","kind":"instance","line":83,"name":"String.Slice.instOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L83-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instDecidableLt\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instDecidableLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instDecidableLt","kind":"instance","line":79,"name":"String.Slice.instDecidableLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L79-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instLT\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instLT","kind":"instance","line":76,"name":"String.Slice.instLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instHashable\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instHashable","kind":"instance","line":73,"name":"String.Slice.instHashable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L73-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.hash\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.hash","kind":"opaque","line":70,"name":"String.Slice.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L70-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.instBEq\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Slice.html#String.Slice.instBEq","kind":"instance","line":67,"name":"String.Slice.instBEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.beq\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s1 </span><span class=\"fn\">s2</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether `s1` and `s2` represent the same string, even if they are slices of\ndifferent base strings or different slices within the same string\\.\n\nThe implementation is an efficient equivalent of `s1.copy == s2.copy`\n","docLink":"./Init/Data/String/Slice.html#String.Slice.beq","kind":"def","line":53,"name":"String.Slice.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L53-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Slice.html#String.Slice.isEmpty\"><span class=\"name\">String</span>.<span class=\"name\">Slice</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/String/Basic.html#String.Slice\">Slice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether a slice is empty\\.\n\nEmpty slices have `utf8ByteSize` `0`\\.\n\nExamples:\n\n* `\"\".toSlice.isEmpty = true`\n\n* `\" \".toSlice.isEmpty = false`\n  ","docLink":"./Init/Data/String/Slice.html#String.Slice.isEmpty","kind":"def","line":41,"name":"String.Slice.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/String/Slice.lean#L41-L51"}}],"imports":["Init.Data.String.Pattern","Init.Data.Ord.Basic","Init.Data.Iterators.Combinators.FilterMap"],"instances":[{"className":"BEq","name":"String.Slice.instBEq","typeNames":["String.Slice"]},{"className":"Hashable","name":"String.Slice.instHashable","typeNames":["String.Slice"]},{"className":"LT","name":"String.Slice.instLT","typeNames":["String.Slice"]},{"className":"Decidable","name":"String.Slice.instDecidableLt","typeNames":["LT.lt"]},{"className":"Ord","name":"String.Slice.instOrd","typeNames":["String.Slice"]},{"className":"LE","name":"String.Slice.instLE","typeNames":["String.Slice"]},{"className":"Decidable","name":"String.Slice.instDecidableLE","typeNames":["LE.le"]},{"className":"Inhabited","name":"String.Slice.instInhabitedSplitIterator","typeNames":["String.Slice.SplitIterator"]},{"className":"Std.Iterators.Iterator","name":"String.Slice.SplitIterator.instIteratorOfPure","typeNames":["String.Slice.SplitIterator","String.Slice"]},{"className":"Std.Iterators.IteratorCollect","name":"String.Slice.SplitIterator.instIteratorCollectOfMonad","typeNames":["String.Slice.SplitIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"String.Slice.SplitIterator.instIteratorCollectPartialOfMonad","typeNames":["String.Slice.SplitIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"String.Slice.SplitIterator.instIteratorLoopOfMonad","typeNames":["String.Slice.SplitIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"String.Slice.SplitIterator.instIteratorLoopPartialOfMonad","typeNames":["String.Slice.SplitIterator"]},{"className":"Inhabited","name":"String.Slice.instInhabitedSplitInclusiveIterator","typeNames":["String.Slice.SplitInclusiveIterator"]},{"className":"Std.Iterators.Iterator","name":"String.Slice.SplitInclusiveIterator.instIteratorOfPure","typeNames":["String.Slice.SplitInclusiveIterator","String.Slice"]},{"className":"Std.Iterators.IteratorCollect","name":"String.Slice.SplitInclusiveIterator.instIteratorCollectOfMonad","typeNames":["String.Slice.SplitInclusiveIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"String.Slice.SplitInclusiveIterator.instIteratorCollectPartialOfMonad","typeNames":["String.Slice.SplitInclusiveIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"String.Slice.SplitInclusiveIterator.instIteratorLoopOfMonad","typeNames":["String.Slice.SplitInclusiveIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"String.Slice.SplitInclusiveIterator.instIteratorLoopPartialOfMonad","typeNames":["String.Slice.SplitInclusiveIterator"]},{"className":"Inhabited","name":"String.Slice.instInhabitedRevSplitIterator","typeNames":["String.Slice.RevSplitIterator"]},{"className":"Std.Iterators.Iterator","name":"String.Slice.RevSplitIterator.instIteratorOfPure","typeNames":["String.Slice.RevSplitIterator","String.Slice"]},{"className":"Std.Iterators.IteratorCollect","name":"String.Slice.RevSplitIterator.instIteratorCollectOfMonad","typeNames":["String.Slice.RevSplitIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"String.Slice.RevSplitIterator.instIteratorCollectPartialOfMonad","typeNames":["String.Slice.RevSplitIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"String.Slice.RevSplitIterator.instIteratorLoopOfMonad","typeNames":["String.Slice.RevSplitIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"String.Slice.RevSplitIterator.instIteratorLoopPartialOfMonad","typeNames":["String.Slice.RevSplitIterator"]},{"className":"Inhabited","name":"String.Slice.instInhabitedPosIterator","typeNames":["String.Slice.PosIterator"]},{"className":"Std.Iterators.Iterator","name":"String.Slice.PosIterator.instIteratorSubtypePosNeEndPosOfPure","typeNames":["String.Slice.PosIterator","Subtype"]},{"className":"Std.Iterators.Finite","name":"String.Slice.PosIterator.instFiniteSubtypePosNeEndPos","typeNames":["String.Slice.PosIterator"]},{"className":"Std.Iterators.IteratorCollect","name":"String.Slice.PosIterator.instIteratorCollectSubtypePosNeEndPosOfMonad","typeNames":["String.Slice.PosIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"String.Slice.PosIterator.instIteratorCollectPartialSubtypePosNeEndPosOfMonad","typeNames":["String.Slice.PosIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"String.Slice.PosIterator.instIteratorLoopSubtypePosNeEndPosOfMonad","typeNames":["String.Slice.PosIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"String.Slice.PosIterator.instIteratorLoopPartialSubtypePosNeEndPosOfMonad","typeNames":["String.Slice.PosIterator"]},{"className":"Inhabited","name":"String.Slice.instInhabitedRevPosIterator","typeNames":["String.Slice.RevPosIterator"]},{"className":"Std.Iterators.Iterator","name":"String.Slice.RevPosIterator.instIteratorSubtypePosNeEndPosOfPure","typeNames":["String.Slice.RevPosIterator","Subtype"]},{"className":"Std.Iterators.Finite","name":"String.Slice.RevPosIterator.instFiniteSubtypePosNeEndPos","typeNames":["String.Slice.RevPosIterator"]},{"className":"Std.Iterators.IteratorCollect","name":"String.Slice.RevPosIterator.instIteratorCollectSubtypePosNeEndPosOfMonad","typeNames":["String.Slice.RevPosIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"String.Slice.RevPosIterator.instIteratorCollectPartialSubtypePosNeEndPosOfMonad","typeNames":["String.Slice.RevPosIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"String.Slice.RevPosIterator.instIteratorLoopSubtypePosNeEndPosOfMonad","typeNames":["String.Slice.RevPosIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"String.Slice.RevPosIterator.instIteratorLoopPartialSubtypePosNeEndPosOfMonad","typeNames":["String.Slice.RevPosIterator"]},{"className":"Inhabited","name":"String.Slice.instInhabitedByteIterator","typeNames":["String.Slice.ByteIterator"]},{"className":"Std.Iterators.Iterator","name":"String.Slice.ByteIterator.instIteratorUInt8OfPure","typeNames":["String.Slice.ByteIterator","UInt8"]},{"className":"Std.Iterators.Finite","name":"String.Slice.ByteIterator.instFiniteUInt8","typeNames":["String.Slice.ByteIterator"]},{"className":"Std.Iterators.IteratorCollect","name":"String.Slice.ByteIterator.instIteratorCollectUInt8OfMonad","typeNames":["String.Slice.ByteIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"String.Slice.ByteIterator.instIteratorCollectPartialUInt8OfMonad","typeNames":["String.Slice.ByteIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"String.Slice.ByteIterator.instIteratorLoopUInt8OfMonad","typeNames":["String.Slice.ByteIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"String.Slice.ByteIterator.instIteratorLoopPartialUInt8OfMonad","typeNames":["String.Slice.ByteIterator"]},{"className":"Inhabited","name":"String.Slice.instInhabitedRevByteIterator","typeNames":["String.Slice.RevByteIterator"]},{"className":"Std.Iterators.Iterator","name":"String.Slice.RevByteIterator.instIteratorUInt8OfPure","typeNames":["String.Slice.RevByteIterator","UInt8"]},{"className":"Std.Iterators.Finite","name":"String.Slice.RevByteIterator.instFiniteUInt8","typeNames":["String.Slice.RevByteIterator"]},{"className":"Std.Iterators.IteratorCollect","name":"String.Slice.RevByteIterator.instIteratorCollectUInt8OfMonad","typeNames":["String.Slice.RevByteIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"String.Slice.RevByteIterator.instIteratorCollectPartialUInt8OfMonad","typeNames":["String.Slice.RevByteIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"String.Slice.RevByteIterator.instIteratorLoopUInt8OfMonad","typeNames":["String.Slice.RevByteIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"String.Slice.RevByteIterator.instIteratorLoopPartialUInt8OfMonad","typeNames":["String.Slice.RevByteIterator"]}],"name":"Init.Data.String.Slice"}