{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Basic.html#Std.Slice.Self.eq\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Self</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice.Self\">Self</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Basic.html#Std.Slice.Self.eq","kind":"theorem","line":35,"name":"Std.Slice.Self.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Basic.html#Std.Slice.Self.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Self</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">β</span> := by rfl)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice.Self\">Self</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Basic.html#Std.Slice.Self.mk","kind":"ctor","line":34,"name":"Std.Slice.Self.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Basic.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Basic.html#Std.Slice.Self\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"This typeclass determines that some type `α` is equal to `β` and that `β` should be used in APIs\ninstead of `α`.\n\n`Self` is used in the polymorphic slice library.\n","docLink":"./Init/Data/Slice/Basic.html#Std.Slice.Self","kind":"class","line":28,"name":"Std.Slice.Self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Basic.lean#L28-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Basic.html#Std.Slice.internalRepresentation\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">internalRepresentation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">γ</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Basic.html#Std.Slice.internalRepresentation","kind":"def","line":26,"name":"Std.Slice.internalRepresentation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Basic.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Basic.html#Std.Slice.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">internalRepresentation</span> : <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Basic.html#Std.Slice.mk","kind":"ctor","line":25,"name":"Std.Slice.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Basic.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Basic.html#Std.Slice\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"Wrapper structure for slice types that makes generic slice functions available via dot notation.\nThe implementation of the functions depends on the type `γ` of the internal representation.\n\nUsually, if `γ` is the internal representation of a slice of some type `α`, then `Slice γ` can be\nused directly, but one usually creates an abbreviation `AlphaSlice := Slice γ` and provides\n`Self (Slice γ) AlphaSlice` and `Sliceable shape α AlphaSlice` instances. Then `AlphaSlice` can\nbe worked with without ever thinking of `Slice` and it is possible to extend the API with\n`α`/`γ`-specific functions.\n","docLink":"./Init/Data/Slice/Basic.html#Std.Slice","kind":"structure","line":15,"name":"Std.Slice","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Basic.lean#L15-L26"}}],"imports":["Init.Core"],"instances":[],"name":"Init.Data.Slice.Basic"}