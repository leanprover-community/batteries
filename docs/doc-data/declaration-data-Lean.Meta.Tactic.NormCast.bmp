{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addInfer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">addInfer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"`addInfer decl` infers the label of `decl` (`elim`, `move`, or `squash`) and arranges for it to\nbe used by `norm_cast`.\n\n* elim lemma:   LHS has 0 head coes and ≥ 1 internal coe\n* move lemma:   LHS has 1 head coe and 0 internal coes,    RHS has 0 head coes and ≥ 1 internal coes\n* squash lemma: LHS has ≥ 1 head coes and 0 internal coes, RHS has fewer head coes\n","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addInfer","kind":"def","line":139,"name":"Lean.Meta.NormCast.addInfer","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L139-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addSquash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">addSquash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"`addSquash decl` adds `decl` as a `squash` lemma to be used by `norm_cast`. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addSquash","kind":"def","line":132,"name":"Lean.Meta.NormCast.addSquash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L132-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addMove\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">addMove</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"`addMove decl` adds `decl` as a `move` lemma to be used by `norm_cast`. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addMove","kind":"def","line":125,"name":"Lean.Meta.NormCast.addMove","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L125-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">addElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"`addElim decl` adds `decl` as an `elim` lemma to be used by `norm_cast`. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addElim","kind":"def","line":120,"name":"Lean.Meta.NormCast.addElim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L120-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.normCastExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">normCastExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a></div></div>","info":{"doc":"The `norm_cast` extension data. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.normCastExt","kind":"opaque","line":113,"name":"Lean.Meta.NormCast.normCastExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L113-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedNormCastExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instInhabitedNormCastExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedNormCastExtension","kind":"instance","line":111,"name":"Lean.Meta.NormCast.instInhabitedNormCastExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedNormCastExtension.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instInhabitedNormCastExtension</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedNormCastExtension.default","kind":"def","line":111,"name":"Lean.Meta.NormCast.instInhabitedNormCastExtension.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.squash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span>.<span class=\"name\">squash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a></div></div>","info":{"doc":"A simp set which simplifies transitive coercions. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.squash","kind":"def","line":110,"name":"Lean.Meta.NormCast.NormCastExtension.squash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.down\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span>.<span class=\"name\">down</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a></div></div>","info":{"doc":"A simp set which pushes coercions to the leaves. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.down","kind":"def","line":108,"name":"Lean.Meta.NormCast.NormCastExtension.down","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.up\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span>.<span class=\"name\">up</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a></div></div>","info":{"doc":"A simp set which lifts coercions to the top level. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.up","kind":"def","line":106,"name":"Lean.Meta.NormCast.NormCastExtension.up","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">up </span><span class=\"fn\">down </span><span class=\"fn\">squash</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.mk","kind":"ctor","line":104,"name":"Lean.Meta.NormCast.NormCastExtension.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The `norm_cast` attribute stores a simp set for each of the three types of `norm_cast` lemma. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension","kind":"structure","line":103,"name":"Lean.Meta.NormCast.NormCastExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L103-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.pushCastExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">pushCastExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a></div></div>","info":{"doc":"The `push_cast` simp attribute. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.pushCastExt","kind":"opaque","line":97,"name":"Lean.Meta.NormCast.pushCastExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L97-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.classifyType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">classifyType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></span></div></div>","info":{"doc":"Classifies a declaration of type `ty` as a `norm_cast` rule. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.classifyType","kind":"def","line":66,"name":"Lean.Meta.NormCast.classifyType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L66-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countInternalCoes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">countInternalCoes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Counts how many coercions are inside the expression, excluding the head ones. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countInternalCoes","kind":"def","line":62,"name":"Lean.Meta.NormCast.countInternalCoes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L62-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countCoes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">countCoes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Counts how many coercions are inside the expression, including the head ones. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countCoes","kind":"opaque","line":50,"name":"Lean.Meta.NormCast.countCoes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L50-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countHeadCoes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">countHeadCoes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Counts how many coercions are at the head of the expression. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countHeadCoes","kind":"opaque","line":42,"name":"Lean.Meta.NormCast.countHeadCoes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L42-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.getSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">getSimpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Assuming `e` is an application, returns the list of subterms that `simp` will rewrite in. ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.getSimpArgs","kind":"def","line":31,"name":"Lean.Meta.NormCast.getSimpArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L31-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedLabel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instInhabitedLabel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedLabel","kind":"instance","line":29,"name":"Lean.Meta.NormCast.instInhabitedLabel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedLabel.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instInhabitedLabel</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedLabel.default","kind":"def","line":29,"name":"Lean.Meta.NormCast.instInhabitedLabel.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instReprLabel.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instReprLabel</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instReprLabel.repr","kind":"def","line":29,"name":"Lean.Meta.NormCast.instReprLabel.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instReprLabel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instReprLabel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instReprLabel","kind":"instance","line":29,"name":"Lean.Meta.NormCast.instReprLabel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instDecidableEqLabel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instDecidableEqLabel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instDecidableEqLabel","kind":"instance","line":29,"name":"Lean.Meta.NormCast.instDecidableEqLabel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.squash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">Label</span>.<span class=\"name\">squash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></div></div>","info":{"doc":"squash lemma: LHS has ≥ 1 head coes and 0 internal coes, RHS has fewer head coes ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.squash","kind":"ctor","line":27,"name":"Lean.Meta.NormCast.Label.squash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L27-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.move\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">Label</span>.<span class=\"name\">move</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></div></div>","info":{"doc":"move lemma: LHS has 1 head coe and 0 internal coes,\nRHS has 0 head coes and ≥ 1 internal coes ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.move","kind":"ctor","line":24,"name":"Lean.Meta.NormCast.Label.move","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L24-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.elim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">Label</span>.<span class=\"name\">elim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></div></div>","info":{"doc":"elim lemma: LHS has 0 head coes and ≥ 1 internal coe ","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.elim","kind":"ctor","line":22,"name":"Lean.Meta.NormCast.Label.elim","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L22-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">Label</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Label` is a type used to classify `norm_cast` lemmas.\n* elim lemma:   LHS has 0 head coes and ≥ 1 internal coe\n* move lemma:   LHS has 1 head coe and 0 internal coes,    RHS has 0 head coes and ≥ 1 internal coes\n* squash lemma: LHS has ≥ 1 head coes and 0 internal coes, RHS has fewer head coes\n","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label","kind":"inductive","line":15,"name":"Lean.Meta.NormCast.Label","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/NormCast.lean#L15-L29"}}],"imports":["Lean.Meta.Tactic.Simp.Attr","Lean.Meta.CoeAttr"],"instances":[{"className":"Decidable","name":"Lean.Meta.NormCast.instDecidableEqLabel","typeNames":["Eq"]},{"className":"Repr","name":"Lean.Meta.NormCast.instReprLabel","typeNames":["Lean.Meta.NormCast.Label"]},{"className":"Inhabited","name":"Lean.Meta.NormCast.instInhabitedLabel","typeNames":["Lean.Meta.NormCast.Label"]},{"className":"Inhabited","name":"Lean.Meta.NormCast.instInhabitedNormCastExtension","typeNames":["Lean.Meta.NormCast.NormCastExtension"]}],"name":"Lean.Meta.Tactic.NormCast"}