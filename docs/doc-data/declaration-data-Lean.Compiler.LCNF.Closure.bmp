{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inScope</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abstract</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.run","kind":"def","line":163,"name":"Lean.Compiler.LCNF.Closure.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L163-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Collect dependencies of the given expression. ","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectType","kind":"opaque","line":157,"name":"Lean.Compiler.LCNF.Closure.collectType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L157-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Process the given free variable.\nIf it has not already been visited and is in scope, we collect its dependencies.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFVar","kind":"opaque","line":128,"name":"Lean.Compiler.LCNF.Closure.collectFVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L128-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Collect dependencies of a local function declaration. ","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFunDecl","kind":"opaque","line":121,"name":"Lean.Compiler.LCNF.Closure.collectFunDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L121-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Collect dependencies in the given code. We need this function to be able\nto collect dependencies in a local function declaration.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectCode","kind":"opaque","line":98,"name":"Lean.Compiler.LCNF.Closure.collectCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L98-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectLetValue","kind":"opaque","line":91,"name":"Lean.Compiler.LCNF.Closure.collectLetValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L91-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectArg","kind":"opaque","line":85,"name":"Lean.Compiler.LCNF.Closure.collectArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L85-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Collect dependencies in parameters. We need this because parameters may\ncontain other type parameters.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectParams","kind":"opaque","line":78,"name":"Lean.Compiler.LCNF.Closure.collectParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L78-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.markVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">markVisited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Mark a free variable as already visited.\nWe perform a topological sort over the dependencies.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.markVisited","kind":"def","line":70,"name":"Lean.Compiler.LCNF.Closure.markVisited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L70-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">ClosureM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Monad for implementing the dependency collector.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM","kind":"def","line":65,"name":"Lean.Compiler.LCNF.Closure.ClosureM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L65-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span></div></div>","info":{"doc":"Let-declarations and local function declarations that are going to be \"copied\" to the code\nbeing processed. For example, when this module is used in the code specializer, the let-declarations\noften contain the instance values. In the current specialization heuristic all let-declarations are ground values\n(i.e., they do not contain free-variables).\nHowever, local function declarations may contain free variables.\n\nAll customers of this module try to avoid work duplication. If a let-declaration is a ground value,\nit most likely will be computed during compilation time, and work duplication is not an issue.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.decls","kind":"def","line":63,"name":"Lean.Compiler.LCNF.Closure.State.decls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>","info":{"doc":"Free variables that must become new parameters of the code being specialized.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.params","kind":"def","line":52,"name":"Lean.Compiler.LCNF.Closure.State.params","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdHashSet\">FVarIdHashSet</a></div></div>","info":{"doc":"Set of already visited free variables.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.visited","kind":"def","line":48,"name":"Lean.Compiler.LCNF.Closure.State.visited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visited</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdHashSet\">FVarIdHashSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.mk","kind":"ctor","line":44,"name":"Lean.Compiler.LCNF.Closure.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for the `ClosureM` monad.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State","kind":"structure","line":41,"name":"Lean.Compiler.LCNF.Closure.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L41-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.isUnderBinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span>.<span class=\"name\">isUnderBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Indicates whether we are processing terms beneath a binder.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.isUnderBinder","kind":"def","line":39,"name":"Lean.Compiler.LCNF.Closure.Context.isUnderBinder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.abstract\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span>.<span class=\"name\">abstract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"If `abstract x` returns `true`, we convert `x` into a closure parameter. Otherwise,\nwe collect the dependencies in the `let`/`fun`-declaration too, and include the declaration in the closure.\nRemark: the lambda lifting pass abstracts all `let`/`fun`-declarations.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.abstract","kind":"def","line":35,"name":"Lean.Compiler.LCNF.Closure.Context.abstract","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.inScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span>.<span class=\"name\">inScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"`inScope x` returns `true` if `x` is a variable that is not in `C`.\n","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.inScope","kind":"def","line":29,"name":"Lean.Compiler.LCNF.Closure.Context.inScope","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inScope </span><span class=\"fn\">abstract</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isUnderBinder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.mk","kind":"ctor","line":25,"name":"Lean.Compiler.LCNF.Closure.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context","kind":"structure","line":25,"name":"Lean.Compiler.LCNF.Closure.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/Closure.lean#L25-L39"}}],"imports":["Lean.Util.ForEachExprWhere","Lean.Compiler.LCNF.CompilerM"],"instances":[],"name":"Lean.Compiler.LCNF.Closure"}