{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.instForInOfInhabitedOfMonadLiftTBaseIO\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">instForInOfInhabitedOfMonadLiftTBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`for msg in ch.sync do ...` receives all messages in the channel until it is closed. ","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.instForInOfInhabitedOfMonadLiftTBaseIO","kind":"instance","line":952,"name":"Std.Channel.Sync.instForInOfInhabitedOfMonadLiftTBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L952-L954"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.recv\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Receive a value from the channel, blocking until the transmission could be completed.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.recv","kind":"def","line":939,"name":"Std.Channel.Sync.recv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L939-L943"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Try to receive a value from the channel, if this can be completed right away without blocking return\n`some value`, otherwise return `none`.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.tryRecv","kind":"def","line":936,"name":"Std.Channel.Sync.tryRecv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L936-L937"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.send\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Send a value through the channel, blocking until the transmission could be completed.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.send","kind":"def","line":930,"name":"Std.Channel.Sync.send","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L930-L934"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Try to send a value to the channel. If this can be completed right away without blocking return\n`true`; otherwise, don't send the value and return `false`.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.trySend","kind":"def","line":927,"name":"Std.Channel.Sync.trySend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L927-L928"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.new\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Create a new channel. If:\n- `capacity` is `none` it will be unbounded (the default)\n- `capacity` is `some 0` it will always force a rendezvous between sender and receiver\n- `capacity` is `some n` with `n > 0` it will use a buffer of size `n` and begin blocking once it\n  is filled\n","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.new","kind":"def","line":924,"name":"Std.Channel.Sync.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L924-L925"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.sync\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">sync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This function is a no-op and just a convenient way to expose the synchronous API of the channel.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.sync","kind":"def","line":919,"name":"Std.Channel.sync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L919-L920"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.instAsyncWriteOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">instAsyncWriteOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncWrite\">Internal.Async.IO.AsyncWrite</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.Channel.instAsyncWriteOfInhabited","kind":"instance","line":914,"name":"Std.Channel.instAsyncWriteOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L914-L917"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.instAsyncReadOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">instAsyncReadOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncRead\">Internal.Async.IO.AsyncRead</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.Channel.instAsyncReadOfInhabited","kind":"instance","line":911,"name":"Std.Channel.instAsyncReadOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L911-L912"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.instAsyncStreamOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">instAsyncStreamOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncStream\">Internal.Async.IO.AsyncStream</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.Channel.instAsyncStreamOfInhabited","kind":"instance","line":908,"name":"Std.Channel.instAsyncStreamOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L908-L909"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.forAsync\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">forAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"`ch.forAsync f` calls `f` for every message received on `ch`.\n\nNote that if this function is called twice, each message will only arrive at exactly one invocation.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.forAsync","kind":"opaque","line":903,"name":"Std.Channel.forAsync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L903-L906"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.recvSelector\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">recvSelector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Creates a `Selector` that resolves once `ch` has data available and provides that data.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.recvSelector","kind":"def","line":881,"name":"Std.Channel.recvSelector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L881-L901"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.recv\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Receive a value from the channel, returning a task that will resolve once the transmission could be\ncompleted. Note that the task may resolve to `none` if the channel was closed before it could be\ncompleted.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.recv","kind":"def","line":873,"name":"Std.Channel.recv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L873-L878"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Try to receive a value from the channel, if this can be completed right away without blocking return\n`some value`, otherwise return `none`.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.tryRecv","kind":"def","line":869,"name":"Std.Channel.tryRecv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L869-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.send\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"Send a value through the channel, returning a task that will resolve once the transmission could be\ncompleted.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.send","kind":"def","line":859,"name":"Std.Channel.send","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L859-L867"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Try to send a value to the channel. If this can be completed right away without blocking return\n`true`; otherwise, don't send the value and return `false`.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.trySend","kind":"def","line":855,"name":"Std.Channel.trySend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L855-L857"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.new\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Create a new channel. If:\n- `capacity` is `none` it will be unbounded (the default)\n- `capacity` is `some 0` it will always force a rendezvous between sender and receiver\n- `capacity` is `some n` with `n > 0` it will use a buffer of size `n` and begin blocking once it\n  is filled\n","docLink":"./Std/Sync/Channel.html#Std.Channel.new","kind":"def","line":851,"name":"Std.Channel.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L851-L853"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.instNonemptySync_1\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptySync_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Channel.Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.instNonemptySync_1","kind":"instance","line":846,"name":"Std.instNonemptySync_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L846-L847"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A multi-producer multi-consumer FIFO channel that offers both bounded and unbounded buffering\nand a synchronous API. This type acts as a convenient layer to use a channel in a blocking fashion\nand is not actually different from the original channel.\n\nIf a channel needs to be closed to indicate some sort of completion event use\n`Std.CloseableChannel.Sync` instead. Note that `Std.CloseableChannel.Sync` introduces a need for error\nhandling in some cases, thus `Std.Channel.Sync` is usually easier to use if applicable.\n","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync","kind":"def","line":835,"name":"Std.Channel.Sync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L835-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.instNonemptyChannel\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptyChannel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.instNonemptyChannel","kind":"instance","line":833,"name":"Std.instNonemptyChannel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A multi-producer multi-consumer FIFO channel that offers both bounded and unbounded buffering\nand an asynchronous API. To switch into synchronous mode use `Channel.sync`.\n\nIf a channel needs to be closed to indicate some sort of completion event use `Std.CloseableChannel`\ninstead. Note that `Std.CloseableChannel` introduces a need for error handling in some cases, thus\n`Std.Channel` is usually easier to use if applicable.\n","docLink":"./Std/Sync/Channel.html#Std.Channel","kind":"structure","line":822,"name":"Std.Channel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L822-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.instForInOfMonadLiftTBaseIO\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">instForInOfMonadLiftTBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"`for msg in ch.sync do ...` receives all messages in the channel until it is closed. ","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.instForInOfMonadLiftTBaseIO","kind":"instance","line":815,"name":"Std.CloseableChannel.Sync.instForInOfMonadLiftTBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L815-L817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.recv\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Receive a value from the channel, blocking until the transmission could be completed. Note that the\nreturn value may be `none` if the channel was closed before it could be completed.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.recv","kind":"def","line":799,"name":"Std.CloseableChannel.Sync.recv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L799-L804"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Try to receive a value from the channel, if this can be completed right away without blocking return\n`some value`, otherwise return `none`.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.tryRecv","kind":"def","line":796,"name":"Std.CloseableChannel.Sync.tryRecv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L796-L797"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.isClosed\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">isClosed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if the channel is closed.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.isClosed","kind":"def","line":793,"name":"Std.CloseableChannel.Sync.isClosed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L793-L794"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.close\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">close</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Closes the channel, returns `Except.ok` when called the first time, otherwise `Except.error`.\nWhen a channel is closed:\n- no new values can be sent successfully anymore\n- all blocked consumers are resolved to `none` (as no new messages can be sent they will never\n  resolve)\n- if there are already values waiting to be received they can still be received by subsequent `recv`\n  calls\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.close","kind":"def","line":790,"name":"Std.CloseableChannel.Sync.close","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L790-L791"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.send\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Send a value through the channel, blocking until the transmission could be completed. Note that this\nfunction may throw an error when trying to send to an already closed channel.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.send","kind":"def","line":783,"name":"Std.CloseableChannel.Sync.send","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L783-L788"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Try to send a value to the channel. If this can be completed right away without blocking return\n`true`; otherwise, don't send the value and return `false`.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.trySend","kind":"def","line":780,"name":"Std.CloseableChannel.Sync.trySend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L780-L781"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.new\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Create a new channel. If:\n- `capacity` is `none` it will be unbounded (the default)\n- `capacity` is `some 0` it will always force a rendezvous between sender and receiver\n- `capacity` is `some n` with `n > 0` it will use a buffer of size `n` and begin blocking once it\n  is filled\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.new","kind":"def","line":777,"name":"Std.CloseableChannel.Sync.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L777-L778"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.sync\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">sync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This function is a no-op and just a convenient way to expose the synchronous API of the channel.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.sync","kind":"def","line":769,"name":"Std.CloseableChannel.sync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L769-L773"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instAsyncWriteOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instAsyncWriteOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncWrite\">Internal.Async.IO.AsyncWrite</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instAsyncWriteOfInhabited","kind":"instance","line":764,"name":"Std.CloseableChannel.instAsyncWriteOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L764-L767"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instAsyncReadOptionOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instAsyncReadOptionOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncRead\">Internal.Async.IO.AsyncRead</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instAsyncReadOptionOfInhabited","kind":"instance","line":761,"name":"Std.CloseableChannel.instAsyncReadOptionOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L761-L762"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instAsyncStreamOptionOfInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instAsyncStreamOptionOfInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncStream\">Internal.Async.IO.AsyncStream</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instAsyncStreamOptionOfInhabited","kind":"instance","line":758,"name":"Std.CloseableChannel.instAsyncStreamOptionOfInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L758-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.forAsync\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">forAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"`ch.forAsync f` calls `f` for every message received on `ch`.\n\nNote that if this function is called twice, each message will only arrive at exactly one invocation.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.forAsync","kind":"opaque","line":747,"name":"Std.CloseableChannel.forAsync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L747-L756"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.recvSelector\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">recvSelector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Creates a `Selector` that resolves once `ch` has data available and provides that that data.\nIn particular if `ch` is closed while waiting on this `Selector` and no data is available already\nthis will resolve to `none`.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.recvSelector","kind":"def","line":736,"name":"Std.CloseableChannel.recvSelector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L736-L745"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.recv\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>","info":{"doc":"Receive a value from the channel, returning a task that will resolve once the transmission could be\ncompleted. Note that the task may resolve to `none` if the channel was closed before it could be\ncompleted.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.recv","kind":"def","line":724,"name":"Std.CloseableChannel.recv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L724-L733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Try to receive a value from the channel, if this can be completed right away without blocking return\n`some value`, otherwise return `none`.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.tryRecv","kind":"def","line":714,"name":"Std.CloseableChannel.tryRecv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L714-L722"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.isClosed\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">isClosed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if the channel is closed.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.isClosed","kind":"def","line":705,"name":"Std.CloseableChannel.isClosed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L705-L712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.close\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">close</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Closes the channel, returns `Except.ok` when called the first time, otherwise `Except.error`.\nWhen a channel is closed:\n- no new values can be sent successfully anymore\n- all blocked consumers are resolved to `none` (as no new messages can be sent they will never\n  resolve)\n- if there are already values waiting to be received they can still be received by subsequent `recv`\n  calls\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.close","kind":"def","line":690,"name":"Std.CloseableChannel.close","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L690-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.send\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span>)</span></span></div></div>","info":{"doc":"Send a value through the channel, returning a task that will resolve once the transmission could be\ncompleted. Note that the task may resolve to `Except.error` if the channel was closed before it\ncould be completed.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.send","kind":"def","line":679,"name":"Std.CloseableChannel.send","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L679-L688"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Try to send a value to the channel. If this can be completed right away without blocking return\n`true`; otherwise, don't send the value and return `false`.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.trySend","kind":"def","line":669,"name":"Std.CloseableChannel.trySend","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L669-L677"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.new\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Create a new channel. If:\n- `capacity` is `none` it will be unbounded (the default)\n- `capacity` is `some 0` it will always force a rendezvous between sender and receiver\n- `capacity` is `some n` with `n > 0` it will use a buffer of size `n` and begin blocking once it\n  is filled\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.new","kind":"def","line":656,"name":"Std.CloseableChannel.new","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L656-L667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.instNonemptySync\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptySync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">CloseableChannel.Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.instNonemptySync","kind":"instance","line":651,"name":"Std.instNonemptySync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L651-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.instNonemptyCloseableChannel\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptyCloseableChannel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.instNonemptyCloseableChannel","kind":"instance","line":648,"name":"Std.instNonemptyCloseableChannel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L648-L649"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A multi-producer multi-consumer FIFO channel that offers both bounded and unbounded buffering\nand a synchronous API. This type acts as a convenient layer to use a channel in a blocking fashion\nand is not actually different from the original channel.\n\nAdditionally `Std.CloseableChannel.Sync` can be closed if necessary, unlike `Std.Channel.Sync`.\nThis introduces the need to handle errors in some cases, thus it is usually easier to use\n`Std.Channel` if applicable.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync","kind":"def","line":636,"name":"Std.CloseableChannel.Sync","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L636-L646"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A multi-producer multi-consumer FIFO channel that offers both bounded and unbounded buffering\nand an asynchronous API, to switch into synchronous mode use `CloseableChannel.sync`.\n\nAdditionally `Std.CloseableChannel` can be closed if necessary, unlike `Std.Channel`.\nThis introduces a need for error handling in some cases, thus it is usually easier to use\n`Std.Channel` if applicable.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel","kind":"def","line":625,"name":"Std.CloseableChannel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L625-L634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instNonemptyFlavors\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instNonemptyFlavors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Flavors\">Flavors</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instNonemptyFlavors","kind":"instance","line":621,"name":"Std.CloseableChannel.instNonemptyFlavors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L621-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Flavors\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Flavors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"This type represents all flavors of channels that we have available.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Flavors","kind":"inductive","line":614,"name":"Std.CloseableChannel.Flavors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L614-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instMonadLiftEIOErrorIO\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instMonadLiftEIOErrorIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a>)</span> <a href=\"./Init/System/IO.html#IO\">IO</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instMonadLiftEIOErrorIO","kind":"instance","line":51,"name":"Std.CloseableChannel.instMonadLiftEIOErrorIO","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L51-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instToStringError\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instToStringError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instToStringError","kind":"instance","line":46,"name":"Std.CloseableChannel.instToStringError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L46-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instHashableError\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instHashableError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instHashableError","kind":"instance","line":44,"name":"Std.CloseableChannel.instHashableError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instHashableError.hash\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instHashableError</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instHashableError.hash","kind":"def","line":44,"name":"Std.CloseableChannel.instHashableError.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instDecidableEqError\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instDecidableEqError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instDecidableEqError","kind":"instance","line":44,"name":"Std.CloseableChannel.instDecidableEqError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instReprError.repr\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instReprError</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instReprError.repr","kind":"def","line":44,"name":"Std.CloseableChannel.instReprError.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instReprError\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instReprError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instReprError","kind":"instance","line":44,"name":"Std.CloseableChannel.instReprError","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error.alreadyClosed\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Error</span>.<span class=\"name\">alreadyClosed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></div></div>","info":{"doc":"Tried to close an already closed channel.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Error.alreadyClosed","kind":"ctor","line":40,"name":"Std.CloseableChannel.Error.alreadyClosed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L40-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error.closed\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Error</span>.<span class=\"name\">closed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></div></div>","info":{"doc":"Tried to send to a closed channel.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Error.closed","kind":"ctor","line":36,"name":"Std.CloseableChannel.Error.closed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L36-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Error</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Errors that may be thrown while interacting with the channel API.\n","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Error","kind":"inductive","line":32,"name":"Std.CloseableChannel.Error","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/Channel.lean#L32-L44"}}],"imports":["Init.Data.Queue","Std.Sync.Mutex","Std.Internal.Async.IO","Init.Data.Vector.Basic"],"instances":[{"className":"Repr","name":"Std.CloseableChannel.instReprError","typeNames":["Std.CloseableChannel.Error"]},{"className":"Decidable","name":"Std.CloseableChannel.instDecidableEqError","typeNames":["Eq"]},{"className":"Hashable","name":"Std.CloseableChannel.instHashableError","typeNames":["Std.CloseableChannel.Error"]},{"className":"ToString","name":"Std.CloseableChannel.instToStringError","typeNames":["Std.CloseableChannel.Error"]},{"className":"MonadLift","name":"Std.CloseableChannel.instMonadLiftEIOErrorIO","typeNames":["EIO","IO"]},{"className":"Nonempty","name":"Std.CloseableChannel.instNonemptyFlavors","typeNames":["Std.CloseableChannel.Flavors"]},{"className":"Nonempty","name":"Std.instNonemptyCloseableChannel","typeNames":["Std.CloseableChannel"]},{"className":"Nonempty","name":"Std.instNonemptySync","typeNames":["Std.CloseableChannel.Sync"]},{"className":"Std.Internal.Async.IO.AsyncStream","name":"Std.CloseableChannel.instAsyncStreamOptionOfInhabited","typeNames":["Std.CloseableChannel","Option"]},{"className":"Std.Internal.Async.IO.AsyncRead","name":"Std.CloseableChannel.instAsyncReadOptionOfInhabited","typeNames":["Std.CloseableChannel","Option"]},{"className":"Std.Internal.Async.IO.AsyncWrite","name":"Std.CloseableChannel.instAsyncWriteOfInhabited","typeNames":["Std.CloseableChannel"]},{"className":"ForIn","name":"Std.CloseableChannel.Sync.instForInOfMonadLiftTBaseIO","typeNames":["Std.CloseableChannel.Sync"]},{"className":"Nonempty","name":"Std.instNonemptyChannel","typeNames":["Std.Channel"]},{"className":"Nonempty","name":"Std.instNonemptySync_1","typeNames":["Std.Channel.Sync"]},{"className":"Std.Internal.Async.IO.AsyncStream","name":"Std.Channel.instAsyncStreamOfInhabited","typeNames":["Std.Channel"]},{"className":"Std.Internal.Async.IO.AsyncRead","name":"Std.Channel.instAsyncReadOfInhabited","typeNames":["Std.Channel"]},{"className":"Std.Internal.Async.IO.AsyncWrite","name":"Std.Channel.instAsyncWriteOfInhabited","typeNames":["Std.Channel"]},{"className":"ForIn","name":"Std.Channel.Sync.instForInOfInhabitedOfMonadLiftTBaseIO","typeNames":["Std.Channel.Sync"]}],"name":"Std.Sync.Channel"}