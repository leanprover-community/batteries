{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Part.cast\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Part</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">i'</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlines_eq</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">blocks_eq</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">metadata_eq</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i'</span> <span class=\"fn\">b'</span> <span class=\"fn\">p'</span></span></div></div>","info":{"doc":"Rewrites using proofs that inline element types, block types, and metadata types are equal. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Part.cast","kind":"def","line":178,"name":"Lean.Doc.Part.cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L178-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedPart\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span> <span class=\"fn\">a✝²</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedPart","kind":"instance","line":176,"name":"Lean.Doc.instInhabitedPart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedPart.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedPart</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span> <span class=\"fn\">a✝²</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedPart.default","kind":"def","line":176,"name":"Lean.Doc.instInhabitedPart.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprPart.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprPart</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">p✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span> <span class=\"fn\">p✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprPart.repr","kind":"opaque","line":176,"name":"Lean.Doc.instReprPart.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprPart\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">p✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span> <span class=\"fn\">p✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprPart","kind":"instance","line":176,"name":"Lean.Doc.instReprPart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdPart\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">p✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span> <span class=\"fn\">p✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdPart","kind":"instance","line":176,"name":"Lean.Doc.instOrdPart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdPart.ord\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdPart</span>.<span class=\"name\">ord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">p✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span> <span class=\"fn\">p✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span> <span class=\"fn\">p✝</span></span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdPart.ord","kind":"opaque","line":176,"name":"Lean.Doc.instOrdPart.ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqPart.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqPart</span>.<span class=\"name\">beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">p✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span> <span class=\"fn\">p✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span> <span class=\"fn\">p✝</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqPart.beq","kind":"opaque","line":176,"name":"Lean.Doc.instBEqPart.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqPart\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqPart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">p✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span> <span class=\"fn\">p✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqPart","kind":"instance","line":176,"name":"Lean.Doc.instBEqPart","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Part.subParts\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Part</span>.<span class=\"name\">subParts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"Sub-parts (e.g. subsections of a section, sections of a chapter) ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Part.subParts","kind":"def","line":175,"name":"Lean.Doc.Part.subParts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L175-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Part.content\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Part</span>.<span class=\"name\">content</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"The part's textual content ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Part.content","kind":"def","line":173,"name":"Lean.Doc.Part.content","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L173-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Part.metadata\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Part</span>.<span class=\"name\">metadata</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"Genre-specific metadata ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Part.metadata","kind":"def","line":171,"name":"Lean.Doc.Part.metadata","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Part.titleString\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Part</span>.<span class=\"name\">titleString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"A string approximation of the part's title, for use in contexts where formatted text is invalid.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Part.titleString","kind":"def","line":169,"name":"Lean.Doc.Part.titleString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L169-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Part.title\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Part</span>.<span class=\"name\">title</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span></div></div>","info":{"doc":"The part's title ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Part.title","kind":"def","line":165,"name":"Lean.Doc.Part.title","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Part.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Part</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">title</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">titleString</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">metadata</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subParts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.Part.mk","kind":"ctor","line":163,"name":"Lean.Doc.Part.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L163-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Part\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Part</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v w)</div></div>","info":{"doc":"A logical division of a document.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Part","kind":"structure","line":160,"name":"Lean.Doc.Part","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L160-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.cast\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">i'</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlines_eq</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">blocks_eq</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i'</span> <span class=\"fn\">b'</span></span></div></div>","info":{"doc":"Rewrites using proofs that two inline element types and two block types are equal. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.cast","kind":"def","line":156,"name":"Lean.Doc.Block.cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L156-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"An empty block with no content. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.empty","kind":"def","line":153,"name":"Lean.Doc.Block.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L153-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedBlock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedBlock","kind":"instance","line":151,"name":"Lean.Doc.instInhabitedBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedBlock.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedBlock</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedBlock.default","kind":"def","line":151,"name":"Lean.Doc.instInhabitedBlock.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprBlock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprBlock","kind":"instance","line":151,"name":"Lean.Doc.instReprBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprBlock.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprBlock</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprBlock.repr","kind":"opaque","line":151,"name":"Lean.Doc.instReprBlock.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdBlock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdBlock","kind":"instance","line":151,"name":"Lean.Doc.instOrdBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdBlock.ord\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdBlock</span>.<span class=\"name\">ord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span></span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdBlock.ord","kind":"opaque","line":151,"name":"Lean.Doc.instOrdBlock.ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqBlock.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqBlock</span>.<span class=\"name\">beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqBlock.beq","kind":"opaque","line":151,"name":"Lean.Doc.instBEqBlock.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqBlock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">b✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i✝</span> <span class=\"fn\">b✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqBlock","kind":"instance","line":151,"name":"Lean.Doc.instBEqBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">other</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">container</span> : <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"A genre-specific block. `container` specifies what kind of block it is, while `content` specifies\nthe content within the block.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.other","kind":"ctor","line":146,"name":"Lean.Doc.Block.other","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L146-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"Multiple blocks, merged.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.concat","kind":"ctor","line":142,"name":"Lean.Doc.Block.concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L142-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.blockquote\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">blockquote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">items</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"A quotation.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.blockquote","kind":"ctor","line":138,"name":"Lean.Doc.Block.blockquote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L138-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.dl\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">dl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">items</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"A description list that associates explanatory text with shorter items.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.dl","kind":"ctor","line":134,"name":"Lean.Doc.Block.dl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L134-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.ol\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">ol</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">items</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"An ordered list.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.ol","kind":"ctor","line":130,"name":"Lean.Doc.Block.ol","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L130-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.ul\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">ul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">items</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"An unordered list.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.ul","kind":"ctor","line":126,"name":"Lean.Doc.Block.ul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L126-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">code</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"A code block.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.code","kind":"ctor","line":122,"name":"Lean.Doc.Block.code","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L122-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block.para\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span>.<span class=\"name\">para</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contents</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"A paragraph.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block.para","kind":"ctor","line":118,"name":"Lean.Doc.Block.para","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L118-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Block\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Block</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"Block-level content in a document.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Block","kind":"inductive","line":114,"name":"Lean.Doc.Block","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L114-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedDescItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedDescItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedDescItem","kind":"instance","line":112,"name":"Lean.Doc.instInhabitedDescItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedDescItem.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedDescItem</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedDescItem.default","kind":"def","line":112,"name":"Lean.Doc.instInhabitedDescItem.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdDescItem.ord\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdDescItem</span>.<span class=\"name\">ord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">β✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span></span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdDescItem.ord","kind":"def","line":112,"name":"Lean.Doc.instOrdDescItem.ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdDescItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdDescItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">β✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdDescItem","kind":"instance","line":112,"name":"Lean.Doc.instOrdDescItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqDescItem.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqDescItem</span>.<span class=\"name\">beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqDescItem.beq","kind":"def","line":112,"name":"Lean.Doc.instBEqDescItem.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqDescItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqDescItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqDescItem","kind":"instance","line":112,"name":"Lean.Doc.instBEqDescItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprDescItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprDescItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprDescItem","kind":"instance","line":112,"name":"Lean.Doc.instReprDescItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprDescItem.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprDescItem</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α✝</span> <span class=\"fn\">β✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprDescItem.repr","kind":"def","line":112,"name":"Lean.Doc.instReprDescItem.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem.desc\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DescItem</span>.<span class=\"name\">desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"The description itself. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.DescItem.desc","kind":"def","line":111,"name":"Lean.Doc.DescItem.desc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DescItem</span>.<span class=\"name\">term</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The term being described. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.DescItem.term","kind":"def","line":109,"name":"Lean.Doc.DescItem.term","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DescItem</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\">DescItem</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.DescItem.mk","kind":"ctor","line":107,"name":"Lean.Doc.DescItem.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.DescItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DescItem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"An item in a description list. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.DescItem","kind":"structure","line":106,"name":"Lean.Doc.DescItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L106-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedListItem.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedListItem</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedListItem.default","kind":"def","line":104,"name":"Lean.Doc.instInhabitedListItem.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedListItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedListItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedListItem","kind":"instance","line":104,"name":"Lean.Doc.instInhabitedListItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdListItem.ord\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdListItem</span>.<span class=\"name\">ord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α✝</span></span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdListItem.ord","kind":"def","line":104,"name":"Lean.Doc.instOrdListItem.ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdListItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdListItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdListItem","kind":"instance","line":104,"name":"Lean.Doc.instOrdListItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqListItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqListItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqListItem","kind":"instance","line":104,"name":"Lean.Doc.instBEqListItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqListItem.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqListItem</span>.<span class=\"name\">beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α✝</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqListItem.beq","kind":"def","line":104,"name":"Lean.Doc.instBEqListItem.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprListItem.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprListItem</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprListItem.repr","kind":"def","line":104,"name":"Lean.Doc.instReprListItem.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprListItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprListItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprListItem","kind":"instance","line":104,"name":"Lean.Doc.instReprListItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem.contents\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">ListItem</span>.<span class=\"name\">contents</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The contents of the list item. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.ListItem.contents","kind":"def","line":103,"name":"Lean.Doc.ListItem.contents","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">ListItem</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contents</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\">ListItem</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.ListItem.mk","kind":"ctor","line":101,"name":"Lean.Doc.ListItem.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.ListItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">ListItem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"An item in either an ordered or unordered list. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.ListItem","kind":"structure","line":100,"name":"Lean.Doc.ListItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L100-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"No inline content. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.empty","kind":"def","line":97,"name":"Lean.Doc.Inline.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L97-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instAppendInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instAppendInline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instAppendInline","kind":"instance","line":88,"name":"Lean.Doc.instAppendInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L88-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.cast\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">i'</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlines_eq</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i'</span></span></div></div>","info":{"doc":"Rewrites using a proof that two inline element types are equal. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.cast","kind":"def","line":84,"name":"Lean.Doc.Inline.cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L84-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedInline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedInline","kind":"instance","line":82,"name":"Lean.Doc.instInhabitedInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instInhabitedInline.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instInhabitedInline</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instInhabitedInline.default","kind":"def","line":82,"name":"Lean.Doc.instInhabitedInline.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprInline.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprInline</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprInline.repr","kind":"opaque","line":82,"name":"Lean.Doc.instReprInline.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprInline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprInline","kind":"instance","line":82,"name":"Lean.Doc.instReprInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdInline.ord\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdInline</span>.<span class=\"name\">ord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i✝</span></span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdInline.ord","kind":"opaque","line":82,"name":"Lean.Doc.instOrdInline.ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdInline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdInline","kind":"instance","line":82,"name":"Lean.Doc.instOrdInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqInline.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqInline</span>.<span class=\"name\">beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i✝</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i✝</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqInline.beq","kind":"opaque","line":82,"name":"Lean.Doc.instBEqInline.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqInline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">i✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqInline","kind":"instance","line":82,"name":"Lean.Doc.instBEqInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">other</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">container</span> : <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"A genre-specific inline element. `container` specifies what kind of element it is, and `content`\nspecifies the contained elements.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.other","kind":"ctor","line":77,"name":"Lean.Doc.Inline.other","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L77-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"A sequence of inline elements.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.concat","kind":"ctor","line":73,"name":"Lean.Doc.Inline.concat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L73-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.image\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt </span><span class=\"fn\">url</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"An image. `alt` should be displayed if the image can't be shown.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.image","kind":"ctor","line":69,"name":"Lean.Doc.Inline.image","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L69-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.footnote\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">footnote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"A footnote. In Verso's concrete syntax, their contents are specified elsewhere, but elaboration\nplaces the contents at the use site.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.footnote","kind":"ctor","line":64,"name":"Lean.Doc.Inline.footnote","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L64-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.link\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">link</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">url</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"A link to some URL.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.link","kind":"ctor","line":60,"name":"Lean.Doc.Inline.link","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L60-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.linebreak\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">linebreak</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">string</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"A user's line break. These are typically ignored when rendering, but don't need to be.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.linebreak","kind":"ctor","line":56,"name":"Lean.Doc.Inline.linebreak","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L56-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.math\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">math</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">string</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"Embedded TeX math, to be rendered by an engine such as TeX or KaTeX. The `mode` determines whether\nit is rendered in inline mode or display mode; even display-mode math is an inline element for\npurposes of document structure.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.math","kind":"ctor","line":50,"name":"Lean.Doc.Inline.math","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L50-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">code</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">string</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"Inline literal code, typically rendered in a monospace font.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.code","kind":"ctor","line":46,"name":"Lean.Doc.Inline.code","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L46-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.bold\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">bold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"Strong emphasis, typically rendered using bold text.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.bold","kind":"ctor","line":42,"name":"Lean.Doc.Inline.bold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L42-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.emph\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">emph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"Emphasis, typically rendered using italic text.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.emph","kind":"ctor","line":38,"name":"Lean.Doc.Inline.emph","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L38-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline.text\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span>.<span class=\"name\">text</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">string</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"Textual content.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline.text","kind":"ctor","line":34,"name":"Lean.Doc.Inline.text","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Inline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"Inline content that is part of the text flow.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.Inline","kind":"inductive","line":30,"name":"Lean.Doc.Inline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L30-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdMathMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdMathMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdMathMode","kind":"instance","line":28,"name":"Lean.Doc.instOrdMathMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instOrdMathMode.ord\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instOrdMathMode</span>.<span class=\"name\">ord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a> → <a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instOrdMathMode.ord","kind":"def","line":28,"name":"Lean.Doc.instOrdMathMode.ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instHashableMathMode.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instHashableMathMode</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instHashableMathMode.hash","kind":"def","line":28,"name":"Lean.Doc.instHashableMathMode.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instHashableMathMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instHashableMathMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instHashableMathMode","kind":"instance","line":28,"name":"Lean.Doc.instHashableMathMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqMathMode.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqMathMode</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a> → <a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqMathMode.beq","kind":"def","line":28,"name":"Lean.Doc.instBEqMathMode.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instBEqMathMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqMathMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instBEqMathMode","kind":"instance","line":28,"name":"Lean.Doc.instBEqMathMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprMathMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprMathMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprMathMode","kind":"instance","line":28,"name":"Lean.Doc.instReprMathMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.instReprMathMode.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprMathMode</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Types.html#Lean.Doc.instReprMathMode.repr","kind":"def","line":28,"name":"Lean.Doc.instReprMathMode.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode.display\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MathMode</span>.<span class=\"name\">display</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a></div></div>","info":{"doc":"The math content is set apart from the text flow, with more space. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.MathMode.display","kind":"ctor","line":26,"name":"Lean.Doc.MathMode.display","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode.inline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MathMode</span>.<span class=\"name\">inline</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\">MathMode</a></div></div>","info":{"doc":"The math content is part of the text flow. ","docLink":"./Lean/DocString/Types.html#Lean.Doc.MathMode.inline","kind":"ctor","line":24,"name":"Lean.Doc.MathMode.inline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L24-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Types.html#Lean.Doc.MathMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MathMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"How to render mathematical content.\n","docLink":"./Lean/DocString/Types.html#Lean.Doc.MathMode","kind":"inductive","line":20,"name":"Lean.Doc.MathMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/DocString/Types.lean#L20-L28"}}],"imports":["Init.Data.Ord","Init.Data.Nat.Compare"],"instances":[{"className":"Repr","name":"Lean.Doc.instReprMathMode","typeNames":["Lean.Doc.MathMode"]},{"className":"BEq","name":"Lean.Doc.instBEqMathMode","typeNames":["Lean.Doc.MathMode"]},{"className":"Hashable","name":"Lean.Doc.instHashableMathMode","typeNames":["Lean.Doc.MathMode"]},{"className":"Ord","name":"Lean.Doc.instOrdMathMode","typeNames":["Lean.Doc.MathMode"]},{"className":"BEq","name":"Lean.Doc.instBEqInline","typeNames":["Lean.Doc.Inline"]},{"className":"Ord","name":"Lean.Doc.instOrdInline","typeNames":["Lean.Doc.Inline"]},{"className":"Repr","name":"Lean.Doc.instReprInline","typeNames":["Lean.Doc.Inline"]},{"className":"Inhabited","name":"Lean.Doc.instInhabitedInline","typeNames":["Lean.Doc.Inline"]},{"className":"Append","name":"Lean.Doc.instAppendInline","typeNames":["Lean.Doc.Inline"]},{"className":"Repr","name":"Lean.Doc.instReprListItem","typeNames":["Lean.Doc.ListItem"]},{"className":"BEq","name":"Lean.Doc.instBEqListItem","typeNames":["Lean.Doc.ListItem"]},{"className":"Ord","name":"Lean.Doc.instOrdListItem","typeNames":["Lean.Doc.ListItem"]},{"className":"Inhabited","name":"Lean.Doc.instInhabitedListItem","typeNames":["Lean.Doc.ListItem"]},{"className":"Repr","name":"Lean.Doc.instReprDescItem","typeNames":["Lean.Doc.DescItem"]},{"className":"BEq","name":"Lean.Doc.instBEqDescItem","typeNames":["Lean.Doc.DescItem"]},{"className":"Ord","name":"Lean.Doc.instOrdDescItem","typeNames":["Lean.Doc.DescItem"]},{"className":"Inhabited","name":"Lean.Doc.instInhabitedDescItem","typeNames":["Lean.Doc.DescItem"]},{"className":"BEq","name":"Lean.Doc.instBEqBlock","typeNames":["Lean.Doc.Block"]},{"className":"Ord","name":"Lean.Doc.instOrdBlock","typeNames":["Lean.Doc.Block"]},{"className":"Repr","name":"Lean.Doc.instReprBlock","typeNames":["Lean.Doc.Block"]},{"className":"Inhabited","name":"Lean.Doc.instInhabitedBlock","typeNames":["Lean.Doc.Block"]},{"className":"BEq","name":"Lean.Doc.instBEqPart","typeNames":["Lean.Doc.Part"]},{"className":"Ord","name":"Lean.Doc.instOrdPart","typeNames":["Lean.Doc.Part"]},{"className":"Repr","name":"Lean.Doc.instReprPart","typeNames":["Lean.Doc.Part"]},{"className":"Inhabited","name":"Lean.Doc.instInhabitedPart","typeNames":["Lean.Doc.Part"]}],"name":"Lean.DocString.Types"}