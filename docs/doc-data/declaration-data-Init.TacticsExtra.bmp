{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticApply_mod_cast_\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticApply_mod_cast_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Normalize casts in the goal and the given expression, then `apply` the expression to the goal.\n","docLink":"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticApply_mod_cast_","kind":"def","line":94,"name":"Lean.Parser.Tactic.tacticApply_mod_cast_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/TacticsExtra.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticExact_mod_cast_\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticExact_mod_cast_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Normalize casts in the goal and the given expression, then close the goal with `exact`.\n","docLink":"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticExact_mod_cast_","kind":"def","line":89,"name":"Lean.Parser.Tactic.tacticExact_mod_cast_","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/TacticsExtra.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticRw_mod_cast___\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticRw_mod_cast___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Rewrites with the given rules, normalizing casts prior to each step.\n","docLink":"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticRw_mod_cast___","kind":"def","line":76,"name":"Lean.Parser.Tactic.tacticRw_mod_cast___","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/TacticsExtra.lean#L76-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticIterate____\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticIterate____</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`iterate n tac` runs `tac` exactly `n` times.\n`iterate tac` runs `tac` repeatedly until failure.\n\n`iterate`'s argument is a tactic sequence,\nso multiple tactics can be run using `iterate n (tac₁; tac₂; ⋯)` or\n```lean\niterate n\n  tac₁\n  tac₂\n  ⋯\n```\n","docLink":"./Init/TacticsExtra.html#Lean.Parser.Tactic.tacticIterate____","kind":"def","line":54,"name":"Lean.Parser.Tactic.tacticIterate____","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/TacticsExtra.lean#L54-L67"}}],"imports":["Init.NotationExtra"],"instances":[],"name":"Init.TacticsExtra"}