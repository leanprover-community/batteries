{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.scaleB\"><span class=\"name\">Float</span>.<span class=\"name\">scaleB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Efficiently computes `x * 2^i`.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float.html#Float.scaleB","kind":"opaque","line":494,"name":"Float.scaleB","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L494-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instMaxFloat\"><span class=\"name\">instMaxFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instMaxFloat","kind":"instance","line":492,"name":"instMaxFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L492-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instMinFloat\"><span class=\"name\">instMinFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instMinFloat","kind":"instance","line":490,"name":"instMinFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L490-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instHomogeneousPowFloat\"><span class=\"name\">instHomogeneousPowFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HomogeneousPow\">HomogeneousPow</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instHomogeneousPowFloat","kind":"instance","line":488,"name":"instHomogeneousPowFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L488-L488"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.abs\"><span class=\"name\">Float</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the absolute value of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`fabs`.\n","docLink":"./Init/Data/Float.html#Float.abs","kind":"opaque","line":480,"name":"Float.abs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L480-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.round\"><span class=\"name\">Float</span>.<span class=\"name\">round</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Rounds to the nearest integer, rounding away from zero at half-way points.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`round`.\n","docLink":"./Init/Data/Float.html#Float.round","kind":"opaque","line":473,"name":"Float.round","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L473-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.floor\"><span class=\"name\">Float</span>.<span class=\"name\">floor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the floor of a floating-point number, which is the largest integer that's no larger\nthan the given number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`floor`.\n\nExamples:\n * `Float.floor 1.5 = 1`\n * `Float.floor (-1.5) = (-2)`\n","docLink":"./Init/Data/Float.html#Float.floor","kind":"opaque","line":461,"name":"Float.floor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L461-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.ceil\"><span class=\"name\">Float</span>.<span class=\"name\">ceil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the ceiling of a floating-point number, which is the smallest integer that's no smaller\nthan the given number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`ceil`.\n\nExamples:\n * `Float.ceil 1.5 = 2`\n * `Float.ceil (-1.5) = (-1)`\n","docLink":"./Init/Data/Float.html#Float.ceil","kind":"opaque","line":449,"name":"Float.ceil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L449-L460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.cbrt\"><span class=\"name\">Float</span>.<span class=\"name\">cbrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the cube root of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cbrt`.\n","docLink":"./Init/Data/Float.html#Float.cbrt","kind":"opaque","line":442,"name":"Float.cbrt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L442-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.sqrt\"><span class=\"name\">Float</span>.<span class=\"name\">sqrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the square root of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sqrt`.\n","docLink":"./Init/Data/Float.html#Float.sqrt","kind":"opaque","line":435,"name":"Float.sqrt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L435-L441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.pow\"><span class=\"name\">Float</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Raises one floating-point number to the power of another. Typically used via the `^` operator.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`pow`.\n","docLink":"./Init/Data/Float.html#Float.pow","kind":"opaque","line":428,"name":"Float.pow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L428-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.log10\"><span class=\"name\">Float</span>.<span class=\"name\">log10</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the base-10 logarithm of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log10`.\n","docLink":"./Init/Data/Float.html#Float.log10","kind":"opaque","line":421,"name":"Float.log10","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L421-L427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.log2\"><span class=\"name\">Float</span>.<span class=\"name\">log2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the base-2 logarithm of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log2`.\n","docLink":"./Init/Data/Float.html#Float.log2","kind":"opaque","line":414,"name":"Float.log2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L414-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.log\"><span class=\"name\">Float</span>.<span class=\"name\">log</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Computes the natural logarithm `ln x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log`.\n","docLink":"./Init/Data/Float.html#Float.log","kind":"opaque","line":407,"name":"Float.log","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L407-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.exp2\"><span class=\"name\">Float</span>.<span class=\"name\">exp2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Computes the base-2 exponential `2^x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`exp2`.\n","docLink":"./Init/Data/Float.html#Float.exp2","kind":"opaque","line":400,"name":"Float.exp2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L400-L406"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.exp\"><span class=\"name\">Float</span>.<span class=\"name\">exp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Computes the exponential `e^x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`exp`.\n","docLink":"./Init/Data/Float.html#Float.exp","kind":"opaque","line":393,"name":"Float.exp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L393-L399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.atanh\"><span class=\"name\">Float</span>.<span class=\"name\">atanh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the hyperbolic arc tangent (inverse tangent) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atanh`.\n","docLink":"./Init/Data/Float.html#Float.atanh","kind":"opaque","line":386,"name":"Float.atanh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L386-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.acosh\"><span class=\"name\">Float</span>.<span class=\"name\">acosh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the hyperbolic arc cosine (inverse cosine) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`acosh`.\n","docLink":"./Init/Data/Float.html#Float.acosh","kind":"opaque","line":379,"name":"Float.acosh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L379-L385"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.asinh\"><span class=\"name\">Float</span>.<span class=\"name\">asinh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the hyperbolic arc sine (inverse sine) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`asinh`.\n","docLink":"./Init/Data/Float.html#Float.asinh","kind":"opaque","line":372,"name":"Float.asinh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L372-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.tanh\"><span class=\"name\">Float</span>.<span class=\"name\">tanh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the hyperbolic tangent of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`tanh`.\n","docLink":"./Init/Data/Float.html#Float.tanh","kind":"opaque","line":365,"name":"Float.tanh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L365-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.cosh\"><span class=\"name\">Float</span>.<span class=\"name\">cosh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the hyperbolic cosine of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cosh`.\n","docLink":"./Init/Data/Float.html#Float.cosh","kind":"opaque","line":358,"name":"Float.cosh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L358-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.sinh\"><span class=\"name\">Float</span>.<span class=\"name\">sinh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the hyperbolic sine of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sinh`.\n","docLink":"./Init/Data/Float.html#Float.sinh","kind":"opaque","line":351,"name":"Float.sinh","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L351-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.atan2\"><span class=\"name\">Float</span>.<span class=\"name\">atan2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">x</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Computes the arc tangent (inverse tangent) of `y / x` in radians, in the range `-π`–`π`. The signs\nof the arguments determine the quadrant of the result.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atan2`.\n","docLink":"./Init/Data/Float.html#Float.atan2","kind":"opaque","line":343,"name":"Float.atan2","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L343-L350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.atan\"><span class=\"name\">Float</span>.<span class=\"name\">atan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the arc tangent (inverse tangent) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atan`.\n","docLink":"./Init/Data/Float.html#Float.atan","kind":"opaque","line":336,"name":"Float.atan","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L336-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.acos\"><span class=\"name\">Float</span>.<span class=\"name\">acos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the arc cosine (inverse cosine) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`acos`.\n","docLink":"./Init/Data/Float.html#Float.acos","kind":"opaque","line":329,"name":"Float.acos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L329-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.asin\"><span class=\"name\">Float</span>.<span class=\"name\">asin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the arc sine (inverse sine) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`asin`.\n","docLink":"./Init/Data/Float.html#Float.asin","kind":"opaque","line":322,"name":"Float.asin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L322-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.tan\"><span class=\"name\">Float</span>.<span class=\"name\">tan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the tangent of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`tan`.\n","docLink":"./Init/Data/Float.html#Float.tan","kind":"opaque","line":315,"name":"Float.tan","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L315-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.cos\"><span class=\"name\">Float</span>.<span class=\"name\">cos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the cosine of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cos`.\n","docLink":"./Init/Data/Float.html#Float.cos","kind":"opaque","line":308,"name":"Float.cos","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L308-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.sin\"><span class=\"name\">Float</span>.<span class=\"name\">sin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Computes the sine of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sin`.\n","docLink":"./Init/Data/Float.html#Float.sin","kind":"opaque","line":301,"name":"Float.sin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L301-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instReprAtomFloat\"><span class=\"name\">instReprAtomFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instReprAtomFloat","kind":"instance","line":299,"name":"instReprAtomFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L299-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instReprFloat\"><span class=\"name\">instReprFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instReprFloat","kind":"instance","line":296,"name":"instReprFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L296-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.repr\"><span class=\"name\">Float</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#Float.repr","kind":"def","line":293,"name":"Float.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L293-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instInhabitedFloat\"><span class=\"name\">instInhabitedFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instInhabitedFloat","kind":"instance","line":290,"name":"instInhabitedFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L290-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#USize.toFloat\"><span class=\"name\">USize</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Obtains a `Float` whose value is near the given `USize`.\n\nIt will be exactly the value of the given `USize` if such a `Float` exists. If no such `Float`\nexists, the returned value will either be the smallest `Float` that is larger than the given value,\nor the largest `Float` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n","docLink":"./Init/Data/Float.html#USize.toFloat","kind":"opaque","line":278,"name":"USize.toFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L278-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#UInt64.toFloat\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Obtains a `Float` whose value is near the given `UInt64`.\n\nIt will be exactly the value of the given `UInt64` if such a `Float` exists. If no such `Float`\nexists, the returned value will either be the smallest `Float` that is larger than the given value,\nor the largest `Float` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n","docLink":"./Init/Data/Float.html#UInt64.toFloat","kind":"opaque","line":267,"name":"UInt64.toFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L267-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#UInt32.toFloat\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Obtains the `Float` whose value is the same as the given `UInt32`. ","docLink":"./Init/Data/Float.html#UInt32.toFloat","kind":"opaque","line":265,"name":"UInt32.toFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L265-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#UInt16.toFloat\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Obtains the `Float` whose value is the same as the given `UInt16`. ","docLink":"./Init/Data/Float.html#UInt16.toFloat","kind":"opaque","line":263,"name":"UInt16.toFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L263-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#UInt8.toFloat\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Obtains the `Float` whose value is the same as the given `UInt8`. ","docLink":"./Init/Data/Float.html#UInt8.toFloat","kind":"opaque","line":261,"name":"UInt8.toFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L261-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instToStringFloat\"><span class=\"name\">instToStringFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instToStringFloat","kind":"instance","line":258,"name":"instToStringFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L258-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.frExp\"><span class=\"name\">Float</span>.<span class=\"name\">frExp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"Splits the given float `x` into a significand/exponent pair `(s, i)` such that `x = s * 2^i` where\n`s ∈ (-1;-0.5] ∪ [0.5; 1)`. Returns an undefined value if `x` is not finite.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`frexp`.\n","docLink":"./Init/Data/Float.html#Float.frExp","kind":"opaque","line":249,"name":"Float.frExp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L249-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.isInf\"><span class=\"name\">Float</span>.<span class=\"name\">isInf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether a floating-point number is a positive or negative infinite number, but not a finite\nnumber or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isinf`.\n","docLink":"./Init/Data/Float.html#Float.isInf","kind":"opaque","line":241,"name":"Float.isInf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L241-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.isFinite\"><span class=\"name\">Float</span>.<span class=\"name\">isFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether a floating-point number is finite, that is, whether it is normal, subnormal, or zero,\nbut not infinite or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isfinite`.\n","docLink":"./Init/Data/Float.html#Float.isFinite","kind":"opaque","line":233,"name":"Float.isFinite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L233-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.isNaN\"><span class=\"name\">Float</span>.<span class=\"name\">isNaN</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether a floating point number is `NaN` (“not a number”) value.\n\n`NaN` values result from operations that might otherwise be errors, such as dividing zero by zero.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isnan`.\n","docLink":"./Init/Data/Float.html#Float.isNaN","kind":"opaque","line":224,"name":"Float.isNaN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L224-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUSize\"><span class=\"name\">Float</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"Converts a floating-point number to a word-sized unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `USize`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `USize` value (i.e. `USize.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float.html#Float.toUSize","kind":"opaque","line":213,"name":"Float.toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L213-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUInt64\"><span class=\"name\">Float</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"Converts a floating-point number to a 64-bit unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt64`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `UInt64` value (i.e. `UInt64.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float.html#Float.toUInt64","kind":"opaque","line":203,"name":"Float.toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L203-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUInt32\"><span class=\"name\">Float</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"Converts a floating-point number to a 32-bit unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt32`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `UInt32` value (i.e. `UInt32.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float.html#Float.toUInt32","kind":"opaque","line":193,"name":"Float.toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L193-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUInt16\"><span class=\"name\">Float</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"Converts a floating-point number to a 16-bit unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt16`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `UInt16` value (i.e. `UInt16.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float.html#Float.toUInt16","kind":"opaque","line":183,"name":"Float.toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L183-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toUInt8\"><span class=\"name\">Float</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"Converts a floating-point number to an 8-bit unsigned integer.\n\nIf the given `Float` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt8`. Returns `0` if the `Float` is negative or `NaN`, and returns the\nlargest `UInt8` value (i.e. `UInt8.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float.html#Float.toUInt8","kind":"opaque","line":173,"name":"Float.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L173-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toString\"><span class=\"name\">Float</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Converts a floating-point number to a string.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float.html#Float.toString","kind":"opaque","line":166,"name":"Float.toString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L166-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.decLe\"><span class=\"name\">Float</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Compares two floating point numbers for non-strict inequality.\n\nThis function does not reduce in the kernel. It is compiled to the C inequality operator.\n","docLink":"./Init/Data/Float.html#Float.decLe","kind":"opaque","line":155,"name":"Float.decLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L155-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.decLt\"><span class=\"name\">Float</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Compares two floating point numbers for strict inequality.\n\nThis function does not reduce in the kernel. It is compiled to the C inequality operator.\n","docLink":"./Init/Data/Float.html#Float.decLt","kind":"opaque","line":146,"name":"Float.decLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L146-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instBEqFloat\"><span class=\"name\">instBEqFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instBEqFloat","kind":"instance","line":144,"name":"instBEqFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.beq\"><span class=\"name\">Float</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether two floating-point numbers are equal according to IEEE 754.\n\nFloating-point equality does not correspond with propositional equality. In particular, it is not\nreflexive since `NaN != NaN`, and it is not a congruence because `0.0 == -0.0`, but\n`1.0 / 0.0 != 1.0 / -0.0`.\n\nThis function does not reduce in the kernel. It is compiled to the C equality operator.\n","docLink":"./Init/Data/Float.html#Float.beq","kind":"opaque","line":133,"name":"Float.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L133-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instLEFloat\"><span class=\"name\">instLEFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instLEFloat","kind":"instance","line":131,"name":"instLEFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instLTFloat\"><span class=\"name\">instLTFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instLTFloat","kind":"instance","line":130,"name":"instLTFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instNegFloat\"><span class=\"name\">instNegFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instNegFloat","kind":"instance","line":129,"name":"instNegFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instDivFloat\"><span class=\"name\">instDivFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instDivFloat","kind":"instance","line":128,"name":"instDivFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instMulFloat\"><span class=\"name\">instMulFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instMulFloat","kind":"instance","line":127,"name":"instMulFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instSubFloat\"><span class=\"name\">instSubFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instSubFloat","kind":"instance","line":126,"name":"instSubFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instAddFloat\"><span class=\"name\">instAddFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instAddFloat","kind":"instance","line":125,"name":"instAddFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.toBits\"><span class=\"name\">Float</span>.<span class=\"name\">toBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"Bit-for-bit conversion to `UInt64`. Interprets a `Float` as a `UInt64`, ignoring the numeric value\nand treating the `Float`'s bit pattern as a `UInt64`.\n\n`Float`s and `UInt64`s have the same endianness on all supported platforms. IEEE 754 very precisely\nspecifies the bit layout of floats.\n\nThis function is distinct from `Float.toUInt64`, which attempts to preserve the numeric value rather\nthan reinterpreting the bit pattern.\n","docLink":"./Init/Data/Float.html#Float.toBits","kind":"opaque","line":113,"name":"Float.toBits","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L113-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.ofBits\"><span class=\"name\">Float</span>.<span class=\"name\">ofBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Bit-for-bit conversion from `UInt64`. Interprets a `UInt64` as a `Float`, ignoring the numeric value\nand treating the `UInt64`'s bit pattern as a `Float`.\n\n`Float`s and `UInt64`s have the same endianness on all supported platforms. IEEE 754 very precisely\nspecifies the bit layout of floats.\n\nThis function does not reduce in the kernel.\n","docLink":"./Init/Data/Float.html#Float.ofBits","kind":"opaque","line":102,"name":"Float.ofBits","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L102-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.le\"><span class=\"name\">Float</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Non-strict inequality of floating-point numbers. Typically used via the `≤` operator.\n","docLink":"./Init/Data/Float.html#Float.le","kind":"def","line":96,"name":"Float.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L96-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.lt\"><span class=\"name\">Float</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"Strict inequality of floating-point numbers. Typically used via the `<` operator.\n","docLink":"./Init/Data/Float.html#Float.lt","kind":"def","line":89,"name":"Float.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L89-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.neg\"><span class=\"name\">Float</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Negates 64-bit floating-point numbers according to IEEE 754. Typically used via the `-` prefix\noperator.\n\nThis function does not reduce in the kernel. It is compiled to the C negation operator.\n","docLink":"./Init/Data/Float.html#Float.neg","kind":"opaque","line":80,"name":"Float.neg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L80-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.div\"><span class=\"name\">Float</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Divides 64-bit floating-point numbers according to IEEE 754. Typically used via the `/` operator.\n\nIn Lean, division by zero typically yields zero. For `Float`, it instead yields either `Inf`,\n`-Inf`, or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C division operator.\n","docLink":"./Init/Data/Float.html#Float.div","kind":"opaque","line":71,"name":"Float.div","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L71-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.mul\"><span class=\"name\">Float</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Multiplies 64-bit floating-point numbers according to IEEE 754. Typically used via the `*` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C multiplication operator.\n","docLink":"./Init/Data/Float.html#Float.mul","kind":"opaque","line":65,"name":"Float.mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L65-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.sub\"><span class=\"name\">Float</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Subtracts 64-bit floating-point numbers according to IEEE 754. Typically used via the `-` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C subtraction operator.\n","docLink":"./Init/Data/Float.html#Float.sub","kind":"opaque","line":59,"name":"Float.sub","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L59-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.add\"><span class=\"name\">Float</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Adds two 64-bit floating-point numbers according to IEEE 754. Typically used via the `+` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C addition operator.\n","docLink":"./Init/Data/Float.html#Float.add","kind":"opaque","line":53,"name":"Float.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L53-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#instNonemptyFloat\"><span class=\"name\">instNonemptyFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#instNonemptyFloat","kind":"instance","line":51,"name":"instNonemptyFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.val\"><span class=\"name\">Float</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#floatSpec\">floatSpec</a>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#Float.val","kind":"def","line":49,"name":"Float.val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float.mk\"><span class=\"name\">Float</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\"><a href=\"./Init/Data/Float.html#floatSpec\">floatSpec</a>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#Float.mk","kind":"ctor","line":48,"name":"Float.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#Float\"><span class=\"name\">Float</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"64-bit floating-point numbers.\n\n`Float` corresponds to the IEEE 754 *binary64* format (`double` in C or `f64` in Rust).\nFloating-point numbers are a finite representation of a subset of the real numbers, extended with\nextra “sentinel” values that represent undefined and infinite results as well as separate positive\nand negative zeroes. Arithmetic on floating-point numbers approximates the corresponding operations\non the real numbers by rounding the results to numbers that are representable, propagating error and\ninfinite values.\n\nFloating-point numbers include [subnormal numbers](https://en.wikipedia.org/wiki/Subnormal_number).\nTheir special values are:\n * `NaN`, which denotes a class of “not a number” values that result from operations such as\n   dividing zero by zero, and\n * `Inf` and `-Inf`, which represent positive and infinities that result from dividing non-zero\n   values by zero.\n","docLink":"./Init/Data/Float.html#Float","kind":"structure","line":31,"name":"Float","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L31-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#floatSpec\"><span class=\"name\">floatSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#floatSpec","kind":"opaque","line":22,"name":"floatSpec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L22-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.decLe\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.le\">le</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#FloatSpec.decLe","kind":"def","line":19,"name":"FloatSpec.decLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.decLt\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.lt\">lt</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#FloatSpec.decLt","kind":"def","line":18,"name":"FloatSpec.decLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.le\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span> → <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#FloatSpec.le","kind":"def","line":17,"name":"FloatSpec.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.lt\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span> → <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#FloatSpec.lt","kind":"def","line":16,"name":"FloatSpec.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.val\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#FloatSpec.val","kind":"def","line":15,"name":"FloatSpec.val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L15-L15"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.float\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">float</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#FloatSpec.float","kind":"def","line":14,"name":"FloatSpec.float","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L14-L14"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec.mk\"><span class=\"name\">FloatSpec</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">float</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">float</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt </span><span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">float</span> → <span class=\"fn\">float</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decLt</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">lt</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decLe</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#FloatSpec.mk","kind":"ctor","line":13,"name":"FloatSpec.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L13-L13"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float.html#FloatSpec\"><span class=\"name\">FloatSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>","info":{"doc":"","docLink":"./Init/Data/Float.html#FloatSpec","kind":"structure","line":13,"name":"FloatSpec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Float.lean#L13-L19"}}],"imports":["Init.Data.ToString.Basic"],"instances":[{"className":"Nonempty","name":"instNonemptyFloat","typeNames":["Float"]},{"className":"Add","name":"instAddFloat","typeNames":["Float"]},{"className":"Sub","name":"instSubFloat","typeNames":["Float"]},{"className":"Mul","name":"instMulFloat","typeNames":["Float"]},{"className":"Div","name":"instDivFloat","typeNames":["Float"]},{"className":"Neg","name":"instNegFloat","typeNames":["Float"]},{"className":"LT","name":"instLTFloat","typeNames":["Float"]},{"className":"LE","name":"instLEFloat","typeNames":["Float"]},{"className":"BEq","name":"instBEqFloat","typeNames":["Float"]},{"className":"ToString","name":"instToStringFloat","typeNames":["Float"]},{"className":"Inhabited","name":"instInhabitedFloat","typeNames":["Float"]},{"className":"Repr","name":"instReprFloat","typeNames":["Float"]},{"className":"ReprAtom","name":"instReprAtomFloat","typeNames":["Float"]},{"className":"HomogeneousPow","name":"instHomogeneousPowFloat","typeNames":["Float"]},{"className":"Min","name":"instMinFloat","typeNames":["Float"]},{"className":"Max","name":"instMaxFloat","typeNames":["Float"]}],"name":"Init.Data.Float"}