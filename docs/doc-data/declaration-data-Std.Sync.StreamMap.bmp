{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.close\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">close</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Cleanup function\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.close","kind":"def","line":138,"name":"Std.StreamMap.close","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L138-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <span class=\"fn\">β</span></span>)</span></div></div>","info":{"doc":"Convert to array of name-selector pairs\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.toArray","kind":"def","line":132,"name":"Std.StreamMap.toArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L132-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.filterByName\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">filterByName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Filter streams based on their names\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.filterByName","kind":"def","line":126,"name":"Std.StreamMap.filterByName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L126-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.get?\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <span class=\"fn\">β</span>)</span></span></div></div>","info":{"doc":"Get a specific stream selector by name\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.get?","kind":"def","line":120,"name":"Std.StreamMap.get?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L120-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.keys\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Get all registered stream names\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.keys","kind":"def","line":114,"name":"Std.StreamMap.keys","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L114-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check if the StreamMap is empty\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.isEmpty","kind":"def","line":108,"name":"Std.StreamMap.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L108-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.size\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Get the number of registered streams\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.size","kind":"def","line":102,"name":"Std.StreamMap.size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L102-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.contains\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check if a stream with the given name exists\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.contains","kind":"def","line":96,"name":"Std.StreamMap.contains","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L96-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.unregister\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">unregister</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Remove a stream by name\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.unregister","kind":"def","line":90,"name":"Std.StreamMap.unregister","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L90-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stream</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Internal.IO.Async.Async</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>))</span></span></div></div>","info":{"doc":"Wait for the first value inside of the stream map.\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.tryRecv","kind":"def","line":83,"name":"Std.StreamMap.tryRecv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L83-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.recv\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stream</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Internal.IO.Async.Async</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"Wait for the first value inside of the stream map.\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.recv","kind":"def","line":76,"name":"Std.StreamMap.recv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L76-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.selector\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">selector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stream</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.Async\">Internal.IO.Async.Async</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>))</span></span></div></div>","info":{"doc":"Get a combined selector that returns the stream name and value\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.selector","kind":"def","line":69,"name":"Std.StreamMap.selector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L69-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.ofArray\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">streams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.AnyAsyncStream\">AnyAsyncStream</a> <span class=\"fn\">β</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Create a StreamMap from an array of named streams\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.ofArray","kind":"def","line":62,"name":"Std.StreamMap.ofArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L62-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.register\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">register</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">t </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncStream\">Internal.Async.IO.AsyncStream</a> <span class=\"fn\">t</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sm</span> : <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reader</span> : <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Register a new async stream with the given name\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.register","kind":"def","line":54,"name":"Std.StreamMap.register","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L54-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap.empty\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.StreamMap\">StreamMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Create an empty StreamMap\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap.empty","kind":"def","line":48,"name":"Std.StreamMap.empty","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L48-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.StreamMap\"><span class=\"name\">Std</span>.<span class=\"name\">StreamMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A container that maps keys to async streams, enabling dynamic stream management\nand unified selection operations across multiple named data sources.\n","docLink":"./Std/Sync/StreamMap.html#Std.StreamMap","kind":"structure","line":38,"name":"Std.StreamMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L38-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.instCoeDepAnyAsyncStreamOfAsyncStream\"><span class=\"name\">Std</span>.<span class=\"name\">instCoeDepAnyAsyncStreamOfAsyncStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncStream\">Internal.Async.IO.AsyncStream</a> <span class=\"fn\">t</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeDep\">CoeDep</a> <span class=\"fn\">t</span> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Std/Sync/StreamMap.html#Std.AnyAsyncStream\">AnyAsyncStream</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/StreamMap.html#Std.instCoeDepAnyAsyncStreamOfAsyncStream","kind":"instance","line":35,"name":"Std.instCoeDepAnyAsyncStreamOfAsyncStream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L35-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.AnyAsyncStream.getSelector\"><span class=\"name\">Std</span>.<span class=\"name\">AnyAsyncStream</span>.<span class=\"name\">getSelector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.AnyAsyncStream\">AnyAsyncStream</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/StreamMap.html#Std.AnyAsyncStream.getSelector","kind":"def","line":32,"name":"Std.AnyAsyncStream.getSelector","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.AnyAsyncStream.mk\"><span class=\"name\">Std</span>.<span class=\"name\">AnyAsyncStream</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">t</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Internal/Async/IO.html#Std.Internal.Async.IO.AsyncStream\">Internal.Async.IO.AsyncStream</a> <span class=\"fn\">t</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span> → <span class=\"fn\"><a href=\"./Std/Sync/StreamMap.html#Std.AnyAsyncStream\">AnyAsyncStream</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Sync/StreamMap.html#Std.AnyAsyncStream.mk","kind":"ctor","line":30,"name":"Std.AnyAsyncStream.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/StreamMap.html#Std.AnyAsyncStream\"><span class=\"name\">Std</span>.<span class=\"name\">AnyAsyncStream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>","info":{"doc":"This is an existential wrapper for AsyncStream that is used for the `.ofArray` function\nwith `CoeDep` so it's easier and we keep StreamMap on `Type 0`.\n","docLink":"./Std/Sync/StreamMap.html#Std.AnyAsyncStream","kind":"inductive","line":25,"name":"Std.AnyAsyncStream","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Sync/StreamMap.lean#L25-L30"}}],"imports":["Std.Data","Init.Data.Queue","Std.Internal.Async.IO"],"instances":[{"className":"CoeDep","name":"Std.instCoeDepAnyAsyncStreamOfAsyncStream","typeNames":["Std.AnyAsyncStream"]}],"name":"Std.Sync.StreamMap"}