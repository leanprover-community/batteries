{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Nat.toFloat32\"><span class=\"name\">Nat</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Converts a natural number into the closest-possible 32-bit floating-point number, or an infinite\nfloating-point value if the range of `Float32` is exceeded.\n","docLink":"./Init/Data/OfScientific.html#Nat.toFloat32","kind":"def","line":129,"name":"Nat.toFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L129-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#instOfNatFloat32\"><span class=\"name\">instOfNatFloat32</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/OfScientific.html#instOfNatFloat32","kind":"instance","line":127,"name":"instOfNatFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float32.ofInt\"><span class=\"name\">Float32</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"Converts an integer into the closest-possible 32-bit floating-point number, or positive or negative\ninfinite floating-point value if the range of `Float32` is exceeded.\n","docLink":"./Init/Data/OfScientific.html#Float32.ofInt","kind":"def","line":119,"name":"Float32.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L119-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float32.ofNat\"><span class=\"name\">Float32</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Converts a natural number into the closest-possible 32-bit floating-point number, or an infinite\nfloating-point value if the range of `Float32` is exceeded.\n","docLink":"./Init/Data/OfScientific.html#Float32.ofNat","kind":"def","line":111,"name":"Float32.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L111-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#instOfScientificFloat32\"><span class=\"name\">instOfScientificFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/OfScientific.html#instOfScientificFloat32","kind":"instance","line":108,"name":"instOfScientificFloat32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L108-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float32.ofScientific\"><span class=\"name\">Float32</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Constructs a `Float32` from the given mantissa, sign, and exponent values.\n\nThis function is part of the implementation of the `OfScientific Float32` instance that is used to\ninterpret floating-point literals.\n","docLink":"./Init/Data/OfScientific.html#Float32.ofScientific","kind":"opaque","line":94,"name":"Float32.ofScientific","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L94-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float32.ofBinaryScientific\"><span class=\"name\">Float32</span>.<span class=\"name\">ofBinaryScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>","info":{"doc":"Computes `m * 2^e`. ","docLink":"./Init/Data/OfScientific.html#Float32.ofBinaryScientific","kind":"def","line":87,"name":"Float32.ofBinaryScientific","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L87-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Nat.toFloat\"><span class=\"name\">Nat</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Converts a natural number into the closest-possible 64-bit floating-point number, or an infinite\nfloating-point value if the range of `Float` is exceeded.\n","docLink":"./Init/Data/OfScientific.html#Nat.toFloat","kind":"def","line":84,"name":"Nat.toFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L84-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#instOfNatFloat\"><span class=\"name\">instOfNatFloat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/Float.html#Float\">Float</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/OfScientific.html#instOfNatFloat","kind":"instance","line":82,"name":"instOfNatFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float.ofInt\"><span class=\"name\">Float</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"Converts an integer into the closest-possible 64-bit floating-point number, or positive or negative\ninfinite floating-point value if the range of `Float` is exceeded.\n","docLink":"./Init/Data/OfScientific.html#Float.ofInt","kind":"def","line":74,"name":"Float.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L74-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float.ofNat\"><span class=\"name\">Float</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Converts a natural number into the closest-possible 64-bit floating-point number, or an infinite\nfloating-point value if the range of `Float` is exceeded.\n","docLink":"./Init/Data/OfScientific.html#Float.ofNat","kind":"def","line":66,"name":"Float.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L66-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#instOfScientificFloat\"><span class=\"name\">instOfScientificFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>","info":{"doc":"The `OfScientific Float` must have priority higher than `mid` since\nthe default instance `Neg Int` has `mid` priority.\n```\n#check -42.0 -- must be Float\n```\n","docLink":"./Init/Data/OfScientific.html#instOfScientificFloat","kind":"instance","line":55,"name":"instOfScientificFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L55-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float.ofScientific\"><span class=\"name\">Float</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Constructs a `Float` from the given mantissa, sign, and exponent values.\n\nThis function is part of the implementation of the `OfScientific Float` instance that is used to\ninterpret floating-point literals.\n","docLink":"./Init/Data/OfScientific.html#Float.ofScientific","kind":"opaque","line":41,"name":"Float.ofScientific","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L41-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#Float.ofBinaryScientific\"><span class=\"name\">Float</span>.<span class=\"name\">ofBinaryScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>","info":{"doc":"Computes `m * 2^e`. ","docLink":"./Init/Data/OfScientific.html#Float.ofBinaryScientific","kind":"def","line":34,"name":"Float.ofBinaryScientific","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L34-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#OfScientific.ofScientific\"><span class=\"name\">OfScientific</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mantissa</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exponentSign</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decimalExponent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Produces a value from the given mantissa, exponent sign, and decimal exponent. For the exponent\nsign, `true` indicates a negative exponent.\n\n Examples:\n - `1.23` is syntax for `OfScientific.ofScientific (nat_lit 123) true (nat_lit 2)`\n - `121e100` is syntax for `OfScientific.ofScientific (nat_lit 121) false (nat_lit 100)`\n\n Note the use of `nat_lit`; there is no wrapping `OfNat.ofNat` in the resulting term.\n","docLink":"./Init/Data/OfScientific.html#OfScientific.ofScientific","kind":"def","line":32,"name":"OfScientific.ofScientific","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#OfScientific.mk\"><span class=\"name\">OfScientific</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ofScientific</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/OfScientific.html#OfScientific.mk","kind":"ctor","line":21,"name":"OfScientific.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/OfScientific.html#OfScientific\"><span class=\"name\">OfScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"For decimal and scientific numbers (e.g., `1.23`, `3.12e10`).\nExamples:\n- `1.23` is syntax for `OfScientific.ofScientific (nat_lit 123) true (nat_lit 2)`\n- `121e100` is syntax for `OfScientific.ofScientific (nat_lit 121) false (nat_lit 100)`\n\nNote the use of `nat_lit`; there is no wrapping `OfNat.ofNat` in the resulting term.\n","docLink":"./Init/Data/OfScientific.html#OfScientific","kind":"class","line":14,"name":"OfScientific","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/OfScientific.lean#L14-L32"}}],"imports":["Init.Data.Float32","Init.Data.Nat.Log2"],"instances":[{"className":"OfScientific","name":"instOfScientificFloat","typeNames":["Float"]},{"className":"OfNat","name":"instOfNatFloat","typeNames":["Float"]},{"className":"OfScientific","name":"instOfScientificFloat32","typeNames":["Float32"]},{"className":"OfNat","name":"instOfNatFloat32","typeNames":["Float32"]}],"name":"Init.Data.OfScientific"}