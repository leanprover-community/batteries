{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe_there\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">getThe_there</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> <span class=\"fn\">σs</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ'</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe\">getThe</a> <span class=\"fn\">σ</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe\">getThe</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe_there","kind":"theorem","line":78,"name":"Std.Do.SVal.getThe_there","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe_here\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">getThe_here</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe\">getThe</a> <span class=\"fn\">σ</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe_here","kind":"theorem","line":77,"name":"Std.Do.SVal.getThe_here","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">getThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> <span class=\"fn\">σs</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"Get the top-most state of type `σ` from an `SVal`. ","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.getThe","kind":"def","line":75,"name":"Std.Do.SVal.getThe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instGetTyCons_1\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instGetTyCons_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ₁</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ₂</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ₁</span> <span class=\"fn\">σs</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ₁</span> (<span class=\"fn\">σ₂</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instGetTyCons_1","kind":"instance","line":72,"name":"Std.Do.SVal.instGetTyCons_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L72-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instGetTyCons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instGetTyCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instGetTyCons","kind":"instance","line":69,"name":"Std.Do.SVal.instGetTyCons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy.get\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">GetTy</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> <span class=\"fn\">σs</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy.get","kind":"def","line":67,"name":"Std.Do.SVal.GetTy.get","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">GetTy</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">get</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\">GetTy</a> <span class=\"fn\">σ</span> <span class=\"fn\">σs</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy.mk","kind":"ctor","line":66,"name":"Std.Do.SVal.GetTy.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">GetTy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.GetTy","kind":"class","line":66,"name":"Std.Do.SVal.GetTy","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L66-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabited","kind":"instance","line":63,"name":"Std.Do.SVal.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L63-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_uncurry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">curry_uncurry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">uncurry</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_uncurry","kind":"theorem","line":61,"name":"Std.Do.SVal.curry_uncurry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_curry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">uncurry_curry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">uncurry</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_curry","kind":"theorem","line":60,"name":"Std.Do.SVal.uncurry_curry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">uncurry_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>) <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">uncurry</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">t</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">uncurry</a></span> <span class=\"fn\">t</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_cons","kind":"theorem","line":58,"name":"Std.Do.SVal.uncurry_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">uncurry_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\">uncurry</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span>) =&gt; <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry_nil","kind":"theorem","line":57,"name":"Std.Do.SVal.uncurry_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">uncurry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Uncurry an `SVal` into a function taking a `StateTuple`. ","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.uncurry","kind":"def","line":53,"name":"Std.Do.SVal.uncurry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L53-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">curry_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>)</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\">fun (<span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_cons","kind":"theorem","line":51,"name":"Std.Do.SVal.curry_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">curry_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\">curry</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry_nil","kind":"theorem","line":50,"name":"Std.Do.SVal.curry_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">curry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\">SVal</a> <span class=\"fn\">σs</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Curry a function taking a `StateTuple` into an `SVal`. ","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.curry","kind":"def","line":46,"name":"Std.Do.SVal.curry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L46-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabitedStateTupleCons\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instInhabitedStateTupleCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <span class=\"fn\">σs</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> (<span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">σs</span>))</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabitedStateTupleCons","kind":"instance","line":43,"name":"Std.Do.SVal.instInhabitedStateTupleCons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabitedStateTupleNil\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">instInhabitedStateTupleNil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\">StateTuple</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.instInhabitedStateTupleNil","kind":"instance","line":40,"name":"Std.Do.SVal.instInhabitedStateTupleNil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span>.<span class=\"name\">StateTuple</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A tuple capturing the whole state of an `SVal`. ","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal.StateTuple","kind":"def","line":35,"name":"Std.Do.SVal.StateTuple","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L35-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/SPred/SVal.html#Std.Do.SVal\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">SVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./foundational_types.html\">(Type</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A value indexed by a curried tuple of states.\n```\nexample : SVal [Nat, Bool] String = (Nat → Bool → String) := rfl\n```\n","docLink":"./Std/Do/SPred/SVal.html#Std.Do.SVal","kind":"def","line":18,"name":"Std.Do.SVal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Do/SPred/SVal.lean#L18-L26"}}],"imports":["Init.Data.List.Notation","Init.SimpLemmas"],"instances":[{"className":"Inhabited","name":"Std.Do.SVal.instInhabitedStateTupleNil","typeNames":["Std.Do.SVal.StateTuple"]},{"className":"Inhabited","name":"Std.Do.SVal.instInhabitedStateTupleCons","typeNames":["Std.Do.SVal.StateTuple"]},{"className":"Inhabited","name":"Std.Do.SVal.instInhabited","typeNames":["Std.Do.SVal"]},{"className":"Std.Do.SVal.GetTy","name":"Std.Do.SVal.instGetTyCons","typeNames":["List.cons"]},{"className":"Std.Do.SVal.GetTy","name":"Std.Do.SVal.instGetTyCons_1","typeNames":["List.cons"]}],"name":"Std.Do.SPred.SVal"}