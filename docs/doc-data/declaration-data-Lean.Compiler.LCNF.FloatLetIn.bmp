{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a> := <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase.base\">Phase.base</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurrence</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.floatLetIn","kind":"def","line":306,"name":"Lean.Compiler.LCNF.floatLetIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L306-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.Decl.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.Decl.floatLetIn","kind":"def","line":303,"name":"Lean.Compiler.LCNF.Decl.floatLetIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L303-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"Iterate through `decl`, pushing local declarations that are only used in one\ncontrol flow arm into said arm in order to avoid useless computations.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn","kind":"def","line":238,"name":"Lean.Compiler.LCNF.FloatLetIn.floatLetIn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L238-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">float</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Will:\n- put `decl` into the arm it is marked to be moved into\n- for any variables that might occur in `decl` and are of interest:\n  - if they are already meant to be floated into the same arm or not at all leave them untouched:\n    ```\n    let x := ...\n    let y := x + z\n    cases z with\n    | n => x * y\n    | m => z\n    ```\n    If we are at `y` `x` is already marked to be floated into `n` as well.\n  - if there hasn't be a decision yet, that is they are marked with `.unknown` we float\n    them into the same arm as the current value:\n    ```\n    let x := ..\n    let y := x + 2\n    cases z with\n    | n => y\n    | m => z\n    ```\n    Here `x` is initially marked as `.unknown` since it occurs in no branch, however\n    since we want to move `y` into the `n` branch we can also decide to move `x`\n    into the `n` branch. Note that this decision might be revoked later on in the case of:\n    ```\n    let x := ..\n    let a := x + 1\n    let y := x + 2\n    cases z with\n    | n => y\n    | m => a\n    ```\n    When we visit `a` `x` is now marked as getting moved into `n` but since it also occurs\n    in `a` which wants to be moved somewhere else we will instead decide to not move `x`\n    at all.\n  - if they are meant to be floated somewhere else decide that they won't get floated:\n    ```\n    let x := ...\n    let y := x + z\n    cases z with\n    | n => y\n    | m => x\n    ```\n    If we are at `y` `x` is still marked to be moved but we don't want that.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float","kind":"def","line":180,"name":"Lean.Compiler.LCNF.FloatLetIn.float","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L180-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">dontFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Will:\n- put `decl` into the `dont` arm\n- decide that any free variable that occurs in `decl` and is a declaration\n  of interest as not getting moved either.\n```\nlet x := ...\nlet y := ...\nlet z := x + y\ncases z with\n| n => z * x\n| m => z * y\n```\nHere `x` and `y` are originally marked as getting floated into `n` and `m`\nrespectively but since `z` can't be moved we don't want that to move `x` and `y`.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat","kind":"def","line":156,"name":"Lean.Compiler.LCNF.FloatLetIn.dontFloat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L156-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialNewArms\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialNewArms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span></div></div>","info":{"doc":"Compute the initial new arms. This will just set up a map from all arms of\n`cs` to empty `Array`s, plus one additional entry for `dont`.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialNewArms","kind":"def","line":147,"name":"Lean.Compiler.LCNF.FloatLetIn.initialNewArms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L147-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a>)</span></span></div></div>","info":{"doc":"Compute the initial decision for all declarations that `BaseFloatM` collected\nup to this point, with respect to `cs`. The initial decisions are:\n- `dont` if the declaration is detected by `ignore?`\n- `dont` if the declaration is the discriminant of `cs` since we obviously need\n  the discriminant to be computed before the match.\n- `dont` if we see the declaration being used in more than one cases arm\n- `arm` or `default` if we see the declaration only being used in exactly one cases arm\n- `unknown` otherwise\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions","kind":"def","line":111,"name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L111-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.ignore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">ignore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Whether to ignore `decl` for the floating mechanism. We want to do this if:\n- `decl`' is storing a typeclass instance\n- `decl` is a projection from a variable that is storing a typeclass instance\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.ignore?","kind":"def","line":98,"name":"Lean.Compiler.LCNF.FloatLetIn.ignore?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L98-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">withNewScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run `x` with an empty list of declarations.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewScope","kind":"def","line":91,"name":"Lean.Compiler.LCNF.FloatLetIn.withNewScope","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L91-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">withNewCandidate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Add `decl` to the list of declarations and run `x` with that updated context.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewCandidate","kind":"def","line":84,"name":"Lean.Compiler.LCNF.FloatLetIn.withNewCandidate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L84-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Use to compute the actual floating.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM","kind":"def","line":79,"name":"Lean.Compiler.LCNF.FloatLetIn.FloatM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L79-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Use to collect relevant declarations for the floating mechanism.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM","kind":"def","line":74,"name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L74-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">newArms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">FloatState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span></div></div>","info":{"doc":"A map from decisions (excluding `unknown`) to the declarations with\nthese decisions (in correct order). Basically:\n- Which declarations do we not move\n- Which declarations do we move into a certain arm\n- Which declarations do we move into the default arm\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms","kind":"def","line":72,"name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.decision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">decision</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">FloatState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>","info":{"doc":"A map from identifiers of declarations to their current decision.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.decision","kind":"def","line":64,"name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.decision","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decision</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newArms</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">FloatState</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.mk","kind":"ctor","line":60,"name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The state for `FloatM`\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState","kind":"structure","line":57,"name":"Lean.Compiler.LCNF.FloatLetIn.FloatState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L57-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\">BaseFloatContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span></div></div>","info":{"doc":"All the declarations that were collected in the current LCNF basic\nblock up to the current statement (in reverse order for efficiency).\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls","kind":"def","line":55,"name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\">BaseFloatContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk","kind":"ctor","line":50,"name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The context for `BaseFloatM`.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext","kind":"structure","line":47,"name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L47-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">ofAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a> → <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt","kind":"def","line":43,"name":"Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L43-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instReprDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instReprDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instReprDecision","kind":"instance","line":41,"name":"Lean.Compiler.LCNF.FloatLetIn.instReprDecision","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instReprDecision.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instReprDecision</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instReprDecision.repr","kind":"def","line":41,"name":"Lean.Compiler.LCNF.FloatLetIn.instReprDecision.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instInhabitedDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","kind":"instance","line":41,"name":"Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instInhabitedDecision</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision.default","kind":"def","line":41,"name":"Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instBEqDecision.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instBEqDecision</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> → <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instBEqDecision.beq","kind":"def","line":41,"name":"Lean.Compiler.LCNF.FloatLetIn.instBEqDecision.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instBEqDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instBEqDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","kind":"instance","line":41,"name":"Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instHashableDecision.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instHashableDecision</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instHashableDecision.hash","kind":"def","line":41,"name":"Lean.Compiler.LCNF.FloatLetIn.instHashableDecision.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instHashableDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instHashableDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","kind":"instance","line":41,"name":"Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.unknown\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">unknown</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>","info":{"doc":"No decision has been made yet.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.unknown","kind":"ctor","line":36,"name":"Lean.Compiler.LCNF.FloatLetIn.Decision.unknown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L36-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.dont\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">dont</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>","info":{"doc":"Don't move this declaration it is needed where it is right now.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.dont","kind":"ctor","line":31,"name":"Lean.Compiler.LCNF.FloatLetIn.Decision.dont","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L31-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>","info":{"doc":"Push into the default arm.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.default","kind":"ctor","line":27,"name":"Lean.Compiler.LCNF.FloatLetIn.Decision.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L27-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.arm\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">arm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>","info":{"doc":"Push into the arm with name `name`.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.arm","kind":"ctor","line":22,"name":"Lean.Compiler.LCNF.FloatLetIn.Decision.arm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L22-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The decision of the float mechanism.\n","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision","kind":"inductive","line":18,"name":"Lean.Compiler.LCNF.FloatLetIn.Decision","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FloatLetIn.lean#L18-L41"}}],"imports":["Lean.Compiler.LCNF.FVarUtil","Lean.Compiler.LCNF.PassManager"],"instances":[{"className":"Hashable","name":"Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"]},{"className":"BEq","name":"Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"]},{"className":"Inhabited","name":"Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"]},{"className":"Repr","name":"Lean.Compiler.LCNF.FloatLetIn.instReprDecision","typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"]}],"name":"Lean.Compiler.LCNF.FloatLetIn"}