{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.toConfigOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toConfigOptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.toConfigOptions","kind":"def","line":74,"name":"Lean.Compiler.LCNF.toConfigOptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L74-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.extract_closed\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">extract_closed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.extract_closed","kind":"opaque","line":68,"name":"Lean.Compiler.LCNF.compiler.extract_closed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L68-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.checkTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">checkTypes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.checkTypes","kind":"opaque","line":62,"name":"Lean.Compiler.LCNF.compiler.checkTypes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L62-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.maxRecInlineIfReduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">maxRecInlineIfReduce</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.maxRecInlineIfReduce","kind":"opaque","line":56,"name":"Lean.Compiler.LCNF.compiler.maxRecInlineIfReduce","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L56-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.maxRecInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">maxRecInline</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.maxRecInline","kind":"opaque","line":50,"name":"Lean.Compiler.LCNF.compiler.maxRecInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L50-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.small\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compiler</span>.<span class=\"name\">small</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.compiler.small","kind":"opaque","line":44,"name":"Lean.Compiler.LCNF.compiler.small","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L44-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.instInhabitedConfigOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedConfigOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.instInhabitedConfigOptions","kind":"instance","line":42,"name":"Lean.Compiler.LCNF.instInhabitedConfigOptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.instInhabitedConfigOptions.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedConfigOptions</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.instInhabitedConfigOptions.default","kind":"def","line":42,"name":"Lean.Compiler.LCNF.instInhabitedConfigOptions.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.extractClosed\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">extractClosed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Cache closed terms and evaluate them at initialization time.\n","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.extractClosed","kind":"def","line":41,"name":"Lean.Compiler.LCNF.ConfigOptions.extractClosed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.checkTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">checkTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Perform type compatibility checking after each compiler pass.\n","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.checkTypes","kind":"def","line":37,"name":"Lean.Compiler.LCNF.ConfigOptions.checkTypes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.maxRecInlineIfReduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">maxRecInlineIfReduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of times a recursive definition tagged with `[inline_if_reduce]` can be recursively inlined\nbefore generating an error during compilation.\n","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.maxRecInlineIfReduce","kind":"def","line":33,"name":"Lean.Compiler.LCNF.ConfigOptions.maxRecInlineIfReduce","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.maxRecInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">maxRecInline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of times a recursive definition tagged with `[inline]` can be recursively inlined before generating an\nerror during compilation.\n","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.maxRecInline","kind":"def","line":28,"name":"Lean.Compiler.LCNF.ConfigOptions.maxRecInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.smallThreshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">smallThreshold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Any function declaration or join point with size `≤ smallThreshold` is inlined\neven if there are multiple occurrences.\n","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.smallThreshold","kind":"def","line":23,"name":"Lean.Compiler.LCNF.ConfigOptions.smallThreshold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">smallThreshold </span><span class=\"fn\">maxRecInline </span><span class=\"fn\">maxRecInlineIfReduce</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkTypes </span><span class=\"fn\">extractClosed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\">ConfigOptions</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions.mk","kind":"ctor","line":18,"name":"Lean.Compiler.LCNF.ConfigOptions.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ConfigOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"User controlled configuration options for the code generator.\n","docLink":"./Lean/Compiler/LCNF/ConfigOptions.html#Lean.Compiler.LCNF.ConfigOptions","kind":"structure","line":15,"name":"Lean.Compiler.LCNF.ConfigOptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ConfigOptions.lean#L15-L42"}}],"imports":["Lean.Data.Options"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.instInhabitedConfigOptions","typeNames":["Lean.Compiler.LCNF.ConfigOptions"]}],"name":"Lean.Compiler.LCNF.ConfigOptions"}