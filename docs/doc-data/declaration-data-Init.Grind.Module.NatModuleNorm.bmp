{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.eq_normN\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_normN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.eq_normN_cert\">eq_normN_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.denoteN\">Expr.denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.denoteN\">Expr.denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.eq_normN","kind":"theorem","line":192,"name":"Lean.Grind.Linarith.eq_normN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L192-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.eq_normN_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">eq_normN_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.eq_normN_cert","kind":"def","line":189,"name":"Lean.Grind.Linarith.eq_normN_cert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L189-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.denoteN_toPolyN\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteN_toPolyN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">Poly.denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.toPolyN\">toPolyN</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.denoteN_toPolyN","kind":"theorem","line":184,"name":"Lean.Grind.Linarith.Expr.denoteN_toPolyN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L184-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.toPolyN_Nonneg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPolyN_Nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.toPolyN\">toPolyN</a></span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.toPolyN_Nonneg","kind":"theorem","line":178,"name":"Lean.Grind.Linarith.Expr.toPolyN_Nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L178-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.combine_Nonneg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine_Nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.combine_Nonneg","kind":"theorem","line":175,"name":"Lean.Grind.Linarith.Poly.combine_Nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L175-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.combine'_Nonneg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine'_Nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine'\">combine'</a> <span class=\"fn\">fuel</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.combine'_Nonneg","kind":"theorem","line":154,"name":"Lean.Grind.Linarith.Poly.combine'_Nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L154-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.append_Nonneg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">append_Nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.append\">append</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.append_Nonneg","kind":"theorem","line":150,"name":"Lean.Grind.Linarith.Poly.append_Nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L150-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.mul_Nonneg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_Nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul\">mul</a></span> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.mul_Nonneg","kind":"theorem","line":144,"name":"Lean.Grind.Linarith.Poly.mul_Nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L144-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.mul'_Nonneg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul'_Nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul'\">mul'</a></span> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.mul'_Nonneg","kind":"theorem","line":133,"name":"Lean.Grind.Linarith.Poly.mul'_Nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L133-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.toPolyN\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPolyN</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a> → <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.toPolyN","kind":"def","line":126,"name":"Lean.Grind.Linarith.Expr.toPolyN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L126-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul\">mul</a></span> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_mul","kind":"theorem","line":120,"name":"Lean.Grind.Linarith.Poly.denoteN_mul","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L120-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_mul'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN_mul'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.mul'\">mul'</a></span> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_mul'","kind":"theorem","line":110,"name":"Lean.Grind.Linarith.Poly.denoteN_mul'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L110-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_combine","kind":"theorem","line":106,"name":"Lean.Grind.Linarith.Poly.denoteN_combine","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L106-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_combine'\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN_combine'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.combine'\">combine'</a> <span class=\"fn\">fuel</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_combine'","kind":"theorem","line":82,"name":"Lean.Grind.Linarith.Poly.denoteN_combine'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L82-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_append\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.append\">append</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_append","kind":"theorem","line":74,"name":"Lean.Grind.Linarith.Poly.denoteN_append","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L74-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">x</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_insert","kind":"theorem","line":55,"name":"Lean.Grind.Linarith.Poly.denoteN_insert","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L55-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.instCommutativeHAdd_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instCommutativeHAdd_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.instCommutativeHAdd_1","kind":"theorem","line":52,"name":"Lean.Grind.Linarith.instCommutativeHAdd_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L52-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.instAssociativeHAdd_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">instAssociativeHAdd_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.instAssociativeHAdd_1","kind":"theorem","line":49,"name":"Lean.Grind.Linarith.instAssociativeHAdd_1","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.add\">add</a> <span class=\"fn\">k</span> <span class=\"fn\">x</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_add","kind":"def","line":36,"name":"Lean.Grind.Linarith.Poly.denoteN_add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L36-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\">denoteN</a> <span class=\"fn\">ctx</span> <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.nil\">nil</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN_nil","kind":"def","line":34,"name":"Lean.Grind.Linarith.Poly.denoteN_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.denoteN","kind":"def","line":25,"name":"Lean.Grind.Linarith.Poly.denoteN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L25-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.add\">Poly.add</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs.add","kind":"ctor","line":23,"name":"Lean.Grind.Linarith.Poly.NonnegCoeffs.add","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly.nil\">Poly.nil</a>.<a href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs.nil","kind":"ctor","line":22,"name":"Lean.Grind.Linarith.Poly.NonnegCoeffs.nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Poly\">Poly</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Poly.NonnegCoeffs","kind":"inductive","line":21,"name":"Lean.Grind.Linarith.Poly.NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L21-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.denoteN\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Linarith</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteN</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.NatModule\">NatModule</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ordered/Linarith.html#Lean.Grind.Linarith.Expr\">Expr</a> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Module/NatModuleNorm.html#Lean.Grind.Linarith.Expr.denoteN","kind":"def","line":14,"name":"Lean.Grind.Linarith.Expr.denoteN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Module/NatModuleNorm.lean#L14-L19"}}],"imports":["Init.Grind.Module.Envelope","Init.Grind.Ordered.Linarith"],"instances":[],"name":"Init.Grind.Module.NatModuleNorm"}