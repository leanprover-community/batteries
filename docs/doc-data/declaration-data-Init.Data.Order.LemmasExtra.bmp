{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Classical.Order.instLawfulOrderOrd\"><span class=\"name\">Classical</span>.<span class=\"name\">Order</span>.<span class=\"name\">instLawfulOrderOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Std.Total\">Std.Total</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">Std.LawfulOrderOrd</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Classical.Order.instLawfulOrderOrd","kind":"instance","line":163,"name":"Classical.Order.instLawfulOrderOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L163-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Classical.Order.instOrd\"><span class=\"name\">Classical</span>.<span class=\"name\">Order</span>.<span class=\"name\">instOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Derives an `Ord α` instance from an `LE α` instance. Because all elements are comparable with\n`compare`, the resulting `Ord α` instance only makes sense if `LE α` is total.\n","docLink":"./Init/Data/Order/LemmasExtra.html#Classical.Order.instOrd","kind":"def","line":155,"name":"Classical.Order.instOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L155-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.max_eq_if_isGE_compare\"><span class=\"name\">Std</span>.<span class=\"name\">max_eq_if_isGE_compare</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLeftLeaningMax\">LawfulOrderLeftLeaningMax</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.max_eq_if_isGE_compare","kind":"theorem","line":145,"name":"Std.max_eq_if_isGE_compare","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L145-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.min_eq_if_isLE_compare\"><span class=\"name\">Std</span>.<span class=\"name\">min_eq_if_isLE_compare</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLeftLeaningMin\">LawfulOrderLeftLeaningMin</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.min_eq_if_isLE_compare","kind":"theorem","line":140,"name":"Std.min_eq_if_isLE_compare","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L140-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderMax.of_ord\"><span class=\"name\">Std</span>.<span class=\"name\">LawfulOrderMax</span>.<span class=\"name\">of_ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compare_max_isLE_iff</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max_eq_or</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderMax\">LawfulOrderMax</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This lemma derives a `LawfulOrderMax α` instance from a property involving an `Ord α` instance.\n","docLink":"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderMax.of_ord","kind":"instance","line":129,"name":"Std.LawfulOrderMax.of_ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L129-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderSup.of_ord\"><span class=\"name\">Std</span>.<span class=\"name\">LawfulOrderSup</span>.<span class=\"name\">of_ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compare_max_isLE_iff</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderSup\">LawfulOrderSup</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This lemma derives a `LawfulOrderSup α` instance from a property involving an `Ord α` instance.\n","docLink":"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderSup.of_ord","kind":"instance","line":120,"name":"Std.LawfulOrderSup.of_ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L120-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderMin.of_ord\"><span class=\"name\">Std</span>.<span class=\"name\">LawfulOrderMin</span>.<span class=\"name\">of_ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compare_min_isLE_iff</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">min_eq_or</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderMin\">LawfulOrderMin</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This lemma derives a `LawfulOrderMin α` instance from a property involving an `Ord α` instance.\n","docLink":"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderMin.of_ord","kind":"instance","line":109,"name":"Std.LawfulOrderMin.of_ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L109-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderInf.of_ord\"><span class=\"name\">Std</span>.<span class=\"name\">LawfulOrderInf</span>.<span class=\"name\">of_ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compare_min_isLE_iff</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Min.min\">min</a> <span class=\"fn\">b</span> <span class=\"fn\">c</span>)</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderInf\">LawfulOrderInf</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This lemma derives a `LawfulOrderInf α` instance from a property involving an `Ord α` instance.\n","docLink":"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderInf.of_ord","kind":"instance","line":100,"name":"Std.LawfulOrderInf.of_ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L100-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderBEq.of_ord\"><span class=\"name\">Std</span>.<span class=\"name\">LawfulOrderBEq</span>.<span class=\"name\">of_ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beq_iff_compare_eq_eq</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>), (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderBEq\">LawfulOrderBEq</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This lemma derives a `LawfulOrderBEq α` instance from a property involving an `Ord α` instance.\n","docLink":"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderBEq.of_ord","kind":"instance","line":91,"name":"Std.LawfulOrderBEq.of_ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L91-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderLT.of_ord\"><span class=\"name\">Std</span>.<span class=\"name\">LawfulOrderLT</span>.<span class=\"name\">of_ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lt_iff_compare_eq_lt</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>), <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderLT\">LawfulOrderLT</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This lemma derives a `LawfulOrderLT α` instance from a property involving an `Ord α` instance.\n","docLink":"./Init/Data/Order/LemmasExtra.html#Std.LawfulOrderLT.of_ord","kind":"instance","line":82,"name":"Std.LawfulOrderLT.of_ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L82-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.IsLinearOrder.of_ord\"><span class=\"name\">Std</span>.<span class=\"name\">IsLinearOrder</span>.<span class=\"name\">of_ord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearOrder\">IsLinearOrder</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.IsLinearOrder.of_ord","kind":"theorem","line":73,"name":"Std.IsLinearOrder.of_ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L73-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.IsLinearPreorder.of_ord\"><span class=\"name\">Std</span>.<span class=\"name\">IsLinearPreorder</span>.<span class=\"name\">of_ord</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsLinearPreorder\">IsLinearPreorder</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.IsLinearPreorder.of_ord","kind":"theorem","line":67,"name":"Std.IsLinearPreorder.of_ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L67-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.compare_eq_eq_iff_eq\"><span class=\"name\">Std</span>.<span class=\"name\">compare_eq_eq_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.compare_eq_eq_iff_eq","kind":"theorem","line":63,"name":"Std.compare_eq_eq_iff_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L63-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.instAntisymmLeOfLawfulOrderOrdOfLawfulEqOrd\"><span class=\"name\">Std</span>.<span class=\"name\">instAntisymmLeOfLawfulOrderOrdOfLawfulEqOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Antisymm\">Antisymm</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.instAntisymmLeOfLawfulOrderOrdOfLawfulEqOrd","kind":"instance","line":57,"name":"Std.instAntisymmLeOfLawfulOrderOrdOfLawfulEqOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L57-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.instLawfulEqOrdOfLawfulOrderOrdOfAntisymmLe\"><span class=\"name\">Std</span>.<span class=\"name\">instLawfulEqOrdOfLawfulOrderOrdOfAntisymmLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#Std.Antisymm\">Antisymm</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.instLawfulEqOrdOfLawfulOrderOrdOfAntisymmLe","kind":"instance","line":51,"name":"Std.instLawfulEqOrdOfLawfulOrderOrdOfAntisymmLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L51-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.instTotalLeOfLawfulOrderOrd\"><span class=\"name\">Std</span>.<span class=\"name\">instTotalLeOfLawfulOrderOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Total\">Total</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.instTotalLeOfLawfulOrderOrd","kind":"instance","line":45,"name":"Std.instTotalLeOfLawfulOrderOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L45-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.instLawfulEqOrdOfLawfulOrderOrdOfIsPartialOrder\"><span class=\"name\">Std</span>.<span class=\"name\">instLawfulEqOrdOfLawfulOrderOrdOfIsPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPartialOrder\">IsPartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.instLawfulEqOrdOfLawfulOrderOrdOfIsPartialOrder","kind":"instance","line":38,"name":"Std.instLawfulEqOrdOfLawfulOrderOrdOfIsPartialOrder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L38-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.instLawfulBEqOrdOfLawfulOrderOrdOfLawfulOrderBEq\"><span class=\"name\">Std</span>.<span class=\"name\">instLawfulBEqOrdOfLawfulOrderOrdOfLawfulOrderBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.LawfulOrderBEq\">LawfulOrderBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.instLawfulBEqOrdOfLawfulOrderOrdOfLawfulOrderBEq","kind":"instance","line":33,"name":"Std.instLawfulBEqOrdOfLawfulOrderOrdOfLawfulOrderBEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L33-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.instTransOrdOfLawfulOrderOrdOfIsPreorder\"><span class=\"name\">Std</span>.<span class=\"name\">instTransOrdOfLawfulOrderOrdOfIsPreorder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/Classes.html#Std.IsPreorder\">IsPreorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.instTransOrdOfLawfulOrderOrdOfIsPreorder","kind":"instance","line":28,"name":"Std.instTransOrdOfLawfulOrderOrdOfIsPreorder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L28-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Order/LemmasExtra.html#Std.instOrientedOrdOfLawfulOrderOrd\"><span class=\"name\">Std</span>.<span class=\"name\">instOrientedOrdOfLawfulOrderOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Order/ClassesExtra.html#Std.LawfulOrderOrd\">LawfulOrderOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.OrientedOrd\">OrientedOrd</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Order/LemmasExtra.html#Std.instOrientedOrdOfLawfulOrderOrd","kind":"instance","line":15,"name":"Std.instOrientedOrdOfLawfulOrderOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Order/LemmasExtra.lean#L15-L26"}}],"imports":["Init.Data.Order.FactoriesExtra","Init.Data.Order.Lemmas","Init.ByCases"],"instances":[{"className":"Std.OrientedCmp","name":"Std.instOrientedOrdOfLawfulOrderOrd","typeNames":[]},{"className":"Std.TransCmp","name":"Std.instTransOrdOfLawfulOrderOrdOfIsPreorder","typeNames":[]},{"className":"Std.LawfulBEqCmp","name":"Std.instLawfulBEqOrdOfLawfulOrderOrdOfLawfulOrderBEq","typeNames":[]},{"className":"Std.LawfulEqCmp","name":"Std.instLawfulEqOrdOfLawfulOrderOrdOfIsPartialOrder","typeNames":[]},{"className":"Std.Total","name":"Std.instTotalLeOfLawfulOrderOrd","typeNames":[]},{"className":"Std.LawfulEqCmp","name":"Std.instLawfulEqOrdOfLawfulOrderOrdOfAntisymmLe","typeNames":[]},{"className":"Std.Antisymm","name":"Std.instAntisymmLeOfLawfulOrderOrdOfLawfulEqOrd","typeNames":[]},{"className":"Std.LawfulOrderLT","name":"Std.LawfulOrderLT.of_ord","typeNames":[]},{"className":"Std.LawfulOrderBEq","name":"Std.LawfulOrderBEq.of_ord","typeNames":[]},{"className":"Std.LawfulOrderInf","name":"Std.LawfulOrderInf.of_ord","typeNames":[]},{"className":"Std.LawfulOrderMin","name":"Std.LawfulOrderMin.of_ord","typeNames":[]},{"className":"Std.LawfulOrderSup","name":"Std.LawfulOrderSup.of_ord","typeNames":[]},{"className":"Std.LawfulOrderMax","name":"Std.LawfulOrderMax.of_ord","typeNames":[]},{"className":"Std.LawfulOrderOrd","name":"Classical.Order.instLawfulOrderOrd","typeNames":[]}],"name":"Init.Data.Order.LemmasExtra"}