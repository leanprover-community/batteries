{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.lex'\"><span class=\"name\">Ord</span>.<span class=\"name\">lex'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord₁ </span><span class=\"fn\">ord₂</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Constructs an `Ord` instance from two existing instances by combining them lexicographically.\n\nThe resulting instance compares elements first by `ord₁` and then, if this returns `Ordering.eq`, by\n`ord₂`.\n\nThe function `compareLex` can be used to perform this comparison without constructing an\nintermediate `Ord` instance. `Ordering.then` can be used to lexicographically combine the results of\ncomparisons.\n","docLink":"./Init/Data/Ord/Basic.html#Ord.lex'","kind":"def","line":689,"name":"Ord.lex'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L689-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.lex\"><span class=\"name\">Ord</span>.<span class=\"name\">lex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span></span></div></div>","info":{"doc":"Constructs the lexicographic order on products `α × β` from orders for `α` and `β`.\n","docLink":"./Init/Data/Ord/Basic.html#Ord.lex","kind":"def","line":683,"name":"Ord.lex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L683-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.on\"><span class=\"name\">Ord</span>.<span class=\"name\">on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) → <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"Constructs an `Ord` instance that compares values according to the results of `f`.\n\nIn particular, `ord.on f` compares `x` and `y` by comparing `f x` and `f y` according to `ord`.\n\nThe function `compareOn` can be used to perform this comparison without constructing an intermediate\n`Ord` instance.\n","docLink":"./Init/Data/Ord/Basic.html#Ord.on","kind":"def","line":672,"name":"Ord.on","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L672-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.opposite\"><span class=\"name\">Ord</span>.<span class=\"name\">opposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Inverts the order of an `Ord` instance.\n\nThe result is an `Ord α` instance that returns `Ordering.lt` when `ord` would return `Ordering.gt`\nand that returns `Ordering.gt` when `ord` would return `Ordering.lt`.\n","docLink":"./Init/Data/Ord/Basic.html#Ord.opposite","kind":"def","line":663,"name":"Ord.opposite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L663-L670"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.toLE\"><span class=\"name\">Ord</span>.<span class=\"name\">toLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Constructs an `LE` instance from an `Ord` instance.\n","docLink":"./Init/Data/Ord/Basic.html#Ord.toLE","kind":"def","line":657,"name":"Ord.toLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L657-L661"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.toLT\"><span class=\"name\">Ord</span>.<span class=\"name\">toLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Constructs an `LT` instance from an `Ord` instance.\n","docLink":"./Init/Data/Ord/Basic.html#Ord.toLT","kind":"def","line":651,"name":"Ord.toLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L651-L655"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.toBEq\"><span class=\"name\">Ord</span>.<span class=\"name\">toBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Constructs a `BEq` instance from an `Ord` instance.\n","docLink":"./Init/Data/Ord/Basic.html#Ord.toBEq","kind":"def","line":645,"name":"Ord.toBEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L645-L649"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instDecidableRelLe\"><span class=\"name\">instDecidableRelLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Prelude.html#LE.le\">LE.le</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instDecidableRelLe","kind":"instance","line":640,"name":"instDecidableRelLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L640-L641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#leOfOrd\"><span class=\"name\">leOfOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Constructs an `LT` instance from an `Ord` instance that asserts that the result of `compare`\nsatisfies `Ordering.isLE`.\n","docLink":"./Init/Data/Ord/Basic.html#leOfOrd","kind":"def","line":633,"name":"leOfOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L633-L638"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instDecidableRelLt\"><span class=\"name\">instDecidableRelLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Prelude.html#LT.lt\">LT.lt</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instDecidableRelLt","kind":"instance","line":629,"name":"instDecidableRelLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L629-L631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#ltOfOrd\"><span class=\"name\">ltOfOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Constructs an `LT` instance from an `Ord` instance that asserts that the result of `compare` is\n`Ordering.lt`.\n","docLink":"./Init/Data/Ord/Basic.html#ltOfOrd","kind":"def","line":622,"name":"ltOfOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L622-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#beqOfOrd\"><span class=\"name\">beqOfOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Constructs an `BEq` instance from an `Ord` instance that asserts that the result of `compare` is\n`Ordering.eq`.\n","docLink":"./Init/Data/Ord/Basic.html#beqOfOrd","kind":"def","line":615,"name":"beqOfOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L615-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#lexOrd\"><span class=\"name\">lexOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"The lexicographic order on pairs. ","docLink":"./Init/Data/Ord/Basic.html#lexOrd","kind":"def","line":611,"name":"lexOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L611-L613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compare_nil_right_eq_eq\"><span class=\"name\">List</span>.<span class=\"name\">compare_nil_right_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compare_nil_right_eq_eq","kind":"theorem","line":604,"name":"List.compare_nil_right_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L604-L607"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compareLex_nil_right_eq_eq\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_nil_right_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compareLex_nil_right_eq_eq","kind":"theorem","line":600,"name":"List.compareLex_nil_right_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L600-L602"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compare_nil_left_eq_eq\"><span class=\"name\">List</span>.<span class=\"name\">compare_nil_left_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compare_nil_left_eq_eq","kind":"theorem","line":595,"name":"List.compare_nil_left_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L595-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compareLex_nil_left_eq_eq\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_nil_left_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compareLex_nil_left_eq_eq","kind":"theorem","line":591,"name":"List.compareLex_nil_left_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L591-L593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.isGE_compare_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">isGE_compare_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.isGE_compare_nil_right","kind":"theorem","line":587,"name":"List.isGE_compare_nil_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L587-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.isGE_compareLex_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">isGE_compareLex_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.isGE_compareLex_nil_right","kind":"theorem","line":583,"name":"List.isGE_compareLex_nil_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L583-L585"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.isGE_compare_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">isGE_compare_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.isGE_compare_nil_left","kind":"theorem","line":578,"name":"List.isGE_compare_nil_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L578-L581"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.isGE_compareLex_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">isGE_compareLex_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.isGE_compareLex_nil_left","kind":"theorem","line":574,"name":"List.isGE_compareLex_nil_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L574-L576"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.isLE_compare_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">isLE_compare_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.isLE_compare_nil_right","kind":"theorem","line":569,"name":"List.isLE_compare_nil_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L569-L572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.isLE_compareLex_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">isLE_compareLex_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.isLE_compareLex_nil_right","kind":"theorem","line":565,"name":"List.isLE_compareLex_nil_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L565-L567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.isLE_compare_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">isLE_compare_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.isLE_compare_nil_left","kind":"theorem","line":561,"name":"List.isLE_compare_nil_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L561-L563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.isLE_compareLex_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">isLE_compareLex_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.isLE_compareLex_nil_left","kind":"theorem","line":557,"name":"List.isLE_compareLex_nil_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L557-L559"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compare_nil_nil\"><span class=\"name\">List</span>.<span class=\"name\">compare_nil_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compare_nil_nil","kind":"theorem","line":552,"name":"List.compare_nil_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L552-L555"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compareLex_nil_nil\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_nil_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compareLex_nil_nil","kind":"theorem","line":548,"name":"List.compareLex_nil_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L548-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compare_cons_nil\"><span class=\"name\">List</span>.<span class=\"name\">compare_cons_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compare_cons_nil","kind":"theorem","line":543,"name":"List.compare_cons_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L543-L546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compareLex_cons_nil\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_cons_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compareLex_cons_nil","kind":"theorem","line":539,"name":"List.compareLex_cons_nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L539-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compare_nil_cons\"><span class=\"name\">List</span>.<span class=\"name\">compare_nil_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compare_nil_cons","kind":"theorem","line":534,"name":"List.compare_nil_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L534-L537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compareLex_nil_cons\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_nil_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compareLex_nil_cons","kind":"theorem","line":530,"name":"List.compareLex_nil_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L530-L532"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compare_cons_cons\"><span class=\"name\">List</span>.<span class=\"name\">compare_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compare_cons_cons","kind":"theorem","line":525,"name":"List.compare_cons_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L525-L528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compareLex_cons_cons\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compareLex_cons_cons","kind":"theorem","line":520,"name":"List.compareLex_cons_cons","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L520-L523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compare_eq_compareLex\"><span class=\"name\">List</span>.<span class=\"name\">compare_eq_compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#List.compareLex\">List.compareLex</a> <a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compare_eq_compareLex","kind":"theorem","line":517,"name":"List.compare_eq_compareLex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L517-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.instOrd\"><span class=\"name\">List</span>.<span class=\"name\">instOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.instOrd","kind":"instance","line":514,"name":"List.instOrd","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L514-L515"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#List.compareLex\"><span class=\"name\">List</span>.<span class=\"name\">compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#List.compareLex","kind":"def","line":503,"name":"List.compareLex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L503-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instOrdOrdering\"><span class=\"name\">instOrdOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instOrdOrdering","kind":"instance","line":498,"name":"instOrdOrdering","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L498-L499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instOrdOption\"><span class=\"name\">instOrdOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instOrdOption","kind":"instance","line":491,"name":"instOrdOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L491-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instOrdBitVec\"><span class=\"name\">instOrdBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instOrdBitVec","kind":"instance","line":488,"name":"instOrdBitVec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L488-L489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instOrdChar\"><span class=\"name\">instOrdChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instOrdChar","kind":"instance","line":485,"name":"instOrdChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L485-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instOrdFin\"><span class=\"name\">instOrdFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instOrdFin","kind":"instance","line":482,"name":"instOrdFin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L482-L483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instOrdBool\"><span class=\"name\">instOrdBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instOrdBool","kind":"instance","line":476,"name":"instOrdBool","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L476-L480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instOrdInt\"><span class=\"name\">instOrdInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instOrdInt","kind":"instance","line":473,"name":"instOrdInt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L473-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instOrdNat\"><span class=\"name\">instOrdNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instOrdNat","kind":"instance","line":470,"name":"instOrdNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L470-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOn\"><span class=\"name\">compareOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"Compares two values by comparing the results of applying a function.\n\nIn particular, `x` is compared to `y` by comparing `f x` and `f y`.\n\nExamples:\n* `compareOn (·.length) \"apple\" \"banana\" = .lt`\n* `compareOn (· % 3) 5 6 = .gt`\n* `compareOn (·.foldl max 0) [1, 2, 3] [3, 2, 1] = .eq`\n","docLink":"./Init/Data/Ord/Basic.html#compareOn","kind":"def","line":457,"name":"compareOn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L457-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.compare\"><span class=\"name\">Ord</span>.<span class=\"name\">compare</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"Compare two elements in `α` using the comparator contained in an `[Ord α]` instance. ","docLink":"./Init/Data/Ord/Basic.html#Ord.compare","kind":"def","line":453,"name":"Ord.compare","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L453-L453"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.mk\"><span class=\"name\">Ord</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compare</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ord.mk","kind":"ctor","line":451,"name":"Ord.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L451-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.ext\"><span class=\"name\">Ord</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compare</span> : <a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ord.ext","kind":"theorem","line":450,"name":"Ord.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L450-L450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord.ext_iff\"><span class=\"name\">Ord</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ord.compare\">compare</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ord.ext_iff","kind":"theorem","line":450,"name":"Ord.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L450-L450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ord\"><span class=\"name\">Ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"`Ord α` provides a computable total order on `α`, in terms of the\n`compare : α → α → Ordering` function.\n\nTypically instances will be transitive, reflexive, and antisymmetric,\nbut this is not enforced by the typeclass.\n\nThere is a derive handler, so appending `deriving Ord` to an inductive type or structure\nwill attempt to create an `Ord` instance.\n","docLink":"./Init/Data/Ord/Basic.html#Ord","kind":"class","line":440,"name":"Ord","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L440-L453"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#isLE_compareOfLessAndEq\"><span class=\"name\">isLE_compareOfLessAndEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">total</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#isLE_compareOfLessAndEq","kind":"theorem","line":420,"name":"isLE_compareOfLessAndEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L420-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_gt\"><span class=\"name\">compareOfLessAndEq_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">total</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_gt","kind":"theorem","line":412,"name":"compareOfLessAndEq_eq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L412-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_gt_of_lt_iff_not_gt_and_ne\"><span class=\"name\">compareOfLessAndEq_eq_gt_of_lt_iff_not_gt_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">Ordering.gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_gt_of_lt_iff_not_gt_and_ne","kind":"theorem","line":405,"name":"compareOfLessAndEq_eq_gt_of_lt_iff_not_gt_and_ne","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L405-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_eq\"><span class=\"name\">compareOfLessAndEq_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">refl</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_eq","kind":"theorem","line":393,"name":"compareOfLessAndEq_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L393-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_lt\"><span class=\"name\">compareOfLessAndEq_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_lt","kind":"theorem","line":386,"name":"compareOfLessAndEq_eq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L386-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_swap\"><span class=\"name\">compareOfLessAndEq_eq_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">total</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_swap","kind":"theorem","line":378,"name":"compareOfLessAndEq_eq_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L378-L384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#lt_iff_not_gt_and_ne_of_antisymm_of_total_of_not_le\"><span class=\"name\">lt_iff_not_gt_and_ne_of_antisymm_of_total_of_not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">total</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#lt_iff_not_gt_and_ne_of_antisymm_of_total_of_not_le","kind":"theorem","line":365,"name":"lt_iff_not_gt_and_ne_of_antisymm_of_total_of_not_le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L365-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_swap_of_lt_iff_not_gt_and_ne\"><span class=\"name\">compareOfLessAndEq_eq_swap_of_lt_iff_not_gt_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#compareOfLessAndEq_eq_swap_of_lt_iff_not_gt_and_ne","kind":"theorem","line":349,"name":"compareOfLessAndEq_eq_swap_of_lt_iff_not_gt_and_ne","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L349-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareLex_eq_eq\"><span class=\"name\">compareLex_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp₁ </span><span class=\"fn\">cmp₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#compareLex\">compareLex</a> <span class=\"fn\">cmp₁</span> <span class=\"fn\">cmp₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cmp₁</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">Ordering.eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#compareLex_eq_eq","kind":"theorem","line":344,"name":"compareLex_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L344-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareLex\"><span class=\"name\">compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp₁ </span><span class=\"fn\">cmp₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"Compares `a` and `b` lexicographically by `cmp₁` and `cmp₂`.\n\n`a` and `b` are first compared by `cmp₁`. If this returns `Ordering.eq`, `a` and `b` are compared\nby `cmp₂` to break the tie.\n\nTo lexicographically combine two `Ordering`s, use `Ordering.then`.\n","docLink":"./Init/Data/Ord/Basic.html#compareLex","kind":"def","line":331,"name":"compareLex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L331-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOfLessAndBEq\"><span class=\"name\">compareOfLessAndBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"Uses a decidable less-than relation and Boolean equality to find an `Ordering`.\n\nIn particular, if `x < y` then the result is `Ordering.lt`. If `x == y` then the result is\n`Ordering.eq`. Otherwise, it is `Ordering.gt`.\n\n`compareOfLessAndEq` uses `DecidableEq` instead of `BEq`.\n","docLink":"./Init/Data/Ord/Basic.html#compareOfLessAndBEq","kind":"def","line":318,"name":"compareOfLessAndBEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L318-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#compareOfLessAndEq\"><span class=\"name\">compareOfLessAndEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"Uses decidable less-than and equality relations to find an `Ordering`.\n\nIn particular, if `x < y` then the result is `Ordering.lt`. If `x = y` then the result is\n`Ordering.eq`. Otherwise, it is `Ordering.gt`.\n\n`compareOfLessAndBEq` uses `BEq` instead of `DecidableEq`.\n","docLink":"./Init/Data/Ord/Basic.html#compareOfLessAndEq","kind":"def","line":305,"name":"compareOfLessAndEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L305-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then'_eq_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">then'_eq_then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then'\">then'</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.then'_eq_then","kind":"theorem","line":298,"name":"Ordering.then'_eq_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L298-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.instLawfulIdentityThenEq\"><span class=\"name\">Ordering</span>.<span class=\"name\">instLawfulIdentityThenEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulIdentity\">Std.LawfulIdentity</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">«then»</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.instLawfulIdentityThenEq","kind":"instance","line":294,"name":"Ordering.instLawfulIdentityThenEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L294-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.instIdempotentOpThen\"><span class=\"name\">Ordering</span>.<span class=\"name\">instIdempotentOpThen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">«then»</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.instIdempotentOpThen","kind":"instance","line":292,"name":"Ordering.instIdempotentOpThen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L292-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.instAssociativeThen\"><span class=\"name\">Ordering</span>.<span class=\"name\">instAssociativeThen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">«then»</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.instAssociativeThen","kind":"instance","line":291,"name":"Ordering.instAssociativeThen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L291-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_left_of_isGE_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_left_of_isGE_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_left_of_isGE_then","kind":"theorem","line":289,"name":"Ordering.isGE_left_of_isGE_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L289-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_left_of_isLE_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_left_of_isLE_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_left_of_isLE_then","kind":"theorem","line":288,"name":"Ordering.isLE_left_of_isLE_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L288-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_then_iff_and\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_then_iff_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> (<span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_then_iff_and","kind":"theorem","line":287,"name":"Ordering.isLE_then_iff_and","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L287-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_then_iff_or\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_then_iff_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_then_iff_or","kind":"theorem","line":286,"name":"Ordering.isLE_then_iff_or","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L286-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then_assoc\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o₁ </span><span class=\"fn\">o₂ </span><span class=\"fn\">o₃</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₃</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.then_assoc","kind":"theorem","line":284,"name":"Ordering.then_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L284-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then_self\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.then_self","kind":"theorem","line":283,"name":"Ordering.then_self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.then_eq","kind":"theorem","line":282,"name":"Ordering.then_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_then","kind":"theorem","line":280,"name":"Ordering.eq_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L280-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.gt_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">gt_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.gt_then","kind":"theorem","line":279,"name":"Ordering.gt_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L279-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.lt_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">lt_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.lt_then","kind":"theorem","line":278,"name":"Ordering.lt_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L278-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGT_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGT_then","kind":"theorem","line":276,"name":"Ordering.isGT_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L276-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_then","kind":"theorem","line":275,"name":"Ordering.isNe_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq_then","kind":"theorem","line":274,"name":"Ordering.isEq_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLT_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLT_then","kind":"theorem","line":273,"name":"Ordering.isLT_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">o₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.then_eq_eq","kind":"theorem","line":271,"name":"Ordering.then_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L271-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">o₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.then_eq_gt","kind":"theorem","line":270,"name":"Ordering.then_eq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L270-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">o₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.then_eq_lt","kind":"theorem","line":269,"name":"Ordering.then_eq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L269-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.then\">then</a></span> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_then","kind":"theorem","line":267,"name":"Ordering.swap_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L267-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_inj\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o₂</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_inj","kind":"theorem","line":265,"name":"Ordering.swap_inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L265-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_swap","kind":"theorem","line":264,"name":"Ordering.swap_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L264-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.ne_gt_iff_isLE\"><span class=\"name\">Ordering</span>.<span class=\"name\">ne_gt_iff_isLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.ne_gt_iff_isLE","kind":"theorem","line":262,"name":"Ordering.ne_gt_iff_isLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L262-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.ne_lt_iff_isGE\"><span class=\"name\">Ordering</span>.<span class=\"name\">ne_lt_iff_isGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.ne_lt_iff_isGE","kind":"theorem","line":261,"name":"Ordering.ne_lt_iff_isGE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L261-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.not_isEq_eq_isNe\"><span class=\"name\">Ordering</span>.<span class=\"name\">not_isEq_eq_isNe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.not_isEq_eq_isNe","kind":"theorem","line":259,"name":"Ordering.not_isEq_eq_isNe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L259-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.not_isNe_eq_isEq\"><span class=\"name\">Ordering</span>.<span class=\"name\">not_isNe_eq_isEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.not_isNe_eq_isEq","kind":"theorem","line":258,"name":"Ordering.not_isNe_eq_isEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L258-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.not_isGE_eq_isLT\"><span class=\"name\">Ordering</span>.<span class=\"name\">not_isGE_eq_isLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.not_isGE_eq_isLT","kind":"theorem","line":257,"name":"Ordering.not_isGE_eq_isLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.not_isGT_eq_isLE\"><span class=\"name\">Ordering</span>.<span class=\"name\">not_isGT_eq_isLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.not_isGT_eq_isLE","kind":"theorem","line":256,"name":"Ordering.not_isGT_eq_isLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L256-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.not_isLE_eq_isGT\"><span class=\"name\">Ordering</span>.<span class=\"name\">not_isLE_eq_isGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.not_isLE_eq_isGT","kind":"theorem","line":255,"name":"Ordering.not_isLE_eq_isGT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L255-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.not_isLT_eq_isGE\"><span class=\"name\">Ordering</span>.<span class=\"name\">not_isLT_eq_isGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.not_isLT_eq_isGE","kind":"theorem","line":254,"name":"Ordering.not_isLT_eq_isGE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L254-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_eq_isLT_or_isGT\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_eq_isLT_or_isGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_eq_isLT_or_isGT","kind":"theorem","line":252,"name":"Ordering.isNe_eq_isLT_or_isGT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L252-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_eq_not_beq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_eq_not_beq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_eq_not_beq_eq","kind":"theorem","line":251,"name":"Ordering.isNe_eq_not_beq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L251-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq_eq_beq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_eq_beq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq_eq_beq_eq","kind":"theorem","line":250,"name":"Ordering.isEq_eq_beq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L250-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_eq_isGT_or_isEq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_eq_isGT_or_isEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_eq_isGT_or_isEq","kind":"theorem","line":249,"name":"Ordering.isGE_eq_isGT_or_isEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_eq_not_beq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_eq_not_beq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_eq_not_beq_lt","kind":"theorem","line":248,"name":"Ordering.isGE_eq_not_beq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L248-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGT_eq_beq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_eq_beq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGT_eq_beq_gt","kind":"theorem","line":247,"name":"Ordering.isGT_eq_beq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L247-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_eq_isLT_or_isEq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_eq_isLT_or_isEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_eq_isLT_or_isEq","kind":"theorem","line":246,"name":"Ordering.isLE_eq_isLT_or_isEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L246-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_eq_not_beq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_eq_not_beq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_eq_not_beq_gt","kind":"theorem","line":245,"name":"Ordering.isLE_eq_not_beq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L245-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLT_eq_beq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_eq_beq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLT_eq_beq_lt","kind":"theorem","line":244,"name":"Ordering.isLT_eq_beq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L244-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_iff_eq_gt_or_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_iff_eq_gt_or_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_iff_eq_gt_or_eq_eq","kind":"theorem","line":242,"name":"Ordering.isGE_iff_eq_gt_or_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L242-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_iff_eq_lt_or_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_iff_eq_lt_or_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_iff_eq_lt_or_eq_eq","kind":"theorem","line":241,"name":"Ordering.isLE_iff_eq_lt_or_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L241-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_iff_ne_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_iff_ne_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_iff_ne_lt","kind":"theorem","line":240,"name":"Ordering.isGE_iff_ne_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_iff_ne_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_iff_ne_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_iff_ne_gt","kind":"theorem","line":239,"name":"Ordering.isLE_iff_ne_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L239-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_iff_ne_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_iff_ne_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_iff_ne_eq","kind":"theorem","line":237,"name":"Ordering.isNe_iff_ne_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L237-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq_iff_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_iff_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq_iff_eq_eq","kind":"theorem","line":236,"name":"Ordering.isEq_iff_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L236-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGT_iff_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_iff_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGT_iff_eq_gt","kind":"theorem","line":235,"name":"Ordering.isGT_iff_eq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L235-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLT_iff_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_iff_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLT_iff_eq_lt","kind":"theorem","line":234,"name":"Ordering.isLT_iff_eq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L234-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.ne_eq_of_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">ne_eq_of_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> → <span class=\"fn\">o</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.ne_eq_of_eq_gt","kind":"theorem","line":232,"name":"Ordering.ne_eq_of_eq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L232-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.ne_eq_of_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">ne_eq_of_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> → <span class=\"fn\">o</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.ne_eq_of_eq_lt","kind":"theorem","line":231,"name":"Ordering.ne_eq_of_eq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_of_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_of_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> → <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_of_eq_eq","kind":"theorem","line":229,"name":"Ordering.isGE_of_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L229-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_of_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_of_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> → <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_of_eq_gt","kind":"theorem","line":228,"name":"Ordering.isGE_of_eq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_of_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_of_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> → <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_of_eq_eq","kind":"theorem","line":227,"name":"Ordering.isLE_of_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_of_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_of_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> → <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_of_eq_lt","kind":"theorem","line":226,"name":"Ordering.isLE_of_eq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L226-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGT_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGT_swap","kind":"theorem","line":224,"name":"Ordering.isGT_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L224-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_swap","kind":"theorem","line":223,"name":"Ordering.isGE_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_swap","kind":"theorem","line":222,"name":"Ordering.isNe_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L222-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq_swap","kind":"theorem","line":221,"name":"Ordering.isEq_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_swap","kind":"theorem","line":220,"name":"Ordering.isLE_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L220-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLT_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLT_swap","kind":"theorem","line":219,"name":"Ordering.isLT_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L219-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_eq_eq","kind":"theorem","line":217,"name":"Ordering.swap_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L217-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_eq_lt","kind":"theorem","line":216,"name":"Ordering.swap_eq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L216-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_eq_gt","kind":"theorem","line":215,"name":"Ordering.swap_eq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L215-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq_eq_false\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq_eq_false","kind":"theorem","line":213,"name":"Ordering.isEq_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L213-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_eq_false\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_eq_false","kind":"theorem","line":212,"name":"Ordering.isNe_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L212-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_eq_false\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_eq_false","kind":"theorem","line":211,"name":"Ordering.isGE_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L211-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_eq_false\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_eq_false","kind":"theorem","line":210,"name":"Ordering.isLE_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L210-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_eq_of_eq_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_of_eq_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> → <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_eq_of_eq_swap","kind":"theorem","line":208,"name":"Ordering.eq_eq_of_eq_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_swap_iff_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_swap_iff_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_swap_iff_eq_eq","kind":"theorem","line":207,"name":"Ordering.eq_swap_iff_eq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L207-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_eq_iff_isLE_and_isGE\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_iff_isLE_and_isGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_eq_iff_isLE_and_isGE","kind":"theorem","line":206,"name":"Ordering.eq_eq_iff_isLE_and_isGE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L206-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_eq_of_isLE_of_isGE\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_of_isLE_of_isGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_eq_of_isLE_of_isGE","kind":"theorem","line":205,"name":"Ordering.eq_eq_of_isLE_of_isGE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L205-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_eq_of_isGE_of_isGE_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_of_isGE_of_isGE_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_eq_of_isGE_of_isGE_swap","kind":"theorem","line":204,"name":"Ordering.eq_eq_of_isGE_of_isGE_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L204-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_eq_of_isLE_of_isLE_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_of_isLE_of_isLE_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_eq_of_isLE_of_isLE_swap","kind":"theorem","line":203,"name":"Ordering.eq_eq_of_isLE_of_isLE_swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L203-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_gt","kind":"theorem","line":201,"name":"Ordering.swap_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_eq","kind":"theorem","line":200,"name":"Ordering.swap_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap_lt","kind":"theorem","line":199,"name":"Ordering.swap_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.gt_beq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">gt_beq_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.gt_beq_eq","kind":"theorem","line":197,"name":"Ordering.gt_beq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L197-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.gt_beq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">gt_beq_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.gt_beq_lt","kind":"theorem","line":196,"name":"Ordering.gt_beq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_beq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_beq_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_beq_gt","kind":"theorem","line":195,"name":"Ordering.eq_beq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L195-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq_beq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_beq_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq_beq_lt","kind":"theorem","line":194,"name":"Ordering.eq_beq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L194-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.lt_beq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">lt_beq_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.lt_beq_gt","kind":"theorem","line":193,"name":"Ordering.lt_beq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.lt_beq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">lt_beq_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.lt_beq_eq","kind":"theorem","line":192,"name":"Ordering.lt_beq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L192-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGT_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGT_gt","kind":"theorem","line":190,"name":"Ordering.isGT_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L190-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_gt","kind":"theorem","line":189,"name":"Ordering.isGE_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L189-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_gt","kind":"theorem","line":188,"name":"Ordering.isNe_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq_gt","kind":"theorem","line":187,"name":"Ordering.isEq_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L187-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_gt","kind":"theorem","line":186,"name":"Ordering.isLE_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLT_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLT_gt","kind":"theorem","line":185,"name":"Ordering.isLT_gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L185-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGT_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGT_eq","kind":"theorem","line":183,"name":"Ordering.isGT_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L183-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_eq","kind":"theorem","line":182,"name":"Ordering.isGE_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_eq","kind":"theorem","line":181,"name":"Ordering.isNe_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L181-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq_eq","kind":"theorem","line":180,"name":"Ordering.isEq_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L180-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_eq","kind":"theorem","line":179,"name":"Ordering.isLE_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLT_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLT_eq","kind":"theorem","line":178,"name":"Ordering.isLT_eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L178-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGT_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGT_lt","kind":"theorem","line":176,"name":"Ordering.isGT_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE_lt","kind":"theorem","line":175,"name":"Ordering.isGE_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L175-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe_lt","kind":"theorem","line":174,"name":"Ordering.isNe_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq_lt","kind":"theorem","line":173,"name":"Ordering.isEq_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L173-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE_lt","kind":"theorem","line":172,"name":"Ordering.isLE_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLT_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLT_lt","kind":"theorem","line":171,"name":"Ordering.isLT_lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.instDecidableExistsOfDecidablePred\"><span class=\"name\">Ordering</span>.<span class=\"name\">instDecidableExistsOfDecidablePred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">o</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">o</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.instDecidableExistsOfDecidablePred","kind":"instance","line":168,"name":"Ordering.instDecidableExistsOfDecidablePred","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L168-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.instDecidableForallOfDecidablePred\"><span class=\"name\">Ordering</span>.<span class=\"name\">instDecidableForallOfDecidablePred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(∀ (<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">o</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.instDecidableForallOfDecidablePred","kind":"instance","line":165,"name":"Ordering.instDecidableForallOfDecidablePred","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L165-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.exists\"><span class=\"name\">Ordering</span>.<span class=\"name\">exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">o</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">o</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.exists","kind":"theorem","line":157,"name":"Ordering.exists","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L157-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.forall\"><span class=\"name\">Ordering</span>.<span class=\"name\">forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">o</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Data/Ord/Basic.html#Ordering.lt\">lt</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Data/Ord/Basic.html#Ordering.eq\">eq</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Data/Ord/Basic.html#Ordering.gt\">gt</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#Ordering.forall","kind":"theorem","line":151,"name":"Ordering.forall","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L151-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGE\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the ordering is `gt` or `eq`.\n","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGE","kind":"def","line":141,"name":"Ordering.isGE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L141-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isGT\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the ordering is `gt`.\n","docLink":"./Init/Data/Ord/Basic.html#Ordering.isGT","kind":"def","line":133,"name":"Ordering.isGT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L133-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLT\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the ordering is `lt`.\n","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLT","kind":"def","line":125,"name":"Ordering.isLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L125-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isLE\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the ordering is `lt` or `eq`.\n","docLink":"./Init/Data/Ord/Basic.html#Ordering.isLE","kind":"def","line":117,"name":"Ordering.isLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L117-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isNe\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the ordering is not `eq`.\n","docLink":"./Init/Data/Ord/Basic.html#Ordering.isNe","kind":"def","line":109,"name":"Ordering.isNe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L109-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.isEq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the ordering is `eq`.\n","docLink":"./Init/Data/Ord/Basic.html#Ordering.isEq","kind":"def","line":101,"name":"Ordering.isEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L101-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then'\"><span class=\"name\">Ordering</span>.<span class=\"name\">then'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"Version of `Ordering.then'` for proof by reflection. ","docLink":"./Init/Data/Ord/Basic.html#Ordering.then'","kind":"def","line":97,"name":"Ordering.then'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L97-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.then\"><span class=\"name\">Ordering</span>.<span class=\"name\">then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"If `a` and `b` are `Ordering`, then `a.then b` returns `a` unless it is `.eq`, in which case it\nreturns `b`. Additionally, it has “short-circuiting” behavior similar to boolean `&&`: if `a` is not\n`.eq` then the expression for `b` is not evaluated.\n\nThis is a useful primitive for constructing lexicographic comparator functions. The `deriving Ord`\nsyntax on a structure uses the `Ord` instance to compare each field in order, combining the results\nequivalently to `Ordering.then`.\n\nUse `compareLex` to lexicographically combine two comparison functions.\n\nExamples:\n```lean example\nstructure Person where\n  name : String\n  age : Nat\n\n-- Sort people first by name (in ascending order), and people with the same name by age (in\n-- descending order)\ninstance : Ord Person where\n  compare a b := (compare a.name b.name).then (compare b.age a.age)\n```\n\n```lean example\n#eval Ord.compare (⟨\"Gert\", 33⟩ : Person) ⟨\"Dana\", 50⟩\n```\n```output\nOrdering.gt\n```\n\n```lean example\n#eval Ord.compare (⟨\"Gert\", 33⟩ : Person) ⟨\"Gert\", 50⟩\n```\n```output\nOrdering.gt\n```\n\n```lean example\n#eval Ord.compare (⟨\"Gert\", 33⟩ : Person) ⟨\"Gert\", 20⟩\n```\n```output\nOrdering.lt\n```\n","docLink":"./Init/Data/Ord/Basic.html#Ordering.then","kind":"def","line":48,"name":"Ordering.then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L48-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"Swaps less-than and greater-than ordering results.\n\nExamples:\n* `Ordering.lt.swap = Ordering.gt`\n* `Ordering.eq.swap = Ordering.eq`\n* `Ordering.gt.swap = Ordering.lt`\n","docLink":"./Init/Data/Ord/Basic.html#Ordering.swap","kind":"def","line":34,"name":"Ordering.swap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L34-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instReprOrdering\"><span class=\"name\">instReprOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instReprOrdering","kind":"instance","line":30,"name":"instReprOrdering","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instReprOrdering.repr\"><span class=\"name\">instReprOrdering</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instReprOrdering.repr","kind":"def","line":30,"name":"instReprOrdering.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instDecidableEqOrdering\"><span class=\"name\">instDecidableEqOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instDecidableEqOrdering","kind":"instance","line":30,"name":"instDecidableEqOrdering","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instInhabitedOrdering\"><span class=\"name\">instInhabitedOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instInhabitedOrdering","kind":"instance","line":30,"name":"instInhabitedOrdering","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#instInhabitedOrdering.default\"><span class=\"name\">instInhabitedOrdering</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Ord/Basic.html#instInhabitedOrdering.default","kind":"def","line":30,"name":"instInhabitedOrdering.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"Greater than. ","docLink":"./Init/Data/Ord/Basic.html#Ordering.gt","kind":"ctor","line":28,"name":"Ordering.gt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"Equal. ","docLink":"./Init/Data/Ord/Basic.html#Ordering.eq","kind":"ctor","line":26,"name":"Ordering.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering.lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"Less than. ","docLink":"./Init/Data/Ord/Basic.html#Ordering.lt","kind":"ctor","line":24,"name":"Ordering.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L24-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord/Basic.html#Ordering\"><span class=\"name\">Ordering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of a comparison according to a total order.\n\nThe relationship between the compared items may be:\n* `Ordering.lt`: less than\n* `Ordering.eq`: equal\n* `Ordering.gt`: greater than\n","docLink":"./Init/Data/Ord/Basic.html#Ordering","kind":"inductive","line":15,"name":"Ordering","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Ord/Basic.lean#L15-L30"}}],"imports":["Init.ByCases","Init.Ext","Init.PropLemmas"],"instances":[{"className":"Inhabited","name":"instInhabitedOrdering","typeNames":["Ordering"]},{"className":"Decidable","name":"instDecidableEqOrdering","typeNames":["Eq"]},{"className":"Repr","name":"instReprOrdering","typeNames":["Ordering"]},{"className":"Decidable","name":"Ordering.instDecidableForallOfDecidablePred","typeNames":[]},{"className":"Decidable","name":"Ordering.instDecidableExistsOfDecidablePred","typeNames":["Exists"]},{"className":"Std.Associative","name":"Ordering.instAssociativeThen","typeNames":["Ordering.then"]},{"className":"Std.IdempotentOp","name":"Ordering.instIdempotentOpThen","typeNames":["Ordering.then"]},{"className":"Std.LawfulIdentity","name":"Ordering.instLawfulIdentityThenEq","typeNames":["Ordering.then","Ordering.eq"]},{"className":"Ord","name":"instOrdNat","typeNames":["Nat"]},{"className":"Ord","name":"instOrdInt","typeNames":["Int"]},{"className":"Ord","name":"instOrdBool","typeNames":["Bool"]},{"className":"Ord","name":"instOrdFin","typeNames":["Fin"]},{"className":"Ord","name":"instOrdChar","typeNames":["Char"]},{"className":"Ord","name":"instOrdBitVec","typeNames":["BitVec"]},{"className":"Ord","name":"instOrdOption","typeNames":["Option"]},{"className":"Ord","name":"instOrdOrdering","typeNames":["Ordering"]},{"className":"Ord","name":"List.instOrd","typeNames":["List"]},{"className":"Decidable","name":"instDecidableRelLt","typeNames":["LT.lt"]},{"className":"Decidable","name":"instDecidableRelLe","typeNames":["LE.le"]}],"name":"Init.Data.Ord.Basic"}