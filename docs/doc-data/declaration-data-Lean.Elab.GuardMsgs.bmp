{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">guardMsgsCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Attr.html#Lean.CodeAction.CommandCodeAction\">CodeAction.CommandCodeAction</a></div></div>","info":{"doc":"A code action which will update the doc comment on a `#guard_msgs` invocation. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction","kind":"def","line":226,"name":"Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L226-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">elabGuardMsgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Command.CommandElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs","kind":"def","line":179,"name":"Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L179-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">MessageOrdering</span>.<span class=\"name\">apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Applies a message ordering mode.\n","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.apply","kind":"def","line":171,"name":"Lean.Elab.Tactic.GuardMsgs.MessageOrdering.apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L171-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span>.<span class=\"name\">apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Applies a whitespace normalization mode.\n","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.apply","kind":"def","line":162,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.apply","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L162-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.removeTrailingWhitespaceMarker\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">removeTrailingWhitespaceMarker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.removeTrailingWhitespaceMarker","kind":"def","line":159,"name":"Lean.Elab.Tactic.GuardMsgs.removeTrailingWhitespaceMarker","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L159-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.revealTrailingWhitespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">revealTrailingWhitespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Makes trailing whitespace visible and protects them against trimming by the editor, by appending\nthe symbol ‚èé to such a line (and also to any line that ends with such a symbol, to avoid\nambiguities in the case the message already had that symbol).\n","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.revealTrailingWhitespace","kind":"def","line":150,"name":"Lean.Elab.Tactic.GuardMsgs.revealTrailingWhitespace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L150-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">instTypeNameGuardMsgFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">GuardMsgFailure</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","kind":"instance","line":148,"name":"Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span>.<span class=\"name\">res</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">GuardMsgFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The result of the nested command ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res","kind":"def","line":147,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">GuardMsgFailure</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk","kind":"ctor","line":145,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An info tree node corresponding to a failed `#guard_msgs` invocation,\nused for code action support. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure","kind":"structure","line":143,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L143-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">parseGuardMsgsSpec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spec?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.guardMsgsSpec</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a></span></div></div>","info":{"doc":"Parses a `GuardMsgsSpec`.\n- No specification: check everything.\n- With a specification: interpret the spec, and if nothing applies pass it through. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec","kind":"def","line":111,"name":"Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L111-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">parseGuardMsgsFilterSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.guardMsgsFilterSeverity</span> ‚Üí <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.Message\">Message</a> ‚Üí <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterSeverity","kind":"def","line":103,"name":"Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L103-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">parseGuardMsgsFilterAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.guardMsgsFilterAction</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterAction","kind":"def","line":92,"name":"Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L92-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.reportPositions\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">reportPositions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether to report position information. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.reportPositions","kind":"def","line":90,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.reportPositions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.ordering\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">ordering</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a></div></div>","info":{"doc":"Method to use when combining multiple messages; see `MessageOrdering`. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.ordering","kind":"def","line":88,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.ordering","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.whitespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">whitespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a></div></div>","info":{"doc":"Method to use when normalizing whitespace, after trimming; see `WhitespaceMode`. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.whitespace","kind":"def","line":86,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.whitespace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.filterFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">filterFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Message</a> ‚Üí <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></span></div></div>","info":{"doc":"Method for deciding whether and how to filter messages; see `FilterSpec`. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.filterFn","kind":"def","line":84,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.filterFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">filterFn</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Message</a> ‚Üí <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">whitespace</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ordering</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reportPositions</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.mk","kind":"ctor","line":82,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The specification options for `#guard_msgs`. The default field values provide the default\nbehavior of `#guard_msgs`. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec","kind":"structure","line":80,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L80-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.sorted\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">MessageOrdering</span>.<span class=\"name\">sorted</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a></div></div>","info":{"doc":"Sort the produced messages. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.sorted","kind":"ctor","line":77,"name":"Lean.Elab.Tactic.GuardMsgs.MessageOrdering.sorted","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">MessageOrdering</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a></div></div>","info":{"doc":"Use the exact ordering of the produced messages. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.exact","kind":"ctor","line":75,"name":"Lean.Elab.Tactic.GuardMsgs.MessageOrdering.exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">MessageOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Method to use when combining multiple messages. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering","kind":"inductive","line":73,"name":"Lean.Elab.Tactic.GuardMsgs.MessageOrdering","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L73-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.lax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span>.<span class=\"name\">lax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a></div></div>","info":{"doc":"Equality after collapsing whitespace into single spaces. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.lax","kind":"ctor","line":70,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.lax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L70-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.normalized\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span>.<span class=\"name\">normalized</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a></div></div>","info":{"doc":"Equality after normalizing newlines into spaces. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.normalized","kind":"ctor","line":68,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.normalized","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L68-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a></div></div>","info":{"doc":"Exact equality. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.exact","kind":"ctor","line":66,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.exact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L66-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The method to use when normalizing whitespace, after trimming. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode","kind":"inductive","line":64,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L64-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.pass\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">FilterSpec</span>.<span class=\"name\">pass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></div></div>","info":{"doc":"Do not capture the message. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.pass","kind":"ctor","line":61,"name":"Lean.Elab.Tactic.GuardMsgs.FilterSpec.pass","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L61-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.drop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">FilterSpec</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></div></div>","info":{"doc":"Drop the message and delete it. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.drop","kind":"ctor","line":59,"name":"Lean.Elab.Tactic.GuardMsgs.FilterSpec.drop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">FilterSpec</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></div></div>","info":{"doc":"Capture the message and check it matches the docstring. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.check","kind":"ctor","line":57,"name":"Lean.Elab.Tactic.GuardMsgs.FilterSpec.check","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L57-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">FilterSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The decision made by a specification for a message. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec","kind":"inductive","line":55,"name":"Lean.Elab.Tactic.GuardMsgs.FilterSpec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L55-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#guard_msgs.diff\"><span class=\"name\">guard_msgs</span>.<span class=\"name\">diff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#guard_msgs.diff","kind":"opaque","line":22,"name":"guard_msgs.diff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/GuardMsgs.lean#L22-L25"}}],"imports":["Lean.Elab.Notation","Lean.Server.CodeActions.Attr"],"instances":[{"className":"TypeName","name":"Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","typeNames":["Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure"]}],"name":"Lean.Elab.GuardMsgs"}