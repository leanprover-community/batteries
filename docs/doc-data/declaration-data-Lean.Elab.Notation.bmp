{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.elabNotation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.elabNotation","kind":"def","line":135,"name":"Lean.Elab.Command.elabNotation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Notation.lean#L135-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.mkUnexpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkUnexpander</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrKind</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.attrKind</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat </span><span class=\"fn\">qrhs</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Try to derive an unexpander from a notation.\nThe notation must be of the form `notation ... => c body`\nwhere `c` is a declaration in the current scope and `body` any syntax\nthat contains each variable from the LHS at most once. ","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.mkUnexpander","kind":"def","line":102,"name":"Lean.Elab.Command.mkUnexpander","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Notation.lean#L102-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.hasDuplicateAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">hasDuplicateAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.hasDuplicateAntiquot","kind":"def","line":90,"name":"Lean.Elab.Command.hasDuplicateAntiquot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Notation.lean#L90-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParentheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">removeParentheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParentheses","kind":"opaque","line":82,"name":"Lean.Elab.Command.removeParentheses","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Notation.lean#L82-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParenthesesAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">removeParenthesesAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parens </span><span class=\"fn\">body</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParenthesesAux","kind":"def","line":75,"name":"Lean.Elab.Command.removeParenthesesAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Notation.lean#L75-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNotationItemIntoPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Convert `notation` command lhs item into a pattern element ","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoPattern","kind":"def","line":57,"name":"Lean.Elab.Command.expandNotationItemIntoPattern","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Notation.lean#L57-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoSyntaxItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNotationItemIntoSyntaxItem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.notationItem</span> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`stx</span>)</span></span></div></div>","info":{"doc":"Convert `notation` command lhs item into a `syntax` command item ","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoSyntaxItem","kind":"def","line":44,"name":"Lean.Elab.Command.expandNotationItemIntoSyntaxItem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Notation.lean#L44-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.addInheritDocDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">addInheritDocDefault</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Syntax.TSepArray</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span> <span class=\"fn\">&quot;,&quot;</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Syntax.TSepArray</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span> <span class=\"fn\">&quot;,&quot;</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.addInheritDocDefault","kind":"def","line":32,"name":"Lean.Elab.Command.addInheritDocDefault","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Notation.lean#L32-L42"}}],"imports":["Lean.Elab.Syntax","Lean.Elab.AuxDef","Lean.Elab.BuiltinNotation"],"instances":[],"name":"Lean.Elab.Notation"}