{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isMetaprogramming\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isMetaprogramming</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return true if the name is in a namespace associated to metaprogramming. ","docLink":"./Lean/Data/Name.html#Lean.Name.isMetaprogramming","kind":"def","line":194,"name":"Lean.Name.isMetaprogramming","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L194-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.anyS\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">anyS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if `n` contains a string part `s` that satisfies `f`.\n\nExamples:\n```\n#eval (`foo.bla).anyS (·.startsWith \"fo\") -- true\n#eval (`foo.bla).anyS (·.startsWith \"boo\") -- false\n```\n","docLink":"./Lean/Data/Name.html#Lean.Name.anyS","kind":"def","line":179,"name":"Lean.Name.anyS","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L179-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.isNum","kind":"def","line":175,"name":"Lean.Name.isNum","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L175-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isStr\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isStr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.isStr","kind":"def","line":171,"name":"Lean.Name.isStr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L171-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isAnonymous</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.isAnonymous","kind":"def","line":167,"name":"Lean.Name.isAnonymous","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L167-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isAtomic\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isAtomic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.isAtomic","kind":"def","line":161,"name":"Lean.Name.isAtomic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L161-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isImplementationDetail\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isImplementationDetail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Checks whether the name is an implementation-detail hypothesis name.\n\nImplementation-detail hypothesis names start with a double underscore.\n","docLink":"./Lean/Data/Name.html#Lean.Name.isImplementationDetail","kind":"def","line":150,"name":"Lean.Name.isImplementationDetail","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L150-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isInternalDetail\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isInternalDetail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns true if this a part of name that is internal or dynamically\ngenerated so that it may easily be changed.\n\nGenerally, user code should not explicitly use internal names.\n","docLink":"./Lean/Data/Name.html#Lean.Name.isInternalDetail","kind":"def","line":129,"name":"Lean.Name.isInternalDetail","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L129-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isInternalOrNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isInternalOrNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The frontend does not allow user declarations to start with `_` in any of its parts.\nWe use name parts starting with `_` internally to create auxiliary names (e.g., `_private`).\n\nThis function checks if any component of the name starts with `_`, or is numeric.\n","docLink":"./Lean/Data/Name.html#Lean.Name.isInternalOrNum","kind":"def","line":118,"name":"Lean.Name.isInternalOrNum","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L118-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isInternal\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isInternal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"The frontend does not allow user declarations to start with `_` in any of its parts.\nWe use name parts starting with `_` internally to create auxiliary names (e.g., `_private`). ","docLink":"./Lean/Data/Name.html#Lean.Name.isInternal","kind":"def","line":111,"name":"Lean.Name.isInternal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L111-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.hasNum\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">hasNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns true if the name has any numeric components. ","docLink":"./Lean/Data/Name.html#Lean.Name.hasNum","kind":"def","line":105,"name":"Lean.Name.hasNum","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L105-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.quickLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.quickLt","kind":"def","line":102,"name":"Lean.Name.quickLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L102-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickCmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.quickCmp","kind":"def","line":97,"name":"Lean.Name.quickCmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L97-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.quickCmpAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">quickCmpAux</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.quickCmpAux","kind":"def","line":82,"name":"Lean.Name.quickCmpAux","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L82-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.lt","kind":"def","line":79,"name":"Lean.Name.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L79-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.cmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.cmp","kind":"def","line":64,"name":"Lean.Name.cmp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L64-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isSuffixOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isSuffixOf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.isSuffixOf","kind":"def","line":58,"name":"Lean.Name.isSuffixOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L58-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.isPrefixOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isPrefixOf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.isPrefixOf","kind":"def","line":52,"name":"Lean.Name.isPrefixOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L52-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.eqStr\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">eqStr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.eqStr","kind":"def","line":48,"name":"Lean.Name.eqStr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L48-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.components\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">components</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.components","kind":"def","line":45,"name":"Lean.Name.components","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.componentsRev\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">componentsRev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.componentsRev","kind":"def","line":40,"name":"Lean.Name.componentsRev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L40-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.updatePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">updatePrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.updatePrefix","kind":"def","line":35,"name":"Lean.Name.updatePrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L35-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.getNumParts\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">getNumParts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.getNumParts","kind":"def","line":30,"name":"Lean.Name.getNumParts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L30-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.getString!\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">getString!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.getString!","kind":"def","line":26,"name":"Lean.Name.getString!","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L26-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.getPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">getPrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.getPrefix","kind":"def","line":21,"name":"Lean.Name.getPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L21-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Name.html#Lean.Name.hashEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">hashEx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Data/Name.html#Lean.Name.hashEx","kind":"def","line":18,"name":"Lean.Name.hashEx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Data/Name.lean#L18-L19"}}],"imports":["Init.Data.Ord.Basic","Init.Data.Ord.String","Init.Data.Ord.UInt"],"instances":[],"name":"Lean.Data.Name"}