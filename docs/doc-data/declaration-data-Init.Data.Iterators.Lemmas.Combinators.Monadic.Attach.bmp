{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.html#Std.Iterators.IterM.map_unattach_toArray_attachWith\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">map_unattach_toArray_attachWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hP</span> : <span class=\"fn\">∀ (<span class=\"fn\">out</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">out</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.LawfulIteratorCollect\">LawfulIteratorCollect</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.map\">Array.map</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/Attach.html#Std.Iterators.IterM.attachWith\">attachWith</a></span> <span class=\"fn\">P</span> <span class=\"fn\">hP</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toArray\">toArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.html#Std.Iterators.IterM.map_unattach_toArray_attachWith","kind":"theorem","line":53,"name":"Std.Iterators.IterM.map_unattach_toArray_attachWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.lean#L53-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.html#Std.Iterators.IterM.map_unattach_toListRev_attachWith\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">map_unattach_toListRev_attachWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hP</span> : <span class=\"fn\">∀ (<span class=\"fn\">out</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">out</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.LawfulIteratorCollect\">LawfulIteratorCollect</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/List/Attach.html#List.unattach\">List.unattach</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/Attach.html#Std.Iterators.IterM.attachWith\">attachWith</a></span> <span class=\"fn\">P</span> <span class=\"fn\">hP</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toListRev\">toListRev</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.html#Std.Iterators.IterM.map_unattach_toListRev_attachWith","kind":"theorem","line":44,"name":"Std.Iterators.IterM.map_unattach_toListRev_attachWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.lean#L44-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.html#Std.Iterators.IterM.map_unattach_toList_attachWith\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">map_unattach_toList_attachWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hP</span> : <span class=\"fn\">∀ (<span class=\"fn\">out</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">out</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.LawfulIteratorCollect\">LawfulIteratorCollect</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/List/Attach.html#List.unattach\">List.unattach</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/Attach.html#Std.Iterators.IterM.attachWith\">attachWith</a></span> <span class=\"fn\">P</span> <span class=\"fn\">hP</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.html#Std.Iterators.IterM.map_unattach_toList_attachWith","kind":"theorem","line":24,"name":"Std.Iterators.IterM.map_unattach_toList_attachWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.lean#L24-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.html#Std.Iterators.IterM.step_attachWith\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">IterM</span>.<span class=\"name\">step_attachWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hP</span> : <span class=\"fn\">∀ (<span class=\"fn\">out</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">out</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/Attach.html#Std.Iterators.IterM.attachWith\">attachWith</a></span> <span class=\"fn\">P</span> <span class=\"fn\">hP</span>)</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(fun (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Shrink\">Shrink</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.Step\">Step</a></span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Shrink.deflate\">Shrink.deflate</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Data/Iterators/Combinators/Monadic/Attach.html#Std.Iterators.Types.Attach.Monadic.modifyStep\">Types.Attach.Monadic.modifyStep</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Combinators/Monadic/Attach.html#Std.Iterators.IterM.attachWith\">attachWith</a></span> <span class=\"fn\">P</span> <span class=\"fn\">hP</span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Shrink.inflate\">inflate</a></span></span>, <span class=\"fn\">⋯</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span>)</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a>     <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.step\">step</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.html#Std.Iterators.IterM.step_attachWith","kind":"theorem","line":19,"name":"Std.Iterators.IterM.step_attachWith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Iterators/Lemmas/Combinators/Monadic/Attach.lean#L19-L22"}}],"imports":["Init.Data.Iterators.Combinators.Monadic.Attach","Init.Data.Iterators.Combinators.Monadic.Attach","Init.Data.Iterators.Lemmas.Consumers.Monadic.Collect"],"instances":[],"name":"Init.Data.Iterators.Lemmas.Combinators.Monadic.Attach"}