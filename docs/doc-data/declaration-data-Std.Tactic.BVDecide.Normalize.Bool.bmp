{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">and_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_right","kind":"theorem","line":301,"name":"Std.Tactic.BVDecide.Normalize.Bool.and_right","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L301-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">and_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_left","kind":"theorem","line":297,"name":"Std.Tactic.BVDecide.Normalize.Bool.and_left","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L297-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_ite_beq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq'","kind":"theorem","line":292,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L292-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_ite_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq","kind":"theorem","line":287,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L287-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite'","kind":"theorem","line":282,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L282-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite","kind":"theorem","line":277,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L277-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_ite_beq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq'","kind":"theorem","line":272,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L272-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_ite_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq","kind":"theorem","line":267,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L267-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">beq_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite'","kind":"theorem","line":262,"name":"Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L262-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">beq_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite","kind":"theorem","line":257,"name":"Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L257-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_beq_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> (0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite'","kind":"theorem","line":252,"name":"Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L252-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_zero_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite'","kind":"theorem","line":247,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L247-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_beq_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite","kind":"theorem","line":242,"name":"Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L242-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_zero_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite","kind":"theorem","line":237,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L237-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">one_beq_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> (1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite'","kind":"theorem","line":232,"name":"Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L232-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_one_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite'","kind":"theorem","line":227,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L227-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">one_beq_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite","kind":"theorem","line":222,"name":"Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L222-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_one_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite","kind":"theorem","line":217,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L217-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ite_zero'''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'''","kind":"theorem","line":212,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L212-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ite_zero''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> else <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero''","kind":"theorem","line":207,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L207-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ite_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">t</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'","kind":"theorem","line":202,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L202-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ite_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> else <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero","kind":"theorem","line":197,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L197-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''","kind":"theorem","line":192,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L192-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite''</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''","kind":"theorem","line":187,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L187-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''","kind":"theorem","line":182,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L182-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''","kind":"theorem","line":177,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L177-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite''</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''","kind":"theorem","line":172,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L172-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''","kind":"theorem","line":167,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L167-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'","kind":"theorem","line":162,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L162-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'","kind":"theorem","line":157,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L157-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'","kind":"theorem","line":152,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L152-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'","kind":"theorem","line":147,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L147-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'","kind":"theorem","line":142,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L142-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'","kind":"theorem","line":137,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L137-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite","kind":"theorem","line":132,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L132-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite","kind":"theorem","line":127,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L127-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite","kind":"theorem","line":122,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L122-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite","kind":"theorem","line":117,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L117-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite","kind":"theorem","line":112,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L112-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite","kind":"theorem","line":107,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L107-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_else'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'","kind":"theorem","line":101,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L101-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_else</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else","kind":"theorem","line":95,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L95-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_then'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'","kind":"theorem","line":89,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L89-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">t</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then","kind":"theorem","line":83,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L83-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_else'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'","kind":"theorem","line":78,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L78-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_else</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else","kind":"theorem","line":74,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_else","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L74-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_then'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'","kind":"theorem","line":70,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L70-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">t</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then","kind":"theorem","line":66,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_then","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L66-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_zero_beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a>0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq","kind":"theorem","line":62,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L62-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_one_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_one_beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_one_beq","kind":"theorem","line":58,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_one_beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L58-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_beq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero","kind":"theorem","line":54,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L54-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_one\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_beq_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_one","kind":"theorem","line":50,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_beq_one","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L50-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_xor\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a>(<span class=\"fn\">a</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">b</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_xor","kind":"theorem","line":47,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L47-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.if_eq_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">if_eq_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then <span class=\"fn\">x</span> else <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.if_eq_cond","kind":"theorem","line":43,"name":"Std.Tactic.BVDecide.Normalize.if_eq_cond","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L43-L45"}}],"imports":["Init.Data.BitVec.Lemmas","Init.Data.BitVec.Decidable","Init.Data.BEq"],"instances":[],"name":"Std.Tactic.BVDecide.Normalize.Bool"}