{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Constructions/CtorIdx.html#mkCtorIdx\"><span class=\"name\">mkCtorIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"For an inductive type `T` with more than one function builds a function `T.ctorIdx : T â†’ Nat` that\nreturns the constructor index of the given value.\nDoes nothing if `T` does not eliminate into `Type` or if `T` is unsafe.\nAssumes `T.casesOn` to be defined already.\n","docLink":"./Lean/Meta/Constructions/CtorIdx.html#mkCtorIdx","kind":"def","line":30,"name":"mkCtorIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Constructions/CtorIdx.lean#L30-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Constructions/CtorIdx.html#mkCtorIdxName\"><span class=\"name\">mkCtorIdxName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Constructions/CtorIdx.html#mkCtorIdxName","kind":"def","line":27,"name":"mkCtorIdxName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Constructions/CtorIdx.lean#L27-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Constructions/CtorIdx.html#mkToCtorIdxName\"><span class=\"name\">mkToCtorIdxName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Constructions/CtorIdx.html#mkToCtorIdxName","kind":"def","line":24,"name":"mkToCtorIdxName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Constructions/CtorIdx.lean#L24-L25"}}],"imports":["Lean.Meta.Basic","Lean.AddDecl","Lean.Meta.AppBuilder","Lean.Meta.CompletionName","Lean.Meta.Injective","Lean.Linter.Deprecated"],"instances":[],"name":"Lean.Meta.Constructions.CtorIdx"}