{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.rcongr\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">rcongr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Repeatedly apply `congr` and `ext`, using the given patterns as arguments for `ext`.\n\nThere are two ways this tactic stops:\n* `congr` fails (makes no progress), after having already applied `ext`.\n* `congr` canceled out the last usage of `ext`. In this case, the state is reverted to before\n  the `congr` was applied.\n\nFor example, when the goal is\n```\n⊢ (fun x => f x + 3) '' s = (fun x => g x + 3) '' s\n```\nthen `rcongr x` produces the goal\n```\nx : α ⊢ f x = g x\n```\nThis gives the same result as `congr; ext x; congr`.\n\nIn contrast, `congr` would produce\n```\n⊢ (fun x => f x + 3) = (fun x => g x + 3)\n```\nand `congr with x` (or `congr; ext x`) would produce\n```\nx : α ⊢ f x + 3 = g x + 3\n```\n","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.rcongr","kind":"def","line":82,"name":"Batteries.Tactic.rcongr","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L82-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.rcongrCore\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">rcongrCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config\">Congr.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>","info":{"doc":"Recursive core of `rcongr`. Calls `ext pats <;> congr` and then itself recursively,\nunless `ext pats <;> congr` made no progress.\n","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.rcongrCore","kind":"opaque","line":64,"name":"Batteries.Tactic.rcongrCore","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L64-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.congrConfigWith\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">congrConfigWith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Apply congruence (recursively) to goals of the form `⊢ f as = f bs` and `⊢ f as ≍ f bs`.\n* `congr n` controls the depth of the recursive applications.\n  This is useful when `congr` is too aggressive in breaking down the goal.\n  For example, given `⊢ f (g (x + y)) = f (g (y + x))`,\n  `congr` produces the goals `⊢ x = y` and `⊢ y = x`,\n  while `congr 2` produces the intended `⊢ x + y = y + x`.\n* If, at any point, a subgoal matches a hypothesis then the subgoal will be closed.\n* You can use `congr with p (: n)?` to call `ext p (: n)?` to all subgoals generated by `congr`.\n  For example, if the goal is `⊢ f '' s = g '' s` then `congr with x` generates the goal\n  `x : α ⊢ f x = g x`.\n","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.congrConfigWith","kind":"def","line":35,"name":"Batteries.Tactic.congrConfigWith","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L35-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.congrConfig\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">congrConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"Apply congruence (recursively) to goals of the form `⊢ f as = f bs` and `⊢ f as ≍ f bs`.\nThe optional parameter is the depth of the recursive applications.\nThis is useful when `congr` is too aggressive in breaking down the goal.\nFor example, given `⊢ f (g (x + y)) = f (g (y + x))`,\n`congr` produces the goals `⊢ x = y` and `⊢ y = x`,\nwhile `congr 2` produces the intended `⊢ x + y = y + x`.\n","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.congrConfig","kind":"def","line":32,"name":"Batteries.Tactic.congrConfig","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.elabConfig\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Congr</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config\">Config</a></span></span></div></div>","info":{"doc":"Function elaborating `Congr.Config` ","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.elabConfig","kind":"def","line":29,"name":"Batteries.Tactic.Congr.elabConfig","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L29-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config.closePost\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Congr</span>.<span class=\"name\">Config</span>.<span class=\"name\">closePost</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `closePost := true`, it will try again on goals on which `congr` failed to make progress\nwith default transparency. ","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config.closePost","kind":"def","line":27,"name":"Batteries.Tactic.Congr.Config.closePost","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config.closePre\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Congr</span>.<span class=\"name\">Config</span>.<span class=\"name\">closePre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `closePre := true`, it will attempt to close new goals using `Eq.refl`, `HEq.refl`, and\n`assumption` with reducible transparency. ","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config.closePre","kind":"def","line":24,"name":"Batteries.Tactic.Congr.Config.closePre","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Congr</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">closePre </span><span class=\"fn\">closePost</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config.mk","kind":"ctor","line":21,"name":"Batteries.Tactic.Congr.Config.mk","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Congr</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration options for `congr` & `rcongr` ","docLink":"./Batteries/Tactic/Congr.html#Batteries.Tactic.Congr.Config","kind":"structure","line":20,"name":"Batteries.Tactic.Congr.Config","sourceLink":"https://github.com/leanprover-community/batteries/blob/5da171049c81931a2110303c9d547f5ab2955b06/Batteries/Tactic/Congr.lean#L20-L27"}}],"imports":["Init","Lean.Meta.Tactic.Congr","Lean.Elab.Tactic.Config","Lean.Elab.Tactic.Ext","Lean.Elab.Tactic.RCases"],"instances":[],"name":"Batteries.Tactic.Congr"}