{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.mkCase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">mkCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM\">SearchM</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.mkCase","kind":"def","line":71,"name":"Lean.Meta.Grind.Arith.Cutsat.mkCase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L71-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.setImprecise\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">setImprecise</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Sets `precise` to `false` to indicate that some constraint was not satisfied. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.setImprecise","kind":"def","line":67,"name":"Lean.Meta.Grind.Arith.Cutsat.setImprecise","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.isApprox\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">isApprox</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if approximations are allowed. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.isApprox","kind":"def","line":63,"name":"Lean.Meta.Grind.Arith.Cutsat.isApprox","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L63-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">SearchM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM","kind":"def","line":61,"name":"Lean.Meta.Grind.Arith.Cutsat.SearchM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.decVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span>.<span class=\"name\">decVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>","info":{"doc":"Set of decision variables in `cases`. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.decVars","kind":"def","line":59,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.State.decVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.precise\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span>.<span class=\"name\">precise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`precise := false` if not all constraints were satisfied during the search. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.precise","kind":"def","line":57,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.State.precise","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></span></div></div>","info":{"doc":"Decision stack (aka case-split stack) ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.cases","kind":"def","line":55,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.State.cases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">precise</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decVars</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.mk","kind":"ctor","line":53,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State of the model search procedure.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State","kind":"structure","line":50,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L50-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">instBEqKind</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a> â <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a> â <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind.beq","kind":"def","line":48,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">instBEqKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind","kind":"instance","line":48,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">instInhabitedKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind","kind":"instance","line":48,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">instInhabitedKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind.default","kind":"def","line":48,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind.int\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">Kind</span>.<span class=\"name\">int</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></div></div>","info":{"doc":"Variables must be assigned to integer numbers.\nCooper case splits are required in this mode.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind.int","kind":"ctor","line":43,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.Kind.int","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L43-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind.rat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">Kind</span>.<span class=\"name\">rat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></div></div>","info":{"doc":"Allow variables to be assigned to rational numbers during model\nconstruction.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind.rat","kind":"ctor","line":38,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.Kind.rat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L38-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">Kind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind","kind":"inductive","line":37,"name":"Lean.Meta.Grind.Arith.Cutsat.Search.Kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L37-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instInhabitedCase</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase.default","kind":"def","line":35,"name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instInhabitedCase</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase","kind":"instance","line":35,"name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.saved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span>.<span class=\"name\">saved</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a></div></div>","info":{"doc":"Snapshot of the cutsat state for backtracking purposes.\nWe do not use a trail stack.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.saved","kind":"def","line":34,"name":"Lean.Meta.Grind.Arith.Cutsat.Case.saved","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>","info":{"doc":"Decision variable used to represent the case-split.\nFor example, suppose we are splitting on `p â  0`. Then,\nwe create a decision variable `h : p + 1 â¤ 0`\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.fvarId","kind":"def","line":29,"name":"Lean.Meta.Grind.Arith.Cutsat.Case.fvarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.kind","kind":"def","line":23,"name":"Lean.Meta.Grind.Arith.Cutsat.Case.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">saved</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.mk","kind":"ctor","line":22,"name":"Lean.Meta.Grind.Arith.Cutsat.Case.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case","kind":"structure","line":22,"name":"Lean.Meta.Grind.Arith.Cutsat.Case","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L22-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instInhabitedCaseKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind.default","kind":"def","line":20,"name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instInhabitedCaseKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind","kind":"instance","line":20,"name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind.cooper\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">CaseKind</span>.<span class=\"name\">cooper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.CooperSplitPred\">CooperSplitPred</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Init/Prelude.html#Prod\">Ã</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decVars</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind.cooper","kind":"ctor","line":19,"name":"Lean.Meta.Grind.Arith.Cutsat.CaseKind.cooper","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind.diseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">CaseKind</span>.<span class=\"name\">diseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind.diseq","kind":"ctor","line":18,"name":"Lean.Meta.Grind.Arith.Cutsat.CaseKind.diseq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">CaseKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"In principle, we only need to support two kinds of case split.\n- Disequalities.\n- Cooper-Left, but we have 4 different variants of this one.\n","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind","kind":"inductive","line":12,"name":"Lean.Meta.Grind.Arith.Cutsat.CaseKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L12-L20"}}],"imports":["Lean.Meta.Tactic.Grind.Arith.Cutsat.Types","Lean.Meta.Tactic.Grind.Arith.Cutsat.Util"],"instances":[{"className":"Inhabited","name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind","typeNames":["Lean.Meta.Grind.Arith.Cutsat.CaseKind"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase","typeNames":["Lean.Meta.Grind.Arith.Cutsat.Case"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind","typeNames":["Lean.Meta.Grind.Arith.Cutsat.Search.Kind"]},{"className":"BEq","name":"Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind","typeNames":["Lean.Meta.Grind.Arith.Cutsat.Search.Kind"]}],"name":"Lean.Meta.Tactic.Grind.Arith.Cutsat.SearchM"}