{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.elabModSnippet\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">elabModSnippet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <a href=\"./Lean/Data/DeclarationRange.html#Lean.DeclarationRange\">DeclarationRange</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">blocks</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`block</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nestingLevel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <a href=\"./Lean/DocString/Extension.html#Lean.VersoModuleDocs.Snippet\">VersoModuleDocs.Snippet</a></span></div></div>","info":{"doc":"Elaborates a sequence of blocks into a module doc snippet. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.elabModSnippet","kind":"def","line":1611,"name":"Lean.Doc.elabModSnippet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L1611-L1618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.elabBlocks\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">elabBlocks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">blocks</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`block</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a>)</span></span>)</span></div></div>","info":{"doc":"Elaborates a sequence of blocks into a document. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.elabBlocks","kind":"def","line":1601,"name":"Lean.Doc.elabBlocks","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L1601-L1609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.elabBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">elabBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`block</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Elaborates the syntax of an block-level document element to an actual block-level document element.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.elabBlock","kind":"opaque","line":1306,"name":"Lean.Doc.elabBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L1306-L1437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.elabInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">elabInline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Elaborates the syntax of an inline document element to an actual inline document element.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.elabInline","kind":"opaque","line":1222,"name":"Lean.Doc.elabInline","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L1222-L1304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocCommand\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinDocCommand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commandName </span><span class=\"fn\">wrapper</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">impl</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocCommandExpander\">DocCommandExpander</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation command.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocCommand","kind":"def","line":1001,"name":"Lean.Doc.addBuiltinDocCommand","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L1001-L1007"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocDirective\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinDocDirective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">directiveName </span><span class=\"fn\">wrapper</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">impl</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocDirectiveExpander\">DocDirectiveExpander</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation directive.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocDirective","kind":"def","line":951,"name":"Lean.Doc.addBuiltinDocDirective","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L951-L957"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinCodeBlockSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinCodeBlockSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggester\">CodeBlockSuggester</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation code suggestion provider.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinCodeBlockSuggestion","kind":"def","line":905,"name":"Lean.Doc.addBuiltinCodeBlockSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L905-L911"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.builtinCodeBlockSuggestions\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">builtinCodeBlockSuggestions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggester\">CodeBlockSuggester</a>))</span></span></div></div>","info":{"doc":"Built-in code block suggestions, for bootstrapping\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.builtinCodeBlockSuggestions","kind":"opaque","line":899,"name":"Lean.Doc.builtinCodeBlockSuggestions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L899-L903"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggester\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeBlockSuggester</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A provider of suggestions for code elements.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggester","kind":"def","line":893,"name":"Lean.Doc.CodeBlockSuggester","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L893-L896"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion.moreInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeBlockSuggestion</span>.<span class=\"name\">moreInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion\">CodeBlockSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"More information to show users ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion.moreInfo","kind":"def","line":874,"name":"Lean.Doc.CodeBlockSuggestion.moreInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L874-L874"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeBlockSuggestion</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion\">CodeBlockSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"The arguments it should receive, as a string. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion.args","kind":"def","line":872,"name":"Lean.Doc.CodeBlockSuggestion.args","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L872-L872"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeBlockSuggestion</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion\">CodeBlockSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the code block to suggest. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion.name","kind":"def","line":870,"name":"Lean.Doc.CodeBlockSuggestion.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L870-L870"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeBlockSuggestion</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args </span><span class=\"fn\">moreInfo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion\">CodeBlockSuggestion</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion.mk","kind":"ctor","line":868,"name":"Lean.Doc.CodeBlockSuggestion.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L868-L868"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeBlockSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A suggestion about an applicable code block ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeBlockSuggestion","kind":"structure","line":867,"name":"Lean.Doc.CodeBlockSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L867-L874"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocCodeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinDocCodeBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">blockName </span><span class=\"fn\">wrapper</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">impl</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocCodeBlockExpander\">DocCodeBlockExpander</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation code block.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocCodeBlock","kind":"def","line":838,"name":"Lean.Doc.addBuiltinDocCodeBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L838-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocRole\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinDocRole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">roleName </span><span class=\"fn\">wrapperName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">impl</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocRoleExpander\">DocRoleExpander</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation role.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocRole","kind":"def","line":790,"name":"Lean.Doc.addBuiltinDocRole","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L790-L796"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinCodeSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinCodeSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggester\">CodeSuggester</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation code suggestion provider.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinCodeSuggestion","kind":"def","line":745,"name":"Lean.Doc.addBuiltinCodeSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L745-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.builtinCodeSuggestions\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">builtinCodeSuggestions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggester\">CodeSuggester</a>))</span></span></div></div>","info":{"doc":"Built-in code suggestions, for bootstrapping\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.builtinCodeSuggestions","kind":"opaque","line":739,"name":"Lean.Doc.builtinCodeSuggestions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L739-L743"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggester\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggester</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A provider of suggestions for code elements.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggester","kind":"def","line":734,"name":"Lean.Doc.CodeSuggester","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L734-L737"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.moreInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span>.<span class=\"name\">moreInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"More information to show users ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.moreInfo","kind":"def","line":716,"name":"Lean.Doc.CodeSuggestion.moreInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L716-L716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"The arguments it should receive, as a string. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.args","kind":"def","line":714,"name":"Lean.Doc.CodeSuggestion.args","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L714-L714"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.role\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span>.<span class=\"name\">role</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the role to suggest. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.role","kind":"def","line":712,"name":"Lean.Doc.CodeSuggestion.role","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L712-L712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">role</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args </span><span class=\"fn\">moreInfo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.mk","kind":"ctor","line":710,"name":"Lean.Doc.CodeSuggestion.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L710-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A suggestion about an applicable role ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion","kind":"structure","line":709,"name":"Lean.Doc.CodeSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L709-L716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.builtinDocCommands\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">builtinDocCommands</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocCommandExpander\">DocCommandExpander</a>))</span>)</span></span></div></div>","info":{"doc":"Built-in docstring commands, for bootstrapping.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.builtinDocCommands","kind":"opaque","line":703,"name":"Lean.Doc.builtinDocCommands","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L703-L707"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.docCommandExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">docCommandExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span>)</span></span></div></div>","info":{"doc":"Environment extension for docstring commands ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.docCommandExt","kind":"opaque","line":695,"name":"Lean.Doc.docCommandExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L695-L701"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.builtinDocDirectives\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">builtinDocDirectives</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocDirectiveExpander\">DocDirectiveExpander</a>))</span>)</span></span></div></div>","info":{"doc":"Built-in docstring directives, for bootstrapping.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.builtinDocDirectives","kind":"opaque","line":689,"name":"Lean.Doc.builtinDocDirectives","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L689-L693"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.docDirectiveExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">docDirectiveExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span>)</span></span></div></div>","info":{"doc":"Environment extension for docstring directives ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.docDirectiveExt","kind":"opaque","line":681,"name":"Lean.Doc.docDirectiveExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L681-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.builtinDocCodeBlocks\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">builtinDocCodeBlocks</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocCodeBlockExpander\">DocCodeBlockExpander</a>))</span>)</span></span></div></div>","info":{"doc":"Built-in docstring code blocks, for bootstrapping.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.builtinDocCodeBlocks","kind":"opaque","line":675,"name":"Lean.Doc.builtinDocCodeBlocks","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L675-L679"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.docCodeBlockExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">docCodeBlockExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span>)</span></span></div></div>","info":{"doc":"Environment extension for docstring roles ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.docCodeBlockExt","kind":"opaque","line":667,"name":"Lean.Doc.docCodeBlockExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L667-L673"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.builtinDocRoles\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">builtinDocRoles</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocRoleExpander\">DocRoleExpander</a>))</span>)</span></span></div></div>","info":{"doc":"Built-in docstring roles, for bootstrapping.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.builtinDocRoles","kind":"opaque","line":662,"name":"Lean.Doc.builtinDocRoles","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L662-L665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocCodeBlockExpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocCodeBlockExpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An expander for code blocks in docstrings.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocCodeBlockExpander","kind":"def","line":656,"name":"Lean.Doc.DocCodeBlockExpander","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L656-L660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocDirectiveExpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocDirectiveExpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An expander for directives in docstrings.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocDirectiveExpander","kind":"def","line":650,"name":"Lean.Doc.DocDirectiveExpander","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L650-L654"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocCommandExpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocCommandExpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An expander for commands in docstrings.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocCommandExpander","kind":"def","line":644,"name":"Lean.Doc.DocCommandExpander","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L644-L648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocRoleExpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocRoleExpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An expander for roles in docstrings.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocRoleExpander","kind":"def","line":638,"name":"Lean.Doc.DocRoleExpander","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L638-L642"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.docRoleExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">docRoleExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span>)</span></span></div></div>","info":{"doc":"Environment extension for docstring roles ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.docRoleExt","kind":"opaque","line":630,"name":"Lean.Doc.docRoleExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L630-L636"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.codeBlockSuggestionExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">codeBlockSuggestionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></span></div></div>","info":{"doc":"Environment extension for code block suggestions ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.codeBlockSuggestionExt","kind":"opaque","line":622,"name":"Lean.Doc.codeBlockSuggestionExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L622-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.codeSuggestionExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">codeSuggestionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></span></div></div>","info":{"doc":"Environment extension for code suggestions ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.codeSuggestionExt","kind":"opaque","line":615,"name":"Lean.Doc.codeSuggestionExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L615-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.done\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">done</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Asserts that there are no further arguments to a documentation language extension.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.done","kind":"def","line":503,"name":"Lean.Doc.done","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L503-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.getFlag\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getFlag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">default</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Retrieves a flag from the arguments to a documentation extension. Returns `default` if the flag is\nnot explicit set.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.getFlag","kind":"def","line":484,"name":"Lean.Doc.getFlag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L484-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.getMany\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">Î±</span>)</span></span></div></div>","info":{"doc":"Retrieves a repeated named argument from the arguments to a documentation extension.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.getMany","kind":"def","line":465,"name":"Lean.Doc.getMany","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L465-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.getNamed\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getNamed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">default</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"Retrieves a named argument from the arguments to a documentation extension. Returns `default` if no\nsuch named argument was provided.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.getNamed","kind":"def","line":449,"name":"Lean.Doc.getNamed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L449-L463"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.getPositional\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getPositional</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"Retrieves the next positional argument from the arguments to a documentation extension. Throws\nan error if no positional arguments remain.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.getPositional","kind":"def","line":430,"name":"Lean.Doc.getPositional","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L430-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgMessageSeverity","kind":"instance","line":412,"name":"Lean.Doc.instFromDocArgMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L412-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgBool\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgBool","kind":"instance","line":395,"name":"Lean.Doc.instFromDocArgBool","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L395-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgDataValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgDataValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Lean/Data/KVMap.html#Lean.DataValue\">DataValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgDataValue","kind":"instance","line":381,"name":"Lean.Doc.instFromDocArgDataValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L381-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgNumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgNumLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgNumLit","kind":"instance","line":375,"name":"Lean.Doc.instFromDocArgNumLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L375-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgNat","kind":"instance","line":369,"name":"Lean.Doc.instFromDocArgNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L369-L373"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgStrLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgStrLit","kind":"instance","line":363,"name":"Lean.Doc.instFromDocArgStrLit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L363-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgString\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgString","kind":"instance","line":357,"name":"Lean.Doc.instFromDocArgString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L357-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgIdent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgIdent","kind":"instance","line":351,"name":"Lean.Doc.instFromDocArgIdent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L351-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgWithSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgWithSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">(<a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <span class=\"fn\">Î±</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgWithSyntax","kind":"instance","line":348,"name":"Lean.Doc.instFromDocArgWithSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L348-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Î±</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgOption","kind":"instance","line":345,"name":"Lean.Doc.instFromDocArgOption","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L345-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg.fromDocArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">FromDocArg</span>.<span class=\"name\">fromDocArg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">Î±</span></span></span></div></div>","info":{"doc":"Converts a documentation extension's argument into a Lean value.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg.fromDocArg","kind":"def","line":343,"name":"Lean.Doc.FromDocArg.fromDocArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L343-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">FromDocArg</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fromDocArg</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">Î±</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg.mk","kind":"ctor","line":339,"name":"Lean.Doc.FromDocArg.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L339-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">FromDocArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A canonical way to convert a documentation extension's argument into a Lean value of type `Î±`.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg","kind":"class","line":336,"name":"Lean.Doc.FromDocArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L336-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">WithSyntax</span>.<span class=\"name\">stx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"The syntax that the value was derived from. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.stx","kind":"def","line":334,"name":"Lean.Doc.WithSyntax.stx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L334-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">WithSyntax</span>.<span class=\"name\">val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Î±</span></div></div>","info":{"doc":"The parsed value. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.val","kind":"def","line":332,"name":"Lean.Doc.WithSyntax.val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L332-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">WithSyntax</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.mk","kind":"ctor","line":330,"name":"Lean.Doc.WithSyntax.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L330-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">WithSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A value paired with the syntax it is derived from.\n\nThis can be used to provide hints and code actions.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax","kind":"structure","line":325,"name":"Lean.Doc.WithSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L325-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.ofSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">ofSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`arg_val</span> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></span></span></div></div>","info":{"doc":"Converts the syntax of a documentation argument into a suitable value.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.ofSyntax","kind":"def","line":316,"name":"Lean.Doc.DocArg.ofSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L316-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.syntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">syntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a> â†’ <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Returns the syntax from which a documentation argument was drawn, typically used to report errors.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.syntax","kind":"def","line":308,"name":"Lean.Doc.DocArg.syntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L308-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instToMessageDataDocArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instToMessageDataDocArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instToMessageDataDocArg","kind":"instance","line":302,"name":"Lean.Doc.instToMessageDataDocArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L302-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.str\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></div></div>","info":{"doc":"A string ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.str","kind":"ctor","line":299,"name":"Lean.Doc.DocArg.str","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L299-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></div></div>","info":{"doc":"A number ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.num","kind":"ctor","line":297,"name":"Lean.Doc.DocArg.num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L297-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.ident\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">ident</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></div></div>","info":{"doc":"An identifier ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.ident","kind":"ctor","line":295,"name":"Lean.Doc.DocArg.ident","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L295-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An argument provided to a docstring extension ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg","kind":"inductive","line":293,"name":"Lean.Doc.DocArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L293-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.many\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">many</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"Gadget that indicates that a function's parameter should be treated as a repeated (and thus\noptional) named argument when used in a docstring extension.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.many","kind":"def","line":285,"name":"Lean.Doc.many","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L285-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">flag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">default</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Gadget that indicates that a function's parameter should be treated as a Boolean flag when used in\na docstring extension.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.flag","kind":"def","line":279,"name":"Lean.Doc.flag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L279-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM.exec\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocM</span>.<span class=\"name\">exec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestionMode</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a> := <a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode.interactive\">SuggestionMode.interactive</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"Runs a documentation elaborator in a declaration's context, discarding changes made to the\nenvironment.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocM.exec","kind":"def","line":181,"name":"Lean.Doc.DocM.exec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L181-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM.execForModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocM</span>.<span class=\"name\">execForModule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestionMode</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a> := <a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode.interactive\">SuggestionMode.interactive</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"Runs a documentation elaborator in the module docstring context.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocM.execForModule","kind":"def","line":165,"name":"Lean.Doc.DocM.execForModule","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L165-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instMonadLiftTermElabMDocM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instMonadLiftTermElabMDocM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instMonadLiftTermElabMDocM","kind":"instance","line":130,"name":"Lean.Doc.instMonadLiftTermElabMDocM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L130-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instMonadStateOfStateDocM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instMonadStateOfStateDocM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instMonadStateOfStateDocM","kind":"instance","line":126,"name":"Lean.Doc.instMonadStateOfStateDocM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L126-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instMonadStateOfInternalStateDocM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instMonadStateOfInternalStateDocM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.InternalState\">InternalState</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instMonadStateOfInternalStateDocM","kind":"instance","line":123,"name":"Lean.Doc.instMonadStateOfInternalStateDocM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L123-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The monad in which documentation is elaborated.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocM","kind":"def","line":116,"name":"Lean.Doc.DocM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L116-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.Context.suggestionMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Context</span>.<span class=\"name\">suggestionMode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a></div></div>","info":{"doc":"Whether suggestions should be provided interactively. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.Context.suggestionMode","kind":"def","line":114,"name":"Lean.Doc.Context.suggestionMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestionMode</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.Context.mk","kind":"ctor","line":112,"name":"Lean.Doc.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Context used as a reader in `DocM`. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.Context","kind":"structure","line":111,"name":"Lean.Doc.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L111-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instReprSuggestionMode.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprSuggestionMode</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instReprSuggestionMode.repr","kind":"def","line":109,"name":"Lean.Doc.instReprSuggestionMode.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instReprSuggestionMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instReprSuggestionMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instReprSuggestionMode","kind":"instance","line":109,"name":"Lean.Doc.instReprSuggestionMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instBEqSuggestionMode.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqSuggestionMode</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a> â†’ <a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instBEqSuggestionMode.beq","kind":"def","line":109,"name":"Lean.Doc.instBEqSuggestionMode.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instBEqSuggestionMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instBEqSuggestionMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instBEqSuggestionMode","kind":"instance","line":109,"name":"Lean.Doc.instBEqSuggestionMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode.batch\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">SuggestionMode</span>.<span class=\"name\">batch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a></div></div>","info":{"doc":"The user is not editing the doc comment, and should receive suggestions as summaries.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode.batch","kind":"ctor","line":105,"name":"Lean.Doc.SuggestionMode.batch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L105-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode.interactive\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">SuggestionMode</span>.<span class=\"name\">interactive</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\">SuggestionMode</a></div></div>","info":{"doc":"The user is currently editing the doc comment and can react to suggestions as code actions.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode.interactive","kind":"ctor","line":101,"name":"Lean.Doc.SuggestionMode.interactive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L101-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">SuggestionMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Determines whether docstring suggestions are to be provided as part of editing the string or in a\nlater report.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.SuggestionMode","kind":"inductive","line":96,"name":"Lean.Doc.SuggestionMode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L96-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.options\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">options</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>","info":{"doc":"The options.\n\nThe `MonadLift TermElabM DocM` instance runs the lifted action with these options, so elaboration\ncommands that mutate this state cause it to take effect in subsequent commands.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.options","kind":"def","line":94,"name":"Lean.Doc.State.options","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"The local context.\n\nThe `MonadLift TermElabM DocM` instance runs the lifted action in this context, so elaboration\ncommands that mutate this state cause it to take effect in subsequent commands.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.lctx","kind":"def","line":87,"name":"Lean.Doc.State.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>","info":{"doc":"The set of open declarations presently in force.\n\nThe `MonadLift TermElabM DocM` instance runs the lifted action in a context where these open\ndeclarations are used, so elaboration commands that mutate this state cause it to take effect in\nsubsequent commands.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.openDecls","kind":"def","line":80,"name":"Lean.Doc.State.openDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.scopes\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">scopes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Elab.Command.Scope</a></span></div></div>","info":{"doc":"The command elaboration scope stack.\n\nThese scopes are used when running commands inside of documentation. To keep examples\nself-contained, these scopes are initialized for each doc comment as if it were the beginning\nof a Lean file.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.scopes","kind":"def","line":72,"name":"Lean.Doc.State.scopes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scopes</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Elab.Command.Scope</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">options</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.mk","kind":"ctor","line":64,"name":"Lean.Doc.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The state used by `DocM`.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State","kind":"structure","line":61,"name":"Lean.Doc.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L61-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.InternalState\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">InternalState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The internal state used by docstring elaboration ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.InternalState","kind":"structure","line":56,"name":"Lean.Doc.InternalState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/DocString.lean#L56-L59"}}],"imports":["Std.Data.HashMap","Lean.Elab.Term.TermElabM","Lean.Elab.Command.Scope","Lean.DocString.Syntax","Lean.Meta.Hint","Lean.BuiltinDocAttr"],"instances":[{"className":"BEq","name":"Lean.Doc.instBEqSuggestionMode","typeNames":["Lean.Doc.SuggestionMode"]},{"className":"Repr","name":"Lean.Doc.instReprSuggestionMode","typeNames":["Lean.Doc.SuggestionMode"]},{"className":"MonadStateOf","name":"Lean.Doc.instMonadStateOfInternalStateDocM","typeNames":["Lean.Doc.InternalState","Lean.Doc.DocM"]},{"className":"MonadStateOf","name":"Lean.Doc.instMonadStateOfStateDocM","typeNames":["Lean.Doc.State","Lean.Doc.DocM"]},{"className":"MonadLift","name":"Lean.Doc.instMonadLiftTermElabMDocM","typeNames":["Lean.Elab.Term.TermElabM","Lean.Doc.DocM"]},{"className":"Lean.ToMessageData","name":"Lean.Doc.instToMessageDataDocArg","typeNames":["Lean.Doc.DocArg"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgOption","typeNames":["Option"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgWithSyntax","typeNames":["Lean.Doc.WithSyntax"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgIdent","typeNames":["Lean.Syntax.Ident"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgString","typeNames":["String"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgStrLit","typeNames":["Lean.Syntax.StrLit"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgNat","typeNames":["Nat"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgNumLit","typeNames":["Lean.Syntax.NumLit"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgDataValue","typeNames":["Lean.DataValue"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgBool","typeNames":["Bool"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgMessageSeverity","typeNames":["Lean.MessageSeverity"]}],"name":"Lean.Elab.DocString"}