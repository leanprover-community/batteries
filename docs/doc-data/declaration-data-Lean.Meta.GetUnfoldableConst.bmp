{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.getUnfoldableConstNoEx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnfoldableConstNoEx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span></div></div>","info":{"doc":"As with `getUnfoldableConst?` but return `none` instead of failing if the constant is not found.\n","docLink":"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.getUnfoldableConstNoEx?","kind":"def","line":54,"name":"Lean.Meta.getUnfoldableConstNoEx?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/GetUnfoldableConst.lean#L54-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.getUnfoldableConst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnfoldableConst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span></div></div>","info":{"doc":"Look up a constant name, returning the `ConstantInfo`\nif it is a def/theorem that should be unfolded at the current reducibility settings,\nor `none` otherwise.\n\nThis is part of the implementation of `whnf`.\nExternal users wanting to look up names should be using `Lean.getConstInfo`.\n","docLink":"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.getUnfoldableConst?","kind":"def","line":35,"name":"Lean.Meta.getUnfoldableConst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/GetUnfoldableConst.lean#L35-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.canUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">canUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/GetUnfoldableConst.html#Lean.Meta.canUnfold","kind":"def","line":27,"name":"Lean.Meta.canUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/GetUnfoldableConst.lean#L27-L33"}}],"imports":["Lean.Meta.GlobalInstances"],"instances":[],"name":"Lean.Meta.GetUnfoldableConst"}