{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getActiveMatchEqTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getActiveMatchEqTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a>)</span></span></div></div>","info":{"doc":"Returns activated `match`-declaration equations.\nRecall that in tactics such as `instantiate only [...]`, `match`-declarations are always instantiated.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getActiveMatchEqTheorems","kind":"def","line":1838,"name":"Lean.Meta.Grind.Goal.getActiveMatchEqTheorems","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1838-L1849"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.anchorToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">anchorToString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numDigits</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">anchor</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.anchorToString","kind":"def","line":1835,"name":"Lean.Meta.Grind.anchorToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1835-L1836"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.anchorPrefixToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">anchorPrefixToString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numDigits</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">anchorPrefix</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.anchorPrefixToString","kind":"def","line":1828,"name":"Lean.Meta.Grind.anchorPrefixToString","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1828-L1833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PendingSolverPropagations.propagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PendingSolverPropagations</span>.<span class=\"name\">propagate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PendingSolverPropagations\">PendingSolverPropagations</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PendingSolverPropagations.propagate","kind":"def","line":1815,"name":"Lean.Meta.Grind.PendingSolverPropagations.propagate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1815-L1826"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.mergeTerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">mergeTerms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhsRoot </span><span class=\"fn\">lhsRoot</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PendingSolverPropagations\">PendingSolverPropagations</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.mergeTerms","kind":"def","line":1786,"name":"Lean.Meta.Grind.Solvers.mergeTerms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1786-L1813"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PendingSolverPropagations\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PendingSolverPropagations</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PendingSolverPropagations","kind":"structure","line":1783,"name":"Lean.Meta.Grind.PendingSolverPropagations","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1783-L1784"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.hasTermAtRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">hasTermAtRoot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if the root of `e`s equivalence class is already attached to a term\nof the given solver.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.hasTermAtRoot","kind":"def","line":1767,"name":"Lean.Meta.Grind.SolverExtension.hasTermAtRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1767-L1776"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.getTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">getTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns `some t` if `t` is the solver term for `ext` associated with `e`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.getTerm","kind":"def","line":1757,"name":"Lean.Meta.Grind.SolverExtension.getTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1757-L1765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.markTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">markTerm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.markTerm","kind":"def","line":1734,"name":"Lean.Meta.Grind.SolverExtension.markTerm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1734-L1755"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isSameSolverTerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isSameSolverTerms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isSameSolverTerms","kind":"def","line":1731,"name":"Lean.Meta.Grind.isSameSolverTerms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1731-L1732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.propagateDiseqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">propagateDiseqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given a new disequality `lhs ≠ rhs`, propagates it to relevant theories.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.propagateDiseqs","kind":"def","line":1686,"name":"Lean.Meta.Grind.Solvers.propagateDiseqs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1686-L1703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.mkAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">mkAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.mkAction","kind":"def","line":1674,"name":"Lean.Meta.Grind.Solvers.mkAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1674-L1684"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action.andAlso\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">andAlso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"Sequential conjunction: executes both `x` and `y`.\n\n- Runs `x` and always runs `y` afterward, regardless of whether `x` made progress.\n- It is not applicable only if both `x` and `y` are not applicable.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action.andAlso","kind":"def","line":1661,"name":"Lean.Meta.Grind.Action.andAlso","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1661-L1668"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.mbtc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">mbtc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Invokes model-based theory combination extensions in all registered solvers. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.mbtc","kind":"def","line":1653,"name":"Lean.Meta.Grind.Solvers.mbtc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1653-L1659"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.check","kind":"def","line":1650,"name":"Lean.Meta.Grind.Solvers.check","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1650-L1651"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.check?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">check?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span></div></div>","info":{"doc":"Performs (expensive) satisfiability checks in all registered solvers,\nand returns the solver ids that made progress.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.check?","kind":"def","line":1633,"name":"Lean.Meta.Grind.Solvers.check?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1633-L1648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.checkInvariants\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">checkInvariants</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Checks invariants of all registered solvers. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.checkInvariants","kind":"def","line":1629,"name":"Lean.Meta.Grind.Solvers.checkInvariants","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1629-L1631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.internalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">internalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Internalizes given expression in all registered solvers. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.internalize","kind":"def","line":1625,"name":"Lean.Meta.Grind.Solvers.internalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1625-L1627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.getState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">getState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.getState","kind":"def","line":1622,"name":"Lean.Meta.Grind.SolverExtension.getState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1622-L1623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.getStateCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">getStateCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.getStateCore","kind":"opaque","line":1619,"name":"Lean.Meta.Grind.SolverExtension.getStateCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1619-L1620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.modifyState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">modifyState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.modifyState","kind":"opaque","line":1613,"name":"Lean.Meta.Grind.SolverExtension.modifyState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1613-L1614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedGoalM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedGoalM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedGoalM","kind":"instance","line":1605,"name":"Lean.Meta.Grind.instInhabitedGoalM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1605-L1606"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.mkInitialStates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Solvers</span>.<span class=\"name\">mkInitialStates</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtensionState\">SolverExtensionState</a>)</span></span></div></div>","info":{"doc":"Returns initial state for registered solvers. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Solvers.mkInitialStates","kind":"def","line":1600,"name":"Lean.Meta.Grind.Solvers.mkInitialStates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1600-L1603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.setMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">setMethods</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">internalize</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newEq </span><span class=\"fn\">newDiseq</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mbtc</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a> := <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action.notApplicable\">Action.notApplicable</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">check</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkInv</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Sets methods/handlers for solver extension `ext`.\nSolver extension methods can only be registered during initialization.\nReason: We do not use any synchronization primitive to access `solverExtensionsRef`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.setMethods","kind":"def","line":1578,"name":"Lean.Meta.Grind.SolverExtension.setMethods","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1578-L1598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.registerSolverExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">registerSolverExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInitial</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span>)</span></span></div></div>","info":{"doc":"Registers a new solver extension for `grind`.\nSolver extensions can only be registered during initialization.\nReason: We do not use any synchronization primitive to access `solverExtensionsRef`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.registerSolverExtension","kind":"def","line":1555,"name":"Lean.Meta.Grind.registerSolverExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1555-L1576"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverExtension.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSolverExtension</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverExtension.default","kind":"def","line":1551,"name":"Lean.Meta.Grind.instInhabitedSolverExtension.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1551-L1551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSolverExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverExtension","kind":"instance","line":1551,"name":"Lean.Meta.Grind.instInhabitedSolverExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1551-L1551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.checkInv\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">checkInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.checkInv","kind":"def","line":1550,"name":"Lean.Meta.Grind.SolverExtension.checkInv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1550-L1550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">check</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.check","kind":"def","line":1549,"name":"Lean.Meta.Grind.SolverExtension.check","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1549-L1549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.action\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">action</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.action","kind":"def","line":1548,"name":"Lean.Meta.Grind.SolverExtension.action","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1548-L1548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.mbtc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">mbtc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.mbtc","kind":"def","line":1547,"name":"Lean.Meta.Grind.SolverExtension.mbtc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1547-L1547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.newDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">newDiseq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.newDiseq","kind":"def","line":1546,"name":"Lean.Meta.Grind.SolverExtension.newDiseq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1546-L1546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.newEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">newEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.newEq","kind":"def","line":1545,"name":"Lean.Meta.Grind.SolverExtension.newEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1545-L1545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.internalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">internalize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\">(<span class=\"fn\">parent?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>) → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.internalize","kind":"def","line":1544,"name":"Lean.Meta.Grind.SolverExtension.internalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1544-L1544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.mkInitial\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">mkInitial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">σ</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.mkInitial","kind":"def","line":1543,"name":"Lean.Meta.Grind.SolverExtension.mkInitial","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\">SolverExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension.id","kind":"def","line":1542,"name":"Lean.Meta.Grind.SolverExtension.id","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1542-L1542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Solver extension, can only be generated by `registerSolverExtension` that allocates a unique index\nfor this extension into each goal's extension state's array.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtension","kind":"structure","line":1537,"name":"Lean.Meta.Grind.SolverExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1537-L1551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedAction","kind":"instance","line":1530,"name":"Lean.Meta.Grind.instInhabitedAction","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1530-L1531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action.notApplicable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span>.<span class=\"name\">notApplicable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\">Action</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action.notApplicable","kind":"def","line":1527,"name":"Lean.Meta.Grind.Action.notApplicable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1527-L1528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Action</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Action","kind":"def","line":1524,"name":"Lean.Meta.Grind.Action","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1524-L1525"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionCont\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ActionCont</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionCont","kind":"def","line":1521,"name":"Lean.Meta.Grind.ActionCont","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1521-L1522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult.stuck\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ActionResult</span>.<span class=\"name\">stuck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\">ActionResult</a></div></div>","info":{"doc":"The action could not make further progress.\n`gs` are subgoals that could not be closed. They are used for producing error messages.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult.stuck","kind":"ctor","line":1515,"name":"Lean.Meta.Grind.ActionResult.stuck","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1515-L1519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult.closed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ActionResult</span>.<span class=\"name\">closed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind\">TGrind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\">ActionResult</a></div></div>","info":{"doc":"The goal has been closed, and you can use `seq` to close the goal efficiently.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult.closed","kind":"ctor","line":1511,"name":"Lean.Meta.Grind.ActionResult.closed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1511-L1514"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ActionResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result type for a `grind` Action ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ActionResult","kind":"inductive","line":1509,"name":"Lean.Meta.Grind.ActionResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1509-L1519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">TGrind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.TGrind","kind":"def","line":1507,"name":"Lean.Meta.Grind.TGrind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1507-L1507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.canon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">canon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Canonicalizes nested types, type formers, and instances in `e`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.canon","kind":"opaque","line":1497,"name":"Lean.Meta.Grind.canon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1497-L1499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withoutModifyingState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">withoutModifyingState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Helper function for executing `x` with a fresh `newFacts` and without modifying\nthe goal state.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withoutModifyingState","kind":"def","line":1485,"name":"Lean.Meta.Grind.withoutModifyingState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1485-L1495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addLookaheadCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addLookaheadCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sinfo</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add a new lookahead candidate. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addLookaheadCandidate","kind":"def","line":1479,"name":"Lean.Meta.Grind.addLookaheadCandidate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1479-L1483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getExtTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getExtTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">Ext.ExtTheorem</a>)</span></span></div></div>","info":{"doc":"Returns extensionality theorems for the given type if available.\nIf `Config.ext` is `false`, the result is `#[]`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getExtTheorems","kind":"def","line":1462,"name":"Lean.Meta.Grind.getExtTheorems","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1462-L1477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addSplitCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addSplitCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sinfo</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Inserts `e` into the list of case-split candidates if it was not inserted before. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addSplitCandidate","kind":"def","line":1452,"name":"Lean.Meta.Grind.addSplitCandidate","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1452-L1460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markCaseSplitAsResolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markCaseSplitAsResolved</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Marks `e` as a case-split that does not need to be performed anymore.\nRemark: we currently use this feature to disable `match`-case-splits.\nRemark: we also use this feature to record the case-splits that have already been performed.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markCaseSplitAsResolved","kind":"def","line":1434,"name":"Lean.Meta.Grind.markCaseSplitAsResolved","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1434-L1442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isResolvedCaseSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isResolvedCaseSplit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is a case-split that does not need to be performed anymore. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isResolvedCaseSplit","kind":"def","line":1430,"name":"Lean.Meta.Grind.isResolvedCaseSplit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1430-L1432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isKnownCaseSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isKnownCaseSplit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `s` has been already added to the case-split list at one point.\nRemark: this function returns `true` even if the split has already been resolved\nand is not in the list anymore.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isKnownCaseSplit","kind":"def","line":1422,"name":"Lean.Meta.Grind.isKnownCaseSplit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1422-L1428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getEqcs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getEqcs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span></div></div>","info":{"doc":"Returns all equivalence classes in the current goal. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getEqcs","kind":"def","line":1418,"name":"Lean.Meta.Grind.getEqcs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1418-L1420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqcs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getEqcs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sort</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Returns all equivalence classes in the current goal. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqcs","kind":"def","line":1406,"name":"Lean.Meta.Grind.Goal.getEqcs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1406-L1416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getEqc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sort</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Returns expressions in the given expression equivalence class. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getEqc","kind":"def","line":1402,"name":"Lean.Meta.Grind.getEqc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1402-L1404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getEqc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sort</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns expressions in the given expression equivalence class. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getEqc","kind":"def","line":1383,"name":"Lean.Meta.Grind.Goal.getEqc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1383-L1400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.evalTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">evalTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`grind</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.evalTactic","kind":"def","line":1380,"name":"Lean.Meta.Grind.evalTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1380-L1381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateDown","kind":"def","line":1377,"name":"Lean.Meta.Grind.propagateDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1377-L1378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">propagateUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.propagateUp","kind":"def","line":1374,"name":"Lean.Meta.Grind.propagateUp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1374-L1375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMethods","kind":"def","line":1371,"name":"Lean.Meta.Grind.getMethods","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1371-L1372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.toMethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">toMethodsRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.MethodsRef\">MethodsRef</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.toMethodsRef","kind":"def","line":1365,"name":"Lean.Meta.Grind.Methods.toMethodsRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1365-L1366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedMethods.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedMethods</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedMethods.default","kind":"def","line":1363,"name":"Lean.Meta.Grind.instInhabitedMethods.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1363-L1363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedMethods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedMethods","kind":"instance","line":1363,"name":"Lean.Meta.Grind.instInhabitedMethods","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1363-L1363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.evalTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">evalTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EvalTactic\">EvalTactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.evalTactic","kind":"def","line":1362,"name":"Lean.Meta.Grind.Methods.evalTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1362-L1362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.propagateDown\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">propagateDown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\">Propagator</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.propagateDown","kind":"def","line":1361,"name":"Lean.Meta.Grind.Methods.propagateDown","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1361-L1361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.propagateUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">propagateUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\">Propagator</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.propagateUp","kind":"def","line":1360,"name":"Lean.Meta.Grind.Methods.propagateUp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1360-L1360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">propagateUp </span><span class=\"fn\">propagateDown</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\">Propagator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">evalTactic</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EvalTactic\">EvalTactic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\">Methods</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods.mk","kind":"ctor","line":1359,"name":"Lean.Meta.Grind.Methods.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1359-L1359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Methods</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Methods","kind":"structure","line":1359,"name":"Lean.Meta.Grind.Methods","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1359-L1363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EvalTactic.skip\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EvalTactic</span>.<span class=\"name\">skip</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EvalTactic\">EvalTactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EvalTactic.skip","kind":"def","line":1357,"name":"Lean.Meta.Grind.EvalTactic.skip","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1357-L1357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EvalTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EvalTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EvalTactic","kind":"def","line":1356,"name":"Lean.Meta.Grind.EvalTactic","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1356-L1356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Propagator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Propagator","kind":"def","line":1355,"name":"Lean.Meta.Grind.Propagator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1355-L1355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachEqcRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">forEachEqcRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachEqcRoot","kind":"def","line":1349,"name":"Lean.Meta.Grind.forEachEqcRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1349-L1353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.filterENodes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">filterENodes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.filterENodes","kind":"def","line":1342,"name":"Lean.Meta.Grind.filterENodes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1342-L1347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">forEachENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachENode","kind":"def","line":1337,"name":"Lean.Meta.Grind.forEachENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1337-L1340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.foldEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">foldEqc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Folds using `f` and `init` over the equivalence class containing `e` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.foldEqc","kind":"def","line":1325,"name":"Lean.Meta.Grind.foldEqc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1325-L1335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.traverseEqc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">traverseEqc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Executes `f` to each term in the equivalence class containing `e` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.traverseEqc","kind":"def","line":1316,"name":"Lean.Meta.Grind.traverseEqc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1316-L1323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getExprs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getExprs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Returns all enodes in the goal ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getExprs","kind":"def","line":1312,"name":"Lean.Meta.Grind.getExprs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1312-L1314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.closeGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">closeGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">falseProof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Closes the current goal using the given proof of `False` and\nmarks it as inconsistent if it is not already marked so.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.closeGoal","kind":"def","line":1302,"name":"Lean.Meta.Grind.closeGoal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1302-L1310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mkAuxMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">mkAuxMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Creates an auxiliary metavariable with the same type and context of `goal.mvarId`.\nWe use this function to perform `cases` on the current goal without eagerly assigning it.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mkAuxMVar","kind":"def","line":1291,"name":"Lean.Meta.Grind.Goal.mkAuxMVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1291-L1300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.withContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">withContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"`goal.withContext x` executes `x` using the given metavariable `LocalContext` and `LocalInstances`.\nThe type class resolution cache is flushed when executing `x` if its `LocalInstances` are\ndifferent from the current ones. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.withContext","kind":"def","line":1284,"name":"Lean.Meta.Grind.Goal.withContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1284-L1289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.MVarId.assignFalseProof\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">assignFalseProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">falseProof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Assign the `mvarId` using the given proof of `False`.\nIf type of `mvarId` is not `False`, then use `False.elim`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.MVarId.assignFalseProof","kind":"def","line":1270,"name":"Lean.MVarId.assignFalseProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1270-L1282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsInconsistent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markAsInconsistent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Marks current goal as inconsistent without assigning `mvarId`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markAsInconsistent","kind":"def","line":1264,"name":"Lean.Meta.Grind.markAsInconsistent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1264-L1268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqBoolFalseProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqBoolFalseProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns a proof that `a = Bool.false`.\nIt assumes `a` and `Bool.false` are in the same equivalence class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqBoolFalseProof","kind":"def","line":1257,"name":"Lean.Meta.Grind.mkEqBoolFalseProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1257-L1262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqBoolTrueProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqBoolTrueProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns a proof that `a = Bool.true`.\nIt assumes `a` and `Bool.true` are in the same equivalence class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqBoolTrueProof","kind":"def","line":1250,"name":"Lean.Meta.Grind.mkEqBoolTrueProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1250-L1255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqFalseProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqFalseProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns a proof that `a = False`.\nIt assumes `a` and `False` are in the same equivalence class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqFalseProof","kind":"def","line":1243,"name":"Lean.Meta.Grind.mkEqFalseProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1243-L1248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqTrueProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqTrueProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns a proof that `a = True`.\nIt assumes `a` and `True` are in the same equivalence class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqTrueProof","kind":"def","line":1236,"name":"Lean.Meta.Grind.mkEqTrueProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1236-L1241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqHEqProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqHEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns a proof that `a = b` if they have the same type. Otherwise, returns a proof of `a ≍ b`.\nIt assumes `a` and `b` are in the same equivalence class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqHEqProof","kind":"def","line":1226,"name":"Lean.Meta.Grind.mkEqHEqProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1226-L1234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.processNewFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">processNewFacts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.processNewFacts","kind":"opaque","line":1223,"name":"Lean.Meta.Grind.processNewFacts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1223-L1224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.internalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">internalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.internalize","kind":"opaque","line":1219,"name":"Lean.Meta.Grind.internalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1219-L1220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkHEqProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkHEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns a proof that `a ≍ b`.\nIt assumes `a` and `b` are in the same equivalence class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkHEqProof","kind":"opaque","line":1210,"name":"Lean.Meta.Grind.mkHEqProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1210-L1216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns a proof that `a = b`.\nIt assumes `a` and `b` are in the same equivalence class, and have the same type.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkEqProof","kind":"opaque","line":1202,"name":"Lean.Meta.Grind.mkEqProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1202-L1208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isInconsistent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isInconsistent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if the goal is inconsistent. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isInconsistent","kind":"def","line":1198,"name":"Lean.Meta.Grind.isInconsistent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1198-L1200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getCongrRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getCongrRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the root of the congruence class containing `e`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getCongrRoot","kind":"opaque","line":1192,"name":"Lean.Meta.Grind.getCongrRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1192-L1196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isCongrRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isCongrRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` is `e` is the root of its congruence class. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isCongrRoot","kind":"def","line":1188,"name":"Lean.Meta.Grind.isCongrRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1188-L1190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">forEachDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"For each equality `b = c` in `parents`, executes `k b c` IF\n- `b = c` is equal to `False`, and\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.forEachDiseq","kind":"def","line":1170,"name":"Lean.Meta.Grind.forEachDiseq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1170-L1186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.hasType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">hasType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">α</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if type of `t` is definitionally equal to `α`\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.hasType","kind":"def","line":1164,"name":"Lean.Meta.Grind.hasType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1164-L1168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.setENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">setENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.setENode","kind":"def","line":1158,"name":"Lean.Meta.Grind.setENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1158-L1162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Creates an `ENode` for `e` if one does not already exist.\nThis method assumes `e` has been hash-consed.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkENode","kind":"def","line":1148,"name":"Lean.Meta.Grind.mkENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1148-L1156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkENodeCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkENodeCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">interpreted </span><span class=\"fn\">ctor</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkENodeCore","kind":"def","line":1131,"name":"Lean.Meta.Grind.mkENodeCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1131-L1146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.copyParentsTo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">copyParentsTo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Copy `parents` to the parents of `root`.\n`root` must be the root of its equivalence class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.copyParentsTo","kind":"def","line":1121,"name":"Lean.Meta.Grind.copyParentsTo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1121-L1129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.resetParentsOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">resetParentsOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Removes the entry `e ↦ parents` from the parent map.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.resetParentsOf","kind":"def","line":1115,"name":"Lean.Meta.Grind.resetParentsOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1115-L1119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getParents\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getParents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\">ParentSet</a></span></div></div>","info":{"doc":"Returns the set of expressions `e` is a child of, or an expression in\n`e`s equivalence class is a child of.\nThe information is only up to date if `e` is the root (aka canonical representative) of the equivalence class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getParents","kind":"def","line":1106,"name":"Lean.Meta.Grind.getParents","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1106-L1113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.registerParent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">registerParent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parent </span><span class=\"fn\">child</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Records that `parent` is a parent of `child`. This function actually stores the\ninformation in the root (aka canonical representative) of `child`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.registerParent","kind":"def","line":1097,"name":"Lean.Meta.Grind.registerParent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1097-L1104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqBoolFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqBoolFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Pushes `a = Bool.false` with `proof` to `newEqs`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqBoolFalse","kind":"def","line":1093,"name":"Lean.Meta.Grind.pushEqBoolFalse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1093-L1095"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqBoolTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqBoolTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Pushes `a = Bool.true` with `proof` to `newEqs`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqBoolTrue","kind":"def","line":1089,"name":"Lean.Meta.Grind.pushEqBoolTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1089-L1091"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Pushes `a = False` with `proof` to `newEqs`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqFalse","kind":"def","line":1085,"name":"Lean.Meta.Grind.pushEqFalse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1085-L1087"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Pushes `a = True` with `proof` to `newEqs`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqTrue","kind":"def","line":1081,"name":"Lean.Meta.Grind.pushEqTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1081-L1083"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushHEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushHEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Pushes `lhs ≍ rhs` with `proof` to `newEqs`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushHEq","kind":"def","line":1077,"name":"Lean.Meta.Grind.pushHEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1077-L1079"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Pushes `lhs = rhs` with `proof` to `newEqs`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEq","kind":"def","line":1073,"name":"Lean.Meta.Grind.pushEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1073-L1075"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqHEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqHEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqHEq","kind":"def","line":1067,"name":"Lean.Meta.Grind.pushEqHEq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1067-L1071"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.hasSameType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">hasSameType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if `a` and `b` have the same type. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.hasSameType","kind":"def","line":1063,"name":"Lean.Meta.Grind.hasSameType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1063-L1065"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">pushEqCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isHEq</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If `isHEq` is `false`, it pushes `lhs = rhs` with `proof` to `newEqs`.\nOtherwise, it pushes `lhs ≍ rhs`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.pushEqCore","kind":"def","line":1044,"name":"Lean.Meta.Grind.pushEqCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1044-L1061"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getTarget?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getTarget?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getTarget?","kind":"def","line":1041,"name":"Lean.Meta.Grind.getTarget?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1041-L1042"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getTarget?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getTarget?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getTarget?","kind":"def","line":1037,"name":"Lean.Meta.Grind.Goal.getTarget?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1037-L1039"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.alreadyInternalized\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">alreadyInternalized</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` has already been internalized. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.alreadyInternalized","kind":"def","line":1033,"name":"Lean.Meta.Grind.alreadyInternalized","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1033-L1035"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the root element in the equivalence class of `e`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNext","kind":"def","line":1029,"name":"Lean.Meta.Grind.getNext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1029-L1031"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getNext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the next element in the equivalence class of `e`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getNext","kind":"def","line":1025,"name":"Lean.Meta.Grind.Goal.getNext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1025-L1027"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getNext?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getNext?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the next element in the equivalence class of `e`\nif `e` has been internalized in the given goal.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getNext?","kind":"def","line":1017,"name":"Lean.Meta.Grind.Goal.getNext?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1017-L1023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRootENode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRootENode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span></div></div>","info":{"doc":"Returns the root enode in the equivalence class of `e` if it is in an equivalence class. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRootENode?","kind":"def","line":1012,"name":"Lean.Meta.Grind.getRootENode?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1012-L1015"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRootENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRootENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>","info":{"doc":"Returns the root enode in the equivalence class of `e`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRootENode","kind":"def","line":1008,"name":"Lean.Meta.Grind.getRootENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1008-L1010"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the root element in the equivalence class of `e`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRoot","kind":"def","line":1004,"name":"Lean.Meta.Grind.getRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1004-L1006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the root element in the equivalence class of `e`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getRoot","kind":"def","line":1000,"name":"Lean.Meta.Grind.Goal.getRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L1000-L1002"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRoot?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getRoot?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Returns the root element in the equivalence class of `e` IF `e` has been internalized. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getRoot?","kind":"def","line":996,"name":"Lean.Meta.Grind.getRoot?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L996-L998"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getRoot?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getRoot?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the root element in the equivalence class of `e` IF `e` has been internalized. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getRoot?","kind":"def","line":991,"name":"Lean.Meta.Grind.Goal.getRoot?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L991-L994"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if the root of its equivalence class. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isRoot","kind":"def","line":986,"name":"Lean.Meta.Grind.isRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L986-L989"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `a` and `b` are in the same equivalence class. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqv","kind":"def","line":977,"name":"Lean.Meta.Grind.isEqv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L977-L984"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqBoolFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqBoolFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is in the equivalence class of `Bool.false`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqBoolFalse","kind":"def","line":973,"name":"Lean.Meta.Grind.isEqBoolFalse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L973-L975"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqBoolTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqBoolTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is in the equivalence class of `Bool.true`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqBoolTrue","kind":"def","line":969,"name":"Lean.Meta.Grind.isEqBoolTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L969-L971"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is in the equivalence class of `False`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqFalse","kind":"def","line":965,"name":"Lean.Meta.Grind.isEqFalse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L965-L967"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isEqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is in the equivalence class of `True`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isEqTrue","kind":"def","line":961,"name":"Lean.Meta.Grind.isEqTrue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L961-L963"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getGeneration\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getGeneration</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Returns the generation of the given term. Is assumes it has been internalized ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getGeneration","kind":"def","line":957,"name":"Lean.Meta.Grind.getGeneration","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L957-L959"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getGeneration\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getGeneration</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getGeneration","kind":"def","line":951,"name":"Lean.Meta.Grind.Goal.getGeneration","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L951-L955"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>","info":{"doc":"Returns node associated with `e`. It assumes `e` has already been internalized. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getENode","kind":"def","line":947,"name":"Lean.Meta.Grind.getENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L947-L949"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getENode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>","info":{"doc":"Returns node associated with `e`. It assumes `e` has already been internalized. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getENode","kind":"def","line":941,"name":"Lean.Meta.Grind.Goal.getENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L941-L945"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.throwNonInternalizedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">throwNonInternalizedExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.throwNonInternalizedExpr","kind":"def","line":938,"name":"Lean.Meta.Grind.throwNonInternalizedExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L938-L939"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getENode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getENode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span></div></div>","info":{"doc":"Returns `some n` if `e` has already been \"internalized\" into the\nOtherwise, returns `none`s.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getENode?","kind":"def","line":934,"name":"Lean.Meta.Grind.getENode?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L934-L936"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getENode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">getENode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>","info":{"doc":"Returns `some n` if `e` has already been \"internalized\" into the\nOtherwise, returns `none`s.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.getENode?","kind":"def","line":927,"name":"Lean.Meta.Grind.Goal.getENode?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L927-L932"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxEmatchExceeded\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">checkMaxEmatchExceeded</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if the maximum number of E-matching rounds has been reached. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxEmatchExceeded","kind":"def","line":923,"name":"Lean.Meta.Grind.checkMaxEmatchExceeded","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L923-L925"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxCaseSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">checkMaxCaseSplit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if the maximum number of case-splits has been reached. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxCaseSplit","kind":"def","line":919,"name":"Lean.Meta.Grind.checkMaxCaseSplit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L919-L921"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxInstancesExceeded\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">checkMaxInstancesExceeded</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if the maximum number of instances has been reached. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.checkMaxInstancesExceeded","kind":"def","line":915,"name":"Lean.Meta.Grind.checkMaxInstancesExceeded","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L915-L917"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addTheoremInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addTheoremInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof </span><span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a new theorem instance produced using E-matching. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addTheoremInstance","kind":"def","line":909,"name":"Lean.Meta.Grind.addTheoremInstance","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L909-L913"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNumTheoremInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getNumTheoremInstances</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Returns the number of theorem instances generated so far. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNumTheoremInstances","kind":"def","line":905,"name":"Lean.Meta.Grind.getNumTheoremInstances","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L905-L907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addNewRawFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addNewRawFact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof </span><span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a new fact `prop` with proof `proof` to the queue for preprocessing and the assertion. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.addNewRawFact","kind":"def","line":896,"name":"Lean.Meta.Grind.addNewRawFact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L896-L903"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markTheoremInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">markTheoremInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"A helper function used to mark a theorem instance found by the E-matching module.\nIt returns `true` if it is a new instance and `false` otherwise.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.markTheoremInstance","kind":"def","line":885,"name":"Lean.Meta.Grind.markTheoremInstance","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L885-L894"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.«doElemTrace_goal[_]__»\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">«doElemTrace_goal[_]__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Macro similar to `trace[...]`, but it includes the trace message `trace[grind] \"working on <current goal>\"`\nif the tag has changed since the last trace message.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.«doElemTrace_goal[_]__»","kind":"def","line":877,"name":"Lean.Meta.Grind.«doElemTrace_goal[_]__»","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L877-L883"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.updateLastTag\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">updateLastTag</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.updateLastTag","kind":"def","line":866,"name":"Lean.Meta.Grind.updateLastTag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L866-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GoalM</span>.<span class=\"name\">run'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.run'","kind":"def","line":863,"name":"Lean.Meta.Grind.GoalM.run'","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L863-L864"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GoalM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.run","kind":"def","line":860,"name":"Lean.Meta.Grind.GoalM.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L860-L861"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.runCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GoalM</span>.<span class=\"name\">runCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM.runCore","kind":"def","line":857,"name":"Lean.Meta.Grind.GoalM.runCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L857-L858"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GoalM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM","kind":"def","line":855,"name":"Lean.Meta.Grind.GoalM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L855-L855"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.admit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">admit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.admit","kind":"def","line":852,"name":"Lean.Meta.Grind.Goal.admit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L852-L853"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.isCongruent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">isCongruent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.isCongruent","kind":"def","line":849,"name":"Lean.Meta.Grind.Goal.isCongruent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L849-L850"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.hasSameRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">hasSameRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.hasSameRoot","kind":"def","line":846,"name":"Lean.Meta.Grind.Goal.hasSameRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L846-L847"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedGoal.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedGoal</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedGoal.default","kind":"def","line":844,"name":"Lean.Meta.Grind.instInhabitedGoal.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L844-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedGoal","kind":"instance","line":844,"name":"Lean.Meta.Grind.instInhabitedGoal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L844-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.sstates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">sstates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtensionState\">SolverExtensionState</a></span></div></div>","info":{"doc":"Solver states. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.sstates","kind":"def","line":843,"name":"Lean.Meta.Grind.Goal.sstates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L843-L843"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.clean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">clean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">Clean.State</a></div></div>","info":{"doc":"State of the clean name generator. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.clean","kind":"def","line":841,"name":"Lean.Meta.Grind.Goal.clean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L841-L841"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.split\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">Split.State</a></div></div>","info":{"doc":"State of the case-splitting module. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.split","kind":"def","line":839,"name":"Lean.Meta.Grind.Goal.split","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L839-L839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.inj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">inj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State\">Injective.State</a></div></div>","info":{"doc":"State of the injective function procedure. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.inj","kind":"def","line":837,"name":"Lean.Meta.Grind.Goal.inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L837-L837"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.ematch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">ematch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">EMatch.State</a></div></div>","info":{"doc":"State of the E-matching module. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.ematch","kind":"def","line":835,"name":"Lean.Meta.Grind.Goal.ematch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L835-L835"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.extThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">extThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">Ext.ExtTheorem</a>)</span></span></div></div>","info":{"doc":"Cached extensionality theorems for types. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.extThms","kind":"def","line":833,"name":"Lean.Meta.Grind.Goal.extThms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.facts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">facts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Asserted facts ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.facts","kind":"def","line":831,"name":"Lean.Meta.Grind.Goal.facts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L831-L831"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.newRawFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">newRawFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></span></div></div>","info":{"doc":"new facts to be preprocessed and then asserted. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.newRawFacts","kind":"def","line":829,"name":"Lean.Meta.Grind.Goal.newRawFacts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L829-L829"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Next unique index for creating ENodes ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.nextIdx","kind":"def","line":827,"name":"Lean.Meta.Grind.Goal.nextIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L827-L827"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.inconsistent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">inconsistent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`inconsistent := true` if `ENode`s for `True` and `False` are in the same equivalence class. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.inconsistent","kind":"def","line":825,"name":"Lean.Meta.Grind.Goal.inconsistent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L825-L825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.newFacts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">newFacts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a></span></div></div>","info":{"doc":"Equations and propositions to be processed. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.newFacts","kind":"def","line":823,"name":"Lean.Meta.Grind.Goal.newFacts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L823-L823"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.appMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">appMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">HeadIndex</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"A mapping from each function application index (`HeadIndex`) to a list of applications with that index.\nRecall that the `HeadIndex` for a constant is its constant name, and for a free variable,\nit is its unique id.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.appMap","kind":"def","line":821,"name":"Lean.Meta.Grind.Goal.appMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L821-L821"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.congrTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">congrTable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTable\">CongrTable</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.enodeMap\">enodeMap</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.congrTable","kind":"def","line":815,"name":"Lean.Meta.Grind.Goal.congrTable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L815-L815"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.parents\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">parents</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentMap\">ParentMap</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.parents","kind":"def","line":814,"name":"Lean.Meta.Grind.Goal.parents","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L814-L814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.exprs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">exprs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.exprs","kind":"def","line":813,"name":"Lean.Meta.Grind.Goal.exprs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L813-L813"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.enodeMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">enodeMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.enodeMap","kind":"def","line":812,"name":"Lean.Meta.Grind.Goal.enodeMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L812-L812"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.canon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">canon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">Canon.State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.canon","kind":"def","line":811,"name":"Lean.Meta.Grind.Goal.canon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L811-L811"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mvarId","kind":"def","line":810,"name":"Lean.Meta.Grind.Goal.mvarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L810-L810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canon</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">Canon.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enodeMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parents</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentMap\">ParentMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congrTable</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTable\">CongrTable</a> <span class=\"fn\">enodeMap</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">appMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">HeadIndex</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newFacts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inconsistent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newRawFacts</span> : <span class=\"fn\"><a href=\"./Init/Data/Queue.html#Std.Queue\">Std.Queue</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extThms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">Ext.ExtTheorem</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ematch</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">EMatch.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inj</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State\">Injective.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">split</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">Split.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clean</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">Clean.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sstates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtensionState\">SolverExtensionState</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal.mk","kind":"ctor","line":809,"name":"Lean.Meta.Grind.Goal.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L809-L809"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Goal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The `grind` goal. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal","kind":"structure","line":808,"name":"Lean.Meta.Grind.Goal","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L808-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Injective</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.instInhabitedState","kind":"instance","line":806,"name":"Lean.Meta.Grind.Injective.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L806-L806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Injective</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.instInhabitedState.default","kind":"def","line":806,"name":"Lean.Meta.Grind.Injective.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L806-L806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State.fns\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Injective</span>.<span class=\"name\">State</span>.<span class=\"name\">fns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo\">InjectiveInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State.fns","kind":"def","line":805,"name":"Lean.Meta.Grind.Injective.State.fns","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L805-L805"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State.thms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Injective</span>.<span class=\"name\">State</span>.<span class=\"name\">thms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Injective.html#Lean.Meta.Grind.InjectiveTheorems\">InjectiveTheorems</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State.thms","kind":"def","line":804,"name":"Lean.Meta.Grind.Injective.State.thms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L804-L804"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Injective</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thms</span> : <a href=\"./Lean/Meta/Tactic/Grind/Injective.html#Lean.Meta.Grind.InjectiveTheorems\">InjectiveTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fns</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo\">InjectiveInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State.mk","kind":"ctor","line":803,"name":"Lean.Meta.Grind.Injective.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L803-L803"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Injective</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for injective theorem support. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Injective.State","kind":"structure","line":802,"name":"Lean.Meta.Grind.Injective.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L802-L806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedInjectiveInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedInjectiveInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo\">InjectiveInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedInjectiveInfo","kind":"instance","line":800,"name":"Lean.Meta.Grind.instInhabitedInjectiveInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L800-L800"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedInjectiveInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedInjectiveInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo\">InjectiveInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedInjectiveInfo.default","kind":"def","line":800,"name":"Lean.Meta.Grind.instInhabitedInjectiveInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L800-L800"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo.heq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">InjectiveInfo</span>.<span class=\"name\">heq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo\">InjectiveInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo.heq","kind":"def","line":799,"name":"Lean.Meta.Grind.InjectiveInfo.heq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L799-L799"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo.inv\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">InjectiveInfo</span>.<span class=\"name\">inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo\">InjectiveInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo.inv","kind":"def","line":798,"name":"Lean.Meta.Grind.InjectiveInfo.inv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L798-L798"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">InjectiveInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv </span><span class=\"fn\">heq</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo\">InjectiveInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo.mk","kind":"ctor","line":797,"name":"Lean.Meta.Grind.InjectiveInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L797-L797"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">InjectiveInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.InjectiveInfo","kind":"structure","line":797,"name":"Lean.Meta.Grind.InjectiveInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L797-L800"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">UnitLike</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.instInhabitedState.default","kind":"def","line":795,"name":"Lean.Meta.Grind.UnitLike.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L795-L795"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">UnitLike</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.instInhabitedState","kind":"instance","line":795,"name":"Lean.Meta.Grind.UnitLike.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L795-L795"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">UnitLike</span>.<span class=\"name\">State</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State.map","kind":"def","line":794,"name":"Lean.Meta.Grind.UnitLike.State.map","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L794-L794"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">UnitLike</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State.mk","kind":"ctor","line":793,"name":"Lean.Meta.Grind.UnitLike.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L793-L793"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">UnitLike</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Cache for `Unit`-like types. It maps the type to its element.\nWe say a type is `Unit`-like if it is a subsingleton and is inhabited.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.UnitLike.State","kind":"structure","line":789,"name":"Lean.Meta.Grind.UnitLike.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L789-L795"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.instInhabitedState","kind":"instance","line":787,"name":"Lean.Meta.Grind.Clean.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L787-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.instInhabitedState.default","kind":"def","line":787,"name":"Lean.Meta.Grind.Clean.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L787-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">State</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.next","kind":"def","line":786,"name":"Lean.Meta.Grind.Clean.State.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L786-L786"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">State</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.used","kind":"def","line":785,"name":"Lean.Meta.Grind.Clean.State.used","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L785-L785"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State.mk","kind":"ctor","line":784,"name":"Lean.Meta.Grind.Clean.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L784-L784"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Clean</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Clean name generator. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Clean.State","kind":"structure","line":783,"name":"Lean.Meta.Grind.Clean.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L783-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.instInhabitedState.default","kind":"def","line":781,"name":"Lean.Meta.Grind.Split.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L781-L781"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.instInhabitedState","kind":"instance","line":781,"name":"Lean.Meta.Grind.Split.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L781-L781"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.argsAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">argsAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span></div></div>","info":{"doc":"Mapping from pairs `(f, i)` to a list of arguments.\nEach argument occurs as the `i`-th of an `f`-application.\nWe use this information to add splits/lookaheads for\ntriggering extensionality theorems and model-based theory combination.\nSee `addSplitCandidatesForExt`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.argsAt","kind":"def","line":780,"name":"Lean.Meta.Grind.Split.State.argsAt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L780-L780"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.argPosMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">argPosMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"A mapping `(a, b) ↦ is` s.t. for each `SplitInfo.arg a b i eq`\nin `candidates` or `lookaheads` we have `i ∈ is`.\nWe use this information to decide whether the split/lookahead is \"ready\"\nto be tried or not.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.argPosMap","kind":"def","line":772,"name":"Lean.Meta.Grind.Split.State.argPosMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L772-L772"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.lookaheads\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">lookaheads</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>","info":{"doc":"Lookahead \"case-splits\". ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.lookaheads","kind":"def","line":765,"name":"Lean.Meta.Grind.Split.State.lookaheads","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L765-L765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></span></div></div>","info":{"doc":"Sequence of cases steps that generated this goal. We only use this information for diagnostics.\nRemark: `casesTrace.length ≥ numSplits` because we don't increase the counter for `cases`\napplications that generated only 1 subgoal.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.trace","kind":"def","line":763,"name":"Lean.Meta.Grind.Split.State.trace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L763-L763"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.resolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">resolved</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a></span></div></div>","info":{"doc":"Case-splits that have already been performed, or that do not have to be performed anymore. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.resolved","kind":"def","line":757,"name":"Lean.Meta.Grind.Split.State.resolved","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L757-L757"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.added\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">added</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>","info":{"doc":"Case-splits that have been inserted at `candidates` at some point. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.added","kind":"def","line":755,"name":"Lean.Meta.Grind.Split.State.added","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L755-L755"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.candidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">candidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>","info":{"doc":"Case-split candidates. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.candidates","kind":"def","line":753,"name":"Lean.Meta.Grind.Split.State.candidates","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L753-L753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.casesTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">casesTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Cases.html#Lean.Meta.Grind.CasesTypes\">CasesTypes</a></div></div>","info":{"doc":"Inductive datatypes marked for case-splitting ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.casesTypes","kind":"def","line":751,"name":"Lean.Meta.Grind.Split.State.casesTypes","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L751-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Number of splits performed to get to this goal. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.num","kind":"def","line":749,"name":"Lean.Meta.Grind.Split.State.num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L749-L749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">casesTypes</span> : <a href=\"./Lean/Meta/Tactic/Grind/Cases.html#Lean.Meta.Grind.CasesTypes\">CasesTypes</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">candidates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">added</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resolved</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trace</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lookaheads</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argPosMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsAt</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State.mk","kind":"ctor","line":747,"name":"Lean.Meta.Grind.Split.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L747-L747"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Split</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Case splitting related fields for the `grind` goal. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Split.State","kind":"structure","line":746,"name":"Lean.Meta.Grind.Split.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L746-L781"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.app\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span>.<span class=\"name\">app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.app","kind":"def","line":744,"name":"Lean.Meta.Grind.SplitArg.app","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L744-L744"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.type","kind":"def","line":743,"name":"Lean.Meta.Grind.SplitArg.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L743-L743"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.arg","kind":"def","line":742,"name":"Lean.Meta.Grind.SplitArg.arg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L742-L742"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg </span><span class=\"fn\">type </span><span class=\"fn\">app</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\">SplitArg</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg.mk","kind":"ctor","line":741,"name":"Lean.Meta.Grind.SplitArg.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L741-L741"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Argument `arg : type` of an application `app` in `SplitInfo`. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitArg","kind":"structure","line":740,"name":"Lean.Meta.Grind.SplitArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L740-L744"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.lt","kind":"def","line":732,"name":"Lean.Meta.Grind.SplitInfo.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L732-L738"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.source\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">source</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.source","kind":"def","line":727,"name":"Lean.Meta.Grind.SplitInfo.source","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L727-L730"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.getExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">getExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.getExpr","kind":"def","line":722,"name":"Lean.Meta.Grind.SplitInfo.getExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L722-L725"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqSplitInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqSplitInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqSplitInfo","kind":"instance","line":719,"name":"Lean.Meta.Grind.instBEqSplitInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L719-L720"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.beq","kind":"def","line":713,"name":"Lean.Meta.Grind.SplitInfo.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L713-L717"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableSplitInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableSplitInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableSplitInfo","kind":"instance","line":710,"name":"Lean.Meta.Grind.instHashableSplitInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L710-L711"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.hash","kind":"def","line":705,"name":"Lean.Meta.Grind.SplitInfo.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L705-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSplitInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitInfo","kind":"instance","line":703,"name":"Lean.Meta.Grind.instInhabitedSplitInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L703-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSplitInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitInfo.default","kind":"def","line":703,"name":"Lean.Meta.Grind.instInhabitedSplitInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L703-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></div></div>","info":{"doc":"Given applications `a` and `b`, case-split on whether the corresponding\n`i`-th arguments are equal or not. The split is only performed if all other\narguments are already known to be equal or are also tagged as split candidates.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.arg","kind":"ctor","line":697,"name":"Lean.Meta.Grind.SplitInfo.arg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L697-L702"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.imp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">imp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Lean/Expr.html#Lean.Expr.isForall\">isForall</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></div></div>","info":{"doc":"`e` is an implication and we want to split on its antecedent. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.imp","kind":"ctor","line":695,"name":"Lean.Meta.Grind.SplitInfo.imp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L695-L696"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\">SplitInfo</a></div></div>","info":{"doc":"Term `e` may be an inductive predicate, `match`-expression, `if`-expression, implication, etc.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo.default","kind":"ctor","line":691,"name":"Lean.Meta.Grind.SplitInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L691-L694"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Case-split information. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitInfo","kind":"inductive","line":689,"name":"Lean.Meta.Grind.SplitInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L689-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.instInhabitedState.default","kind":"def","line":687,"name":"Lean.Meta.Grind.EMatch.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L687-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.instInhabitedState","kind":"instance","line":687,"name":"Lean.Meta.Grind.EMatch.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L687-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.matchEqNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">matchEqNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"`match` auxiliary functions whose equations have already been created and activated. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.matchEqNames","kind":"def","line":686,"name":"Lean.Meta.Grind.EMatch.State.matchEqNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L686-L686"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.nextThmIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">nextThmIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Next local E-match theorem idx. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.nextThmIdx","kind":"def","line":684,"name":"Lean.Meta.Grind.EMatch.State.nextThmIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L684-L684"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.preInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">preInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstanceSet\">PreInstanceSet</a></div></div>","info":{"doc":"(pre-)instances found so far. It includes instances that failed to be instantiated. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.preInstances","kind":"def","line":682,"name":"Lean.Meta.Grind.EMatch.State.preInstances","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L682-L682"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Number of E-matching rounds performed in this goal since the last case-split. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.num","kind":"def","line":680,"name":"Lean.Meta.Grind.EMatch.State.num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L680-L680"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.numInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">numInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Number of theorem instances generated so far ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.numInstances","kind":"def","line":678,"name":"Lean.Meta.Grind.EMatch.State.numInstances","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L678-L678"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.newThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">newThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a></span></div></div>","info":{"doc":"Active theorems that we have not performed any round of ematching yet. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.newThms","kind":"def","line":676,"name":"Lean.Meta.Grind.EMatch.State.newThms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L676-L676"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.thms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">thms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a></span></div></div>","info":{"doc":"Active theorems that we have performed ematching at least once. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.thms","kind":"def","line":674,"name":"Lean.Meta.Grind.EMatch.State.thms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L674-L674"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.gmt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">gmt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Goal modification time. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.gmt","kind":"def","line":672,"name":"Lean.Meta.Grind.EMatch.State.gmt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L672-L672"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.thmMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">thmMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorems\">EMatchTheorems</a></div></div>","info":{"doc":"Inactive global theorems. As we internalize terms, we activate theorems as we find their symbols.\nLocal theorem provided by users are added directly into `newThms`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.thmMap","kind":"def","line":670,"name":"Lean.Meta.Grind.EMatch.State.thmMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L670-L670"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thmMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorems\">EMatchTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gmt</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thms </span><span class=\"fn\">newThms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numInstances </span><span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preInstances</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstanceSet\">PreInstanceSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextThmIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchEqNames</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State.mk","kind":"ctor","line":665,"name":"Lean.Meta.Grind.EMatch.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L665-L665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatch</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"E-matching related fields for the `grind` goal. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatch.State","kind":"structure","line":664,"name":"Lean.Meta.Grind.EMatch.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L664-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCaseTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedCaseTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCaseTrace","kind":"instance","line":662,"name":"Lean.Meta.Grind.instInhabitedCaseTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L662-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCaseTrace.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedCaseTrace</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCaseTrace.default","kind":"def","line":662,"name":"Lean.Meta.Grind.instInhabitedCaseTrace.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L662-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.source\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">source</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.source","kind":"def","line":661,"name":"Lean.Meta.Grind.CaseTrace.source","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L661-L661"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.num","kind":"def","line":660,"name":"Lean.Meta.Grind.CaseTrace.num","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L660-L660"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.i\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">i</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.i","kind":"def","line":659,"name":"Lean.Meta.Grind.CaseTrace.i","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L659-L659"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.expr","kind":"def","line":658,"name":"Lean.Meta.Grind.CaseTrace.expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L658-L658"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\">CaseTrace</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace.mk","kind":"ctor","line":657,"name":"Lean.Meta.Grind.CaseTrace.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L657-L657"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CaseTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Trace information for a case split. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CaseTrace","kind":"structure","line":656,"name":"Lean.Meta.Grind.CaseTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L656-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.instInhabitedState","kind":"instance","line":654,"name":"Lean.Meta.Grind.Canon.instInhabitedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L654-L654"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.instInhabitedState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">instInhabitedState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.instInhabitedState.default","kind":"def","line":654,"name":"Lean.Meta.Grind.Canon.instInhabitedState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L654-L654"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.canonArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">canonArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.canonArg","kind":"def","line":653,"name":"Lean.Meta.Grind.Canon.State.canonArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L653-L653"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.proofCanon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">proofCanon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.proofCanon","kind":"def","line":652,"name":"Lean.Meta.Grind.Canon.State.proofCanon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L652-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.canon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">canon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.canon","kind":"def","line":651,"name":"Lean.Meta.Grind.Canon.State.canon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L651-L651"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.argMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">argMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.argMap","kind":"def","line":650,"name":"Lean.Meta.Grind.Canon.State.argMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L650-L650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canon </span><span class=\"fn\">proofCanon</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonArg</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State.mk","kind":"ctor","line":649,"name":"Lean.Meta.Grind.Canon.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L649-L649"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Canon</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Canonicalizer state. See `Canon.lean` for additional details. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Canon.State","kind":"structure","line":648,"name":"Lean.Meta.Grind.Canon.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L648-L654"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCanonArgKey.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableCanonArgKey</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCanonArgKey.hash","kind":"def","line":646,"name":"Lean.Meta.Grind.instHashableCanonArgKey.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L646-L646"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCanonArgKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableCanonArgKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCanonArgKey","kind":"instance","line":646,"name":"Lean.Meta.Grind.instHashableCanonArgKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L646-L646"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCanonArgKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqCanonArgKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCanonArgKey","kind":"instance","line":646,"name":"Lean.Meta.Grind.instBEqCanonArgKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L646-L646"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCanonArgKey.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqCanonArgKey</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a> → <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCanonArgKey.beq","kind":"def","line":646,"name":"Lean.Meta.Grind.instBEqCanonArgKey.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L646-L646"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey.arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CanonArgKey</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey.arg","kind":"def","line":645,"name":"Lean.Meta.Grind.CanonArgKey.arg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L645-L645"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey.i\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CanonArgKey</span>.<span class=\"name\">i</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey.i","kind":"def","line":644,"name":"Lean.Meta.Grind.CanonArgKey.i","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L644-L644"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey.f\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CanonArgKey</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey.f","kind":"def","line":643,"name":"Lean.Meta.Grind.CanonArgKey.f","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L643-L643"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CanonArgKey</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\">CanonArgKey</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey.mk","kind":"ctor","line":642,"name":"Lean.Meta.Grind.CanonArgKey.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L642-L642"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CanonArgKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CanonArgKey","kind":"structure","line":642,"name":"Lean.Meta.Grind.CanonArgKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L642-L646"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedNewRawFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedNewRawFact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedNewRawFact","kind":"instance","line":640,"name":"Lean.Meta.Grind.instInhabitedNewRawFact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L640-L640"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedNewRawFact.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedNewRawFact</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedNewRawFact.default","kind":"def","line":640,"name":"Lean.Meta.Grind.instInhabitedNewRawFact.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L640-L640"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.splitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">splitSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"`splitSource` to use when internalizing this fact. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.splitSource","kind":"def","line":639,"name":"Lean.Meta.Grind.NewRawFact.splitSource","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L639-L639"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.generation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">generation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.generation","kind":"def","line":637,"name":"Lean.Meta.Grind.NewRawFact.generation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L637-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.prop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">prop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.prop","kind":"def","line":636,"name":"Lean.Meta.Grind.NewRawFact.prop","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L636-L636"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.proof","kind":"def","line":635,"name":"Lean.Meta.Grind.NewRawFact.proof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L635-L635"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof </span><span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\">NewRawFact</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact.mk","kind":"ctor","line":634,"name":"Lean.Meta.Grind.NewRawFact.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L634-L634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewRawFact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"New raw fact to be preprocessed, and then asserted. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewRawFact","kind":"structure","line":633,"name":"Lean.Meta.Grind.NewRawFact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L633-L640"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstanceSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstanceSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstanceSet","kind":"def","line":631,"name":"Lean.Meta.Grind.PreInstanceSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L631-L631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqPreInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqPreInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqPreInstance","kind":"instance","line":623,"name":"Lean.Meta.Grind.instBEqPreInstance","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L623-L629"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashablePreInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashablePreInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashablePreInstance","kind":"instance","line":616,"name":"Lean.Meta.Grind.instHashablePreInstance","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L616-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstance</span>.<span class=\"name\">assignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.assignment","kind":"def","line":614,"name":"Lean.Meta.Grind.PreInstance.assignment","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L614-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstance</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.proof","kind":"def","line":613,"name":"Lean.Meta.Grind.PreInstance.proof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L613-L613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstance</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\">PreInstance</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance.mk","kind":"ctor","line":612,"name":"Lean.Meta.Grind.PreInstance.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L612-L612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">PreInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The E-matching module instantiates theorems using the `EMatchTheorem proof` and a (partial) assignment.\nWe want to avoid instantiating the same theorem with the same assignment more than once.\nTherefore, we store the (pre-)instance information in set.\nRecall that the proofs of activated theorems have been hash-consed.\nThe assignment contains internalized expressions, which have also been hash-consed.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.PreInstance","kind":"structure","line":605,"name":"Lean.Meta.Grind.PreInstance","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L605-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ParentMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentMap","kind":"def","line":603,"name":"Lean.Meta.Grind.ParentMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L603-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ParentSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ParentSet","kind":"def","line":602,"name":"Lean.Meta.Grind.ParentSet","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L602-L602"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enodeMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTable","kind":"def","line":599,"name":"Lean.Meta.Grind.CongrTable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L599-L599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCongrKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqCongrKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">enodeMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\">CongrKey</a> <span class=\"fn\">enodeMap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCongrKey","kind":"instance","line":596,"name":"Lean.Meta.Grind.instBEqCongrKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L596-L597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCongrKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableCongrKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">enodeMap</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\">CongrKey</a> <span class=\"fn\">enodeMap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCongrKey","kind":"instance","line":593,"name":"Lean.Meta.Grind.instHashableCongrKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L593-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey.e\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrKey</span>.<span class=\"name\">e</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">enodes</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\">CongrKey</a> <span class=\"fn\">enodes</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey.e","kind":"def","line":524,"name":"Lean.Meta.Grind.CongrKey.e","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L524-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrKey</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">enodes</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\">CongrKey</a> <span class=\"fn\">enodes</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey.mk","kind":"ctor","line":523,"name":"Lean.Meta.Grind.CongrKey.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L523-L523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrKey</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enodes</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Key for the congruence table.\nWe need access to the `enodes` to be able to retrieve the equivalence class roots.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrKey","kind":"structure","line":519,"name":"Lean.Meta.Grind.CongrKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L519-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedENodeMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedENodeMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\">ENodeMap</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedENodeMap","kind":"instance","line":516,"name":"Lean.Meta.Grind.instInhabitedENodeMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L516-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENodeMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENodeMap","kind":"def","line":514,"name":"Lean.Meta.Grind.ENodeMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L514-L515"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewFact</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.toExpr","kind":"def","line":509,"name":"Lean.Meta.Grind.NewFact.toExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L509-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.fact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewFact</span>.<span class=\"name\">fact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prop </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.fact","kind":"ctor","line":507,"name":"Lean.Meta.Grind.NewFact.fact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L507-L507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewFact</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isHEq</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\">NewFact</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact.eq","kind":"ctor","line":506,"name":"Lean.Meta.Grind.NewFact.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L506-L506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NewFact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"New equalities and facts to be processed. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.NewFact","kind":"inductive","line":504,"name":"Lean.Meta.Grind.NewFact","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L504-L507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.isCongrRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">isCongrRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.isCongrRoot","kind":"def","line":501,"name":"Lean.Meta.Grind.ENode.isCongrRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L501-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.isRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">isRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.isRoot","kind":"def","line":498,"name":"Lean.Meta.Grind.ENode.isRoot","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L498-L499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprENode.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instReprENode</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprENode.repr","kind":"def","line":496,"name":"Lean.Meta.Grind.instReprENode.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L496-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instReprENode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprENode","kind":"instance","line":496,"name":"Lean.Meta.Grind.instReprENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L496-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedENode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedENode","kind":"instance","line":496,"name":"Lean.Meta.Grind.instInhabitedENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L496-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedENode.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedENode</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedENode.default","kind":"def","line":496,"name":"Lean.Meta.Grind.instInhabitedENode.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L496-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.sTerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">sTerms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a></div></div>","info":{"doc":"Solver terms attached to this E-node. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.sTerms","kind":"def","line":495,"name":"Lean.Meta.Grind.ENode.sTerms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L495-L495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.mt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">mt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Modification time ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.mt","kind":"def","line":493,"name":"Lean.Meta.Grind.ENode.mt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L493-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.generation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">generation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The generation in which this enode was created. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.generation","kind":"def","line":491,"name":"Lean.Meta.Grind.ENode.generation","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L491-L491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Unique index used for pretty printing and debugging purposes. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.idx","kind":"def","line":489,"name":"Lean.Meta.Grind.ENode.idx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L489-L489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.heqProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">heqProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `heqProofs := true`, then some proofs in the equivalence class are based\non heterogeneous equality.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.heqProofs","kind":"def","line":487,"name":"Lean.Meta.Grind.ENode.heqProofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L487-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.hasLambdas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">hasLambdas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`hasLambdas := true` if the equivalence class contains lambda expressions. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.hasLambdas","kind":"def","line":482,"name":"Lean.Meta.Grind.ENode.hasLambdas","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L482-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`ctor := true` if the head symbol is a constructor application. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.ctor","kind":"def","line":480,"name":"Lean.Meta.Grind.ENode.ctor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L480-L480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.interpreted\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">interpreted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`interpreted := true` if node should be viewed as an abstract value. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.interpreted","kind":"def","line":478,"name":"Lean.Meta.Grind.ENode.interpreted","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L478-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Number of elements in the equivalence class, this field is meaningless if node is not the root. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.size","kind":"def","line":476,"name":"Lean.Meta.Grind.ENode.size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L476-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.flipped\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">flipped</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Proof has been flipped. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.flipped","kind":"def","line":474,"name":"Lean.Meta.Grind.ENode.flipped","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L474-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.proof?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">proof?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.proof?","kind":"def","line":472,"name":"Lean.Meta.Grind.ENode.proof?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L472-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.target?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">target?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"When `e` was added to this equivalence class because of an equality `h : e = target`,\nthen we store `target` here, and `h` at `proof?`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.target?","kind":"def","line":471,"name":"Lean.Meta.Grind.ENode.target?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L471-L471"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.congr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">congr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"`congr` is the term `self` is congruent to.\nWe say `self` is the congruence class root if `isSameExpr congr self`.\nThis field is initialized to `self` even if `e` is not an application.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.congr","kind":"def","line":466,"name":"Lean.Meta.Grind.ENode.congr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L466-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.root\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">root</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Root (aka canonical representative) of the equivalence class ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.root","kind":"def","line":460,"name":"Lean.Meta.Grind.ENode.root","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L460-L460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Next element in the equivalence class. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.next","kind":"def","line":458,"name":"Lean.Meta.Grind.ENode.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L458-L458"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.self\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Node represented by this ENode. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.self","kind":"def","line":456,"name":"Lean.Meta.Grind.ENode.self","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L456-L456"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self </span><span class=\"fn\">next </span><span class=\"fn\">root </span><span class=\"fn\">congr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target? </span><span class=\"fn\">proof?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">flipped</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">interpreted </span><span class=\"fn\">ctor </span><span class=\"fn\">hasLambdas </span><span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx </span><span class=\"fn\">generation </span><span class=\"fn\">mt</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sTerms</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\">ENode</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode.mk","kind":"ctor","line":454,"name":"Lean.Meta.Grind.ENode.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L454-L454"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ENode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Stores information for a node in the E-graph.\nEach internalized expression `e` has an `ENode` associated with it.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.ENode","kind":"structure","line":450,"name":"Lean.Meta.Grind.ENode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L450-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprSolverTerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instReprSolverTerms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprSolverTerms","kind":"instance","line":448,"name":"Lean.Meta.Grind.instReprSolverTerms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L448-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprSolverTerms.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instReprSolverTerms</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instReprSolverTerms.repr","kind":"def","line":448,"name":"Lean.Meta.Grind.instReprSolverTerms.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L448-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverTerms.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSolverTerms</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverTerms.default","kind":"def","line":448,"name":"Lean.Meta.Grind.instInhabitedSolverTerms.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L448-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverTerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSolverTerms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverTerms","kind":"instance","line":448,"name":"Lean.Meta.Grind.instInhabitedSolverTerms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L448-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverTerms</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">solverId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rest</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms.next","kind":"ctor","line":447,"name":"Lean.Meta.Grind.SolverTerms.next","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L447-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms.nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverTerms</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\">SolverTerms</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms.nil","kind":"ctor","line":446,"name":"Lean.Meta.Grind.SolverTerms.nil","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L446-L446"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverTerms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Each E-node may have \"solver terms\" attached to them.\nEach term is an element of the equivalence class that the\nsolver cares about. Each solver is responsible for marking the terms they care about.\nThe `grind` core propagates equalities and disequalities to the theory solvers\nusing these \"marked\" terms. The root of the equivalence class\ncontains a list of representatives sorted by solver id. Note that many E-nodes\ndo not have any solver terms attached to them.\n\n\"Solver terms\" are referenced as \"theory variables\" in the SMT literature.\nThe SMT solver Z3 uses a similar representation.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverTerms","kind":"inductive","line":433,"name":"Lean.Meta.Grind.SolverTerms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L433-L448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.doElemReportDbgIssue!__\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">doElemReportDbgIssue!__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Similar to `reportIssue!`, but only reports issue if `grind.debug` is set to `true` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.doElemReportDbgIssue!__","kind":"def","line":430,"name":"Lean.Meta.Grind.doElemReportDbgIssue!__","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L430-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.expandReportDbgIssueMacro\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">expandReportDbgIssueMacro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doElem</span>)</span></div></div>","info":{"doc":"Similar to `expandReportIssueMacro`, but only reports issue if `grind.debug` is set to `true` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.expandReportDbgIssueMacro","kind":"def","line":421,"name":"Lean.Meta.Grind.expandReportDbgIssueMacro","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L421-L427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.doElemReportIssue!__\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">doElemReportIssue!__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.doElemReportIssue!__","kind":"def","line":418,"name":"Lean.Meta.Grind.doElemReportIssue!__","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L418-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.reportIssue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">reportIssue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.reportIssue","kind":"def","line":403,"name":"Lean.Meta.Grind.reportIssue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L403-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkHCongrWithArity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkHCongrWithArity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>","info":{"doc":"Creates a congruence theorem for a `f`-applications with `numArgs` arguments.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mkHCongrWithArity","kind":"def","line":388,"name":"Lean.Meta.Grind.mkHCongrWithArity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L388-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isFalseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isFalseExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is the internalized `False` expression.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isFalseExpr","kind":"def","line":384,"name":"Lean.Meta.Grind.isFalseExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L384-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isTrueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isTrueExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is the internalized `True` expression.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isTrueExpr","kind":"def","line":380,"name":"Lean.Meta.Grind.isTrueExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L380-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.shareCommon\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">shareCommon</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Applies hash-consing to `e`. Recall that all expressions in a `grind` goal have\nbeen hash-consed. We perform this step before we internalize expressions.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.shareCommon","kind":"def","line":370,"name":"Lean.Meta.Grind.shareCommon","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L370-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.abstractNestedProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">abstractNestedProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Abstracts nested proofs in `e`. This is a preprocessing step performed before internalization.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.abstractNestedProofs","kind":"def","line":364,"name":"Lean.Meta.Grind.abstractNestedProofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L364-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMaxGeneration\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getMaxGeneration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Returns maximum term generation that is considered during ematching. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMaxGeneration","kind":"def","line":360,"name":"Lean.Meta.Grind.getMaxGeneration","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L360-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getMethodsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.MethodsRef\">MethodsRef</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getMethodsRef","kind":"def","line":357,"name":"Lean.Meta.Grind.getMethodsRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L357-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveSplitDiagInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">saveSplitDiagInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gen </span><span class=\"fn\">numCases</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveSplitDiagInfo","kind":"def","line":352,"name":"Lean.Meta.Grind.saveSplitDiagInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L352-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveAppOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">saveAppOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/HeadIndex.html#Lean.HeadIndex\">HeadIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveAppOf","kind":"def","line":347,"name":"Lean.Meta.Grind.saveAppOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L347-L350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">saveCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eager</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveCases","kind":"def","line":339,"name":"Lean.Meta.Grind.saveCases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L339-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isMatchEqLikeDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isMatchEqLikeDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `declName` is the name of a `match` equation or a `match` congruence equation.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isMatchEqLikeDeclName","kind":"def","line":317,"name":"Lean.Meta.Grind.isMatchEqLikeDeclName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L317-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getSymbolPriorities\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getSymbolPriorities</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.SymbolPriorities\">SymbolPriorities</a></span></div></div>","info":{"doc":"Returns symbol priorities for inferring E-matching patterns. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getSymbolPriorities","kind":"def","line":313,"name":"Lean.Meta.Grind.getSymbolPriorities","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L313-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.reportMVarInternalization\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">reportMVarInternalization</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.reportMVarInternalization","kind":"def","line":310,"name":"Lean.Meta.Grind.reportMVarInternalization","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L310-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withCheapCasesOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">withCheapCasesOnly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withCheapCasesOnly","kind":"def","line":307,"name":"Lean.Meta.Grind.withCheapCasesOnly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L307-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.cheapCasesOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">cheapCasesOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.cheapCasesOnly","kind":"def","line":304,"name":"Lean.Meta.Grind.cheapCasesOnly","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L304-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.resetAnchors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">resetAnchors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.resetAnchors","kind":"def","line":301,"name":"Lean.Meta.Grind.resetAnchors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L301-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getIntExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getIntExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the internalized `Int`.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getIntExpr","kind":"def","line":297,"name":"Lean.Meta.Grind.getIntExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L297-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getOrderingEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getOrderingEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the internalized `Ordering.eq`.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getOrderingEqExpr","kind":"def","line":293,"name":"Lean.Meta.Grind.getOrderingEqExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L293-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNatZeroExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getNatZeroExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the internalized `0 : Nat` numeral.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getNatZeroExpr","kind":"def","line":289,"name":"Lean.Meta.Grind.getNatZeroExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L289-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getBoolFalseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getBoolFalseExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the internalized `Bool.false`.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getBoolFalseExpr","kind":"def","line":285,"name":"Lean.Meta.Grind.getBoolFalseExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L285-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getBoolTrueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getBoolTrueExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the internalized `Bool.true`.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getBoolTrueExpr","kind":"def","line":281,"name":"Lean.Meta.Grind.getBoolTrueExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L281-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getFalseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getFalseExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the internalized `False` constant.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getFalseExpr","kind":"def","line":277,"name":"Lean.Meta.Grind.getFalseExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L277-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getTrueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getTrueExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns the internalized `True` constant.  ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getTrueExpr","kind":"def","line":273,"name":"Lean.Meta.Grind.getTrueExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L273-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Grind.Config</a></span></div></div>","info":{"doc":"Returns the user-defined configuration options ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.getConfig","kind":"def","line":269,"name":"Lean.Meta.Grind.getConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L269-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withSplitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">withSplitSource</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"`withSplitSource s x` executes `x` and uses `s` as the split source for any case-split\nregistered.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withSplitSource","kind":"def","line":262,"name":"Lean.Meta.Grind.withSplitSource","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L262-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withoutReportingMVarIssues\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">withoutReportingMVarIssues</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"`withoutReportingMVarIssues x` executes `x` without reporting metavariables found during internalization.\nSee comment at `Grind.Context.reportMVarIssue` for additional details.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.withoutReportingMVarIssues","kind":"def","line":255,"name":"Lean.Meta.Grind.withoutReportingMVarIssues","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L255-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instMonadBacktrackSavedStateGrindM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instMonadBacktrackSavedStateGrindM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadBacktrack.html#Lean.MonadBacktrack\">MonadBacktrack</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instMonadBacktrackSavedStateGrindM","kind":"instance","line":251,"name":"Lean.Meta.Grind.instMonadBacktrackSavedStateGrindM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L251-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState.restore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">restore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Restore backtrackable parts of the state. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState.restore","kind":"def","line":246,"name":"Lean.Meta.Grind.SavedState.restore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L246-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">saveState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.saveState","kind":"def","line":243,"name":"Lean.Meta.Grind.saveState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L243-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instNonemptySavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instNonemptySavedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instNonemptySavedState","kind":"instance","line":241,"name":"Lean.Meta.Grind.instNonemptySavedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L241-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState.grind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">grind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState.grind","kind":"def","line":240,"name":"Lean.Meta.Grind.SavedState.grind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L240-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState.meta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">meta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Meta.SavedState</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState.meta","kind":"def","line":239,"name":"Lean.Meta.Grind.SavedState.meta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L239-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«meta»</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Meta.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">grind</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\">SavedState</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState.mk","kind":"ctor","line":238,"name":"Lean.Meta.Grind.SavedState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L238-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SavedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Backtrackable state for the `GrindM` monad.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SavedState","kind":"structure","line":235,"name":"Lean.Meta.Grind.SavedState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L235-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mapGrindM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mapGrindM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.mapGrindM","kind":"def","line":232,"name":"Lean.Meta.Grind.mapGrindM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L232-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GrindM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM","kind":"def","line":230,"name":"Lean.Meta.Grind.GrindM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instNonemptyMethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instNonemptyMethodsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.MethodsRef\">MethodsRef</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instNonemptyMethodsRef","kind":"instance","line":228,"name":"Lean.Meta.Grind.instNonemptyMethodsRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.MethodsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MethodsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.MethodsRef","kind":"def","line":227,"name":"Lean.Meta.Grind.MethodsRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instNonemptyState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instNonemptyState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instNonemptyState","kind":"instance","line":223,"name":"Lean.Meta.Grind.instNonemptyState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L223-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.anchors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">anchors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"Cached anchors (aka stable hash codes) for terms in the `grind` state.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.anchors","kind":"def","line":221,"name":"Lean.Meta.Grind.State.anchors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.reflCmpMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">reflCmpMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Mapping from binary functions `f` to a theorem `thm : ∀ a, f a a = .eq`\nif it implements the `ReflCmp` type class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.reflCmpMap","kind":"def","line":217,"name":"Lean.Meta.Grind.State.reflCmpMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L217-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.lawfulEqCmpMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">lawfulEqCmpMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Mapping from binary functions `f` to a theorem `thm : ∀ a b, f a b = .eq → a = b`\nif it implements the `LawfulEqCmp` type class.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.lawfulEqCmpMap","kind":"def","line":212,"name":"Lean.Meta.Grind.State.lawfulEqCmpMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L212-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.splitDiags\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">splitDiags</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a></span></div></div>","info":{"doc":"Split diagnostic information. This information is only collected when `set_option diagnostics true` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.splitDiags","kind":"def","line":207,"name":"Lean.Meta.Grind.State.splitDiags","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L207-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.counters\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">counters</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a></div></div>","info":{"doc":"Performance counters ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.counters","kind":"def","line":205,"name":"Lean.Meta.Grind.State.counters","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L205-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a></div></div>","info":{"doc":"`trace` for `grind?` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.trace","kind":"def","line":203,"name":"Lean.Meta.Grind.State.trace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L203-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.issues\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">issues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Issues found during the proof search. These issues are reported to\nusers when `grind` fails.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.issues","kind":"def","line":201,"name":"Lean.Meta.Grind.State.issues","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.lastTag\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">lastTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Used to generate trace messages of the for `[grind] working on <tag>`,\nand implement the macro `trace_goal`.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.lastTag","kind":"def","line":196,"name":"Lean.Meta.Grind.State.lastTag","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Simp.State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.simp","kind":"def","line":191,"name":"Lean.Meta.Grind.State.simp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.congrThms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">congrThms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>","info":{"doc":"Congruence theorems generated so far. Recall that for constant symbols\nwe rely on the reserved name feature (i.e., `mkHCongrWithArityForConst?`).\nRemark: we currently do not reuse congruence theorems\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.congrThms","kind":"def","line":190,"name":"Lean.Meta.Grind.State.congrThms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L190-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.scState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">scState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AlphaShareCommon.html#Lean.Meta.Grind.AlphaShareCommon.State\">AlphaShareCommon.State</a></div></div>","info":{"doc":"`ShareCommon` (aka `Hash-consing`) state. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.scState","kind":"def","line":184,"name":"Lean.Meta.Grind.State.scState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L184-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scState</span> : <a href=\"./Lean/Meta/Tactic/Grind/AlphaShareCommon.html#Lean.Meta.Grind.AlphaShareCommon.State\">AlphaShareCommon.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congrThms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simp</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.State\">Simp.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lastTag</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">issues</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trace</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counters</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitDiags</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lawfulEqCmpMap </span><span class=\"fn\">reflCmpMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">anchors</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ExprPtr.html#Lean.Meta.Grind.ExprPtr\">ExprPtr</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State.mk","kind":"ctor","line":182,"name":"Lean.Meta.Grind.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L182-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for the `GrindM` monad. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.State","kind":"structure","line":181,"name":"Lean.Meta.Grind.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L181-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.splitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">splitSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.splitSource","kind":"def","line":179,"name":"Lean.Meta.Grind.SplitDiagInfo.splitSource","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.numCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">numCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.numCases","kind":"def","line":178,"name":"Lean.Meta.Grind.SplitDiagInfo.numCases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L178-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.gen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.gen","kind":"def","line":177,"name":"Lean.Meta.Grind.SplitDiagInfo.gen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L177-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.c\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">c</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.c","kind":"def","line":176,"name":"Lean.Meta.Grind.SplitDiagInfo.c","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.lctx","kind":"def","line":175,"name":"Lean.Meta.Grind.SplitDiagInfo.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L175-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gen </span><span class=\"fn\">numCases</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\">SplitDiagInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo.mk","kind":"ctor","line":174,"name":"Lean.Meta.Grind.SplitDiagInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitDiagInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Case-split diagnostic information ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitDiagInfo","kind":"structure","line":173,"name":"Lean.Meta.Grind.SplitDiagInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L173-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCounters\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedCounters</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCounters","kind":"instance","line":169,"name":"Lean.Meta.Grind.instInhabitedCounters","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L169-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCounters.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedCounters</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedCounters.default","kind":"def","line":169,"name":"Lean.Meta.Grind.instInhabitedCounters.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L169-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.apps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span>.<span class=\"name\">apps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Number of applications per function symbol. This information is only collected if `set_option diagnostics true` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.apps","kind":"def","line":168,"name":"Lean.Meta.Grind.Counters.apps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L168-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.case\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span>.<span class=\"name\">case</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Number of times a `cases` has been performed on an inductive type/predicate ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.case","kind":"def","line":166,"name":"Lean.Meta.Grind.Counters.case","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L166-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.thm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span>.<span class=\"name\">thm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Theorems.html#Lean.Meta.Grind.Origin\">Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Number of times E-match theorem has been instantiated. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.thm","kind":"def","line":164,"name":"Lean.Meta.Grind.Counters.thm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L164-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Theorems.html#Lean.Meta.Grind.Origin\">Origin</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">case </span><span class=\"fn\">apps</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\">Counters</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters.mk","kind":"ctor","line":162,"name":"Lean.Meta.Grind.Counters.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L162-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Counters</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Counters","kind":"structure","line":162,"name":"Lean.Meta.Grind.Counters","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L162-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedTrace","kind":"instance","line":160,"name":"Lean.Meta.Grind.instInhabitedTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L160-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedTrace.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedTrace</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedTrace.default","kind":"def","line":160,"name":"Lean.Meta.Grind.instInhabitedTrace.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L160-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.cases","kind":"def","line":159,"name":"Lean.Meta.Grind.Trace.cases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.eagerCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span>.<span class=\"name\">eagerCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.eagerCases","kind":"def","line":158,"name":"Lean.Meta.Grind.Trace.eagerCases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.thms\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span>.<span class=\"name\">thms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.thms","kind":"def","line":157,"name":"Lean.Meta.Grind.Trace.thms","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thms</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eagerCases </span><span class=\"fn\">cases</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\">Trace</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace.mk","kind":"ctor","line":156,"name":"Lean.Meta.Grind.Trace.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Trace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"E-match theorems and case-splits performed by `grind`.\nNote that it may contain elements that are not needed by the final proof.\nFor example, `grind` instantiated the theorem, but theorem instance was not actually used\nin the proof.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Trace","kind":"structure","line":150,"name":"Lean.Meta.Grind.Trace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L150-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableEMatchTheoremTrace.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableEMatchTheoremTrace</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableEMatchTheoremTrace.hash","kind":"def","line":148,"name":"Lean.Meta.Grind.instHashableEMatchTheoremTrace.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableEMatchTheoremTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableEMatchTheoremTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableEMatchTheoremTrace","kind":"instance","line":148,"name":"Lean.Meta.Grind.instHashableEMatchTheoremTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqEMatchTheoremTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqEMatchTheoremTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqEMatchTheoremTrace","kind":"instance","line":148,"name":"Lean.Meta.Grind.instBEqEMatchTheoremTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqEMatchTheoremTrace.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqEMatchTheoremTrace</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a> → <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqEMatchTheoremTrace.beq","kind":"def","line":148,"name":"Lean.Meta.Grind.instBEqEMatchTheoremTrace.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.minIndexable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span>.<span class=\"name\">minIndexable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.minIndexable","kind":"def","line":147,"name":"Lean.Meta.Grind.EMatchTheoremTrace.minIndexable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheoremKind\">EMatchTheoremKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.kind","kind":"def","line":146,"name":"Lean.Meta.Grind.EMatchTheoremTrace.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.origin\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span>.<span class=\"name\">origin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Theorems.html#Lean.Meta.Grind.Origin\">Origin</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.origin","kind":"def","line":145,"name":"Lean.Meta.Grind.EMatchTheoremTrace.origin","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origin</span> : <a href=\"./Lean/Meta/Tactic/Grind/Theorems.html#Lean.Meta.Grind.Origin\">Origin</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheoremKind\">EMatchTheoremKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minIndexable</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\">EMatchTheoremTrace</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace.mk","kind":"ctor","line":144,"name":"Lean.Meta.Grind.EMatchTheoremTrace.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">EMatchTheoremTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.EMatchTheoremTrace","kind":"structure","line":144,"name":"Lean.Meta.Grind.EMatchTheoremTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L144-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCongrTheoremCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instHashableCongrTheoremCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instHashableCongrTheoremCacheKey","kind":"instance","line":141,"name":"Lean.Meta.Grind.instHashableCongrTheoremCacheKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCongrTheoremCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqCongrTheoremCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instBEqCongrTheoremCacheKey","kind":"instance","line":137,"name":"Lean.Meta.Grind.instBEqCongrTheoremCacheKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L137-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.numArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTheoremCacheKey</span>.<span class=\"name\">numArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.numArgs","kind":"def","line":134,"name":"Lean.Meta.Grind.CongrTheoremCacheKey.numArgs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.f\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTheoremCacheKey</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.f","kind":"def","line":133,"name":"Lean.Meta.Grind.CongrTheoremCacheKey.f","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTheoremCacheKey</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\">CongrTheoremCacheKey</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey.mk","kind":"ctor","line":132,"name":"Lean.Meta.Grind.CongrTheoremCacheKey.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CongrTheoremCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Key for the congruence theorem cache. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.CongrTheoremCacheKey","kind":"structure","line":131,"name":"Lean.Meta.Grind.CongrTheoremCacheKey","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L131-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.intExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">intExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.intExpr","kind":"def","line":129,"name":"Lean.Meta.Grind.Context.intExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.ordEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">ordEqExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.ordEqExpr","kind":"def","line":128,"name":"Lean.Meta.Grind.Context.ordEqExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.bfalseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">bfalseExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.bfalseExpr","kind":"def","line":127,"name":"Lean.Meta.Grind.Context.bfalseExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.btrueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">btrueExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.btrueExpr","kind":"def","line":126,"name":"Lean.Meta.Grind.Context.btrueExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.natZExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">natZExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.natZExpr","kind":"def","line":125,"name":"Lean.Meta.Grind.Context.natZExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.falseExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">falseExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.falseExpr","kind":"def","line":124,"name":"Lean.Meta.Grind.Context.falseExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.trueExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">trueExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.trueExpr","kind":"def","line":123,"name":"Lean.Meta.Grind.Context.trueExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.symPrios\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">symPrios</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.SymbolPriorities\">SymbolPriorities</a></div></div>","info":{"doc":"Symbol priorities for inferring E-matching patterns ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.symPrios","kind":"def","line":122,"name":"Lean.Meta.Grind.Context.symPrios","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.splitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">splitSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Current source of case-splits. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.splitSource","kind":"def","line":120,"name":"Lean.Meta.Grind.Context.splitSource","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.reportMVarIssue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">reportMVarIssue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.reportMVarIssue","kind":"def","line":118,"name":"Lean.Meta.Grind.Context.reportMVarIssue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.cheapCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">cheapCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `cheapCases` is `true`, `grind` only applies `cases` to types that contain\nat most one minor premise.\nRecall that `grind` applies `cases` when introducing types tagged with `[grind cases eager]`,\nand at `Split.lean`\nRemark: We add this option to implement the `lookahead` feature, we don't want to create several subgoals\nwhen performing lookahead.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.cheapCases","kind":"def","line":111,"name":"Lean.Meta.Grind.Context.cheapCases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Grind.Config</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.config","kind":"def","line":102,"name":"Lean.Meta.Grind.Context.config","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.simpMethods\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">simpMethods</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Simp.Methods</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.simpMethods","kind":"def","line":101,"name":"Lean.Meta.Grind.Context.simpMethods","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Simp.Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.simp","kind":"def","line":100,"name":"Lean.Meta.Grind.Context.simp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simp</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpMethods</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Methods\">Simp.Methods</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Grind.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cheapCases </span><span class=\"fn\">reportMVarIssue</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitSource</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symPrios</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.SymbolPriorities\">SymbolPriorities</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trueExpr </span><span class=\"fn\">falseExpr </span><span class=\"fn\">natZExpr </span><span class=\"fn\">btrueExpr </span><span class=\"fn\">bfalseExpr </span><span class=\"fn\">ordEqExpr </span><span class=\"fn\">intExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context.mk","kind":"ctor","line":99,"name":"Lean.Meta.Grind.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Context for `GrindM` monad. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Context","kind":"structure","line":98,"name":"Lean.Meta.Grind.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L98-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.toMessageData","kind":"def","line":88,"name":"Lean.Meta.Grind.SplitSource.toMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L88-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitSource.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSplitSource</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitSource.default","kind":"def","line":86,"name":"Lean.Meta.Grind.instInhabitedSplitSource.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSplitSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSplitSource","kind":"instance","line":86,"name":"Lean.Meta.Grind.instInhabitedSplitSource","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.inj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">inj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origin</span> : <a href=\"./Lean/Meta/Tactic/Grind/Theorems.html#Lean.Meta.Grind.Origin\">Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Injectivity theorem. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.inj","kind":"ctor","line":84,"name":"Lean.Meta.Grind.SplitSource.inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L84-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.input\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">input</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Input goal ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.input","kind":"ctor","line":82,"name":"Lean.Meta.Grind.SplitSource.input","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.existsProp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">existsProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Exists-propagator. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.existsProp","kind":"ctor","line":80,"name":"Lean.Meta.Grind.SplitSource.existsProp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L80-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.forallProp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">forallProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Forall-propagator. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.forallProp","kind":"ctor","line":78,"name":"Lean.Meta.Grind.SplitSource.forallProp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L78-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Beta-reduction. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.beta","kind":"ctor","line":76,"name":"Lean.Meta.Grind.SplitSource.beta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.mbtc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">mbtc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Model-based theory combination equality coming from the i-th argument of applications `a` and `b` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.mbtc","kind":"ctor","line":74,"name":"Lean.Meta.Grind.SplitSource.mbtc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L74-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Generated while instantiating an extensionality theorem with name `declName` ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.ext","kind":"ctor","line":72,"name":"Lean.Meta.Grind.SplitSource.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L72-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.ematch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span>.<span class=\"name\">ematch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origin</span> : <a href=\"./Lean/Meta/Tactic/Grind/Theorems.html#Lean.Meta.Grind.Origin\">Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\">SplitSource</a></div></div>","info":{"doc":"Generated while instantiating a theorem using E-matching. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource.ematch","kind":"ctor","line":70,"name":"Lean.Meta.Grind.SplitSource.ematch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L70-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SplitSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Case-split source. That is, where it came from.\nWe store the current source in the `grind` context.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SplitSource","kind":"inductive","line":65,"name":"Lean.Meta.Grind.SplitSource","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L65-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverExtensionState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedSolverExtensionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtensionState\">SolverExtensionState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.instInhabitedSolverExtensionState","kind":"instance","line":63,"name":"Lean.Meta.Grind.instInhabitedSolverExtensionState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtensionState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtensionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtensionState","kind":"def","line":62,"name":"Lean.Meta.Grind.SolverExtensionState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtensionStateSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SolverExtensionStateSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) × <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"Opaque solver extension state. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.SolverExtensionStateSpec","kind":"opaque","line":60,"name":"Lean.Meta.Grind.SolverExtensionStateSpec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.warning\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">grind</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.warning","kind":"opaque","line":54,"name":"Lean.Meta.Grind.grind.warning","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L54-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.debug.proofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">grind</span>.<span class=\"name\">debug</span>.<span class=\"name\">proofs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.debug.proofs","kind":"opaque","line":48,"name":"Lean.Meta.Grind.grind.debug.proofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L48-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.debug\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">grind</span>.<span class=\"name\">debug</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.grind.debug","kind":"opaque","line":42,"name":"Lean.Meta.Grind.grind.debug","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L42-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isInterpreted\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isInterpreted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `e` is `True`, `False`, or a literal value.\nSee `Lean.Meta.LitValues` for supported literals.\n","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isInterpreted","kind":"def","line":34,"name":"Lean.Meta.Grind.isInterpreted","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L34-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isDefEqI\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isDefEqI</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">s</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Similar to `isDefEq`, but ensures that only reducible definitions and instances can be reduced. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isDefEqI","kind":"def","line":30,"name":"Lean.Meta.Grind.isDefEqI","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L30-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isDefEqD\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isDefEqD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">s</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Similar to `isDefEq`, but ensures default transparency is used. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.isDefEqD","kind":"def","line":26,"name":"Lean.Meta.Grind.isDefEqD","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L26-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.congrPlaceholderProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">congrPlaceholderProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"We use this auxiliary constant to mark delayed congruence proofs. ","docLink":"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.congrPlaceholderProof","kind":"def","line":23,"name":"Lean.Meta.Grind.congrPlaceholderProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Types.lean#L23-L24"}}],"imports":["Lean.Meta.Tactic.Simp.Types","Lean.Meta.Tactic.Grind.AlphaShareCommon","Lean.Meta.Tactic.Grind.Attr","Lean.Meta.Tactic.Grind.CheckResult","Init.Data.Queue","Lean.Meta.Tactic.Grind.ExprPtr","Lean.HeadIndex","Lean.Meta.Tactic.Grind.ExtAttr","Lean.Meta.AbstractNestedProofs","Lean.Meta.Match.MatchEqsExt","Lean.PrettyPrinter","Lean.Parser.Do"],"instances":[{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedSolverExtensionState","typeNames":["Lean.Meta.Grind.SolverExtensionState"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedSplitSource","typeNames":["Lean.Meta.Grind.SplitSource"]},{"className":"BEq","name":"Lean.Meta.Grind.instBEqCongrTheoremCacheKey","typeNames":["Lean.Meta.Grind.CongrTheoremCacheKey"]},{"className":"Hashable","name":"Lean.Meta.Grind.instHashableCongrTheoremCacheKey","typeNames":["Lean.Meta.Grind.CongrTheoremCacheKey"]},{"className":"BEq","name":"Lean.Meta.Grind.instBEqEMatchTheoremTrace","typeNames":["Lean.Meta.Grind.EMatchTheoremTrace"]},{"className":"Hashable","name":"Lean.Meta.Grind.instHashableEMatchTheoremTrace","typeNames":["Lean.Meta.Grind.EMatchTheoremTrace"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedTrace","typeNames":["Lean.Meta.Grind.Trace"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedCounters","typeNames":["Lean.Meta.Grind.Counters"]},{"className":"Nonempty","name":"Lean.Meta.Grind.instNonemptyState","typeNames":["Lean.Meta.Grind.State"]},{"className":"Nonempty","name":"Lean.Meta.Grind.instNonemptyMethodsRef","typeNames":["Lean.Meta.Grind.MethodsRef"]},{"className":"Nonempty","name":"Lean.Meta.Grind.instNonemptySavedState","typeNames":["Lean.Meta.Grind.SavedState"]},{"className":"Lean.MonadBacktrack","name":"Lean.Meta.Grind.instMonadBacktrackSavedStateGrindM","typeNames":["Lean.Meta.Grind.SavedState","Lean.Meta.Grind.GrindM"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedSolverTerms","typeNames":["Lean.Meta.Grind.SolverTerms"]},{"className":"Repr","name":"Lean.Meta.Grind.instReprSolverTerms","typeNames":["Lean.Meta.Grind.SolverTerms"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedENode","typeNames":["Lean.Meta.Grind.ENode"]},{"className":"Repr","name":"Lean.Meta.Grind.instReprENode","typeNames":["Lean.Meta.Grind.ENode"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedENodeMap","typeNames":["Lean.Meta.Grind.ENodeMap"]},{"className":"Hashable","name":"Lean.Meta.Grind.instHashableCongrKey","typeNames":["Lean.Meta.Grind.CongrKey"]},{"className":"BEq","name":"Lean.Meta.Grind.instBEqCongrKey","typeNames":["Lean.Meta.Grind.CongrKey"]},{"className":"Hashable","name":"Lean.Meta.Grind.instHashablePreInstance","typeNames":["Lean.Meta.Grind.PreInstance"]},{"className":"BEq","name":"Lean.Meta.Grind.instBEqPreInstance","typeNames":["Lean.Meta.Grind.PreInstance"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedNewRawFact","typeNames":["Lean.Meta.Grind.NewRawFact"]},{"className":"BEq","name":"Lean.Meta.Grind.instBEqCanonArgKey","typeNames":["Lean.Meta.Grind.CanonArgKey"]},{"className":"Hashable","name":"Lean.Meta.Grind.instHashableCanonArgKey","typeNames":["Lean.Meta.Grind.CanonArgKey"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Canon.instInhabitedState","typeNames":["Lean.Meta.Grind.Canon.State"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedCaseTrace","typeNames":["Lean.Meta.Grind.CaseTrace"]},{"className":"Inhabited","name":"Lean.Meta.Grind.EMatch.instInhabitedState","typeNames":["Lean.Meta.Grind.EMatch.State"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedSplitInfo","typeNames":["Lean.Meta.Grind.SplitInfo"]},{"className":"Hashable","name":"Lean.Meta.Grind.instHashableSplitInfo","typeNames":["Lean.Meta.Grind.SplitInfo"]},{"className":"BEq","name":"Lean.Meta.Grind.instBEqSplitInfo","typeNames":["Lean.Meta.Grind.SplitInfo"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Split.instInhabitedState","typeNames":["Lean.Meta.Grind.Split.State"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Clean.instInhabitedState","typeNames":["Lean.Meta.Grind.Clean.State"]},{"className":"Inhabited","name":"Lean.Meta.Grind.UnitLike.instInhabitedState","typeNames":["Lean.Meta.Grind.UnitLike.State"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedInjectiveInfo","typeNames":["Lean.Meta.Grind.InjectiveInfo"]},{"className":"Inhabited","name":"Lean.Meta.Grind.Injective.instInhabitedState","typeNames":["Lean.Meta.Grind.Injective.State"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedGoal","typeNames":["Lean.Meta.Grind.Goal"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedMethods","typeNames":["Lean.Meta.Grind.Methods"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedAction","typeNames":["Lean.Meta.Grind.Action"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedSolverExtension","typeNames":["Lean.Meta.Grind.SolverExtension"]},{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedGoalM","typeNames":["Lean.Meta.Grind.GoalM"]}],"name":"Lean.Meta.Tactic.Grind.Types"}