{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.shareCommonPreDefs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">shareCommonPreDefs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.shareCommonPreDefs","kind":"def","line":320,"name":"Lean.Elab.shareCommonPreDefs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L320-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.checkCodomainsLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">checkCodomainsLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Checks that all codomains have the same level, throws an error otherwise.\n","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.checkCodomainsLevel","kind":"def","line":302,"name":"Lean.Elab.checkCodomainsLevel","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L302-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.ensureNoRecFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ensureNoRecFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recFnNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.ensureNoRecFn","kind":"def","line":296,"name":"Lean.Elab.ensureNoRecFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L296-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addAndCompilePartialRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addAndCompilePartialRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docCtx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addAndCompilePartialRec","kind":"def","line":276,"name":"Lean.Elab.addAndCompilePartialRec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L276-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addAndCompileUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addAndCompileUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docCtx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">safety</span> : <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety\">DefinitionSafety</a> := <a href=\"./Lean/Declaration.html#Lean.DefinitionSafety.unsafe\">DefinitionSafety.unsafe</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addAndCompileUnsafe","kind":"def","line":251,"name":"Lean.Elab.addAndCompileUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L251-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.eraseRecAppSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">eraseRecAppSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.eraseRecAppSyntax","kind":"def","line":248,"name":"Lean.Elab.eraseRecAppSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L248-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.eraseRecAppSyntaxExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">eraseRecAppSyntaxExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Eliminate recursive application annotations containing syntax. These annotations are used by the well-founded recursion module\nto produce better error messages. ","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.eraseRecAppSyntaxExpr","kind":"def","line":239,"name":"Lean.Elab.eraseRecAppSyntaxExpr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L239-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addNonRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addNonRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docCtx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">applyAttrAfterCompilation</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">all</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><span class=\"fn\">preDef</span>.<a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.declName\">declName</a></span><a href=\"./Init/Prelude.html#List.cons\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cacheProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cleanupValue</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addNonRec","kind":"def","line":236,"name":"Lean.Elab.addNonRec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L236-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addAndCompileNonRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addAndCompileNonRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docCtx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">all</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><span class=\"fn\">preDef</span>.<a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.declName\">declName</a></span><a href=\"./Init/Prelude.html#List.cons\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cleanupValue</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addAndCompileNonRec","kind":"def","line":233,"name":"Lean.Elab.addAndCompileNonRec","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L233-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addPreDefInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addPreDefInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds constant info to the definition name. This should occur after executing post-compilation\nattributes, in case they have an effect on hovers.\n","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addPreDefInfo","kind":"def","line":171,"name":"Lean.Elab.addPreDefInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L171-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addPreDefDocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addPreDefDocs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docCtx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds the docstring, if relevant.\n\nThis should be done just after compilation so the predefinition can be executed in examples in its\ndocstring. If code generation will not occur, then it should be done after adding the declaration\nto the environment.\n","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addPreDefDocs","kind":"def","line":159,"name":"Lean.Elab.addPreDefDocs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L159-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.diagnostics.threshold.proofSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">diagnostics</span>.<span class=\"name\">threshold</span>.<span class=\"name\">proofSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.diagnostics.threshold.proofSize","kind":"opaque","line":143,"name":"Lean.Elab.diagnostics.threshold.proofSize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L143-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addAsAxiom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addAsAxiom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Auxiliary method for (temporarily) adding pre definition as an axiom ","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.addAsAxiom","kind":"def","line":129,"name":"Lean.Elab.addAsAxiom","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L129-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.abstractNestedProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">abstractNestedProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.abstractNestedProofs","kind":"def","line":120,"name":"Lean.Elab.abstractNestedProofs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L120-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.letToHaveType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">letToHaveType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span></div></div>","info":{"doc":"Applies `Meta.letToHave` to the type of the predef.\n","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.letToHaveType","kind":"def","line":110,"name":"Lean.Elab.letToHaveType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L110-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.letToHaveValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">letToHaveValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span></div></div>","info":{"doc":"Applies `Meta.letToHave` to the values of defs, instances, and abbrevs.\nDoes not apply the transformation to values that are proofs, or to unsafe definitions.\n","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.letToHaveValue","kind":"def","line":95,"name":"Lean.Elab.letToHaveValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L95-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.applyAttributesOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">applyAttributesOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">applicationTime</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.applyAttributesOf","kind":"def","line":91,"name":"Lean.Elab.applyAttributesOf","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L91-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.fixLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">fixLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scopeLevelNames </span><span class=\"fn\">allUserLevelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.fixLevelParams","kind":"def","line":75,"name":"Lean.Elab.fixLevelParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L75-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.levelMVarToParamTypesPreDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">levelMVarToParamTypesPreDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span></div></div>","info":{"doc":"Applies `Lean.Elab.Term.levelMVarToParam` to the types of each predefinition.\n","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.levelMVarToParamTypesPreDecls","kind":"def","line":53,"name":"Lean.Elab.levelMVarToParamTypesPreDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L53-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.instantiateMVarsAtPreDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instantiateMVarsAtPreDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span></div></div>","info":{"doc":"Applies `Lean.instantiateMVars` to the types of values of each predefinition.\n","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.instantiateMVarsAtPreDecls","kind":"def","line":46,"name":"Lean.Elab.instantiateMVarsAtPreDecls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L46-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.filterAttrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">filterAttrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.filterAttrs","kind":"def","line":43,"name":"Lean.Elab.PreDefinition.filterAttrs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.instInhabitedPreDefinition.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedPreDefinition</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.instInhabitedPreDefinition.default","kind":"def","line":41,"name":"Lean.Elab.instInhabitedPreDefinition.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.instInhabitedPreDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedPreDefinition</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.instInhabitedPreDefinition","kind":"instance","line":41,"name":"Lean.Elab.instInhabitedPreDefinition","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.termination\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">termination</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.TerminationHints\">TerminationHints</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.termination","kind":"def","line":40,"name":"Lean.Elab.PreDefinition.termination","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.value","kind":"def","line":39,"name":"Lean.Elab.PreDefinition.value","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.type","kind":"def","line":38,"name":"Lean.Elab.PreDefinition.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.numSectionVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">numSectionVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.numSectionVars","kind":"def","line":37,"name":"Lean.Elab.PreDefinition.numSectionVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.binders\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">binders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.binders","kind":"def","line":36,"name":"Lean.Elab.PreDefinition.binders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.declName","kind":"def","line":35,"name":"Lean.Elab.PreDefinition.declName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">modifiers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.modifiers","kind":"def","line":34,"name":"Lean.Elab.PreDefinition.modifiers","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.levelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">levelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.levelParams","kind":"def","line":33,"name":"Lean.Elab.PreDefinition.levelParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.kind","kind":"def","line":32,"name":"Lean.Elab.PreDefinition.kind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.ref","kind":"def","line":31,"name":"Lean.Elab.PreDefinition.ref","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numSectionVars</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">termination</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.TerminationHints\">TerminationHints</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition.mk","kind":"ctor","line":30,"name":"Lean.Elab.PreDefinition.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PreDefinition</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A (potentially recursive) definition.\nThe elaborator converts it into Kernel definitions using many different strategies.\n","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition","kind":"structure","line":26,"name":"Lean.Elab.PreDefinition","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L26-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.cleanup.letToHave\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">cleanup</span>.<span class=\"name\">letToHave</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.cleanup.letToHave","kind":"opaque","line":21,"name":"Lean.Elab.cleanup.letToHave","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/PreDefinition/Basic.lean#L21-L24"}}],"imports":["Lean.Compiler.NoncomputableAttr","Lean.Util.NumApps","Lean.Meta.Eqns","Lean.Elab.RecAppSyntax","Lean.Elab.DefView"],"instances":[{"className":"Inhabited","name":"Lean.Elab.instInhabitedPreDefinition","typeNames":["Lean.Elab.PreDefinition"]}],"name":"Lean.Elab.PreDefinition.Basic"}