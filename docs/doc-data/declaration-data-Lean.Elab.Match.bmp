{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.elabNoFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabNoFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.elabNoFun","kind":"def","line":1320,"name":"Lean.Elab.Term.elabNoFun","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L1320-L1328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.elabNoMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabNoMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.elabNoMatch","kind":"def","line":1289,"name":"Lean.Elab.Term.elabNoMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L1289-L1318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.elabMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.elabMatch","kind":"def","line":1266,"name":"Lean.Elab.Term.elabMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L1266-L1283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.reportMatcherResultErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">reportMatcherResultErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altLHSS</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">Meta.Match.AltLHS</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">Meta.Match.MatcherResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.reportMatcherResultErrors","kind":"def","line":1036,"name":"Lean.Elab.Term.reportMatcherResultErrors","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L1036-L1048"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.mkRedundantAlternativeMsg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkRedundantAlternativeMsg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altName?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Constructs a \"redundant alternative\" error message.\n\nOptionally accepts the name of the constructor (e.g., for use in the `induction` tactic) and/or the\nmessage-data representation of the alternative in question.\n","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.mkRedundantAlternativeMsg","kind":"def","line":1025,"name":"Lean.Elab.Term.mkRedundantAlternativeMsg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L1025-L1034"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.match.ignoreUnusedAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">match</span>.<span class=\"name\">ignoreUnusedAlts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.match.ignoreUnusedAlts","kind":"opaque","line":1020,"name":"Lean.Elab.Term.match.ignoreUnusedAlts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L1020-L1023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.mkMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">Meta.Match.MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">Meta.Match.MatcherResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.mkMatcher","kind":"def","line":1017,"name":"Lean.Elab.Term.mkMatcher","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L1017-L1018"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.refined\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">GeneralizeResult</span>.<span class=\"name\">refined</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult\">GeneralizeResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.refined","kind":"def","line":859,"name":"Lean.Elab.Term.GeneralizeResult.refined","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L859-L859"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.altViews\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">GeneralizeResult</span>.<span class=\"name\">altViews</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult\">GeneralizeResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MatchAltView.html#Lean.Elab.Term.MatchAltView\">MatchAltView</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.altViews","kind":"def","line":858,"name":"Lean.Elab.Term.GeneralizeResult.altViews","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L858-L858"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.matchType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">GeneralizeResult</span>.<span class=\"name\">matchType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult\">GeneralizeResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.matchType","kind":"def","line":857,"name":"Lean.Elab.Term.GeneralizeResult.matchType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L857-L857"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.toClear\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">GeneralizeResult</span>.<span class=\"name\">toClear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult\">GeneralizeResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"`FVarId`s of the variables that have been generalized. We store them to clear after in each branch. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.toClear","kind":"def","line":856,"name":"Lean.Elab.Term.GeneralizeResult.toClear","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L856-L856"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.discrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">GeneralizeResult</span>.<span class=\"name\">discrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult\">GeneralizeResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.discrs","kind":"def","line":854,"name":"Lean.Elab.Term.GeneralizeResult.discrs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L854-L854"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">GeneralizeResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toClear</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altViews</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MatchAltView.html#Lean.Elab.Term.MatchAltView\">MatchAltView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">refined</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult\">GeneralizeResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult.mk","kind":"ctor","line":853,"name":"Lean.Elab.Term.GeneralizeResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L853-L853"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">GeneralizeResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.GeneralizeResult","kind":"structure","line":853,"name":"Lean.Elab.Term.GeneralizeResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L853-L859"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.withDepElimPatterns\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withDepElimPatterns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patternVarDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl\">PatternVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Meta.Match.Pattern</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.withDepElimPatterns","kind":"def","line":756,"name":"Lean.Elab.Term.withDepElimPatterns","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L756-L757"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">main</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patternVarDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl\">PatternVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Pattern\">Meta.Match.Pattern</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Main method for `withDepElimPatterns`.\n- `PatternVarDecls`: are the explicit pattern variables provided by the user.\n- `ps`: are the patterns provided by the user.\n- `matchType`: the expected typ for this branch. It depends on the explicit pattern variables and the implicit ones that are still represented as metavariables,\n   and are found by this function.\n- `k` is the continuation that is executed in an updated local context with the all pattern variables (explicit and implicit). Note that, `patternVarDecls` are all\n   replaced since they may depend on implicit pattern variables (i.e., metavariables) that are converted into new free variables by this method.\n","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.main","kind":"def","line":690,"name":"Lean.Elab.Term.ToDepElimPattern.main","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L690-L752"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.savePatternInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">savePatternInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Save pattern information in the info tree, and remove `patternWithRef?` annotations.\n","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.savePatternInfo","kind":"def","line":665,"name":"Lean.Elab.Term.ToDepElimPattern.savePatternInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L665-L688"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSortM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">TopSortM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSortM","kind":"def","line":628,"name":"Lean.Elab.Term.ToDepElimPattern.TopSortM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L628-L628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.result\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">TopSort</span>.<span class=\"name\">State</span>.<span class=\"name\">result</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.result","kind":"def","line":626,"name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State.result","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L626-L626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">TopSort</span>.<span class=\"name\">State</span>.<span class=\"name\">visitedMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarIdSet\">MVarIdSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedMVars","kind":"def","line":625,"name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedMVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L625-L625"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">TopSort</span>.<span class=\"name\">State</span>.<span class=\"name\">visitedFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedFVars","kind":"def","line":624,"name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State.visitedFVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L624-L624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">TopSort</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visitedFVars</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visitedMVars</span> : <a href=\"./Lean/Expr.html#Lean.MVarIdSet\">MVarIdSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State.mk","kind":"ctor","line":623,"name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L623-L623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">TopSort</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.TopSort.State","kind":"structure","line":623,"name":"Lean.Elab.Term.ToDepElimPattern.TopSort.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L623-L626"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.normalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Normalize the pattern and collect all patterns variables (explicit and implicit).\nThis method is the one that decides where the inaccessible annotations must be inserted.\nThe pattern variables are both free variables (for explicit pattern variables) and metavariables (for implicit ones).\nRecall that `mkLambdaFVars` now allows us to abstract both free variables and metavariables.\n","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.normalize","kind":"opaque","line":486,"name":"Lean.Elab.Term.ToDepElimPattern.normalize","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L486-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.isExplicitPatternVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">isExplicitPatternVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return true iff `e` is an explicit pattern variable provided by the user. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.isExplicitPatternVar","kind":"def","line":417,"name":"Lean.Elab.Term.ToDepElimPattern.isExplicitPatternVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L417-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.M","kind":"def","line":415,"name":"Lean.Elab.Term.ToDepElimPattern.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L415-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.explicitPatternVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">Context</span>.<span class=\"name\">explicitPatternVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"Pattern variables that were explicitly provided by the user.\nRecall that implicit parameters and `_` are elaborated as metavariables, and then converted into pattern variables\nby the `normalize` procedure.\n","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.explicitPatternVars","kind":"def","line":413,"name":"Lean.Elab.Term.ToDepElimPattern.Context.explicitPatternVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L413-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.userName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">Context</span>.<span class=\"name\">userName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"When visiting an assigned metavariable, if it has an user-name. We save it here.\nWe want to preserve these user-names when generating new pattern variables. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.userName","kind":"def","line":407,"name":"Lean.Elab.Term.ToDepElimPattern.Context.userName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L407-L407"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicitPatternVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context.mk","kind":"ctor","line":403,"name":"Lean.Elab.Term.ToDepElimPattern.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L403-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.Context","kind":"structure","line":403,"name":"Lean.Elab.Term.ToDepElimPattern.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L403-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State.patternVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">State</span>.<span class=\"name\">patternVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State.patternVars","kind":"def","line":401,"name":"Lean.Elab.Term.ToDepElimPattern.State.patternVars","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L401-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patternVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State.mk","kind":"ctor","line":400,"name":"Lean.Elab.Term.ToDepElimPattern.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L400-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToDepElimPattern</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ToDepElimPattern.State","kind":"structure","line":400,"name":"Lean.Elab.Term.ToDepElimPattern.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L400-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.pathToIndex\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">PatternElabException</span>.<span class=\"name\">pathToIndex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException\">PatternElabException</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.pathToIndex","kind":"def","line":233,"name":"Lean.Elab.Term.PatternElabException.pathToIndex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L233-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.patternIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">PatternElabException</span>.<span class=\"name\">patternIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException\">PatternElabException</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.patternIdx","kind":"def","line":232,"name":"Lean.Elab.Term.PatternElabException.patternIdx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L232-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.ex\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">PatternElabException</span>.<span class=\"name\">ex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException\">PatternElabException</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.ex","kind":"def","line":231,"name":"Lean.Elab.Term.PatternElabException.ex","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L231-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">PatternElabException</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patternIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pathToIndex</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException\">PatternElabException</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException.mk","kind":"ctor","line":230,"name":"Lean.Elab.Term.PatternElabException.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">PatternElabException</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary structure for storing an type mismatch exception when processing the\npattern #`idx` of some alternative. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternElabException","kind":"structure","line":228,"name":"Lean.Elab.Term.PatternElabException","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L228-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">PatternVarDecl</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl\">PatternVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl.fvarId","kind":"def","line":193,"name":"Lean.Elab.Term.PatternVarDecl.fvarId","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">PatternVarDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl\">PatternVarDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl.mk","kind":"ctor","line":192,"name":"Lean.Elab.Term.PatternVarDecl.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L192-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">PatternVarDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"We convert the collected `PatternVar`s intro `PatternVarDecl` ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.PatternVarDecl","kind":"structure","line":191,"name":"Lean.Elab.Term.PatternVarDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L191-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.precheckMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">precheckMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation/Precheck.html#Lean.Elab.Term.Quotation.Precheck\">Quotation.Precheck</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.precheckMatch","kind":"def","line":181,"name":"Lean.Elab.Term.precheckMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L181-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.elabInaccessible\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabInaccessible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.elabInaccessible","kind":"def","line":176,"name":"Lean.Elab.Term.elabInaccessible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L176-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.getMatchAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getMatchAlts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MatchAltView.html#Lean.Elab.Term.MatchAltView\">MatchAltView</a></span></span></div></div>","info":{"doc":"Given `stx` a match-expression, return its alternatives. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.getMatchAlts","kind":"def","line":170,"name":"Lean.Elab.Term.getMatchAlts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L170-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.getMatchAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getMatchAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/MatchAltView.html#Lean.Elab.Term.MatchAltView\">MatchAltView</a></span></span></div></div>","info":{"doc":"Given the `stx` of a single match alternative, return a corresponding `MatchAltView`. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.getMatchAlt","kind":"def","line":160,"name":"Lean.Elab.Term.getMatchAlt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L160-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.expandMacrosInPatterns\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandMacrosInPatterns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchAlts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MatchAltView.html#Lean.Elab.Term.MatchAltView\">MatchAltView</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MatchAltView.html#Lean.Elab.Term.MatchAltView\">MatchAltView</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.expandMacrosInPatterns","kind":"def","line":150,"name":"Lean.Elab.Term.expandMacrosInPatterns","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L150-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabMatchTypeAndDiscrsResult</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult\">ElabMatchTypeAndDiscrsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MatchAltView.html#Lean.Elab.Term.MatchAltView\">MatchAltView</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.alts","kind":"def","line":77,"name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.alts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.isDep\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabMatchTypeAndDiscrsResult</span>.<span class=\"name\">isDep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult\">ElabMatchTypeAndDiscrsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`true` when performing dependent elimination. We use this to decide whether we optimize the \"match unit\" case.\nSee `isMatchUnit?`. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.isDep","kind":"def","line":76,"name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.isDep","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.matchType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabMatchTypeAndDiscrsResult</span>.<span class=\"name\">matchType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult\">ElabMatchTypeAndDiscrsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.matchType","kind":"def","line":73,"name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.matchType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.discrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabMatchTypeAndDiscrsResult</span>.<span class=\"name\">discrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult\">ElabMatchTypeAndDiscrsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.discrs","kind":"def","line":72,"name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.discrs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabMatchTypeAndDiscrsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isDep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MatchAltView.html#Lean.Elab.Term.MatchAltView\">MatchAltView</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult\">ElabMatchTypeAndDiscrsResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.mk","kind":"ctor","line":71,"name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabMatchTypeAndDiscrsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.ElabMatchTypeAndDiscrsResult","kind":"structure","line":71,"name":"Lean.Elab.Term.ElabMatchTypeAndDiscrsResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L71-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.instInhabitedDiscr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedDiscr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.instInhabitedDiscr.default","kind":"def","line":69,"name":"Lean.Elab.Term.instInhabitedDiscr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.instInhabitedDiscr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedDiscr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.instInhabitedDiscr","kind":"instance","line":69,"name":"Lean.Elab.Term.instInhabitedDiscr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.h?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Discr</span>.<span class=\"name\">h?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"`some h` if discriminant is annotated with the `h : ` notation. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.h?","kind":"def","line":68,"name":"Lean.Elab.Term.Discr.h?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Discr</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.expr","kind":"def","line":66,"name":"Lean.Elab.Term.Discr.expr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Discr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\">Discr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.Discr.mk","kind":"ctor","line":65,"name":"Lean.Elab.Term.Discr.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.Discr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Discr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.Discr","kind":"structure","line":65,"name":"Lean.Elab.Term.Discr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L65-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Match.html#Lean.Elab.Term.isAtomicDiscr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">isAtomicDiscr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Remark: if the discriminant is `Syntax.missing`, we abort the elaboration of the `match`-expression.\nThis can happen due to error recovery. Example\n```\nexample : (p ∨ p) → p := fun h => match\n```\nIf we don't abort, the elaborator loops because we will keep trying to expand\n```\nmatch\n```\ninto\n```\nlet d := <Syntax.missing>; match\n```\nRecall that `Syntax.setArg stx i arg` is a no-op when `i` is out-of-bounds. ","docLink":"./Lean/Elab/Match.html#Lean.Elab.Term.isAtomicDiscr","kind":"def","line":33,"name":"Lean.Elab.Term.isAtomicDiscr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Elab/Match.lean#L33-L53"}}],"imports":["Lean.Meta.Match.Match","Lean.Meta.GeneralizeVars","Lean.Elab.BindersUtil","Lean.Elab.PatternVar","Lean.Elab.Quotation.Precheck","Lean.Elab.SyntheticMVars"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Term.instInhabitedDiscr","typeNames":["Lean.Elab.Term.Discr"]}],"name":"Lean.Elab.Match"}