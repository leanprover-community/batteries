{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.Decl.insertResetReuse\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">insertResetReuse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.Decl.insertResetReuse","kind":"def","line":276,"name":"Lean.IR.Decl.insertResetReuse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L276-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.Decl.insertResetReuseCore\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">insertResetReuseCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">relaxedReuse</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.Decl.insertResetReuseCore","kind":"def","line":266,"name":"Lean.IR.Decl.insertResetReuseCore","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L266-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.collectResets\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">collectResets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.N\">N</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.collectResets","kind":"opaque","line":254,"name":"Lean.IR.ResetReuse.collectResets","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L254-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.N\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">N</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.N","kind":"def","line":252,"name":"Lean.IR.ResetReuse.N","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L252-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.R\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">R</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.R","kind":"opaque","line":223,"name":"Lean.IR.ResetReuse.R","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L223-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification.none\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">UseClassification</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification\">UseClassification</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification.none","kind":"ctor","line":137,"name":"Lean.IR.ResetReuse.UseClassification.none","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification.other\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">UseClassification</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification\">UseClassification</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification.other","kind":"ctor","line":136,"name":"Lean.IR.ResetReuse.UseClassification.other","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification.ownedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">UseClassification</span>.<span class=\"name\">ownedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification\">UseClassification</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification.ownedArg","kind":"ctor","line":135,"name":"Lean.IR.ResetReuse.UseClassification.ownedArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L135-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">UseClassification</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.UseClassification","kind":"inductive","line":134,"name":"Lean.IR.ResetReuse.UseClassification","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L134-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"We use `Context` to track join points in scope. ","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.M","kind":"def","line":101,"name":"Lean.IR.ResetReuse.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L101-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.relaxedReuse\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">Context</span>.<span class=\"name\">relaxedReuse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `relaxedReuse := true`, then allow memory cells from different\nconstructors to be reused. For example, we can reuse a `PSigma.mk`\nto allocate a `Prod.mk`. To avoid counterintuitive behavior,\nwe first try `relaxedReuse := false`, and then `relaxedReuse := true`.\n","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.relaxedReuse","kind":"def","line":99,"name":"Lean.IR.ResetReuse.Context.relaxedReuse","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.alreadyFound\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">Context</span>.<span class=\"name\">alreadyFound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>","info":{"doc":"Contains all variables in `cases` statements in the current path\nand variables that are already in `reset` statements when we\ninvoke `R`.\n\nWe use this information to prevent double-reset in code such as\n```\ncase x_i : obj of\nProd.mk →\n  case x_i : obj of\n  Prod.mk →\n  ...\n```\n\nA variable can already be in a `reset` statement when we\ninvoke `R` because we execute it with and without `relaxedReuse`.\n","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.alreadyFound","kind":"def","line":92,"name":"Lean.IR.ResetReuse.Context.alreadyFound","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">Context</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.lctx","kind":"def","line":74,"name":"Lean.IR.ResetReuse.Context.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.env\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">Context</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.env","kind":"def","line":73,"name":"Lean.IR.ResetReuse.Context.env","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alreadyFound</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">relaxedReuse</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context.mk","kind":"ctor","line":72,"name":"Lean.IR.ResetReuse.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ResetReuse</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ResetReuse.html#Lean.IR.ResetReuse.Context","kind":"structure","line":72,"name":"Lean.IR.ResetReuse.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/IR/ResetReuse.lean#L72-L99"}}],"imports":["Lean.Compiler.IR.CompilerM","Lean.Compiler.IR.LiveVars"],"instances":[],"name":"Lean.Compiler.IR.ResetReuse"}