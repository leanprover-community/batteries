{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkEqProofOfLeOfLe\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkEqProofOfLeOfLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">h₁ </span><span class=\"fn\">h₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkEqProofOfLeOfLe","kind":"def","line":213,"name":"Lean.Meta.Grind.Order.mkEqProofOfLeOfLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L213-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkUnsatProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkUnsatProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns a proof of `False` using a negative cycle composed of\n- `u --(k₁)--> v` with proof `h₁`\n- `v --(k₂)--> u` with proof `h₂`\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkUnsatProof","kind":"def","line":202,"name":"Lean.Meta.Grind.Order.mkUnsatProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L202-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkPropagateEqFalseProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkPropagateEqFalseProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huv</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given a path `u --(k)--> v` justified by proof `huv`,\nconstruct a proof of `e = False` where `e` is a term corresponding to the edge `u --(k') --> v`\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkPropagateEqFalseProof","kind":"def","line":177,"name":"Lean.Meta.Grind.Order.mkPropagateEqFalseProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L177-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkPropagateEqTrueProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkPropagateEqTrueProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huv</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k'</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.Weight\">Weight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given a path `u --(k)--> v` justified by proof `huv`,\nconstruct a proof of `e = True` where `e` is a term corresponding to the edge `u --(k') --> v`\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkPropagateEqTrueProof","kind":"def","line":146,"name":"Lean.Meta.Grind.Order.mkPropagateEqTrueProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L146-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkTrans\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkTrans</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Meta/Tactic/Grind/Order/Types.html#Lean.Meta.Grind.Order.ProofInfo\">ProofInfo</a></span></div></div>","info":{"doc":"Assume `p₁` is `{ w := u, k := k₁, proof := p₁ }` and `p₂` is `{ w := w, k := k₂, proof := p₂ }`\n`p₁` is the proof for edge `u -(k₁)→ w` and `p₂` the proof for edge `w -(k₂)-> v`.\nThen, this function returns a proof for edge `u -(k₁+k₂) -> v`.\n\nRemark: if the order does not support offset `k₁` and `k₂` are zero.\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkTrans","kind":"def","line":116,"name":"Lean.Meta.Grind.Order.mkTrans","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L116-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkLinearOrdRingPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkLinearOrdRingPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns `declName α leInst ltInst lawfulOrderLtInst isLinearPreorderInst ringInst ordRingInst`\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkLinearOrdRingPrefix","kind":"def","line":62,"name":"Lean.Meta.Grind.Order.mkLinearOrdRingPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L62-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkOrdRingPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkOrdRingPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns `declName α leInst ltInst lawfulOrderLtInst isPreorderInst ringInst ordRingInst`\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkOrdRingPrefix","kind":"def","line":54,"name":"Lean.Meta.Grind.Order.mkOrdRingPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L54-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkLeLinearPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkLeLinearPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns `declName α leInst isLinearPreorderInst`\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkLeLinearPrefix","kind":"def","line":47,"name":"Lean.Meta.Grind.Order.mkLeLinearPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L47-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkLeLtLinearPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkLeLtLinearPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns `declName α leInst ltInst lawfulOrderLtInst isLinearPreorderInst`\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkLeLtLinearPrefix","kind":"def","line":40,"name":"Lean.Meta.Grind.Order.mkLeLtLinearPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L40-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkLePreorderPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Order</span>.<span class=\"name\">mkLePreorderPrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Order/OrderM.html#Lean.Meta.Grind.Order.OrderM\">OrderM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Returns `declName α leInst isPreorderInst`\n","docLink":"./Lean/Meta/Tactic/Grind/Order/Proof.html#Lean.Meta.Grind.Order.mkLePreorderPrefix","kind":"def","line":12,"name":"Lean.Meta.Grind.Order.mkLePreorderPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/Order/Proof.lean#L12-L17"}}],"imports":["Lean.Meta.Tactic.Grind.Order.OrderM","Lean.Meta.Tactic.Grind.Arith.CommRing.RingM","Init.Grind.Order"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Order.Proof"}