{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Operations.html#Std.Slice.foldl\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Iterators.IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">δ</span></div></div>","info":{"doc":"Folds an operation from left to right over the elements in a slice.\nAn accumulator of type `β` is constructed by starting with `init` and combining each\nelement of the slice with the current accumulator value in turn.\nExamples for the special case of subarrays:\n * `#[\"red\", \"green\", \"blue\"].toSubarray.foldl (· + ·.length) 0 = 12`\n * `#[\"red\", \"green\", \"blue\"].toSubarray.popFront.foldl (· + ·.length) 0 = 9`\n","docLink":"./Init/Data/Slice/Operations.html#Std.Slice.foldl","kind":"def","line":90,"name":"Std.Slice.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Operations.lean#L90-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Operations.html#Std.Slice.foldlM\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Iterators.IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>","info":{"doc":"Folds a monadic operation from left to right over the elements in a slice.\nAn accumulator of type `β` is constructed by starting with `init` and monadically combining each\nelement of the slice with the current accumulator value in turn. The monad in question may permit\nearly termination or repetition.\n\nExamples for the special case of subarrays:\n```lean example\n#eval #[\"red\", \"green\", \"blue\"].toSubarray.foldlM (init := \"\") fun acc x => do\n  let l ← Option.guard (· ≠ 0) x.length\n  return s!\"{acc}({l}){x} \"\n```\n```output\nsome \"(3)red (5)green (4)blue \"\n```\n```lean example\n#eval #[\"red\", \"green\", \"blue\"].toSubarray.foldlM (init := 0) fun acc x => do\n  let l ← Option.guard (· ≠ 5) x.length\n  return s!\"{acc}({l}){x} \"\n```\n```output\nnone\n```\n","docLink":"./Init/Data/Slice/Operations.html#Std.Slice.foldlM","kind":"def","line":59,"name":"Std.Slice.foldlM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Operations.lean#L59-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Operations.html#Std.Slice.toListRev\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">toListRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Allocates a new list that contains the elements of the slice in reverse order. ","docLink":"./Init/Data/Slice/Operations.html#Std.Slice.toListRev","kind":"def","line":53,"name":"Std.Slice.toListRev","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Operations.lean#L53-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Operations.html#Std.Slice.toList\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Allocates a new list that contains the elements of the slice. ","docLink":"./Init/Data/Slice/Operations.html#Std.Slice.toList","kind":"def","line":47,"name":"Std.Slice.toList","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Operations.lean#L47-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Operations.html#Std.Slice.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Allocates a new array that contains the elements of the slice. ","docLink":"./Init/Data/Slice/Operations.html#Std.Slice.toArray","kind":"def","line":41,"name":"Std.Slice.toArray","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Operations.lean#L41-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Operations.html#Std.Slice.size\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">Iterators.IteratorSize</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Returns the number of elements with distinct indices in the given slice.\n\nExample: `#[1, 1, 1][0...2].size = 2`.\n","docLink":"./Init/Data/Slice/Operations.html#Std.Slice.size","kind":"def","line":31,"name":"Std.Slice.size","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Operations.lean#L31-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Operations.html#Std.Slice.Internal.iter\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">Internal</span>.<span class=\"name\">iter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Slice/Basic.html#Std.Slice\">Slice</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Internal function to obtain an iterator from a slice. Users should import `Std.Data.Iterators`\nand use `Std.Slice.iter` instead.\n","docLink":"./Init/Data/Slice/Operations.html#Std.Slice.Internal.iter","kind":"def","line":23,"name":"Std.Slice.Internal.iter","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Operations.lean#L23-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Operations.html#Std.Slice.instToIteratorMk\"><span class=\"name\">Std</span>.<span class=\"name\">Slice</span>.<span class=\"name\">instToIteratorMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <span class=\"fn\">x</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Iterators.ToIterator</a> <a href=\"./Init/Data/Slice/Basic.html#Std.Slice.mk\">{</a> <span class=\"fn\">internalRepresentation</span> := <span class=\"fn\">x</span> <a href=\"./Init/Data/Slice/Basic.html#Std.Slice.mk\">}</a> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Operations.html#Std.Slice.instToIteratorMk","kind":"instance","line":19,"name":"Std.Slice.instToIteratorMk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Slice/Operations.lean#L19-L21"}}],"imports":["Init.Data.Slice.Basic","Init.Data.Slice.Notation","Init.Data.Iterators.ToIterator"],"instances":[{"className":"Std.Iterators.ToIterator","name":"Std.Slice.instToIteratorMk","typeNames":["Std.Slice.mk"]}],"name":"Init.Data.Slice.Operations"}