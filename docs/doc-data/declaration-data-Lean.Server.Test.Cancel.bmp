{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_main_cancel_once_async\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticWait_for_main_cancel_once_async</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Like `wait_for_cancel_once_async` but waits for the main thread's cancellation token. This is useful\nto test main thread cancellation in non-incremental contexts because we otherwise wouldn't be able\nto send out the \"blocked\" message from there.\n","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_main_cancel_once_async","kind":"def","line":153,"name":"Lean.Server.Test.Cancel.tacticWait_for_main_cancel_once_async","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/Test/Cancel.lean#L153-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_cancel_once_async\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticWait_for_cancel_once_async</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Like `wait_for_cancel_once` but does the waiting in a separate task and waits for its\ncancellation.\n","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_cancel_once_async","kind":"def","line":121,"name":"Lean.Server.Test.Cancel.tacticWait_for_cancel_once_async","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/Test/Cancel.lean#L121-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticUnblock\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticUnblock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Unblocks a `wait_for_unblock*` task. ","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticUnblock","kind":"def","line":116,"name":"Lean.Server.Test.Cancel.tacticUnblock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/Test/Cancel.lean#L116-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_unblock_async\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticWait_for_unblock_async</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Spawns a `logSnapshotTask` that waits for `unblock` to be called, which is expected to happen in a\nsubsequent document version that does not invalidate this tactic. Complains if cancellation token\nwas set before unblocking, i.e. if the tactic was invalidated after all.\n","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_unblock_async","kind":"def","line":94,"name":"Lean.Server.Test.Cancel.tacticWait_for_unblock_async","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/Test/Cancel.lean#L94-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_unblock\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticWait_for_unblock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"Waits for `unblock` to be called, which is expected to happen in a subsequent document version that\ndoes not invalidate this tactic. Complains if cancellation token was set before unblocking, i.e. if\nthe tactic was invalidated after all.\n","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_unblock","kind":"def","line":64,"name":"Lean.Server.Test.Cancel.tacticWait_for_unblock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/Test/Cancel.lean#L64-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.unblockedCancelTk\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">unblockedCancelTk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></div></div>","info":{"doc":"","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.unblockedCancelTk","kind":"opaque","line":62,"name":"Lean.Server.Test.Cancel.unblockedCancelTk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/Test/Cancel.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_cancel_once\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">tacticWait_for_cancel_once</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"On first invocation, sends a diagnostics \"blocked\", blocks until cancelled, and then eprints\n\"cancelled!\"; further invocations complete when this wait is done but do not wait for their own\ncancellation. Thus all document versions should complete strictly after the printing has completed\nand we avoid terminating the server too early to see the message.\n","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.tacticWait_for_cancel_once","kind":"def","line":24,"name":"Lean.Server.Test.Cancel.tacticWait_for_cancel_once","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/Test/Cancel.lean#L24-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.onceRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Server</span>.<span class=\"name\">Test</span>.<span class=\"name\">Cancel</span>.<span class=\"name\">onceRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/Test/Cancel.html#Lean.Server.Test.Cancel.onceRef","kind":"opaque","line":22,"name":"Lean.Server.Test.Cancel.onceRef","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Server/Test/Cancel.lean#L22-L22"}}],"imports":["Lean.Elab.Tactic.Basic","Lean.Elab.Tactic.Basic"],"instances":[],"name":"Lean.Server.Test.Cancel"}