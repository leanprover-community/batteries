{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorSizePartialListIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorSizePartialListIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSizePartial\">IteratorSizePartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorSizePartialListIterator","kind":"instance","line":94,"name":"Std.Iterators.instIteratorSizePartialListIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L94-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorSizeListIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorSizeListIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">IteratorSize</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorSizeListIterator","kind":"instance","line":90,"name":"Std.Iterators.instIteratorSizeListIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L90-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorLoopPartialListIteratorOfMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorLoopPartialListIteratorOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> x → <a href=\"./foundational_types.html\">Type</a> x'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorLoopPartialListIteratorOfMonad","kind":"instance","line":85,"name":"Std.Iterators.instIteratorLoopPartialListIteratorOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L85-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorLoopListIteratorOfMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorLoopListIteratorOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> x → <a href=\"./foundational_types.html\">Type</a> x'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">IteratorLoop</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorLoopListIteratorOfMonad","kind":"instance","line":80,"name":"Std.Iterators.instIteratorLoopListIteratorOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L80-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorCollectPartialListIteratorOfMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorCollectPartialListIteratorOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w''</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorCollectPartialListIteratorOfMonad","kind":"instance","line":75,"name":"Std.Iterators.instIteratorCollectPartialListIteratorOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L75-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorCollectListIteratorOfMonad\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorCollectListIteratorOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w''</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">IteratorCollect</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorCollectListIteratorOfMonad","kind":"instance","line":70,"name":"Std.Iterators.instIteratorCollectListIteratorOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L70-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instFiniteListIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instFiniteListIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instFiniteListIterator","kind":"instance","line":67,"name":"Std.Iterators.instFiniteListIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorListIteratorOfPure\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">instIteratorListIteratorOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterator</a> <span class=\"fn\">(<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.instIteratorListIteratorOfPure","kind":"instance","line":48,"name":"Std.Iterators.instIteratorListIteratorOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L48-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#List.iterM\"><span class=\"name\">List</span>.<span class=\"name\">iterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">Std.IterM</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Returns a finite iterator for the given list.\nThe iterator yields the elements of the list in order and then terminates.\n\nThe non-monadic version of this iterator is `List.iter`.\n\n**Termination properties:**\n\n* `Finite` instance: always\n* `Productive` instance: always\n","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#List.iterM","kind":"def","line":32,"name":"List.iterM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L32-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.list\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ListIterator</span>.<span class=\"name\">list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.list","kind":"def","line":30,"name":"Std.Iterators.ListIterator.list","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ListIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">list</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.mk","kind":"ctor","line":29,"name":"Std.Iterators.ListIterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.ext_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ListIterator</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.list\">list</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.list\">list</a></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.ext_iff","kind":"theorem","line":28,"name":"Std.Iterators.ListIterator.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.ext\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ListIterator</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\">ListIterator</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">list</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.list\">list</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.list\">list</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator.ext","kind":"theorem","line":28,"name":"Std.Iterators.ListIterator.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ListIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>","info":{"doc":"The underlying state of a list iterator. Its contents are internal and should\nnot be used by downstream users of the library.\n","docLink":"./Std/Data/Iterators/Producers/Monadic/List.html#Std.Iterators.ListIterator","kind":"structure","line":24,"name":"Std.Iterators.ListIterator","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Std/Data/Iterators/Producers/Monadic/List.lean#L24-L30"}}],"imports":["Init.Data.Iterators.Consumers","Init.Data.Iterators.Internal.Termination"],"instances":[{"className":"Std.Iterators.Iterator","name":"Std.Iterators.instIteratorListIteratorOfPure","typeNames":["Std.Iterators.ListIterator"]},{"className":"Std.Iterators.Finite","name":"Std.Iterators.instFiniteListIterator","typeNames":["Std.Iterators.ListIterator"]},{"className":"Std.Iterators.IteratorCollect","name":"Std.Iterators.instIteratorCollectListIteratorOfMonad","typeNames":["Std.Iterators.ListIterator"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"Std.Iterators.instIteratorCollectPartialListIteratorOfMonad","typeNames":["Std.Iterators.ListIterator"]},{"className":"Std.Iterators.IteratorLoop","name":"Std.Iterators.instIteratorLoopListIteratorOfMonad","typeNames":["Std.Iterators.ListIterator"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"Std.Iterators.instIteratorLoopPartialListIteratorOfMonad","typeNames":["Std.Iterators.ListIterator"]},{"className":"Std.Iterators.IteratorSize","name":"Std.Iterators.instIteratorSizeListIterator","typeNames":["Std.Iterators.ListIterator"]},{"className":"Std.Iterators.IteratorSizePartial","name":"Std.Iterators.instIteratorSizePartialListIterator","typeNames":["Std.Iterators.ListIterator"]}],"name":"Std.Data.Iterators.Producers.Monadic.List"}