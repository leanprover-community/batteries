{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.mkBelowMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">IndPredBelow</span>.<span class=\"name\">mkBelowMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matcherApp</span> : <a href=\"./Lean/Meta/Match/MatcherApp/Basic.html#Lean.Meta.MatcherApp\">MatcherApp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">belowParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nrealParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext\">RecursionContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transformAlt</span> : <span class=\"fn\"><a href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext\">RecursionContext</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>))</span></span></div></div>","info":{"doc":"This function adds an additional `below` discriminant to a matcher application and transforms each\nalternative with the provided `transformAlt` function. The provided recursion context is used for\nfinding below proofs that correspond to discriminants and is extended with new proofs when calling\n`transformAlt`. `belowParams` should contain parameters and motives for `below` applications where\nthe first `nrealParams` are parameters and the remaining are motives.\n","docLink":"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.mkBelowMatcher","kind":"def","line":311,"name":"Lean.Meta.IndPredBelow.mkBelowMatcher","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/IndPredBelow.lean#L311-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext.motives\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">IndPredBelow</span>.<span class=\"name\">RecursionContext</span>.<span class=\"name\">motives</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext\">RecursionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Map from proofs `h : ∀ x y z, ...` to pairs of `n` and a proof of\n`h' : ∀ x y z, <nth motive> ... (h' x y z)` (nth motive corresponds to the order of motives in\nthe recursor). These are used to eliminate recursive calls.\n","docLink":"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext.motives","kind":"def","line":268,"name":"Lean.Meta.IndPredBelow.RecursionContext.motives","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/IndPredBelow.lean#L268-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext.belows\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">IndPredBelow</span>.<span class=\"name\">RecursionContext</span>.<span class=\"name\">belows</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext\">RecursionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Map from proofs `h : ∀ x y z, ...` to pairs of `belowIndName` and a proof of\n`h' : ∀ x y z, belowIndName ... (h x y z)`. These are used to find match rewriting candidates.\n","docLink":"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext.belows","kind":"def","line":262,"name":"Lean.Meta.IndPredBelow.RecursionContext.belows","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/IndPredBelow.lean#L262-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">IndPredBelow</span>.<span class=\"name\">RecursionContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">belows</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motives</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext\">RecursionContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext.mk","kind":"ctor","line":257,"name":"Lean.Meta.IndPredBelow.RecursionContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/IndPredBelow.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">IndPredBelow</span>.<span class=\"name\">RecursionContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Records below proofs and motive proofs available. This is extended using `NewDecl`s while visiting\nand rewriting match expressions.\n","docLink":"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.RecursionContext","kind":"structure","line":253,"name":"Lean.Meta.IndPredBelow.RecursionContext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/IndPredBelow.lean#L253-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.mkBelow\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">IndPredBelow</span>.<span class=\"name\">mkBelow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Generates the auxiliary lemmas `below` and `brecOn` for a recursive inductive predicate. ","docLink":"./Lean/Meta/IndPredBelow.html#Lean.Meta.IndPredBelow.mkBelow","kind":"def","line":209,"name":"Lean.Meta.IndPredBelow.mkBelow","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/IndPredBelow.lean#L209-L233"}}],"imports":["Lean.Meta.Match.MatcherApp.Basic","Lean.Meta.Constructions.CasesOn","Lean.Meta.Match.Match","Lean.Meta.Tactic.SolveByElim"],"instances":[],"name":"Lean.Meta.IndPredBelow"}