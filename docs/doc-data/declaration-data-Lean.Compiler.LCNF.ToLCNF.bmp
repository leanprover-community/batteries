{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"Put the given expression in `LCNF`.\n\n- Nested proofs are replaced with `lcProof`-applications.\n- Eta-expand applications of declarations that satisfy `shouldEtaExpand`.\n- Put computationally relevant expressions in A-normal form.\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNF","kind":"def","line":418,"name":"Lean.Compiler.LCNF.ToLCNF.toLCNF","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L418-L807"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.litToValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">litToValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lit</span> : <a href=\"./Lean/Expr.html#Lean.Literal\">Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.litToValue","kind":"def","line":413,"name":"Lean.Compiler.LCNF.ToLCNF.litToValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L413-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">etaReduceImplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Eta reduce implicits. We use this function to eliminate introduced by the implicit lambda feature,\nwhere it generates terms such as `fun {α} => ReaderT.pure`\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","kind":"opaque","line":393,"name":"Lean.Compiler.LCNF.ToLCNF.etaReduceImplicit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L393-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaExpandN\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">etaExpandN</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Eta-expand with `n` lambdas.\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.etaExpandN","kind":"def","line":383,"name":"Lean.Compiler.LCNF.ToLCNF.etaExpandN","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L383-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mustEtaExpand\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mustEtaExpand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","kind":"def","line":375,"name":"Lean.Compiler.LCNF.ToLCNF.mustEtaExpand","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L375-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitBoundedLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","kind":"def","line":362,"name":"Lean.Compiler.LCNF.ToLCNF.visitBoundedLambda","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L362-L373"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">visitLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.visitLambda","kind":"def","line":351,"name":"Lean.Compiler.LCNF.ToLCNF.visitLambda","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L351-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value </span><span class=\"fn\">type'</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLetDecl","kind":"def","line":339,"name":"Lean.Compiler.LCNF.ToLCNF.mkLetDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L339-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>","info":{"doc":"Create a new local declaration using a Lean regular type. ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkParam","kind":"def","line":330,"name":"Lean.Compiler.LCNF.ToLCNF.mkParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L330-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.cleanupBinderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">cleanupBinderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","kind":"def","line":323,"name":"Lean.Compiler.LCNF.ToLCNF.cleanupBinderName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L323-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNFType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toLCNFType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toLCNFType","kind":"def","line":314,"name":"Lean.Compiler.LCNF.ToLCNF.toLCNFType","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L314-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.applyToAny\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">applyToAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.applyToAny","kind":"def","line":308,"name":"Lean.Compiler.LCNF.ToLCNF.applyToAny","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L308-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.withNewScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">withNewScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.withNewScope","kind":"def","line":289,"name":"Lean.Compiler.LCNF.ToLCNF.withNewScope","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L289-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.run","kind":"def","line":256,"name":"Lean.Compiler.LCNF.ToLCNF.run","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L256-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">toCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"Create `Code` that executes the current `seq` and then returns `result` ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.toCode","kind":"def","line":248,"name":"Lean.Compiler.LCNF.ToLCNF.toCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L248-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.letValueToArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">letValueToArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.letValueToArg","kind":"def","line":245,"name":"Lean.Compiler.LCNF.ToLCNF.letValueToArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L245-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkAuxLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","kind":"def","line":237,"name":"Lean.Compiler.LCNF.ToLCNF.mkAuxLetDecl","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L237-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkUnreachable\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkUnreachable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkUnreachable","kind":"def","line":232,"name":"Lean.Compiler.LCNF.ToLCNF.mkUnreachable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L232-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.pushElement\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">pushElement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elem</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Add LCNF element to the current sequence ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.pushElement","kind":"def","line":228,"name":"Lean.Compiler.LCNF.ToLCNF.pushElement","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L228-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.liftMetaM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">liftMetaM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.liftMetaM","kind":"def","line":225,"name":"Lean.Compiler.LCNF.ToLCNF.liftMetaM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L225-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.M","kind":"def","line":223,"name":"Lean.Compiler.LCNF.ToLCNF.M","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.toAny\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">toAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>","info":{"doc":"Fields that are type formers must be replaced with `◾`\nin the resulting code. Otherwise, we have data occurring in\ntypes.\nWhen converting a `casesOn` into LCNF, we add constructor fields\nthat are types and type formers into this set. See `visitCases`.\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.toAny","kind":"def","line":221,"name":"Lean.Compiler.LCNF.ToLCNF.State.toAny","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.seq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">seq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span></div></div>","info":{"doc":"LCNF sequence, we chain it to create a LCNF `Code` object. ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.seq","kind":"def","line":213,"name":"Lean.Compiler.LCNF.ToLCNF.State.seq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L213-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">isTypeFormerTypeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"isTypeFormerType cache ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache","kind":"def","line":211,"name":"Lean.Compiler.LCNF.ToLCNF.State.isTypeFormerTypeCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L211-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.typeCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">typeCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"`toLCNFType` cache ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.typeCache","kind":"def","line":209,"name":"Lean.Compiler.LCNF.ToLCNF.State.typeCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L209-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.shouldCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">shouldCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Determines whether caching has been disabled due to finding a use of\na constant marked with `never_extract`.\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.shouldCache","kind":"def","line":207,"name":"Lean.Compiler.LCNF.ToLCNF.State.shouldCache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L207-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>","info":{"doc":"Cache from Lean regular expression to LCNF argument. ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.cache","kind":"def","line":202,"name":"Lean.Compiler.LCNF.ToLCNF.State.cache","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L202-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"Local context containing the original Lean types (not LCNF ones). ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.lctx","kind":"def","line":200,"name":"Lean.Compiler.LCNF.ToLCNF.State.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L200-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shouldCache</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeCache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isTypeFormerTypeCache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toAny</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State.mk","kind":"ctor","line":198,"name":"Lean.Compiler.LCNF.ToLCNF.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.State","kind":"structure","line":198,"name":"Lean.Compiler.LCNF.ToLCNF.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L198-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">seqToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.seqToCode","kind":"def","line":155,"name":"Lean.Compiler.LCNF.ToLCNF.seqToCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L155-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">bindCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"This method returns code that at each exit point of `cases`, it jumps to `jpDecl`.\nIt is similar to `Code.bind`, but we add special support for `inlineMatcher`.\nThe `inlineMatcher` function inlines the auxiliary `_match_<idx>` declarations.\nTo make sure there is no code duplication, `inlineMatcher` creates auxiliary declarations `_alt.<idx>`.\nWe can say the `_alt.<idx>` declarations are pre join points. For each auxiliary declaration used at\nan exit point of `cases`, this method creates an new auxiliary join point that invokes `_alt.<idx>`,\nand then jumps to `jpDecl`. The goal is to make sure the auxiliary join point is the only occurrence\nof `_alt.<idx>`, then `simp` will inline it.\nThat is, our goal is to try to promote the pre join points `_alt.<idx>` into a proper join point.\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.bindCases","kind":"def","line":53,"name":"Lean.Compiler.LCNF.ToLCNF.bindCases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L53-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">BindCasesM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary monad for implementing `bindCases` ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM","kind":"def","line":50,"name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">BindCasesM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for `BindCasesM` monad\nMapping from `_alt.<idx>` variables to new join points\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","kind":"def","line":44,"name":"Lean.Compiler.LCNF.ToLCNF.BindCasesM.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L44-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">instInhabitedElement</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","kind":"instance","line":42,"name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">instInhabitedElement</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.instInhabitedElement.default","kind":"def","line":42,"name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.unreach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">unreach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.unreach","kind":"ctor","line":41,"name":"Lean.Compiler.LCNF.ToLCNF.Element.unreach","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.cases","kind":"ctor","line":40,"name":"Lean.Compiler.LCNF.ToLCNF.Element.cases","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.let\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">let</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.let","kind":"ctor","line":39,"name":"Lean.Compiler.LCNF.ToLCNF.Element.let","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.fun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">fun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.fun","kind":"ctor","line":38,"name":"Lean.Compiler.LCNF.ToLCNF.Element.fun","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.jp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span>.<span class=\"name\">jp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\">Element</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element.jp","kind":"ctor","line":37,"name":"Lean.Compiler.LCNF.ToLCNF.Element.jp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">Element</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Auxiliary inductive datatype for constructing LCNF `Code` objects.\nThe `toLCNF` function maintains a sequence of elements that is eventually\nconverted into `Code`.\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.Element","kind":"inductive","line":31,"name":"Lean.Compiler.LCNF.ToLCNF.Element","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L31-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLcProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">mkLcProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Create the temporary `lcProof` ","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.mkLcProof","kind":"def","line":27,"name":"Lean.Compiler.LCNF.ToLCNF.mkLcProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L27-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.isLCProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToLCNF</span>.<span class=\"name\">isLCProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if `e` is a `lcProof` application.\nRecall that we use `lcProof` to erase all nested proofs.\n","docLink":"./Lean/Compiler/LCNF/ToLCNF.html#Lean.Compiler.LCNF.ToLCNF.isLCProof","kind":"def","line":20,"name":"Lean.Compiler.LCNF.ToLCNF.isLCProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/ToLCNF.lean#L20-L25"}}],"imports":["Lean.Meta.AppBuilder","Lean.Compiler.CSimpAttr","Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.Bind","Lean.Compiler.NeverExtractAttr"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.ToLCNF.instInhabitedElement","typeNames":["Lean.Compiler.LCNF.ToLCNF.Element"]}],"name":"Lean.Compiler.LCNF.ToLCNF"}