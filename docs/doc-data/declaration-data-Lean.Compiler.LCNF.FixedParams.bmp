{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.mkFixedParamsMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">mkFixedParamsMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>","info":{"doc":"Given the (potentially mutually) recursive declarations `decls`,\nreturn a map from declaration name `decl.name` to a bit-mask `m` where `m[i]` is true\niff the `decl.params[i]` is a fixed argument. That is, it does not change in recursive\napplications.\nThe function assumes that if a function `f` was declared in a mutual block, then `decls`\ncontains all (computationally relevant) functions in the mutual block.\n","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.mkFixedParamsMap","kind":"def","line":183,"name":"Lean.Compiler.LCNF.mkFixedParamsMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L183-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkInitialValues\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">mkInitialValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkInitialValues","kind":"def","line":174,"name":"Lean.Compiler.LCNF.FixedParams.mkInitialValues","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L174-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">FixParamM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalApp","kind":"opaque","line":138,"name":"Lean.Compiler.LCNF.FixedParams.evalApp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L138-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">FixParamM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalCode","kind":"opaque","line":123,"name":"Lean.Compiler.LCNF.FixedParams.evalCode","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L123-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.isEquivalentFunDecl?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">isEquivalentFunDecl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">FixParamM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.isEquivalentFunDecl?","kind":"def","line":110,"name":"Lean.Compiler.LCNF.FixedParams.isEquivalentFunDecl?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L110-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">FixParamM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalLetValue","kind":"opaque","line":105,"name":"Lean.Compiler.LCNF.FixedParams.evalLetValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L105-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">mkAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">values</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.mkAssignment","kind":"def","line":97,"name":"Lean.Compiler.LCNF.FixedParams.mkAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L97-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.inMutualBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">inMutualBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">FixParamM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.inMutualBlock","kind":"def","line":94,"name":"Lean.Compiler.LCNF.FixedParams.inMutualBlock","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L94-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">FixParamM</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalArg","kind":"def","line":87,"name":"Lean.Compiler.LCNF.FixedParams.evalArg","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L87-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">evalFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">FixParamM</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.evalFVar","kind":"def","line":83,"name":"Lean.Compiler.LCNF.FixedParams.evalFVar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L83-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.abort\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">abort</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\">FixParamM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Stop the analysis and mark all parameters as non-fixed. ","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.abort","kind":"def","line":78,"name":"Lean.Compiler.LCNF.FixedParams.abort","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L78-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">FixParamM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Monad for the fixed parameter static analyzer. We use the unit-exception to interrupt the analysis. ","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.FixParamM","kind":"def","line":75,"name":"Lean.Compiler.LCNF.FixedParams.FixParamM","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.fixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">State</span>.<span class=\"name\">fixed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Bitmask containing the result, i.e., which parameters of `main` are fixed.\nWe initialize it with `true` everywhere.\n","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.fixed","kind":"def","line":73,"name":"Lean.Compiler.LCNF.FixedParams.State.fixed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">State</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span>)</span></div></div>","info":{"doc":"Set of calls that have been already analyzed.\nRecall that we assume that only functions in `decls` may have recursive calls to the function being analyzed (i.e., `main`).\nWhenever there is function application `f a₁ ... aₙ`, where `f` is in `decls`, `f` is not `main`, and\nwe visit with the abstract values assigned to `aᵢ`, but first we record the visit here.\n","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.visited","kind":"def","line":68,"name":"Lean.Compiler.LCNF.FixedParams.State.visited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visited</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixed</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State.mk","kind":"ctor","line":61,"name":"Lean.Compiler.LCNF.FixedParams.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.State","kind":"structure","line":61,"name":"Lean.Compiler.LCNF.FixedParams.State","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L61-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span>.<span class=\"name\">assignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span></div></div>","info":{"doc":"The assignment maps free variable ids in the current code being analyzed to abstract values.\nWe only track the abstract value assigned to parameters.\n","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.assignment","kind":"def","line":59,"name":"Lean.Compiler.LCNF.FixedParams.Context.assignment","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L59-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></div></div>","info":{"doc":"Function being analyzed. We check every recursive call to this function.\nRemark: `main` is in `decls`.\n","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.main","kind":"def","line":54,"name":"Lean.Compiler.LCNF.FixedParams.Context.main","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"Declaration in the same mutual block. ","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.decls","kind":"def","line":49,"name":"Lean.Compiler.LCNF.FixedParams.Context.decls","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">main</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarIdMap\">FVarIdMap</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context.mk","kind":"ctor","line":47,"name":"Lean.Compiler.LCNF.FixedParams.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.Context","kind":"structure","line":47,"name":"Lean.Compiler.LCNF.FixedParams.Context","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L47-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instHashableAbsValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instHashableAbsValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","kind":"instance","line":45,"name":"Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instHashableAbsValue.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instHashableAbsValue</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instHashableAbsValue.hash","kind":"def","line":45,"name":"Lean.Compiler.LCNF.FixedParams.instHashableAbsValue.hash","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instBEqAbsValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instBEqAbsValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","kind":"instance","line":45,"name":"Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instBEqAbsValue.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instBEqAbsValue</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a> → <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instBEqAbsValue.beq","kind":"def","line":45,"name":"Lean.Compiler.LCNF.FixedParams.instBEqAbsValue.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instInhabitedAbsValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","kind":"instance","line":45,"name":"Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instInhabitedAbsValue</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue.default","kind":"def","line":45,"name":"Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">AbsValue</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.val","kind":"ctor","line":44,"name":"Lean.Compiler.LCNF.FixedParams.AbsValue.val","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">AbsValue</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.erased","kind":"ctor","line":43,"name":"Lean.Compiler.LCNF.FixedParams.AbsValue.erased","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.top\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">AbsValue</span>.<span class=\"name\">top</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\">AbsValue</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue.top","kind":"ctor","line":42,"name":"Lean.Compiler.LCNF.FixedParams.AbsValue.top","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">AbsValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Abstract value for the \"fixed parameter\" analysis. ","docLink":"./Lean/Compiler/LCNF/FixedParams.html#Lean.Compiler.LCNF.FixedParams.AbsValue","kind":"inductive","line":40,"name":"Lean.Compiler.LCNF.FixedParams.AbsValue","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Compiler/LCNF/FixedParams.lean#L40-L45"}}],"imports":["Lean.Compiler.LCNF.Basic"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.FixedParams.instInhabitedAbsValue","typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"]},{"className":"BEq","name":"Lean.Compiler.LCNF.FixedParams.instBEqAbsValue","typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"]},{"className":"Hashable","name":"Lean.Compiler.LCNF.FixedParams.instHashableAbsValue","typeNames":["Lean.Compiler.LCNF.FixedParams.AbsValue"]}],"name":"Lean.Compiler.LCNF.FixedParams"}