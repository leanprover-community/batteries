{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/RevertAll.html#Lean.MVarId.revertAll\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">revertAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Reverts all free variables in the goal `mvarId`.\n**Remark**: Auxiliary local declarations are cleared.\nThe `grind` tactic also clears them, but this tactic can be used independently by users.\n","docLink":"./Lean/Meta/Tactic/Grind/RevertAll.html#Lean.MVarId.revertAll","kind":"def","line":50,"name":"Lean.MVarId.revertAll","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/RevertAll.lean#L50-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/RevertAll.html#Lean.MVarId.markAccessible\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">markAccessible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Helper tactic for marking accessible names in the local context.\nThis is a trick used during `grind` preprocessing when `clean := false`.\nRecall that during preprocessing, `grind` reverts all hypotheses and reintroduce them while normalizing and\nperforming eager case splitting.\nWhen `clean := false`, we create a fresh user name unless the name was \"marked\" by this function.\n","docLink":"./Lean/Meta/Tactic/Grind/RevertAll.html#Lean.MVarId.markAccessible","kind":"def","line":24,"name":"Lean.MVarId.markAccessible","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/RevertAll.lean#L24-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/RevertAll.html#Lean.Meta.Grind.getOriginalName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getOriginalName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Return `some originalName` if `name` is a name generated by `markAccessible`.\n`originalName` is the original name before `markAccessible` was invoked.\n","docLink":"./Lean/Meta/Tactic/Grind/RevertAll.html#Lean.Meta.Grind.getOriginalName?","kind":"def","line":15,"name":"Lean.Meta.Grind.getOriginalName?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Tactic/Grind/RevertAll.lean#L15-L22"}}],"imports":["Lean.Meta.Tactic.Revert"],"instances":[],"name":"Lean.Meta.Tactic.Grind.RevertAll"}