{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getAllParentStructures\"><span class=\"name\">Lean</span>.<span class=\"name\">getAllParentStructures</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Returns the transitive closure of all parent structures of the structure.\nThis is the same as `Lean.getStructureResolutionOrder` but without including `structName`.\n","docLink":"./Lean/Structure.html#Lean.getAllParentStructures","kind":"def","line":515,"name":"Lean.getAllParentStructures","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L515-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureResolutionOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureResolutionOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Gets the resolution order for a structure.\n","docLink":"./Lean/Structure.html#Lean.getStructureResolutionOrder","kind":"def","line":508,"name":"Lean.getStructureResolutionOrder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L508-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.mergeStructureResolutionOrders\"><span class=\"name\">Lean</span>.<span class=\"name\">mergeStructureResolutionOrders</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parentNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">relaxed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">StructureResolutionOrderResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.mergeStructureResolutionOrders","kind":"opaque","line":461,"name":"Lean.mergeStructureResolutionOrders","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L461-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.computeStructureResolutionOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">computeStructureResolutionOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">relaxed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">StructureResolutionOrderResult</a></span></div></div>","info":{"doc":"Computes and caches the C3 linearization. Assumes parents have already been set with `setStructureParents`.\nIf `relaxed` is false, then if the linearization cannot be computed, conflicts are recorded in the return value.\n","docLink":"./Lean/Structure.html#Lean.computeStructureResolutionOrder","kind":"opaque","line":447,"name":"Lean.computeStructureResolutionOrder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L447-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderResult.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionOrderResult</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">StructureResolutionOrderResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderResult.default","kind":"def","line":443,"name":"Lean.instInhabitedStructureResolutionOrderResult.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L443-L443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionOrderResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">StructureResolutionOrderResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderResult","kind":"instance","line":443,"name":"Lean.instInhabitedStructureResolutionOrderResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L443-L443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult.conflicts\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderResult</span>.<span class=\"name\">conflicts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">StructureResolutionOrderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">StructureResolutionOrderConflict</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderResult.conflicts","kind":"def","line":442,"name":"Lean.StructureResolutionOrderResult.conflicts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L442-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult.resolutionOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderResult</span>.<span class=\"name\">resolutionOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">StructureResolutionOrderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderResult.resolutionOrder","kind":"def","line":441,"name":"Lean.StructureResolutionOrderResult.resolutionOrder","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L441-L441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resolutionOrder</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">conflicts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">StructureResolutionOrderConflict</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\">StructureResolutionOrderResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderResult.mk","kind":"ctor","line":440,"name":"Lean.StructureResolutionOrderResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L440-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderResult","kind":"structure","line":440,"name":"Lean.StructureResolutionOrderResult","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L440-L443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderConflict.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionOrderConflict</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">StructureResolutionOrderConflict</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderConflict.default","kind":"def","line":438,"name":"Lean.instInhabitedStructureResolutionOrderConflict.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L438-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderConflict\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionOrderConflict</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">StructureResolutionOrderConflict</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionOrderConflict","kind":"instance","line":438,"name":"Lean.instInhabitedStructureResolutionOrderConflict","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L438-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.conflicts\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span>.<span class=\"name\">conflicts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">StructureResolutionOrderConflict</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>","info":{"doc":"Conflicts that must come before `badParent`. The flag is whether it is a direct parent. ","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.conflicts","kind":"def","line":437,"name":"Lean.StructureResolutionOrderConflict.conflicts","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L437-L437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.badParent\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span>.<span class=\"name\">badParent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">StructureResolutionOrderConflict</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.badParent","kind":"def","line":435,"name":"Lean.StructureResolutionOrderConflict.badParent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L435-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.isDirectParent\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span>.<span class=\"name\">isDirectParent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">StructureResolutionOrderConflict</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.isDirectParent","kind":"def","line":434,"name":"Lean.StructureResolutionOrderConflict.isDirectParent","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L434-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isDirectParent</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">badParent</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">conflicts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\">StructureResolutionOrderConflict</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict.mk","kind":"ctor","line":433,"name":"Lean.StructureResolutionOrderConflict.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L433-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionOrderConflict\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionOrderConflict</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"\"The `badParent` must come after the `conflicts`. ","docLink":"./Lean/Structure.html#Lean.StructureResolutionOrderConflict","kind":"structure","line":432,"name":"Lean.StructureResolutionOrderConflict","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L432-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.structureResolutionExt\"><span class=\"name\">Lean</span>.<span class=\"name\">structureResolutionExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">StructureResolutionState</a></span></div></div>","info":{"doc":"We use an environment extension to cache resolution orders.\nThese are not expensive to compute, but worth caching, and we save olean storage space.\n","docLink":"./Lean/Structure.html#Lean.structureResolutionExt","kind":"opaque","line":416,"name":"Lean.structureResolutionExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L416-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">StructureResolutionState</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionState.default","kind":"def","line":414,"name":"Lean.instInhabitedStructureResolutionState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L414-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureResolutionState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureResolutionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">StructureResolutionState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureResolutionState","kind":"instance","line":414,"name":"Lean.instInhabitedStructureResolutionState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L414-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionState.resolutions\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionState</span>.<span class=\"name\">resolutions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">StructureResolutionState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionState.resolutions","kind":"def","line":413,"name":"Lean.StructureResolutionState.resolutions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L413-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resolutions</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureResolutionState\">StructureResolutionState</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionState.mk","kind":"ctor","line":412,"name":"Lean.StructureResolutionState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L412-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureResolutionState\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureResolutionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureResolutionState","kind":"structure","line":412,"name":"Lean.StructureResolutionState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L412-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureLikeNumFields\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureLikeNumFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Returns the number of fields for a structure-like type ","docLink":"./Lean/Structure.html#Lean.getStructureLikeNumFields","kind":"def","line":376,"name":"Lean.getStructureLikeNumFields","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L376-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureLikeCtor?\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureLikeCtor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a></span></div></div>","info":{"doc":"Returns the constructor of the structure named `constName` if it is a non-recursive single-constructor inductive type with no indices.\n","docLink":"./Lean/Structure.html#Lean.getStructureLikeCtor?","kind":"def","line":365,"name":"Lean.getStructureLikeCtor?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L365-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.isStructureLike\"><span class=\"name\">Lean</span>.<span class=\"name\">isStructureLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns true iff `constName` is a non-recursive inductive datatype that has only one constructor and no indices.\n\nSuch types have special kernel support. This must be in sync with `is_structure_like`.\n","docLink":"./Lean/Structure.html#Lean.isStructureLike","kind":"def","line":355,"name":"Lean.isStructureLike","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L355-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getPathToBaseStructure?\"><span class=\"name\">Lean</span>.<span class=\"name\">getPathToBaseStructure?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">baseStructName </span><span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"If `baseStructName` is an ancestor structure for `structName`, then returns a sequence of projection functions\nto go from `structName` to `baseStructName`. Returns `[]` if `baseStructName == structName`.\n","docLink":"./Lean/Structure.html#Lean.getPathToBaseStructure?","kind":"def","line":333,"name":"Lean.getPathToBaseStructure?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L333-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getAutoParamFnForField?\"><span class=\"name\">Lean</span>.<span class=\"name\">getAutoParamFnForField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the name of the auxiliary definition that defines the autoParam for the field, if any such definition exists.\nThis is not the inherited autoParam, but the one that is defined or overridden by this structure.\nThe effective autoParams are collected in the flat constructor.\n","docLink":"./Lean/Structure.html#Lean.getAutoParamFnForField?","kind":"def","line":325,"name":"Lean.getAutoParamFnForField?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L325-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.mkAutoParamFnOfProjFn\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAutoParamFnOfProjFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projFn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Gets the name of the auxiliary definition that would have the autoParam definition for a field.\n","docLink":"./Lean/Structure.html#Lean.mkAutoParamFnOfProjFn","kind":"def","line":319,"name":"Lean.mkAutoParamFnOfProjFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L319-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getEffectiveDefaultFnForField?\"><span class=\"name\">Lean</span>.<span class=\"name\">getEffectiveDefaultFnForField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the name of the auxiliary definition for a default value for the field, even if inherited, if any such definition exists.\n","docLink":"./Lean/Structure.html#Lean.getEffectiveDefaultFnForField?","kind":"def","line":312,"name":"Lean.getEffectiveDefaultFnForField?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L312-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getDefaultFnForField?\"><span class=\"name\">Lean</span>.<span class=\"name\">getDefaultFnForField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the name of the auxiliary definition that defines a default value for the field, if any such definition exists.\nThis is *not* an inherited default. We need to store provided defaults so that it is possible to resolve defaults according to the resolution order.\n","docLink":"./Lean/Structure.html#Lean.getDefaultFnForField?","kind":"def","line":305,"name":"Lean.getDefaultFnForField?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L305-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.mkInheritedDefaultFnOfProjFn\"><span class=\"name\">Lean</span>.<span class=\"name\">mkInheritedDefaultFnOfProjFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projFn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Gets the name of the auxiliary definition that would have the inherited default value for the structure field if it exists.\n","docLink":"./Lean/Structure.html#Lean.mkInheritedDefaultFnOfProjFn","kind":"def","line":290,"name":"Lean.mkInheritedDefaultFnOfProjFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L290-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.mkDefaultFnOfProjFn\"><span class=\"name\">Lean</span>.<span class=\"name\">mkDefaultFnOfProjFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projFn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Gets the name of the auxiliary definition that would have the default value for the structure field if it exists.\n","docLink":"./Lean/Structure.html#Lean.mkDefaultFnOfProjFn","kind":"def","line":284,"name":"Lean.mkDefaultFnOfProjFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L284-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getProjFnInfoForField?\"><span class=\"name\">Lean</span>.<span class=\"name\">getProjFnInfoForField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/ProjFns.html#Lean.ProjectionFunctionInfo\">ProjectionFunctionInfo</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.getProjFnInfoForField?","kind":"def","line":278,"name":"Lean.getProjFnInfoForField?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L278-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getProjFnForField?\"><span class=\"name\">Lean</span>.<span class=\"name\">getProjFnForField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.getProjFnForField?","kind":"def","line":272,"name":"Lean.getProjFnForField?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L272-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.isStructure\"><span class=\"name\">Lean</span>.<span class=\"name\">isStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns true if `constName` is the name of an inductive datatype\ncreated using the `structure` or `class` commands.\n\nThese are inductive types for which structure information has been registered with `registerStructure`.\nSee also `Lean.getStructureInfo?`.\n","docLink":"./Lean/Structure.html#Lean.isStructure","kind":"def","line":262,"name":"Lean.isStructure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L262-L270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureFieldsFlattened\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureFieldsFlattened</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeSubobjectFields</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the full set of field names for the given structure,\n\"flattening\" all the parent structures that are subobject fields.\nIf `includeSubobjectFields` is true, then subobject `toParent` projections are included,\nand otherwise they are omitted.\n\nFor example, given `Bar` such that\n```lean\nstructure Foo where a : Nat\nstructure Bar extends Foo where b : Nat\n```\nthis returns ``#[`toFoo, `a, `b]``, or ``#[`a, `b]`` when `includeSubobjectFields := false`.\n","docLink":"./Lean/Structure.html#Lean.getStructureFieldsFlattened","kind":"def","line":246,"name":"Lean.getStructureFieldsFlattened","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L246-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.mkFlatCtorOfStructCtorName\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFlatCtorOfStructCtorName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structCtorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Gets the name for a structure constructor where the fields have been fully flattened.\nThis constructor simulates a flat representation for structures,\nand it is used by structure instance notation when elaborating structure fields\nand for organizing the fields into subobjects.\n\nThe body of the flat constructor has the following properties (recursively):\n- the fields come in order\n- for subobject fields, the value is the unfolded flat constructor for that field\n- for standard fields, the value is one of the flat constructor parameters\n","docLink":"./Lean/Structure.html#Lean.mkFlatCtorOfStructCtorName","kind":"def","line":224,"name":"Lean.mkFlatCtorOfStructCtorName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L224-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.findParentProjStruct?\"><span class=\"name\">Lean</span>.<span class=\"name\">findParentProjStruct?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">projName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Given a structure `structName` and a parent projection name `projName` (e.g. `toParentStructName`),\nreturns the corresponding parent structure name.\nThe parent projection name is a single-component name.\n\nNote: this relies on the fact that projection names are checked to be consistent across all parents.\n","docLink":"./Lean/Structure.html#Lean.findParentProjStruct?","kind":"def","line":202,"name":"Lean.findParentProjStruct?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L202-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.findField?\"><span class=\"name\">Lean</span>.<span class=\"name\">findField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the name of the structure that contains the field relative to structure `structName`.\nIf `structName` contains the field itself, returns that,\nand otherwise recursively looks into parents that are subobjects.\n","docLink":"./Lean/Structure.html#Lean.findField?","kind":"opaque","line":191,"name":"Lean.findField?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L191-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureSubobjects\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureSubobjects</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Returns the parent structures that are embedded in the structure.\nThis is the array of all results from `Lean.isSubobjectField?` in order.\n\nNote: this is *not* a subset of the parents from `getStructureParentInfo`.\nIf a direct parent cannot itself be represented as a subobject,\nsometimes one of its parents (or one of their parents, etc.) can.\n","docLink":"./Lean/Structure.html#Lean.getStructureSubobjects","kind":"def","line":180,"name":"Lean.getStructureSubobjects","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L180-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureParentInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureParentInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a></span></div></div>","info":{"doc":"Gets information for all the parents that appear in the `extends` clause. ","docLink":"./Lean/Structure.html#Lean.getStructureParentInfo","kind":"def","line":176,"name":"Lean.getStructureParentInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L176-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.isSubobjectField?\"><span class=\"name\">Lean</span>.<span class=\"name\">isSubobjectField?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"If `fieldName` is a subobject (that it, if it is an embedded parent structure),\nthen returns the name of that parent structure.\n","docLink":"./Lean/Structure.html#Lean.isSubobjectField?","kind":"def","line":166,"name":"Lean.isSubobjectField?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L166-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getFieldInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">getFieldInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></span></div></div>","info":{"doc":"Gets the `StructureFieldInfo` for the given direct field of the structure. ","docLink":"./Lean/Structure.html#Lean.getFieldInfo?","kind":"def","line":159,"name":"Lean.getFieldInfo?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L159-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureFields\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Gets the direct field names for the given structure, including subobject fields. ","docLink":"./Lean/Structure.html#Lean.getStructureFields","kind":"def","line":155,"name":"Lean.getStructureFields","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L155-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a></div></div>","info":{"doc":"Gets the constructor of an inductive type that has exactly one constructor.\nThis is meant to be used with types that have had been registered as a structure by `registerStructure`,\nbut this is not checked.\n\nWarning: these do *not* need to be \"structure-likes\". A structure-like is non-recursive,\nand structure-likes have special kernel support.\n","docLink":"./Lean/Structure.html#Lean.getStructureCtor","kind":"def","line":139,"name":"Lean.getStructureCtor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L139-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a></div></div>","info":{"doc":"Gets the `StructureInfo` for `structName`, which is assumed to have been declared as a structure to the elaborator.\nPanics on failure.\n","docLink":"./Lean/Structure.html#Lean.getStructureInfo","kind":"def","line":129,"name":"Lean.getStructureInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L129-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.getStructureInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">getStructureInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a></span></div></div>","info":{"doc":"Gets the `StructureInfo` if `structName` has been declared as a structure to the elaborator. ","docLink":"./Lean/Structure.html#Lean.getStructureInfo?","kind":"def","line":123,"name":"Lean.getStructureInfo?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L123-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.setStructureParents\"><span class=\"name\">Lean</span>.<span class=\"name\">setStructureParents</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parentInfo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Sets parent projection info for a structure defined in the current module.\nThrows an error if the structure has not already been registered with `Lean.registerStructure`.\n","docLink":"./Lean/Structure.html#Lean.setStructureParents","kind":"def","line":114,"name":"Lean.setStructureParents","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L114-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.registerStructure\"><span class=\"name\">Lean</span>.<span class=\"name\">registerStructure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Structure.html#Lean.StructureDescr\">StructureDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>","info":{"doc":"Declares a new structure to the elaborator.\nEvery structure created by `structure` or `class` has such an entry.\nThis should be followed up with `setStructureParents` and `setStructureResolutionOrder`.\n","docLink":"./Lean/Structure.html#Lean.registerStructure","kind":"def","line":102,"name":"Lean.registerStructure","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L102-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureDescr\">StructureDescr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureDescr","kind":"instance","line":100,"name":"Lean.instInhabitedStructureDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureDescr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureDescr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureDescr\">StructureDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureDescr.default","kind":"def","line":100,"name":"Lean.instInhabitedStructureDescr.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureDescr.fields\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureDescr</span>.<span class=\"name\">fields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureDescr\">StructureDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></span></div></div>","info":{"doc":"The fields should be in the order that they appear in the structure's constructor. ","docLink":"./Lean/Structure.html#Lean.StructureDescr.fields","kind":"def","line":99,"name":"Lean.StructureDescr.fields","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureDescr.structName\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureDescr</span>.<span class=\"name\">structName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureDescr\">StructureDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the structure. ","docLink":"./Lean/Structure.html#Lean.StructureDescr.structName","kind":"def","line":97,"name":"Lean.StructureDescr.structName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L97-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureDescr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureDescr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fields</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureDescr\">StructureDescr</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureDescr.mk","kind":"ctor","line":95,"name":"Lean.StructureDescr.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A descriptor for a structure, for constructing a `StructureInfo` via `Lean.registerStructure`.\n","docLink":"./Lean/Structure.html#Lean.StructureDescr","kind":"structure","line":92,"name":"Lean.StructureDescr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L92-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.getProjFn?\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">getProjFn?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureInfo.getProjFn?","kind":"def","line":73,"name":"Lean.StructureInfo.getProjFn?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L73-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureInfo.lt","kind":"def","line":70,"name":"Lean.StructureInfo.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L70-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureInfo","kind":"instance","line":68,"name":"Lean.instInhabitedStructureInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureInfo.default","kind":"def","line":68,"name":"Lean.instInhabitedStructureInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.parentInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">parentInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a></span></div></div>","info":{"doc":"Information about structure parents. These are in the order they appear in the `extends` clause. ","docLink":"./Lean/Structure.html#Lean.StructureInfo.parentInfo","kind":"def","line":67,"name":"Lean.StructureInfo.parentInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.fieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">fieldInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></span></div></div>","info":{"doc":"Information about the structure fields, sorted by `fieldName`. ","docLink":"./Lean/Structure.html#Lean.StructureInfo.fieldInfo","kind":"def","line":65,"name":"Lean.StructureInfo.fieldInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.fieldNames\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">fieldNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"The direct fields of a structure, sorted by position in the structure.\nFor example, the `s.3` notation refers to `fieldNames[3 - 1]`. ","docLink":"./Lean/Structure.html#Lean.StructureInfo.fieldNames","kind":"def","line":63,"name":"Lean.StructureInfo.fieldNames","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.structName\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">structName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the structure. ","docLink":"./Lean/Structure.html#Lean.StructureInfo.structName","kind":"def","line":60,"name":"Lean.StructureInfo.structName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fieldNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fieldInfo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parentInfo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureInfo\">StructureInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureInfo.mk","kind":"ctor","line":58,"name":"Lean.StructureInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Data about a type created with the `structure` command.\n","docLink":"./Lean/Structure.html#Lean.StructureInfo","kind":"structure","line":55,"name":"Lean.StructureInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L55-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureParentInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureParentInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureParentInfo.default","kind":"def","line":53,"name":"Lean.instInhabitedStructureParentInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureParentInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureParentInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureParentInfo","kind":"instance","line":53,"name":"Lean.instInhabitedStructureParentInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo.projFn\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span>.<span class=\"name\">projFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The projection function associated to the field. For subobjects, this is the same as the `projFn` in its `fieldInfo` entry. ","docLink":"./Lean/Structure.html#Lean.StructureParentInfo.projFn","kind":"def","line":52,"name":"Lean.StructureParentInfo.projFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo.subobject\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span>.<span class=\"name\">subobject</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether this parent structure is represented as a subobject. If so, then there is a `fieldInfo` entry with the same `projFn`. ","docLink":"./Lean/Structure.html#Lean.StructureParentInfo.subobject","kind":"def","line":50,"name":"Lean.StructureParentInfo.subobject","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo.structName\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span>.<span class=\"name\">structName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the parent structure. ","docLink":"./Lean/Structure.html#Lean.StructureParentInfo.structName","kind":"def","line":48,"name":"Lean.StructureParentInfo.structName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subobject</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projFn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureParentInfo\">StructureParentInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureParentInfo.mk","kind":"ctor","line":46,"name":"Lean.StructureParentInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureParentInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureParentInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Data for a direct parent of a structure.\nSome structure parents are represented as subobjects (embedded structures),\nand for these the parent projection is a true projection.\nIf a structure parent shares a field with a previous parent, it will become an implicit parent,\nand all the fields of the structure parent that do not occur in earlier parents are fields of the new structure\n","docLink":"./Lean/Structure.html#Lean.StructureParentInfo","kind":"structure","line":39,"name":"Lean.StructureParentInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L39-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.lt","kind":"def","line":36,"name":"Lean.StructureFieldInfo.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instReprStructureFieldInfo.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprStructureFieldInfo</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instReprStructureFieldInfo.repr","kind":"def","line":34,"name":"Lean.instReprStructureFieldInfo.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instReprStructureFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprStructureFieldInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instReprStructureFieldInfo","kind":"instance","line":34,"name":"Lean.instReprStructureFieldInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureFieldInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureFieldInfo","kind":"instance","line":34,"name":"Lean.instInhabitedStructureFieldInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.instInhabitedStructureFieldInfo.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedStructureFieldInfo</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureFieldInfo.default","kind":"def","line":34,"name":"Lean.instInhabitedStructureFieldInfo.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.autoParam?\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">autoParam?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Deprecated. ","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.autoParam?","kind":"def","line":33,"name":"Lean.StructureFieldInfo.autoParam?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.binderInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">binderInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a></div></div>","info":{"doc":"The binder info for the field from the `structure` definition. ","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.binderInfo","kind":"def","line":31,"name":"Lean.StructureFieldInfo.binderInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.subobject?\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">subobject?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"If this field is for a subobject (i.e., an embedded parent structure), contains the name of the parent structure. ","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.subobject?","kind":"def","line":29,"name":"Lean.StructureFieldInfo.subobject?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.projFn\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">projFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The projection function associated to the field. ","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.projFn","kind":"def","line":27,"name":"Lean.StructureFieldInfo.projFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.fieldName\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">fieldName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the field. This is a single-component name. ","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.fieldName","kind":"def","line":25,"name":"Lean.StructureFieldInfo.fieldName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fieldName </span><span class=\"fn\">projFn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subobject?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderInfo</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">autoParam?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Structure.html#Lean.StructureFieldInfo\">StructureFieldInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.mk","kind":"ctor","line":23,"name":"Lean.StructureFieldInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Structure.html#Lean.StructureFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">StructureFieldInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Data for a structure field.\nThese are direct fields of a structure, including \"subobject\" fields for the embedded parents.\nThe full collection of fields is the transitive closure of fields through the subobject fields.\n","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo","kind":"structure","line":18,"name":"Lean.StructureFieldInfo","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Structure.lean#L18-L34"}}],"imports":["Lean.ProjFns","Lean.Exception"],"instances":[{"className":"Inhabited","name":"Lean.instInhabitedStructureFieldInfo","typeNames":["Lean.StructureFieldInfo"]},{"className":"Repr","name":"Lean.instReprStructureFieldInfo","typeNames":["Lean.StructureFieldInfo"]},{"className":"Inhabited","name":"Lean.instInhabitedStructureParentInfo","typeNames":["Lean.StructureParentInfo"]},{"className":"Inhabited","name":"Lean.instInhabitedStructureInfo","typeNames":["Lean.StructureInfo"]},{"className":"Inhabited","name":"Lean.instInhabitedStructureDescr","typeNames":["Lean.StructureDescr"]},{"className":"Inhabited","name":"Lean.instInhabitedStructureResolutionState","typeNames":["Lean.StructureResolutionState"]},{"className":"Inhabited","name":"Lean.instInhabitedStructureResolutionOrderConflict","typeNames":["Lean.StructureResolutionOrderConflict"]},{"className":"Inhabited","name":"Lean.instInhabitedStructureResolutionOrderResult","typeNames":["Lean.StructureResolutionOrderResult"]}],"name":"Lean.Structure"}