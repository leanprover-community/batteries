{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.addClass\"><span class=\"name\">Lean</span>.<span class=\"name\">addClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clsName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>","info":{"doc":"Add a new type class with the given name to the environment.\n`declName` must not be the name of an existing type class,\nand it must be the name of constant in `env`.\n`declName` must be a inductive datatype or axiom.\nRecall that all structures are inductive datatypes.\n","docLink":"./Lean/Class.html#Lean.addClass","kind":"def","line":149,"name":"Lean.addClass","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L149-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.mkOutParamArgsImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">mkOutParamArgsImplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Mark `outParam`s in `type` as implicit. Note that it also marks instance implicit arguments that depend on `outParam`s as implicit.\n\nRemark: this function consumes the `outParam` annotations.\n\nThis function uses the same logic used as `checkOutParam`.\nSee issue #1901\n","docLink":"./Lean/Class.html#Lean.mkOutParamArgsImplicit","kind":"def","line":114,"name":"Lean.mkOutParamArgsImplicit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L114-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.hasOutParams\"><span class=\"name\">Lean</span>.<span class=\"name\">hasOutParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if the given `declName` is a type class with output parameters. ","docLink":"./Lean/Class.html#Lean.hasOutParams","kind":"def","line":75,"name":"Lean.hasOutParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L75-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.getOutParamPositions?\"><span class=\"name\">Lean</span>.<span class=\"name\">getOutParamPositions?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"If `declName` is a class, return the position of its `outParams`. ","docLink":"./Lean/Class.html#Lean.getOutParamPositions?","kind":"def","line":71,"name":"Lean.getOutParamPositions?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L71-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.isClass\"><span class=\"name\">Lean</span>.<span class=\"name\">isClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Return `true` if `n` is the name of type class in the given environment. ","docLink":"./Lean/Class.html#Lean.isClass","kind":"def","line":66,"name":"Lean.isClass","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L66-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.classExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">classExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <a href=\"./Lean/Class.html#Lean.ClassEntry\">ClassEntry</a> <a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a></span></div></div>","info":{"doc":"Type class environment extension\n","docLink":"./Lean/Class.html#Lean.classExtension","kind":"opaque","line":56,"name":"Lean.classExtension","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L56-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState.switch\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span>.<span class=\"name\">switch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a></div></div>","info":{"doc":"Switch the state into persistent mode. We switch to this mode after\nwe read all imported .olean files.\nRecall that we use a `SMap` for implementing the state of the type class environment extension.\n","docLink":"./Lean/Class.html#Lean.ClassState.switch","kind":"def","line":46,"name":"Lean.ClassState.switch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L46-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState.addEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span>.<span class=\"name\">addEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <a href=\"./Lean/Class.html#Lean.ClassEntry\">ClassEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a></div></div>","info":{"doc":"","docLink":"./Lean/Class.html#Lean.ClassState.addEntry","kind":"def","line":43,"name":"Lean.ClassState.addEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.instInhabitedClassState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedClassState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Class.html#Lean.instInhabitedClassState","kind":"instance","line":39,"name":"Lean.instInhabitedClassState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.instInhabitedClassState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedClassState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a></div></div>","info":{"doc":"","docLink":"./Lean/Class.html#Lean.instInhabitedClassState.default","kind":"def","line":39,"name":"Lean.instInhabitedClassState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState.outParamMap\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span>.<span class=\"name\">outParamMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Class.html#Lean.ClassState.outParamMap","kind":"def","line":38,"name":"Lean.ClassState.outParamMap","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outParamMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassState\">ClassState</a></div></div>","info":{"doc":"","docLink":"./Lean/Class.html#Lean.ClassState.mk","kind":"ctor","line":37,"name":"Lean.ClassState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassState\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State of the type class environment extension. ","docLink":"./Lean/Class.html#Lean.ClassState","kind":"structure","line":36,"name":"Lean.ClassState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L36-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Class.html#Lean.ClassEntry\">ClassEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Class.html#Lean.ClassEntry.lt","kind":"def","line":31,"name":"Lean.ClassEntry.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry.outParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span>.<span class=\"name\">outParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Class.html#Lean.ClassEntry\">ClassEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Position of the class `outParams`.\nFor example, for class\n```\nclass GetElem (cont : Type u) (idx : Type v) (elem : outParam (Type w)) (dom : outParam (cont → idx → Prop)) where\n```\n`outParams := #[2, 3]`\n","docLink":"./Lean/Class.html#Lean.ClassEntry.outParams","kind":"def","line":27,"name":"Lean.ClassEntry.outParams","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry.name\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Class.html#Lean.ClassEntry\">ClassEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Class name. ","docLink":"./Lean/Class.html#Lean.ClassEntry.name","kind":"def","line":18,"name":"Lean.ClassEntry.name","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Class.html#Lean.ClassEntry\">ClassEntry</a></div></div>","info":{"doc":"","docLink":"./Lean/Class.html#Lean.ClassEntry.mk","kind":"ctor","line":16,"name":"Lean.ClassEntry.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Class.html#Lean.ClassEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">ClassEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An entry for the persistent environment extension for declared type classes ","docLink":"./Lean/Class.html#Lean.ClassEntry","kind":"structure","line":15,"name":"Lean.ClassEntry","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Class.lean#L15-L27"}}],"imports":["Lean.Attributes"],"instances":[{"className":"Inhabited","name":"Lean.instInhabitedClassState","typeNames":["Lean.ClassState"]}],"name":"Lean.Class"}