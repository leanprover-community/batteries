{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grobner\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grobner</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`grobner` solves goals that can be phrased as polynomial equations (with further polynomial equations as hypotheses)\nover commutative (semi)rings, using the Grobner basis algorithm.\n\nIt is a implemented as a thin wrapper around the `grind` tactic, enabling only the `grobner` solver.\nPlease use `grind` instead if you need additional capabilities.\n","docLink":"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grobner","kind":"def","line":517,"name":"Lean.Parser.Tactic.grobner","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L517-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Parser.Tactic.cutsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">cutsat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`cutsat` solves linear integer arithmetic goals.\n\nIt is a implemented as a thin wrapper around the `grind` tactic, enabling only the `cutsat` solver.\nPlease use `grind` instead if you need additional capabilities.\n","docLink":"./Init/Grind/Tactics.html#Lean.Parser.Tactic.cutsat","kind":"def","line":509,"name":"Lean.Parser.Tactic.cutsat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L509-L515"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grindTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grindTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`grind?` takes the same arguments as `grind`, but reports an equivalent call to `grind only`\nthat would be sufficient to close the goal. This is useful for reducing the size of the `grind`\ntheorems in a local invocation.\n","docLink":"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grindTrace","kind":"def","line":499,"name":"Lean.Parser.Tactic.grindTrace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L499-L507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`grind` is a tactic inspired by modern SMT solvers. **Picture a virtual whiteboard**:\nevery time grind discovers a new equality, inequality, or logical fact,\nit writes it on the board, groups together terms known to be equal,\nand lets each reasoning engine read from and contribute to the shared workspace.\nThese engines work together to handle equality reasoning, apply known theorems,\npropagate new facts, perform case analysis, and run specialized solvers\nfor domains like linear arithmetic and commutative rings.\n\n`grind` is *not* designed for goals whose search space explodes combinatorially,\nthink large pigeonhole instances, graph‑coloring reductions, high‑order N‑queens boards,\nor a 200‑variable Sudoku encoded as Boolean constraints.  Such encodings require\n thousands (or millions) of case‑splits that overwhelm `grind`’s branching search.\n\nFor **bit‑level or combinatorial problems**, consider using **`bv_decide`**.\n`bv_decide` calls a state‑of‑the‑art SAT solver (CaDiCaL) and then returns a\n*compact, machine‑checkable certificate*.\n\n### Equality reasoning\n\n`grind` uses **congruence closure** to track equalities between terms.\nWhen two terms are known to be equal, congruence closure automatically deduces\nequalities between more complex expressions built from them.\nFor example, if `a = b`, then congruence closure will also conclude that `f a` = `f b`\nfor any function `f`. This forms the foundation for efficient equality reasoning in `grind`.\nHere is an example:\n```\nexample (f : Nat → Nat) (h : a = b) : f (f b) = f (f a) := by\n  grind\n```\n\n### Applying theorems using E-matching\n\nTo apply existing theorems, `grind` uses a technique called **E-matching**,\nwhich finds matches for known theorem patterns while taking equalities into account.\nCombined with congruence closure, E-matching helps `grind` discover\nnon-obvious consequences of theorems and equalities automatically.\n\nConsider the following functions and theorems:\n```\ndef f (a : Nat) : Nat :=\n  a + 1\n\ndef g (a : Nat) : Nat :=\n  a - 1\n\n@[grind =]\ntheorem gf (x : Nat) : g (f x) = x := by\n  simp [f, g]\n```\nThe theorem `gf` asserts that `g (f x) = x` for all natural numbers `x`.\nThe attribute `[grind =]` instructs `grind` to use the left-hand side of the equation,\n`g (f x)`, as a pattern for E-matching.\nSuppose we now have a goal involving:\n```\nexample {a b} (h : f b = a) : g a = b := by\n  grind\n```\nAlthough `g a` is not an instance of the pattern `g (f x)`,\nit becomes one modulo the equation `f b = a`. By substituting `a`\nwith `f b` in `g a`, we obtain the term `g (f b)`,\nwhich matches the pattern `g (f x)` with the assignment `x := b`.\nThus, the theorem `gf` is instantiated with `x := b`,\nand the new equality `g (f b) = b` is asserted.\n`grind` then uses congruence closure to derive the implied equality\n`g a = g (f b)` and completes the proof.\n\nThe pattern used to instantiate theorems affects the effectiveness of `grind`.\nFor example, the pattern `g (f x)` is too restrictive in the following case:\nthe theorem `gf` will not be instantiated because the goal does not even\ncontain the function symbol `g`.\n\n```\nexample (h₁ : f b = a) (h₂ : f c = a) : b = c := by\n  grind\n```\n\nYou can use the command `grind_pattern` to manually select a pattern for a given theorem.\nIn the following example, we instruct `grind` to use `f x` as the pattern,\nallowing it to solve the goal automatically:\n```\ngrind_pattern gf => f x\n\nexample {a b c} (h₁ : f b = a) (h₂ : f c = a) : b = c := by\n  grind\n```\nYou can enable the option `trace.grind.ematch.instance` to make `grind` print a\ntrace message for each theorem instance it generates.\n\nYou can also specify a **multi-pattern** to control when `grind` should apply a theorem.\nA multi-pattern requires that all specified patterns are matched in the current context\nbefore the theorem is applied. This is useful for theorems such as transitivity rules,\nwhere multiple premises must be simultaneously present for the rule to apply.\nThe following example demonstrates this feature using a transitivity axiom for a binary relation `R`:\n```\nopaque R : Int → Int → Prop\naxiom Rtrans {x y z : Int} : R x y → R y z → R x z\n\ngrind_pattern Rtrans => R x y, R y z\n\nexample {a b c d} : R a b → R b c → R c d → R a d := by\n  grind\n```\nBy specifying the multi-pattern `R x y, R y z`, we instruct `grind` to\ninstantiate `Rtrans` only when both `R x y` and `R y z` are available in the context.\nIn the example, `grind` applies `Rtrans` to derive `R a c` from `R a b` and `R b c`,\nand can then repeat the same reasoning to deduce `R a d` from `R a c` and `R c d`.\n\nInstead of using `grind_pattern` to explicitly specify a pattern,\nyou can use the `@[grind]` attribute or one of its variants, which will use a heuristic to\ngenerate a (multi-)pattern. The complete list is available in the reference manual. The main ones are:\n\n- `@[grind →]` will select a multi-pattern from the hypotheses of the theorem (i.e. it will use the theorem for forwards reasoning).\n  In more detail, it will traverse the hypotheses of the theorem from left-to-right, and each time it encounters a minimal indexable\n  (i.e. has a constant as its head) subexpression which \"covers\" (i.e. fixes the value of) an argument which was not\n  previously covered, it will add that subexpression as a pattern, until all arguments have been covered.\n- `@[grind ←]` will select a multi-pattern from the conclusion of theorem (i.e. it will use the theorem for backwards reasoning).\n  This may fail if not all the arguments to the theorem appear in the conclusion.\n- `@[grind]` will traverse the conclusion and then the hypotheses left-to-right, adding patterns as they increase the coverage,\n  stopping when all arguments are covered.\n- `@[grind =]` checks that the conclusion of the theorem is an equality, and then uses the left-hand-side of the equality as a pattern.\n  This may fail if not all of the arguments appear in the left-hand-side.\n\nHere is the previous example again but using the attribute `[grind →]`\n```\nopaque R : Int → Int → Prop\n@[grind →] axiom Rtrans {x y z : Int} : R x y → R y z → R x z\n\nexample {a b c d} : R a b → R b c → R c d → R a d := by\n  grind\n```\n\nTo control theorem instantiation and avoid generating an unbounded number of instances,\n`grind` uses a generation counter. Terms in the original goal are assigned generation zero.\nWhen `grind` applies a theorem using terms of generation `≤ n`, any new terms it creates\nare assigned generation `n + 1`. This limits how far the tactic explores when applying\ntheorems and helps prevent an excessive number of instantiations.\n\n#### Key options:\n- `grind (ematch := <num>)` controls the number of E-matching rounds.\n- `grind [<name>, ...]` instructs `grind` to use the declaration `name` during E-matching.\n- `grind only [<name>, ...]` is like `grind [<name>, ...]` but does not use theorems tagged with `@[grind]`.\n- `grind (gen := <num>)` sets the maximum generation.\n\n### Linear integer arithmetic (`cutsat`)\n\n`grind` can solve goals that reduce to **linear integer arithmetic (LIA)** using an\nintegrated decision procedure called **`cutsat`**.  It understands\n\n* equalities   `p = 0`\n* inequalities  `p ≤ 0`\n* disequalities `p ≠ 0`\n* divisibility  `d ∣ p`\n\nThe solver incrementally assigns integer values to variables; when a partial\nassignment violates a constraint it adds a new, implied constraint and retries.\nThis *model-based* search is **complete for LIA**.\n\n#### Key options:\n\n* `grind -cutsat` disable the solver (useful for debugging)\n* `grind +qlia` accept rational models (shrinks the search space but is incomplete for ℤ)\n\n#### Examples:\n\n```\n-- Even + even is never odd.\nexample {x y : Int} : 2 * x + 4 * y ≠ 5 := by\n  grind\n\n-- Mixing equalities and inequalities.\nexample {x y : Int} :\n    2 * x + 3 * y = 0 → 1 ≤ x → y < 1 := by\n  grind\n\n-- Reasoning with divisibility.\nexample (a b : Int) :\n    2 ∣ a + 1 → 2 ∣ b + a → ¬ 2 ∣ b + 2 * a := by\n  grind\n\nexample (x y : Int) :\n    27 ≤ 11*x + 13*y →\n    11*x + 13*y ≤ 45 →\n    -10 ≤ 7*x - 9*y →\n    7*x - 9*y ≤ 4 → False := by\n  grind\n\n-- Types that implement the `ToInt` type-class.\nexample (a b c : UInt64)\n    : a ≤ 2 → b ≤ 3 → c - a - b = 0 → c ≤ 5 := by\n  grind\n```\n\n### Algebraic solver (`ring`)\n\n`grind` ships with an algebraic solver nick-named **`ring`** for goals that can\nbe phrased as polynomial equations (or disequations) over commutative rings,\nsemirings, or fields.\n\n*Works out of the box*\nAll core numeric types and relevant Mathlib types already provide the required\ntype-class instances, so the solver is ready to use in most developments.\n\nWhat it can decide:\n\n* equalities of the form `p = q`\n* disequalities `p ≠ q`\n* basic reasoning under field inverses (`a / b := a * b⁻¹`)\n* goals that mix ring facts with other `grind` engines\n\n#### Key options:\n\n* `grind -ring` turn the solver off (useful when debugging)\n* `grind (ringSteps := n)` cap the number of steps performed by this procedure.\n\n#### Examples\n\n```\nopen Lean Grind\n\nexample [CommRing α] (x : α) : (x + 1) * (x - 1) = x^2 - 1 := by\n  grind\n\n-- Characteristic 256 means 16 * 16 = 0.\nexample [CommRing α] [IsCharP α 256] (x : α) :\n    (x + 16) * (x - 16) = x^2 := by\n  grind\n\n-- Works on built-in rings such as `UInt8`.\nexample (x : UInt8) : (x + 16) * (x - 16) = x^2 := by\n  grind\n\nexample [CommRing α] (a b c : α) :\n    a + b + c = 3 →\n    a^2 + b^2 + c^2 = 5 →\n    a^3 + b^3 + c^3 = 7 →\n    a^4 + b^4 = 9 - c^4 := by\n  grind\n\nexample [Field α] [NoNatZeroDivisors α] (a : α) :\n    1 / a + 1 / (2 * a) = 3 / (2 * a) := by\n  grind\n```\n\n### Other options\n\n- `grind (splits := <num>)` caps the *depth* of the search tree.  Once a branch performs `num` splits\n  `grind` stops splitting further in that branch.\n- `grind -splitIte` disables case splitting on if-then-else expressions.\n- `grind -splitMatch` disables case splitting on `match` expressions.\n- `grind +splitImp` instructs `grind` to split on any hypothesis `A → B` whose antecedent `A` is **propositional**.\n- `grind -linarith` disables the linear arithmetic solver for (ordered) modules and rings.\n\n### Additional Examples\n\n```\nexample {a b} {as bs : List α} : (as ++ bs ++ [b]).getLastD a = b := by\n  grind\n\nexample (x : BitVec (w+1)) : (BitVec.cons x.msb (x.setWidth w)) = x := by\n  grind\n\nexample (as : Array α) (lo hi i j : Nat) :\n    lo ≤ i → i < j → j ≤ hi → j < as.size → min lo (as.size - 1) ≤ i := by\n  grind\n```\n","docLink":"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grind","kind":"def","line":227,"name":"Lean.Parser.Tactic.grind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L227-L497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grindParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grindParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"The `!` modifier instructs `grind` to consider only minimal indexable subexpressions\nwhen selecting patterns.\n","docLink":"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grindParam","kind":"def","line":219,"name":"Lean.Parser.Tactic.grindParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L219-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grindErase\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">grindErase</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Parser.Tactic.grindErase","kind":"def","line":218,"name":"Lean.Parser.Tactic.grindErase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.GrobnerConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GrobnerConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toNoopConfig</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\">NoopConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.GrobnerConfig\">GrobnerConfig</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.GrobnerConfig.mk","kind":"ctor","line":208,"name":"Lean.Grind.GrobnerConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.GrobnerConfig.toNoopConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GrobnerConfig</span>.<span class=\"name\">toNoopConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.GrobnerConfig\">GrobnerConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\">NoopConfig</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.GrobnerConfig.toNoopConfig","kind":"def","line":208,"name":"Lean.Grind.GrobnerConfig.toNoopConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L208-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.GrobnerConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">GrobnerConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\">Lean.Grind.NoopConfig</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `grind` configuration that only uses `ring`.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.GrobnerConfig","kind":"structure","line":204,"name":"Lean.Grind.GrobnerConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L204-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.CutsatConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CutsatConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toNoopConfig</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\">NoopConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.CutsatConfig\">CutsatConfig</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.CutsatConfig.mk","kind":"ctor","line":199,"name":"Lean.Grind.CutsatConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.CutsatConfig.toNoopConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CutsatConfig</span>.<span class=\"name\">toNoopConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.CutsatConfig\">CutsatConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\">NoopConfig</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.CutsatConfig.toNoopConfig","kind":"def","line":199,"name":"Lean.Grind.CutsatConfig.toNoopConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L199-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.CutsatConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CutsatConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\">Lean.Grind.NoopConfig</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `grind` configuration that only uses `cutsat` and splitting.\n\nNote: `cutsat` benefits from some amount of instantiation, e.g. `Nat.max_def`.\nWe don't currently have a mechanism to enable only a small set of lemmas.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.CutsatConfig","kind":"structure","line":192,"name":"Lean.Grind.CutsatConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L192-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NoopConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\">NoopConfig</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig.mk","kind":"ctor","line":171,"name":"Lean.Grind.NoopConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig.toConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NoopConfig</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\">NoopConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig.toConfig","kind":"def","line":171,"name":"Lean.Grind.NoopConfig.toConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L171-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">NoopConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Lean.Grind.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A minimal configuration, with ematching and splitting disabled, and all solver modules turned off.\n`grind` will not do anything in this configuration,\nwhich can be used a starting point for minimal configurations.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.NoopConfig","kind":"structure","line":165,"name":"Lean.Grind.NoopConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L165-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.ConfigInteractive.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ConfigInteractive</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.ConfigInteractive\">ConfigInteractive</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.ConfigInteractive.mk","kind":"ctor","line":162,"name":"Lean.Grind.ConfigInteractive.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L162-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.ConfigInteractive.toConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ConfigInteractive</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.ConfigInteractive\">ConfigInteractive</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.ConfigInteractive.toConfig","kind":"def","line":162,"name":"Lean.Grind.ConfigInteractive.toConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L162-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.ConfigInteractive\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ConfigInteractive</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Lean.Grind.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration for interactive mode.\nWe disable `clean := false`.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.ConfigInteractive","kind":"structure","line":158,"name":"Lean.Grind.ConfigInteractive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L158-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.instBEqConfig","kind":"instance","line":156,"name":"Lean.Grind.instBEqConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.instBEqConfig.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instBEqConfig</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a> → <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.instBEqConfig.beq","kind":"def","line":156,"name":"Lean.Grind.instBEqConfig.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.instInhabitedConfig","kind":"instance","line":156,"name":"Lean.Grind.instInhabitedConfig","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.instInhabitedConfig.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedConfig</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.instInhabitedConfig.default","kind":"def","line":156,"name":"Lean.Grind.instInhabitedConfig.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.offset\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">offset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), enables the legacy module `offset`. This module will be deleted in\nthe future.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.offset","kind":"def","line":155,"name":"Lean.Grind.Config.offset","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.order\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">order</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), enables the procedure for handling orders that implement\nat least `Std.IsPreorder`\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.order","kind":"def","line":150,"name":"Lean.Grind.Config.order","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L150-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.inj\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">inj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), enables the procedure for handling injective functions.\nIn this mode, `grind` takes into account theorems such as:\n```\n@[grind inj] theorem double_inj : Function.Injective double\n```\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.inj","kind":"def","line":145,"name":"Lean.Grind.Config.inj","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.abstractProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">abstractProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), automatically creates an auxiliary theorem to store the proof.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.abstractProof","kind":"def","line":137,"name":"Lean.Grind.Config.abstractProof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.exp\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">exp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum exponent eagerly evaluated while computing bounds for `ToInt` and\nthe characteristic of a ring.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.exp","kind":"def","line":133,"name":"Lean.Grind.Config.exp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.acSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">acSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of steps performed by the `ac` solver.\nA step is counted whenever one AC equation is used to simplify another.\nFor example, given `ma x z = w` and `max x (max y z) = x`, the first can be\nused to simplify the second to `max w y = x`.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.acSteps","kind":"def","line":128,"name":"Lean.Grind.Config.acSteps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L128-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.ac\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">ac</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), uses procedure for handling associative (and commutative) operators.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.ac","kind":"def","line":121,"name":"Lean.Grind.Config.ac","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.cutsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">cutsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), uses procedure for handling linear integer arithmetic for `Int` and `Nat`.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.cutsat","kind":"def","line":117,"name":"Lean.Grind.Config.cutsat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.linarith\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">linarith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), uses procedure for handling linear arithmetic for `IntModule`, and\n`CommRing`.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.linarith","kind":"def","line":113,"name":"Lean.Grind.Config.linarith","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.ringSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">ringSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of steps performed by the `ring` solver.\nA step is counted whenever one polynomial is used to simplify another.\nFor example, given `x^2 + 1` and `x^2 * y^3 + x * y`, the first can be\nused to simplify the second to `-1 * y^3 + x * y`.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.ringSteps","kind":"def","line":108,"name":"Lean.Grind.Config.ringSteps","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.ring\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">ring</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), uses procedure for handling equalities over commutative rings.\nThis solver also support commutative semirings, fields, and normalizer non-commutative rings and\nsemirings.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.ring","kind":"def","line":101,"name":"Lean.Grind.Config.ring","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When `true` (default: `true`), performs zeta reduction of let expressions during normalization.\nThat is, `let x := v; e[x]` reduces to `e[v]`. See also `zetaDelta`.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.zeta","kind":"def","line":95,"name":"Lean.Grind.Config.zeta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"When set to `true` (default: `true`), local definitions are unfolded during normalization and internalization.\nIn other words, given a local context with an entry `x : t := e`, the free variable `x` is reduced to `e`.\nNote that this behavior is also available in `simp`, but there its default is `false` because `simp` is not\nalways used as a terminal tactic, and it important to preserve the abstractions introduced by users.\nAdditionally, in `grind` we observed that `zetaDelta` is particularly important when combined with function induction.\nIn such scenarios, the same let-expressions can be introduced by function induction and also by unfolding the\ncorresponding definition. We want to avoid a situation in which `zetaDelta` is not applied to let-declarations\nintroduced by function induction while `zeta` unfolds the definition, causing a mismatch.\nFinally, note that congruence closure is less effective on terms containing many binders such as\n`lambda` and `let` expressions.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.zetaDelta","kind":"def","line":90,"name":"Lean.Grind.Config.zetaDelta","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.mbtc\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">mbtc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `mbtc` is `true`, `grind` will use model-based theory combination for creating new case splits.\nSee paper \"Model-based Theory Combination\" for details.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.mbtc","kind":"def","line":77,"name":"Lean.Grind.Config.mbtc","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.qlia\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">qlia</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `qlia` is `true`, `grind` may generate counterexamples for integer constraints\nusing rational numbers, and ignoring divisibility constraints.\nThis approach is cheaper but incomplete. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.qlia","kind":"def","line":72,"name":"Lean.Grind.Config.qlia","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.clean\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">clean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `clean` is `true`, `grind` uses `expose_names` and only generates accessible names. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.clean","kind":"def","line":67,"name":"Lean.Grind.Config.clean","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.verbose\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">verbose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `verbose` is `false`, additional diagnostics information is not collected. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.verbose","kind":"def","line":65,"name":"Lean.Grind.Config.verbose","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.lookahead\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">lookahead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"TODO ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.lookahead","kind":"def","line":63,"name":"Lean.Grind.Config.lookahead","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.funext\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">funext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `funext` is `true`, `grind` creates new opportunities for applying function extensionality by case-splitting\non equalities between lambda expressions.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.funext","kind":"def","line":61,"name":"Lean.Grind.Config.funext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L61-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `etaStruct` is `true`, then for each term `t : S` such that `S` is a structure,\nand is tagged with `[grind ext]`, `grind` adds the equation `t = ⟨t.1, ..., t.n⟩`\nwhich holds by reflexivity. Moreover, the extensionality theorem for `S` is not used.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.etaStruct","kind":"def","line":56,"name":"Lean.Grind.Config.etaStruct","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.extAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">extAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `extAll` is `true`, `grind` uses any extensionality theorems available in the environment. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.extAll","kind":"def","line":50,"name":"Lean.Grind.Config.extAll","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `ext` is `true`, `grind` uses extensionality theorems that have been marked with `[grind ext]`. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.ext","kind":"def","line":48,"name":"Lean.Grind.Config.ext","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.canonHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">canonHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of heartbeats (in thousands) the canonicalizer can spend per definitional equality test. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.canonHeartbeats","kind":"def","line":46,"name":"Lean.Grind.Config.canonHeartbeats","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.splitImp\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">splitImp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `splitImp` is `true`, then given an implication `p → q` or `(h : p) → q h`, `grind` splits on `p`\nif the implication is true. Otherwise, it will split only if `p` is an arithmetic predicate.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.splitImp","kind":"def","line":44,"name":"Lean.Grind.Config.splitImp","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.splitIndPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">splitIndPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `splitIndPred` is `true`, `grind` performs case-splitting on inductive predicates.\nOtherwise, it performs case-splitting only on types marked with `[grind cases]` attribute. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.splitIndPred","kind":"def","line":39,"name":"Lean.Grind.Config.splitIndPred","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.splitIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">splitIte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `splitIte` is `true`, `grind` performs case-splitting on `if-then-else` expressions during the search. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.splitIte","kind":"def","line":35,"name":"Lean.Grind.Config.splitIte","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.splitMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">splitMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `splitMatch` is `true`, `grind` performs case-splitting on `match`-expressions during the search. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.splitMatch","kind":"def","line":33,"name":"Lean.Grind.Config.splitMatch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.matchEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">matchEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `matchEqs` is `true`, `grind` uses `match`-equations as E-matching theorems. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.matchEqs","kind":"def","line":31,"name":"Lean.Grind.Config.matchEqs","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.instances\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">instances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of theorem instances generated using E-matching in a proof search tree branch. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.instances","kind":"def","line":29,"name":"Lean.Grind.Config.instances","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.gen\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">gen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum term generation.\nThe input goal terms have generation 0. When we instantiate a theorem using a term from generation `n`,\nthe new terms have generation `n+1`. Thus, this parameter limits the length of an instantiation chain. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.gen","kind":"def","line":27,"name":"Lean.Grind.Config.gen","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.ematch\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">ematch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of E-matching (aka heuristic theorem instantiation) rounds before each case split. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.ematch","kind":"def","line":22,"name":"Lean.Grind.Config.ematch","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.splits\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">splits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Maximum number of case-splits in a proof search branch. It does not include splits performed during normalization. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.splits","kind":"def","line":20,"name":"Lean.Grind.Config.splits","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `trace` is `true`, `grind` records used E-matching theorems and case-splits. ","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.trace","kind":"def","line":18,"name":"Lean.Grind.Config.trace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trace</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splits </span><span class=\"fn\">ematch </span><span class=\"fn\">gen </span><span class=\"fn\">instances</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchEqs </span><span class=\"fn\">splitMatch </span><span class=\"fn\">splitIte </span><span class=\"fn\">splitIndPred </span><span class=\"fn\">splitImp</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext </span><span class=\"fn\">extAll </span><span class=\"fn\">etaStruct </span><span class=\"fn\">funext </span><span class=\"fn\">lookahead </span><span class=\"fn\">verbose </span><span class=\"fn\">clean </span><span class=\"fn\">qlia </span><span class=\"fn\">mbtc </span><span class=\"fn\">zetaDelta </span><span class=\"fn\">zeta </span><span class=\"fn\">ring</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ringSteps</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linarith </span><span class=\"fn\">cutsat </span><span class=\"fn\">ac</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acSteps </span><span class=\"fn\">exp</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abstractProof </span><span class=\"fn\">inj </span><span class=\"fn\">order </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config.mk","kind":"ctor","line":16,"name":"Lean.Grind.Config.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Tactics.html#Lean.Grind.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The configuration for `grind`.\nPassed to `grind` using, for example, the `grind (config := { matchEqs := true })` syntax.\n","docLink":"./Init/Grind/Tactics.html#Lean.Grind.Config","kind":"structure","line":12,"name":"Lean.Grind.Config","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Grind/Tactics.lean#L12-L156"}}],"imports":["Init.Core","Init.Grind.Interactive"],"instances":[{"className":"Inhabited","name":"Lean.Grind.instInhabitedConfig","typeNames":["Lean.Grind.Config"]},{"className":"BEq","name":"Lean.Grind.instBEqConfig","typeNames":["Lean.Grind.Config"]}],"name":"Init.Grind.Tactics"}