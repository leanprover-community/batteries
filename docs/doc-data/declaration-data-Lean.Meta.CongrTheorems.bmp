{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpForConst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimpForConst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>","info":{"doc":"Similar to `mkCongrSimp?`, but uses reserved names to ensure we don't keep creating the\nsame congruence theorem over and over again.\n","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpForConst?","kind":"def","line":467,"name":"Lean.Meta.mkCongrSimpForConst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L467-L483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArityForConst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongrWithArityForConst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>","info":{"doc":"Similar to `mkHCongrWithArity`, but uses reserved names to ensure we don't keep creating the\nsame congruence theorem over and over again.\n","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArityForConst?","kind":"def","line":449,"name":"Lean.Meta.mkHCongrWithArityForConst?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L449-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.congrKindsExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">congrKindsExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.congrKindsExt","kind":"opaque","line":404,"name":"Lean.Meta.congrKindsExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L404-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.congrSimpSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">congrSimpSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.congrSimpSuffix","kind":"def","line":400,"name":"Lean.Meta.congrSimpSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L400-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.isHCongrReservedNameSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isHCongrReservedNameSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `s` is of the form `hcongr_<idx>` ","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.isHCongrReservedNameSuffix","kind":"def","line":396,"name":"Lean.Meta.isHCongrReservedNameSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L396-L398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.hcongrThmSuffixBasePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">hcongrThmSuffixBasePrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.hcongrThmSuffixBasePrefix","kind":"def","line":394,"name":"Lean.Meta.hcongrThmSuffixBasePrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L394-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.hcongrThmSuffixBase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">hcongrThmSuffixBase</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.hcongrThmSuffixBase","kind":"def","line":393,"name":"Lean.Meta.hcongrThmSuffixBase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L393-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subsingletonInstImplicitRhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxArgs?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>","info":{"doc":"Create a congruence theorem for `f`. The theorem is used in the simplifier.\n\nIf `subsingletonInstImplicitRhs = true`, the `rhs` corresponding to `[Decidable p]` parameters\nis marked as instance implicit. It forces the simplifier to compute the new instance when applying\nthe congruence theorem.\nFor the `congr` tactic we set it to `false`.\n","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimp?","kind":"def","line":380,"name":"Lean.Meta.mkCongrSimp?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L380-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimpCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.FunInfo\">FunInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subsingletonInstImplicitRhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>","info":{"doc":"Creates a congruence theorem that is useful for the simplifier and `congr` tactic.\n","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?","kind":"def","line":294,"name":"Lean.Meta.mkCongrSimpCore?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L294-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.getCongrSimpKindsForArgZero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getCongrSimpKindsForArgZero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.FunInfo\">FunInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a>)</span></span></div></div>","info":{"doc":"Variant of `getCongrSimpKinds` for rewriting just argument 0.\nIf it is possible to rewrite, the 0th `CongrArgKind` is `.eq`,\nand otherwise it is `.fixed`. This is used for the `arg` conv tactic.\n","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.getCongrSimpKindsForArgZero","kind":"def","line":216,"name":"Lean.Meta.getCongrSimpKindsForArgZero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L216-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.getCongrSimpKinds\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getCongrSimpKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.FunInfo\">FunInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a>)</span></span></div></div>","info":{"doc":"Computes `CongrArgKind`s for a simp congruence theorem. ","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.getCongrSimpKinds","kind":"def","line":178,"name":"Lean.Meta.getCongrSimpKinds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L178-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongr","kind":"def","line":121,"name":"Lean.Meta.mkHCongr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L121-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongrWithArity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity","kind":"def","line":61,"name":"Lean.Meta.mkHCongrWithArity","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L61-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.argKinds\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span>.<span class=\"name\">argKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.argKinds","kind":"def","line":45,"name":"Lean.Meta.CongrTheorem.argKinds","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.proof","kind":"def","line":44,"name":"Lean.Meta.CongrTheorem.proof","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.type","kind":"def","line":43,"name":"Lean.Meta.CongrTheorem.type","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argKinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.mk","kind":"ctor","line":42,"name":"Lean.Meta.CongrTheorem.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem","kind":"structure","line":42,"name":"Lean.Meta.CongrTheorem","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L42-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instBEqCongrArgKind.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqCongrArgKind</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a> → <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instBEqCongrArgKind.beq","kind":"def","line":40,"name":"Lean.Meta.instBEqCongrArgKind.beq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instBEqCongrArgKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqCongrArgKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instBEqCongrArgKind","kind":"instance","line":40,"name":"Lean.Meta.instBEqCongrArgKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instReprCongrArgKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprCongrArgKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instReprCongrArgKind","kind":"instance","line":40,"name":"Lean.Meta.instReprCongrArgKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instReprCongrArgKind.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprCongrArgKind</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instReprCongrArgKind.repr","kind":"def","line":40,"name":"Lean.Meta.instReprCongrArgKind.repr","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instInhabitedCongrArgKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedCongrArgKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instInhabitedCongrArgKind.default","kind":"def","line":40,"name":"Lean.Meta.instInhabitedCongrArgKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instInhabitedCongrArgKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedCongrArgKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instInhabitedCongrArgKind","kind":"instance","line":40,"name":"Lean.Meta.instInhabitedCongrArgKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.subsingletonInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">subsingletonInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>","info":{"doc":"For congr-simp theorems only.  Indicates a decidable instance argument.\nThe lemma contains two arguments [a_i : Decidable ...] [b_i : Decidable ...] ","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.subsingletonInst","kind":"ctor","line":36,"name":"Lean.Meta.CongrArgKind.subsingletonInst","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L36-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.heq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">heq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>","info":{"doc":"The lemma contains three parameters for this kind of argument `a_i`, `b_i` and `eq_i : a_i ≍ b_i`.\n`a_i` and `b_i` represent the left and right hand sides, and `eq_i` is a proof for their heterogeneous equality. ","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.heq","kind":"ctor","line":32,"name":"Lean.Meta.CongrArgKind.heq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L32-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.cast\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">cast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>","info":{"doc":"The congr-simp theorems contains only one parameter for this kind of argument, and congr theorems contains two.\nThey correspond to arguments that are subsingletons/propositions. ","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.cast","kind":"ctor","line":28,"name":"Lean.Meta.CongrArgKind.cast","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L28-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>","info":{"doc":"The lemma contains three parameters for this kind of argument `a_i`, `b_i` and `eq_i : a_i = b_i`.\n`a_i` and `b_i` represent the left and right hand sides, and `eq_i` is a proof for their equality. ","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.eq","kind":"ctor","line":24,"name":"Lean.Meta.CongrArgKind.eq","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L24-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.fixedNoParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">fixedNoParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>","info":{"doc":"It is not a parameter for the congruence theorem, the theorem was specialized for this parameter.\nThis only happens if the parameter is a subsingleton/proposition, and other parameters depend on it. ","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.fixedNoParam","kind":"ctor","line":20,"name":"Lean.Meta.CongrArgKind.fixedNoParam","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L20-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.fixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">fixed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>","info":{"doc":"It is a parameter for the congruence theorem, the parameter occurs in the left and right hand sides. ","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.fixed","kind":"ctor","line":18,"name":"Lean.Meta.CongrArgKind.fixed","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L18-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind","kind":"inductive","line":17,"name":"Lean.Meta.CongrArgKind","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/CongrTheorems.lean#L17-L40"}}],"imports":["Lean.AddDecl","Lean.ReservedNameAction","Lean.Meta.Tactic.Subst"],"instances":[{"className":"Inhabited","name":"Lean.Meta.instInhabitedCongrArgKind","typeNames":["Lean.Meta.CongrArgKind"]},{"className":"Repr","name":"Lean.Meta.instReprCongrArgKind","typeNames":["Lean.Meta.CongrArgKind"]},{"className":"BEq","name":"Lean.Meta.instBEqCongrArgKind","typeNames":["Lean.Meta.CongrArgKind"]}],"name":"Lean.Meta.CongrTheorems"}