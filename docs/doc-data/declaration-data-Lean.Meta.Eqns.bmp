{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.getUnfoldEqnFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getUnfoldEqnFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nonRec</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Returns an \"unfold\" theorem (`f.eq_def`) for the given declaration.\nBy default, we do not create unfold theorems for nonrecursive definitions.\nYou can use `nonRec := true` to override this behavior.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.getUnfoldEqnFor?","kind":"def","line":293,"name":"Lean.Meta.getUnfoldEqnFor?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L293-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.registerGetUnfoldEqnFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">registerGetUnfoldEqnFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.GetUnfoldEqnFn\">GetUnfoldEqnFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Registers a new function for retrieving a \"unfold\" equation theorem.\n\nWe generate this kind of equation theorem on demand, and it is generated by more than one module.\nFor example, the structural and well-founded recursion modules generate it.\nMost recent getters are tried first.\n\nA getter returns an `Option Name`. The result is `none` if the getter failed.\nOtherwise, it is a theorem name. Example: the definition\n\n```\ndef f (xs : List Nat) : List Nat :=\n  match xs with\n  | [] => []\n  | x::xs => (x+1)::f xs\n```\nshould have the theorem\n```\n(xs : Nat) â†’\n  f xs =\n    match xs with\n    | [] => []\n    | x::xs => (x+1)::f xs\n```\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.registerGetUnfoldEqnFn","kind":"def","line":263,"name":"Lean.Meta.registerGetUnfoldEqnFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L263-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.GetUnfoldEqnFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GetUnfoldEqnFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.GetUnfoldEqnFn","kind":"def","line":259,"name":"Lean.Meta.GetUnfoldEqnFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L259-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.generateEagerEqns\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">generateEagerEqns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If any equation theorem affecting option is not the default value, create the equations now.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.generateEagerEqns","kind":"def","line":250,"name":"Lean.Meta.generateEagerEqns","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L250-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.getEqnsFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getEqnsFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span>)</span></span></div></div>","info":{"doc":"Returns equation theorems for the given declaration.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.getEqnsFor?","kind":"def","line":241,"name":"Lean.Meta.getEqnsFor?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L241-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.isEqnThm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isEqnThm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thmName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `thmName` is an equational theorem.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.isEqnThm","kind":"def","line":197,"name":"Lean.Meta.isEqnThm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L197-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.isEqnThm?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isEqnThm?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thmName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Returns `some declName` if `thmName` is an equational theorem for `declName`.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.isEqnThm?","kind":"def","line":191,"name":"Lean.Meta.isEqnThm?","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L191-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.mkSimpleEqThm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkSimpleEqThm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Simple equation theorem for nonrecursive definitions.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.mkSimpleEqThm","kind":"def","line":169,"name":"Lean.Meta.mkSimpleEqThm","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L169-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.eqnsExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">eqnsExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">EqnsExtState</a></span></div></div>","info":{"doc":"A mapping from equational theorem to the declaration it was derived from.  ","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.eqnsExt","kind":"opaque","line":165,"name":"Lean.Meta.eqnsExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L165-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.instInhabitedEqnsExtState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedEqnsExtState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">EqnsExtState</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.instInhabitedEqnsExtState.default","kind":"def","line":163,"name":"Lean.Meta.instInhabitedEqnsExtState.default","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L163-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.instInhabitedEqnsExtState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedEqnsExtState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">EqnsExtState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.instInhabitedEqnsExtState","kind":"instance","line":163,"name":"Lean.Meta.instInhabitedEqnsExtState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L163-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState.mapInv\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EqnsExtState</span>.<span class=\"name\">mapInv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">EqnsExtState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState.mapInv","kind":"def","line":162,"name":"Lean.Meta.EqnsExtState.mapInv","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L162-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EqnsExtState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapInv</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\">EqnsExtState</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState.mk","kind":"ctor","line":161,"name":"Lean.Meta.EqnsExtState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EqnsExtState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A mapping from equational theorem to the declaration it was derived from.  ","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState","kind":"structure","line":160,"name":"Lean.Meta.EqnsExtState","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L160-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.registerGetEqnsFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">registerGetEqnsFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Meta/Eqns.html#Lean.Meta.GetEqnsFn\">GetEqnsFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Registers a new function for retrieving equation theorems.\nWe generate equations theorems on demand, and they are generated by more than one module.\nFor example, the structural and well-founded recursion modules generate them.\nMost recent getters are tried first.\n\nA getter returns an `Option (Array Name)`. The result is `none` if the getter failed.\nOtherwise, it is a sequence of theorem names where each one of them corresponds to\nan alternative. Example: the definition\n\n```\ndef f (xs : List Nat) : List Nat :=\n  match xs with\n  | [] => []\n  | x::xs => (x+1)::f xs\n```\nshould have two equational theorems associated with it\n```\nf [] = []\n```\nand\n```\n(x : Nat) â†’ (xs : List Nat) â†’ f (x :: xs) = (x+1) :: f xs\n```\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.registerGetEqnsFn","kind":"def","line":123,"name":"Lean.Meta.registerGetEqnsFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L123-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.GetEqnsFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GetEqnsFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.GetEqnsFn","kind":"def","line":119,"name":"Lean.Meta.GetEqnsFn","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L119-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.ensureEqnReservedNamesAvailable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ensureEqnReservedNamesAvailable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Throw an error if names for equation theorems for `declName` are not available.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.ensureEqnReservedNamesAvailable","kind":"def","line":97,"name":"Lean.Meta.ensureEqnReservedNamesAvailable","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L97-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.mkEqLikeNameFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkEqLikeNameFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.mkEqLikeNameFor","kind":"def","line":91,"name":"Lean.Meta.mkEqLikeNameFor","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L91-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.declFromEqLikeName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">declFromEqLikeName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></div></div>","info":{"doc":"The equational theorem for a definition can be private even if the definition itself is not.\nSo un-private the name here when looking for a declaration\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.declFromEqLikeName","kind":"def","line":78,"name":"Lean.Meta.declFromEqLikeName","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L78-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.isEqnLikeSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isEqnLikeSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.isEqnLikeSuffix","kind":"def","line":75,"name":"Lean.Meta.isEqnLikeSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.eqUnfoldThmSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">eqUnfoldThmSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.eqUnfoldThmSuffix","kind":"def","line":73,"name":"Lean.Meta.eqUnfoldThmSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.unfoldThmSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">unfoldThmSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.unfoldThmSuffix","kind":"def","line":72,"name":"Lean.Meta.unfoldThmSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.isEqnReservedNameSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isEqnReservedNameSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `s` is of the form `eq_<idx>` ","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.isEqnReservedNameSuffix","kind":"def","line":68,"name":"Lean.Meta.isEqnReservedNameSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L68-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.eqn1ThmSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">eqn1ThmSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.eqn1ThmSuffix","kind":"def","line":65,"name":"Lean.Meta.eqn1ThmSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.eqnThmSuffixBasePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">eqnThmSuffixBasePrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.eqnThmSuffixBasePrefix","kind":"def","line":64,"name":"Lean.Meta.eqnThmSuffixBasePrefix","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.eqnThmSuffixBase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">eqnThmSuffixBase</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.eqnThmSuffixBase","kind":"def","line":63,"name":"Lean.Meta.eqnThmSuffixBase","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.isRecursiveDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isRecursiveDefinition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `declName` was defined using well-founded recursion, or structural recursion.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.isRecursiveDefinition","kind":"def","line":57,"name":"Lean.Meta.isRecursiveDefinition","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L57-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.markAsRecursive\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">markAsRecursive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Marks the given declaration as recursive.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.markAsRecursive","kind":"def","line":51,"name":"Lean.Meta.markAsRecursive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L51-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.recExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">recExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension\">TagDeclarationExtension</a></div></div>","info":{"doc":"Environment extension for storing which declarations are recursive.\nThis information is populated by the `PreDefinition` module, but the simplifier\nuses when unfolding declarations.\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.recExt","kind":"opaque","line":43,"name":"Lean.Meta.recExt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L43-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.eqnAffectingOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">eqnAffectingOptions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>","info":{"doc":"These options affect the generation of equational theorems in a significant way. For these, their\nvalue at definition time, not realization time, should matter.\n\nThis is implemented by\n * eagerly realizing the equations when they are set to a non-default value\n * when realizing them lazily, reset the options to their default\n","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.eqnAffectingOptions","kind":"def","line":33,"name":"Lean.Meta.eqnAffectingOptions","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L33-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.backward.eqns.deepRecursiveSplit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">backward</span>.<span class=\"name\">eqns</span>.<span class=\"name\">deepRecursiveSplit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.backward.eqns.deepRecursiveSplit","kind":"opaque","line":23,"name":"Lean.Meta.backward.eqns.deepRecursiveSplit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L23-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Eqns.html#Lean.Meta.backward.eqns.nonrecursive\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">backward</span>.<span class=\"name\">eqns</span>.<span class=\"name\">nonrecursive</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.backward.eqns.nonrecursive","kind":"opaque","line":18,"name":"Lean.Meta.backward.eqns.nonrecursive","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Lean/Meta/Eqns.lean#L18-L21"}}],"imports":["Lean.Meta.Match.MatcherInfo","Lean.DefEqAttrib","Lean.Meta.LetToHave","Lean.Meta.AppBuilder"],"instances":[{"className":"Inhabited","name":"Lean.Meta.instInhabitedEqnsExtState","typeNames":["Lean.Meta.EqnsExtState"]}],"name":"Lean.Meta.Eqns"}