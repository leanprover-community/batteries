{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toUpper\"><span class=\"name\">Char</span>.<span class=\"name\">toUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Converts a lowercase ASCII letter to the corresponding uppercase letter. Letters outside the ASCII\nalphabet are returned unchanged.\n\nThe lowercase ASCII letters are the following: `abcdefghijklmnopqrstuvwxyz`.\n","docLink":"./Init/Data/Char/Basic.html#Char.toUpper","kind":"def","line":150,"name":"Char.toUpper","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L150-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toLower\"><span class=\"name\">Char</span>.<span class=\"name\">toLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Converts an uppercase ASCII letter to the corresponding lowercase letter. Letters outside the ASCII\nalphabet are returned unchanged.\n\nThe uppercase ASCII letters are the following: `ABCDEFGHIJKLMNOPQRSTUVWXYZ`.\n","docLink":"./Init/Data/Char/Basic.html#Char.toLower","kind":"def","line":140,"name":"Char.toLower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L140-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isAlphanum\"><span class=\"name\">Char</span>.<span class=\"name\">isAlphanum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the character is an ASCII letter or digit.\n\nThe ASCII letters are the following: `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`.\nThe ASCII digits are the following: `0123456789`.\n","docLink":"./Init/Data/Char/Basic.html#Char.isAlphanum","kind":"def","line":131,"name":"Char.isAlphanum","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L131-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isDigit\"><span class=\"name\">Char</span>.<span class=\"name\">isDigit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the character is an ASCII digit.\n\nThe ASCII digits are the following: `0123456789`.\n","docLink":"./Init/Data/Char/Basic.html#Char.isDigit","kind":"def","line":123,"name":"Char.isDigit","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L123-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isAlpha\"><span class=\"name\">Char</span>.<span class=\"name\">isAlpha</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the character is an ASCII letter.\n\nThe ASCII letters are the following: `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`.\n","docLink":"./Init/Data/Char/Basic.html#Char.isAlpha","kind":"def","line":115,"name":"Char.isAlpha","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L115-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isLower\"><span class=\"name\">Char</span>.<span class=\"name\">isLower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the character is a lowercase ASCII letter.\n\nThe lowercase ASCII letters are the following: `abcdefghijklmnopqrstuvwxyz`.\n","docLink":"./Init/Data/Char/Basic.html#Char.isLower","kind":"def","line":107,"name":"Char.isLower","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L107-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isUpper\"><span class=\"name\">Char</span>.<span class=\"name\">isUpper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the character is a uppercase ASCII letter.\n\nThe uppercase ASCII letters are the following: `ABCDEFGHIJKLMNOPQRSTUVWXYZ`.\n","docLink":"./Init/Data/Char/Basic.html#Char.isUpper","kind":"def","line":99,"name":"Char.isUpper","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L99-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isWhitespace\"><span class=\"name\">Char</span>.<span class=\"name\">isWhitespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the character is a space `(' ', U+0020)`, a tab `('\\t', U+0009)`, a carriage\nreturn `('\\r', U+000D)`, or a newline `('\\n', U+000A)`.\n","docLink":"./Init/Data/Char/Basic.html#Char.isWhitespace","kind":"def","line":92,"name":"Char.isWhitespace","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L92-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instInhabited\"><span class=\"name\">Char</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Char/Basic.html#Char.instInhabited","kind":"instance","line":89,"name":"Char.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L89-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.ofUInt8\"><span class=\"name\">Char</span>.<span class=\"name\">ofUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Converts an 8-bit unsigned integer into a character.\n\nThe integer's value is interpreted as a Unicode code point.\n","docLink":"./Init/Data/Char/Basic.html#Char.ofUInt8","kind":"def","line":82,"name":"Char.ofUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L82-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toUInt8\"><span class=\"name\">Char</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts a character into a `UInt8` that contains its code point.\n\nIf the code point is larger than 255, it is truncated (reduced modulo 256).\n","docLink":"./Init/Data/Char/Basic.html#Char.toUInt8","kind":"def","line":74,"name":"Char.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L74-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.toNat\"><span class=\"name\">Char</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The character's Unicode code point as a `Nat`.\n","docLink":"./Init/Data/Char/Basic.html#Char.toNat","kind":"def","line":68,"name":"Char.toNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L68-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidChar_zero\"><span class=\"name\">Char</span>.<span class=\"name\">isValidChar_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#isValidChar\">isValidChar</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Char/Basic.html#Char.isValidChar_zero","kind":"theorem","line":65,"name":"Char.isValidChar_zero","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidChar_of_isValidCharNat\"><span class=\"name\">Char</span>.<span class=\"name\">isValidChar_of_isValidCharNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\">isValidCharNat</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#isValidChar\">isValidChar</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#UInt32.ofNatLT\">UInt32.ofNatLT</a> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Char/Basic.html#Char.isValidChar_of_isValidCharNat","kind":"theorem","line":58,"name":"Char.isValidChar_of_isValidCharNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L58-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidUInt32\"><span class=\"name\">Char</span>.<span class=\"name\">isValidUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\">isValidCharNat</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">UInt32.size</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Char/Basic.html#Char.isValidUInt32","kind":"theorem","line":49,"name":"Char.isValidUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L49-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.isValidCharNat\"><span class=\"name\">Char</span>.<span class=\"name\">isValidCharNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"True for natural numbers that are valid [Unicode scalar\nvalues](https://www.unicode.org/glossary/#unicode_scalar_value).\n","docLink":"./Init/Data/Char/Basic.html#Char.isValidCharNat","kind":"def","line":42,"name":"Char.isValidCharNat","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L42-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instDecidableLe\"><span class=\"name\">Char</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Char/Basic.html#Char.instDecidableLe","kind":"instance","line":39,"name":"Char.instDecidableLe","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L39-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instDecidableLt\"><span class=\"name\">Char</span>.<span class=\"name\">instDecidableLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Char/Basic.html#Char.instDecidableLt","kind":"instance","line":36,"name":"Char.instDecidableLt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instLE\"><span class=\"name\">Char</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Char/Basic.html#Char.instLE","kind":"instance","line":34,"name":"Char.instLE","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.instLT\"><span class=\"name\">Char</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Char/Basic.html#Char.instLT","kind":"instance","line":33,"name":"Char.instLT","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.le\"><span class=\"name\">Char</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"One character is less than or equal to another if its code point is less than or equal to the\nother's.\n","docLink":"./Init/Data/Char/Basic.html#Char.le","kind":"def","line":27,"name":"Char.le","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L27-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#Char.lt\"><span class=\"name\">Char</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"One character is less than another if its code point is strictly less than the other's.\n","docLink":"./Init/Data/Char/Basic.html#Char.lt","kind":"def","line":22,"name":"Char.lt","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L22-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Char/Basic.html#isValidChar\"><span class=\"name\">isValidChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Determines if the given integer is a valid [Unicode scalar value](https://www.unicode.org/glossary/#unicode_scalar_value).\n\nNote that values in `[0xd800, 0xdfff]` are reserved for [UTF-16 surrogate pairs](https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates).\n","docLink":"./Init/Data/Char/Basic.html#isValidChar","kind":"def","line":13,"name":"isValidChar","sourceLink":"https://github.com/leanprover/lean4/blob/744f98064b056ee27fc8c97f524797c8cc96f436/src/Init/Data/Char/Basic.lean#L13-L18"}}],"imports":["Init.Data.UInt.BasicAux"],"instances":[{"className":"LT","name":"Char.instLT","typeNames":["Char"]},{"className":"LE","name":"Char.instLE","typeNames":["Char"]},{"className":"Decidable","name":"Char.instDecidableLt","typeNames":["LT.lt"]},{"className":"Decidable","name":"Char.instDecidableLe","typeNames":["LE.le"]},{"className":"Inhabited","name":"Char.instInhabited","typeNames":["Char"]}],"name":"Init.Data.Char.Basic"}